[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = set(test_tup1) & set(test_tup2)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_list.append(elem)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n\n    shared = set(test_tup1) & set(test_tup2)\n\n    return list(shared)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1 & set2\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            common_elements.append(elem)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Unpacking the tuples\n    tup1 = test_tup1\n    tup2 = test_tup2\n\n    # Finding the common elements in the two tuples\n    common_elements = [x for x in tup1 if x in tup2]\n\n    # Returning the common elements\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Sort the first tuple in ascending order\n    test_tup1.sort()\n    # Sort the second tuple in ascending order\n    test_tup2.sort()\n    # Initialize an empty set to store the shared elements\n    shared_set = set()\n    # Iterate over the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the current element is present in the second tuple\n        if test_tup1[i] in test_tup2:\n            # If it is, add it to the shared set\n            shared_set.add(test_tup1[i])\n    # Return the shared set\n    return shared_set"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # create a set of the first tuple to remove duplicates\n    set1 = set(test_tup1)\n\n    # create a set of the second tuple to remove duplicates\n    set2 = set(test_tup2)\n\n    # find the common elements between the two sets using the intersection method\n    common_elements = set1.intersection(set2)\n\n    # return the common elements as a list\n    return list(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_not_prime(n):\n    '''\n    This function checks whether a given number is not a prime number or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function checks if a given number is not prime or not.\n\n    Parameters:\n    n (int): A positive integer\n\n    Returns:\n    bool: True if the number is not prime, else False.\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n\n    # Check if the number is equal to 2 or 3\n    if n == 2 or n == 3:\n        return False\n\n    # Check if the number is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n\n    # Check if the number is divisible by any odd number less than the square root of the number\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return True\n\n    # If the number is not divisible by any odd number less than the square root of the number, it is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if it is a non-prime number, otherwise False.\n    A non-prime number is defined as a number greater than 1 that has no positive integer divisor other than 1 and itself.\n    '''\n    if n == 2:\n        return False\n    elif n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n))+1, 6):\n            if n % i == 0 or n % (i+2) == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function checks if a given number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function identifies non-prime numbers using the Sieve of Eratosthenes algorithm.\n    '''\n\n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while p*p <= n:\n        # If prime[p] is not changed, then it is a prime\n        if prime[p]:\n            # Update all multiples of p\n            for i in range(p*p, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # Return the non-prime numbers\n    return [i for i in range(2, n+1) if prime[i]]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-x for x in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max-heap of size n\n    max_heap = []\n    for num in nums[:n]:\n        hq.heappush(max_heap, num)\n\n    # add the remaining elements to the max-heap\n    for num in nums[n:]:\n        hq.heappushpop(max_heap, num)\n\n    # return the largest n elements in the max-heap\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # create a max heap from the list of numbers\n    max_heap = nums\n    hq.heapify(max_heap)\n\n    # extract the n largest numbers and return them in a list\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(max_heap))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of the first n elements\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    # Iterate over the remaining elements of the list\n    for num in nums[n:]:\n        # Remove the smallest element from the heap and add the new number\n        hq.heappop(heap)\n        hq.heappush(heap, num)\n\n    # Return the n largest elements in descending order\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return [-num for num in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the input list to a max heap\n    hq.heapify(nums)\n\n    # Remove the largest elements and store them in a new list\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))\n\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a max heap\n    heap = nums[:n]\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heapify(heap)\n            heapq.heappushpop(heap, nums[i])\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap using the heapq module\n    max_heap = hq.nsmallest(n,nums)\n    # Return the max heap\n    return max_heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Check if the number is a power of 2 or not\n    if x == 0:\n        return True\n    else:\n        while (x & 1) == 0:\n            x >>= 1\n        if x == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x & (x-1) == 0:\n        x &= (x-1)\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Initialize a variable to store the count of differing bits\n    count = 0\n    # Loop through all bits in the binary representation of x\n    for i in range(32):\n        # Extract the i-th bit from x and convert it to a binary string\n        bit = '{:032b}'.format(x)[i]\n        # If the bit is '1', increment the count of differing bits\n        if bit == '1':\n            count += 1\n    # Check if there is only one differing bit\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert x to binary string\n    bin_str = bin(x)[2:]\n    # Count the number of different bits\n    count = 0\n    for i in range(len(bin_str)):\n        if bin_str[i]!= bin_str[i+1]:\n            count += 1\n    # Check if the number of different bits is 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # converting the number to binary\n    binary = bin(x)[2:]\n    \n    # splitting the binary number into two parts\n    part1 = binary[:binary.index('1')]\n    part2 = binary[binary.index('1')+1:]\n    \n    # checking if the two parts differ only at one bit position\n    if len(part1) == len(part2) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    \n    if x == 1:\n        return True\n    \n    while x > 0:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    \n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n\n    Args:\n        x (int): a positive integer.\n\n    Returns:\n        bool: True if the two numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    while x!= 1:\n        if x & 1 == 0:\n            x >>= 1\n        else:\n            x = (x >> 1) | 0x80000000\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(n):\n    # check if n is power of 2\n    if n == 0:\n        return True\n    elif n & (n - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return False\n    if x & (x-1) == 0:\n        return True\n    return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words that are at least 4 characters long.\n    '''\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() function to find all words that match the pattern in the input text\n    matches = re.findall(pattern, text)\n    # Return the list of matched words\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into individual words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    # Return the list of words with at least 4 characters long\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    # Replace all non-alphanumeric characters with spaces\n    text = re.sub(r'[^\\w\\s]','', text)\n    # Split the text into words\n    words = text.split()\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b'\n    words = re.findall(pattern, text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text) # find all words in the text\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n\n    Parameters:\n    text (str): a string containing words\n\n    Returns:\n    list: a list of words which are at least 4 characters long in the input string\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num*num)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n\n    Parameters:\n    nums (list): A list of integers\n\n    Returns:\n    list: A list of squares of the elements in the original list.\n    \"\"\"\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # Step 1\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Step 2\n    def get_sorted_dict(d):\n        sorted_dict = {}\n        for key, value in sorted(d.items(), key=lambda x: x[1], reverse=True):\n            sorted_dict[key] = value\n        return sorted_dict\n\n    # Step 3\n    sorted_char_count = get_sorted_dict(char_count)\n\n    # Step 4\n    def get_new_dict(sorted_dict):\n        new_dict = {}\n        for key, value in sorted_dict.items():\n            if value in new_dict:\n                new_dict[value] += 1\n            else:\n                new_dict[value] = 1\n        return new_dict\n\n    # Step 5\n    new_char_count = get_new_dict(sorted_char_count)\n\n    # Step 6\n    def find_min_count(dict1, dict2):\n        min_count = {}\n        for key, value in dict1.items():\n            if value in dict2:\n                min_count[key] = dict2[value]\n            else:\n                min_count[key] = dict1[value]\n        return min_count\n\n    # Step 7\n    min_count = find_min_count(char_count, new_char_count)\n\n    # Step 8\n    def get_min_chars(min_count):\n        min_chars = \"\"\n        for key, value in min_count.items():\n            min_chars += key * value\n        return min_chars\n\n    # Step 9\n    min_chars = get_min_chars(min_count)\n\n    # Step 10\n    def calculate_rotations(str1, str2):\n        count1 = count2 = 0\n        for char in str1:\n            if char in str2:\n                count1 += str2[char]\n            else:\n                count1 += 1\n        for char in str2:\n            if char in str1:\n                count2 += str1[char]\n            else:\n                count2 += 1\n        return count1, count2\n\n    # Step 11\n    count1, count2 = calculate_rotations(str, min_chars)\n\n    # Step 12\n    rotations = count1 +"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for c in str:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n\n    # Find the smallest character in the string\n    min_char = min(char_freq, key=char_freq.get)\n\n    # Count the number of rotations required to get the same string\n    rotations = 0\n    for i in range(1, len(str) + 1):\n        if min_char in str[:i]:\n            rotations += i - str[:i].index(min_char)\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    # Initialize the minimum rotations to 0\n    minRotations = 0\n    # Initialize the string to be rotated\n    stringToRotate = str\n    # Loop through all the characters in the string\n    for i in range(len(stringToRotate)-1):\n        # Swap the first and last characters\n        stringToRotate = stringToRotate[i:]+stringToRotate[:i]\n        # Check if the rotated string is equal to the original string\n        if stringToRotate == str:\n            # If it is, increment the minimum rotations by 1\n            minRotations += 1\n    # Return the minimum rotations\n    return minRotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Sort the string in descending order\n    str = sorted(str, reverse=True)\n    # Create a list of tuples containing the length of the string and the string itself\n    strings = [(len(str), str)]\n    # While there are still strings in the list, rotate them\n    while strings:\n        # Get the length and string of the current string\n        length, current = strings.pop()\n        # Check if the length is the same as the length of the string\n        if length == len(str):\n            # If so, return 0\n            return 0\n        # For each possible rotation, check if the rotated string is equal to the original string\n        for i in range(1, length + 1):\n            if current[-i:] == str:\n                # If it is, add the rotation to the list of strings\n                strings.append((length - i, current[:length - i] + current[length - i:]))\n                # Return the minimum number of rotations\n                return 1 + find_Rotations(current[:length - i] + current[length - i:])\n    # If there are no strings in the list, return None\n    return None"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # create a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n\n    # sort the dictionary by frequency and return the number of keys (rotations)\n    return len(freq)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    # Initialize a counter variable\n    count = 0\n\n    # Iterate through all possible rotations of the string\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            # Check if the two substrings are equal\n            if str[i:j+1] == str[j:i+1][::-1]:\n                count += 1\n\n    # Return the minimum number of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            return i+1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    dp = [[n]*n for _ in range(n)]\n    min_rotations = n*n\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = min(dp[i][j], dp[i+1][j-1] + 1)\n            if str[i] == str[j] and i > j:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + 1)\n            if str[i] == str[j] and i < j:\n                dp[i][j] = min(dp[i][j], dp[i+1][j] + 1)\n            min_rotations = min(min_rotations, dp[i][j])\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # create a set of characters to check for rotation \n    char_set = set(str)\n\n    # loop through all characters in the string to check for rotation \n    for i in range(len(str)):\n        # check if the current character is in the set of characters to check for rotation \n        if str[i] in char_set:\n            # remove the current character from the set of characters to check for rotation \n            char_set.remove(str[i])\n            # check if the string is a palindrome \n            is_palindrome = str == str[::-1]\n            # if the string is a palindrome, return 0 as there is no rotation required \n            if is_palindrome:\n                return 0\n            # if the string is not a palindrome, check if there is a smaller substring that can be rotated to get the same string \n            for j in range(i+1, len(str)):\n                # check if the smaller substring can be rotated to get the same string \n                is_rotated = str[i:j+1] == str[j:i+1][::-1]\n                # if the smaller substring can be rotated to get the same string, return 1 as there is 1 rotation required \n                if is_rotated:\n                    return 1\n            # if no smaller substring can be rotated to get the same string, remove the current character from the set of characters to check for rotation \n            char_set.add(str[i])\n            # if the string is not a palindrome and no smaller substring can be rotated to get the same string, return 2 as there is 2 rotation required \n            return 2"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    This function finds the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(1, n):\n        if str[i]!= str[0]:\n            return i\n    return 0"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Convert string to list of characters\n    s = list(s)\n\n    # Find the index of first occurrence of the character\n    idx = s.index(ch)\n\n    # Remove first occurrence of the character\n    s.pop(idx)\n\n    # Find the index of last occurrence of the character\n    idx = s.rindex(ch)\n\n    # Remove last occurrence of the character\n    s.pop(idx)\n\n    # Convert list of characters back to string\n    s = ''.join(s)\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    s = s.strip()\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes in a string and a character as input and removes the first and last occurrence of the character from the string.\n    \"\"\"\n    # Split the string into a list of characters\n    s_list = list(s)\n\n    # Remove the first occurrence of the character\n    if s_list[0] == ch:\n        s_list.pop(0)\n\n    # Remove the last occurrence of the character\n    if s_list[-1] == ch:\n        s_list.pop()\n\n    # Join the characters back into a string\n    s = ''.join(s_list)\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes in a string and a character as input and returns the modified string\n    after removing the first and last occurrence of the given character.\n    \"\"\"\n    s = s.strip()  # Remove any leading or trailing whitespaces from the string\n    s = s.replace(ch, \"\")  # Remove all occurrences of the given character in the string\n    s = s.strip()  # Remove any leading or trailing whitespaces from the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes first and last occurrence of a given character from the string.\n    \"\"\"\n    s = list(s)  # convert string to list\n    s = s[1:-1]  # remove first and last elements\n    s = ''.join(s)  # convert list to string\n    s = s.replace(ch, '', 1)  # remove only first occurrence\n    s = s.replace(ch, '', 1)  # remove only last occurrence\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,\"\")\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove the first occurrence of the character\n    if s.startswith(ch):\n        s = s[1:]\n    # remove the last occurrence of the character\n    if s.endswith(ch):\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    # Check if the character is present in the string\n    if ch in s:\n        # Split the string into two parts: before and after the character\n        before, after = s.split(ch)\n        # If the character is present only once, the string will have only two parts\n        if len(before) + len(after) == len(s):\n            # If the character is present only once, the length of before will be equal to 0\n            return after\n        # If the character is present more than once, the length of before will be equal to 0\n        return before\n    else:\n        # If the character is not present in the string, return the original string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 1:\n        return s[s.index(ch):]\n    elif s.count(ch) == 2:\n        return s[:s.index(ch)] + s[s.index(ch)+1:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')[:-1]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    sorted_indices = [i for i in range(len(M)) for _ in range(len(M[i]))]\n    \n    # Sort the rows based on their sum\n    for i in range(len(M)):\n        for j in range(len(M[i])-1):\n            if row_sums[i] > row_sums[i+1]:\n                sorted_indices[i], sorted_indices[i+1] = sorted_indices[i+1], sorted_indices[i]\n    \n    # Sort the matrix based on the sorted row indices\n    sorted_matrix = [[M[i][sorted_indices[k]] for k in range(len(M[i]))] for i in range(len(M))]\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    # sort each row of the matrix in ascending order\n    for i in range(len(M)):\n        M[i].sort()\n\n    # sort the matrix in ascending order based on the sum of its rows\n    M.sort(key=lambda x: sum(x))\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] < M[i][i]:\n                M[i][j], M[i][i] = M[i][i], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    This function takes a matrix as input and returns the matrix sorted in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the size of the matrix\n    n = len(M)\n    \n    # Sort the matrix based on the sum of its rows\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n                \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # sort the rows in ascending order\n    sorted_rows = sorted(M, key=lambda x: sum(x))\n\n    # create a new matrix with the sorted rows\n    sorted_matrix = [[row_sums.index(row_sum)] + row for row, row_sum in zip(sorted_rows, row_sums)]\n\n    # return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Sorting the matrix in ascending order based on the sum of its rows\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols-1):\n            if sum(M[i]) > sum(M[i+1]) and sum(M[i])!= sum(M[i+1]):\n                M[i], M[i+1] = M[i+1], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            for k in range(i+1, n):\n                if M[i][j] + M[i][k] > M[j][k]:\n                    M[i][j], M[i][k] = M[i][k], M[i][j]\n                    M[j][j], M[j][k] = M[j][k], M[j][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Initialize variables for sorting and storing the sorted matrix\n    n = len(M)\n    sorted_matrix = []\n    row_sum = 0\n\n    # Loop through each row of the matrix\n    for i in range(n):\n        # Initialize variables for the current row\n        row = []\n        sum_of_row = 0\n        current_row = M[i]\n\n        # Loop through each element of the current row\n        for j in range(len(current_row)):\n            # If the sum of the row so far is less than the sum of the current element, swap the elements\n            if sum_of_row < sum_of_row + current_row[j]:\n                current_row[j], current_row[sum_of_row + current_row[j]] = current_row[sum_of_row + current_row[j]], current_row[j]\n                row[j], row[sum_of_row + current_row[j]] = row[sum_of_row + current_row[j]], row[j]\n                sum_of_row += current_row[j]\n            # Else, add the current element to the row\n            else:\n                row.append(current_row[j])\n                sum_of_row += current_row[j]\n\n        # Add the sorted row to the sorted matrix\n        sorted_matrix.append(row)\n\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    sums = [sum(row) for row in M]\n    # Sort the matrix based on the sums\n    sorted_M = sorted(M, key=lambda x: sums.index(sum(x)))\n    return sorted_M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the length, breadth, and height of a triangular prism as input parameters and returns the volume of the prism.\n    '''\n    V = l * b * h / 6  # Formula to find the volume of a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    # Formula to find the volume of a triangular prism\n    V = 1/3 * l * b * h\n    \n    # Return the calculated volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 0.5 * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h # calculate the volume using formula for triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    #calculating volume of a triangular prism\n    volume = (l*b*h)/3\n\n    #printing the result\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = re.compile(r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])')\n    return underscore_pattern.search(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define a regular expression pattern to match sequences of lowercase letters\n    pattern = r'[a-z]+_[a-z]+'\n\n    # Use the regular expression pattern to search for sequences of lowercase letters\n    matches = re.findall(pattern, text)\n\n    # Check if any sequences were found and return the result as a boolean value\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])_'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r\"(?<![a-zA-Z])[a-z]+(?![a-zA-Z])_\"\n    \n    # Use the re.search() method to search for a match in the input text\n    match = re.search(pattern, text)\n    \n    # If a match is found, return True, otherwise return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z]+(?=[a-z])'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?=.*[a-z])[a-z_]*(?<=_)([a-z_]*)\"\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'\\b[a-z]+[_][a-z]+\\b')\n    return pattern.search(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string1, string2):\n    # Create an empty list to store the result\n    result = []\n\n    # Loop through each character in the first string\n    for char in string1:\n        # Check if the character is present in the second string\n        if char not in string2:\n            # Add the character to the result list\n            result.append(char)\n\n    # Convert the result list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert string to list of characters\n    char_list = list(string)\n    \n    # create a set to store characters to be removed\n    remove_set = set(string)\n    \n    # iterate through the list of characters and remove the ones which are present in the remove_set\n    for i in range(len(char_list)):\n        if char_list[i] in remove_set:\n            char_list.pop(i)\n    \n    # convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the input string to a list of characters\n    char_list = list(string)\n\n    # Initialize an empty list to store the new list of characters without the common characters\n    common_chars = []\n\n    # Iterate through the characters in the input list\n    for char in char_list:\n        # Check if the character is present in the second string\n        if char not in string:\n            # If it's not, add it to the new list of common characters\n            common_chars.append(char)\n\n    # Convert the new list of common characters back to a string and return it\n    return ''.join(common_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n\n    # Create an empty list to store the characters which are present in the second string\n    present_chars = []\n\n    # Iterate over the characters in the string\n    for char in string:\n        # If the character is present in the second string, add it to the list of present characters\n        if char in present_chars:\n            present_chars.remove(char)\n        # If the character is not present in the second string, add it to the final list of characters\n        else:\n            final_list.append(char)\n\n    # Return the final list of characters\n    return final_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Removing the characters present in the second string\n    for char in string:\n        if char in string:\n            string = string.replace(char, '')\n    \n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the input string to a list of characters\n    char_list = list(string)\n\n    # Create a set of characters to be removed from the first string\n    remove_chars = set(string)\n\n    # Remove the characters from the first string which are present in the set of characters to be removed\n    for char in char_list:\n        if char in remove_chars:\n            char_list.remove(char)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and returns a list of characters that do not appear in the second string.\n    '''\n    # create a dictionary to store the frequency of each character in the second string\n    freq_dict = {}\n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # create a list of characters that appear more than once in the second string\n    common_chars = [char for char in freq_dict if freq_dict[char] > 1]\n    \n    # remove the common characters from the first string\n    result = [char for char in string if char not in common_chars]\n    \n    # convert the result list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    char_set = [chr(i) for i in range(NO_OF_CHARS)]\n    for c in char_set:\n        if c in string:\n            string = string.replace(c, '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the string to a list of characters\n    list_of_chars = list(string)\n\n    # Remove characters present in the second string from the first string\n    for char in list_of_chars:\n        if char in string:\n            list_of_chars.remove(char)\n\n    # Convert the list of characters back to a string\n    new_string = ''.join(list_of_chars)\n\n    # Return the new string\n    return new_string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n    \n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = set()\n    for num in arraynums:\n        if num in duplicates:\n            return True\n        duplicates.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the array\n    freq_dict = {}\n\n    # Loop through the array and update the frequency of each element in the dictionary\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Loop through the dictionary and check if there are any duplicate elements\n    for key, value in freq_dict.items():\n        if value > 1:\n            return True\n\n    # If no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Creating a set to store the unique elements of the array\n    unique_set = set(arraynums)\n\n    # If the length of the set is equal to the length of the array,\n    # it means the array contains duplicates\n    if len(unique_set) == len(arraynums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()  # Create an empty set to store the numbers already seen\n    for num in arraynums:\n        if num in seen:  # If the number is already in the set, it means it's a duplicate\n            return True  # Return True to indicate a duplicate was found\n        seen.add(num)  # If the number is not in the set, add it to the set\n    return False  # If no duplicates are found, return False to indicate no duplicates were found"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the input array to a set to remove duplicates\n    unique_nums = set(arraynums)\n    # Check if there are any duplicates in the set\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2 or x == 3:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return is_woodall(x+1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0 and x > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    if x >= 10 and x <= 100:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2!= 0"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # check if the given number is divisible by 3 and 2\n    if x % 3 == 0 and x % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0:\n        return True\n    elif x % 3 == 0:\n        return True\n    elif x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 30 and x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    if x == 0:\n        return \"It's a woodall!\"\n    elif x == 1:\n        return \"It's not a woodall.\"\n    else:\n        return \"It's a woodball!\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return num - reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    if rev_num == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the given number to a string\n    num_str = str(num)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # convert the reversed string back to a number\n    rev_num = int(rev_str)\n    # check if the reversed number is one less than twice the original number\n    if rev_num == num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse == 0 or num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the given number to a string\n    num = str(num)\n    \n    # initialize variables to store the reversed number and the reversed number minus one\n    rev_num = ''\n    rev_num_minus_one = ''\n    \n    # loop through each character in the original number and append it to the reverse variables\n    for char in num:\n        rev_num += char\n    for char in rev_num:\n        rev_num_minus_one += char\n    \n    # remove the last character from the reversed number (since it's a duplicate of the first character)\n    rev_num_minus_one = rev_num_minus_one[:-1]\n    \n    # compare the reversed number minus one to the original number\n    if int(rev_num_minus_one) == int(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # Convert the reversed string back to an integer\n    num_rev = int(num_str)\n\n    # Check if the number is one less than twice its reverse\n    if num_rev == num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    while num!= 0:\n        remainder = num % 10\n        reversed_num = reversed_num * 10 + remainder\n        num //= 10\n    if reversed_num == 1000:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == 2*int(str(num)[::-1])"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Calculate the reverse of the number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n\n    # Check if the reversed number is one less than twice the original number\n    if num < reverse * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n    return reverse_num == 1 + num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the given list in ascending order\n    arr.sort()\n\n    # Initialize the maximum number with the first digit\n    max_num = arr[0]\n\n    # Loop through the list and update the maximum number if a larger number is formed\n    for i in range(len(arr)-1):\n        if arr[i]+arr[i+1] > max_num:\n            max_num = arr[i]+arr[i+1]\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    # Create a dictionary to store the value of each digit\n    digit_values = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum number to be formed with the digits of the first number\n    max_num = arr[0]\n\n    # Iterate over the remaining numbers in the array\n    for num in arr[1:]:\n        # Initialize a variable to store the sum of the previous maximum number and the digits of the current number\n        running_sum = 0\n\n        # Iterate over the digits of the current number\n        for digit in str(num):\n            # Add the value of the digit to the running sum\n            running_sum += digit_values[int(digit)]\n\n        # Update the maximum number if the current number is larger than the previous maximum number\n        if running_sum > max_num:\n            max_num = running_sum\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    # sort the list of digits in descending order\n    arr.sort(reverse=True)\n    # initialize the maximum number to be 0\n    max_num = 0\n    # iterate through each digit in the list\n    for i in range(n) : \n        # add the current digit to the maximum number\n        max_num += arr[i]\n        # if the maximum number becomes greater than or equal to 10, update the maximum number to be the sum of the current digit and 1\n        if max_num >= 10 : \n            max_num = arr[i] + 1\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    # Sorting the array in descending order\n    arr.sort(reverse=True)\n    \n    # Initializing variables\n    max_num = 0\n    start = 0\n    \n    # Traversing the sorted array\n    for i in range(len(arr)):\n        # Updating max_num and start if the current element is greater than max_num\n        if arr[i] > max_num:\n            max_num = arr[i]\n            start = i\n            \n    # Returning the result\n    return max_num + start"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # sort the array in descending order\n    max_num = 0 # initialize the largest number to 0\n    for i in range(len(arr)): # traverse the array\n        max_num += arr[i]*(10**(len(arr)-i-1)) # multiply the digit with 10 raised to the position of the digit\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n\n    # create a dictionary to store the power of each digit in the number\n    power = {0:0, 1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9}\n\n    # initialize the max number to be zero\n    max_num = 0\n\n    # loop through each digit in the array\n    for num in arr : \n        \n        # if the digit is not zero, find its power in the dictionary and add it to the max_num\n        if num!= 0 : \n            max_num += power[num]\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed with the digits.\n    \"\"\"\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, int(num))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Creating a list to store the number of digits in each position\n    digit_count = []\n    \n    # Creating a list to store the sum of digits in each position\n    digit_sum = []\n    \n    # Looping through each digit in the array\n    for digit in arr:\n        \n        # Counting the number of digits in each position\n        count = 0\n        for i in range(len(digit)):\n            count += digit[i]\n        \n        # Adding the number of digits to the list\n        digit_count.append(count)\n        \n        # Calculating the sum of digits in each position\n        sum = 0\n        for i in range(len(digit)):\n            sum += int(digit[i])\n        \n        # Adding the sum of digits to the list\n        digit_sum.append(sum)\n    \n    # Calculating the maximum sum of digits\n    max_sum = max(digit_sum)\n    \n    # Creating a list to store the digits that can be formed with the given digits\n    valid_digits = []\n    \n    # Looping through each position in the array\n    for i in range(len(arr)):\n        \n        # Creating a list to store the digits that can be formed with the current position\n        valid_digit = []\n        \n        # Looping through each digit in the array\n        for digit in arr:\n            \n            # Checking if the digit can be formed with the current position\n            if digit_count[i] <= len(digit):\n                \n                # Calculating the sum of digits that can be formed with the current position\n                sum = 0\n                for j in range(len(digit)):\n                    if j == i:\n                        sum += int(digit[j])\n                    else:\n                        sum += int(digit[j]) + digit_sum[j]\n                    \n                # Checking if the sum is greater than the current maximum sum\n                if sum > max_sum:\n                    \n                    # Appending the current digit to the valid digits list\n                    valid_digit.append(digit)\n            \n            # Checking if there are any valid digits\n            if len(valid_digit) > 0:\n                valid_digits.append(valid_digit)\n    \n    # Checking if there are any valid digits\n    if len(valid_digits) > 0:\n        \n        # Looping through each valid digits\n        for valid_digit in valid_digits:\n            \n            # Calculating the sum of digits in the valid digits list\n            sum = 0\n            for digit in valid_digit:\n                for i in range(len(digit)):\n                    sum += int(digit[i])\n            \n            # Checking if the sum is greater than the current maximum sum\n            if sum > max_sum:\n                max_sum = sum\n    \n    # Returning the maximum sum of digits\n    return max_sum"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # Sort the digits in descending order\n    max_num = 0\n    for num in arr: # Iterate through each digit in descending order\n        max_num += num # Add it to the maximum number formed so far\n        if max_num > 9: # If the maximum number formed so far is greater than 9, we need to form a new number with the current digit\n            max_num = num # Reset the maximum number formed so far to the current digit\n    return max_num # Return the maximum number formed"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the given list of digits in descending order\n    arr.sort(reverse=True)\n\n    # Initialize variables\n    max_num = 0\n    current_num = 0\n    power = 0\n\n    # Iterate through the sorted list\n    for num in arr:\n        current_num += num * (10 ** power)\n        power += 1\n\n        # Check if the current number is greater than the maximum number found so far\n        if current_num > max_num:\n            max_num = current_num\n\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if both integers have opposite signs, False otherwise.\n    '''\n    return x < 0 and y > 0 or x > 0 and y < 0"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # check if both numbers have opposite signs\n    if ((x > 0 and y < 0) or (x < 0 and y > 0)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0: \n        print(x, y)\n    else:\n        print(y, x)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 or y == 0:\n        return False\n    elif (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x > 0 and y < 0 or x < 0 and y > 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n\n    # Calculate the square root of n\n    sqrt_n = int(n ** 0.5) + 1\n\n    # Iterate from 1 to sqrt(n)\n    for i in range(1, sqrt_n):\n        # Calculate the sum of squares of i, sqrt(n), and 2*sqrt(n)\n        sum_of_squares = i ** 2 + sqrt_n ** 2 + 2 * sqrt_n ** 2\n\n        # If the sum is equal to n, return True\n        if sum_of_squares == n:\n            return True\n\n        # If the sum is greater than n, return False\n        elif sum_of_squares > n:\n            return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        for i in range(1, int(n**0.5) + 1):\n            if n % (i**2 + 1) == 0:\n                return False\n        return True\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return 1\n    else:\n        for i in range(1, int(n**0.5) + 1):\n            if n % (i**2 + 1) == 0:\n                return False\n        return n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # check if n is even\n    if n % 2 == 0:\n        return False\n    \n    # calculate the nth term\n    nth_term = n * (3 * n - 1)\n    \n    # check if the nth term is a square\n    if nth_term ** 0.5!= int(nth_term ** 0.5):\n        return False\n    \n    # if both conditions are met, then the nth term is an octagonal number\n    return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return n * (3 ** 0.5) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the function to check whether a number is octagonal or not\n    def is_octagon(num):\n        return num % 12 == 0\n\n    # Find the nth octagonal number using the formula\n    # Octagonal(n) = (n^2 - n + 1) / 2\n    octagonal_number = (n**2 - n + 1) // 2\n\n    # Check whether the octagonal number is octagonal or not\n    if is_octagon(octagonal_number):\n        return octagonal_number\n    else:\n        return is_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n\n    # Check if n is greater than or equal to 0\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize the first two octagonal numbers\n    first_octagon = 1\n    second_octagon = 10\n\n    # Calculate the nth octagonal number\n    for i in range(3, n+1):\n        third_octagon = first_octagon + second_octagon\n        first_octagon = second_octagon\n        second_octagon = third_octagon\n\n    # Return the nth octagonal number\n    return second_octagon"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # initialize the variables\n    count = 1\n    num = 1\n    \n    # loop to find the nth octagonal number\n    while count < n: \n        # check if the current number is octagonal\n        if num % 8 == 0: \n            return num\n        # increment the number and count\n        num += 1\n        count += 1\n    \n    # if the loop completes, it means the nth octagonal number was not found\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            j = (i * (2 * i - 1)) / 3\n            if j == n:\n                return True\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if the number is an octagonal number, False otherwise.\n    \"\"\"\n    return (n*(n+1))**2 == n*(n+1)**2 - n**2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Check if n is an integer\n    if not isinstance(n, int):\n        return None\n\n    # Check if n is greater than or equal to 1\n    if n < 1:\n        return None\n\n    # Initialize the sum of squares of the first n integers to 0\n    sum_of_squares = 0\n\n    # Loop through the first n integers starting from 1\n    for i in range(1, n+1):\n        # Calculate the square of the current integer\n        square = i ** 2\n\n        # Add the square to the sum of squares\n        sum_of_squares += square\n\n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[int(s[i])] += 1\n    \n    # Count the number of substrings with the sum of digits equal to their length\n    count = 0\n    for i in range(10):\n        count += digit_count[i] * (digit_count[i]-1)\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n\n    # Loop through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Calculate the sum of digits of the substring\n            digit_sum = sum([int(digit) for digit in s[i:j+1]])\n            # If the sum of digits is equal to the length of the substring, increment the count\n            if digit_sum == len(s[i:j+1]):\n                count[digit_sum] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[int(s[i])] += 1\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(d) for d in substring) == len(substring):\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        dp[i] = 1\n        \n        # check for substrings with sum of digits equal to their length\n        for j in range(i):\n            if s[j] == '0':\n                continue\n            \n            # convert all characters in the substring to integers\n            digit_sum = sum([int(c) for c in s[j:i]])\n            \n            # if the digit sum is equal to the length of the substring, increment the counter\n            if digit_sum == i - j:\n                dp[i] += dp[j]\n    \n    return dp[n]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # Loop through each character in the input string\n    for i in range(len(s)):\n        # Extract the substring of length i from the input string\n        substring = s[i:i+len(s)-i]\n        # Calculate the sum of digits in the substring\n        sum_of_digits = sum(int(digit) for digit in substring)\n        # Update the count of substrings with sum of digits equal to their length\n        count_dict[sum_of_digits] += 1\n\n    # Return the count of substrings with sum of digits equal to their length\n    return count_dict[sum(int(digit) for digit in s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(digit) for digit in s[i:j+1]) == j-i+1:\n                count[j-i+1] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with digits sum as length\n    counts = defaultdict(int)\n    \n    # iterate over all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # check if the sum of digits is equal to the length of the substring\n            if sum(int(digit) for digit in s[i:j+1]) == len(s[i:j+1]):\n                # increment the count of substrings with the same sum\n                counts[sum(int(digit) for digit in s[i:j+1])] += 1\n                \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digits = sum(int(digit) for digit in substring)\n            if digits == j-i+1:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            digits = [int(digit) for digit in substring]\n            sum_digits = sum(digits)\n            if sum_digits == len(digits):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # initialize a defaultdict to store the count of substrings with the given sum\n    substring_count = defaultdict(int)\n\n    # loop through all possible substrings\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # get the substring\n            substring = s[i:j+1]\n\n            # calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in substring)\n\n            # add the count of the substring to the defaultdict\n            substring_count[substring_sum] += 1\n\n    # return the count of substrings with the given sum\n    return sum(count for sum, count in substring_count.items() if sum == len(s))"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0] # initialize smallest with first element of list\n    for x in xs:\n        if x < smallest: # if current element is smaller than smallest, update smallest\n            smallest = x\n    return smallest # return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest number to the first element of the list\n    smallest = xs[0]\n    # iterate through the rest of the list\n    for x in xs[1:]:\n        # if the current element is smaller than the smallest number, update smallest number\n        if x < smallest:\n            smallest = x\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number.\n    '''\n    smallest = xs[0]  # initialize smallest to first element of list\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]  # if current element is smaller than smallest, update smallest\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize variables to store the maximum difference and the current difference\n    max_diff = 0\n    cur_diff = test_list[1][1] - test_list[0][1]\n    \n    # Iterate through the sorted list and calculate the difference between each pair\n    for i in range(1, len(test_list)):\n        cur_diff = test_list[i][1] - test_list[i-1][1]\n        \n        # Update the maximum difference if the current difference is greater than the previous maximum\n        if cur_diff > max_diff:\n            max_diff = cur_diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    difference = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] - test_list[j][1] > difference:\n                difference = test_list[i][1] - test_list[j][1]\n    return difference"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    pairs = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    pairs.sort()\n    max_diff = pairs[-1][0] - pairs[0][0]\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff_list.append(abs(test_list[i][1] - test_list[j][1]))\n    return max(diff_list)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the given tuple list in ascending order\n    test_list.sort()\n\n    # Initialize two variables to store the maximum and minimum difference found so far\n    max_diff = 0\n    min_diff = float('inf')\n\n    # Iterate through the sorted tuple list\n    for i in range(len(test_list)):\n        # Check if the difference between adjacent elements is greater than the current max difference\n        if abs(test_list[i] - test_list[i + 1]) > max_diff:\n            max_diff = abs(test_list[i] - test_list[i + 1])\n\n        # Check if the difference between adjacent elements is less than the current minimum difference\n        if abs(test_list[i] - test_list[i + 1]) < min_diff:\n            min_diff = abs(test_list[i] - test_list[i + 1])\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n\n    max_diff = test_list[1][0] - test_list[0][0]\n    for i in range(1, len(test_list)):\n        if test_list[i][0] - test_list[i-1][1] > max_diff:\n            max_diff = test_list[i][0] - test_list[i-1][1]\n\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Use a lambda function to sort by second value\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n\n    Args:\n    - subjectmarks (list of tuples): List of tuples containing subject and marks.\n\n    Returns:\n    - sorted_marks (list of tuples): List of tuples sorted by marks in ascending order.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # Return the sorted list of tuples\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples of subject marks and sorts them based on the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst, acc=[]):\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item, acc)\n            else:\n                acc.append(item)\n        return acc\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        '''\n        Recursively flatten a list.\n        '''\n        flat_list = []\n        for item in data_list:\n            if type(item) == list:\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flattened_list = flatten(data_list)\n    sum_list = [item for sublist in flattened_list for item in sublist]\n    return sum(sum_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    \n    first_item = data_list[0]\n    rest_of_list = data_list[1:]\n    \n    if isinstance(first_item, (list, tuple)):\n        return recursive_list_sum(first_item) + recursive_list_sum(rest_of_list)\n    else:\n        return first_item + recursive_list_sum(rest_of_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list has only one element, return that element\n    if len(data_list) == 1:\n        return data_list[0]\n    # Recursive case: add the first element to the sum of the remaining elements\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            if isinstance(item, list):\n                recursive_list_sum(item)\n            else:\n                sum_list.append(item)\n    else:\n        sum_list.append(data_list)\n    return sum(sum_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        '''\n        Recursive function to flatten a list.\n        '''\n        flat_list = []\n        for item in lst:\n            if type(item) == list:\n                flat_list += flatten(item)\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    def sum_flattened_list(flat_list):\n        '''\n        Recursive function to sum up the flattened list.\n        '''\n        if len(flat_list) == 0:\n            return 0\n        else:\n            return flat_list[0] + sum_flattened_list(flat_list[1:])\n\n    flattened_list = flatten(data_list)\n    return sum_flattened_list(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and counts the number of positive numbers in it.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the partition count to 0\n    count = 0\n    # Initialize an array to store the partitioned Bell numbers\n    partitioned_bell = [0] * (n + 1)\n    # Initialize the maximum partition count to 0\n    max_count = 0\n\n    # Iterate through each Bell number from 1 to n\n    for i in range(1, n + 1):\n        # If the Bell number is already partitioned, increment the count and skip to the next iteration\n        if partitioned_bell[i] > 0:\n            count += partitioned_bell[i]\n            continue\n        # Initialize the partition count to 1\n        partition_count = 1\n        # Iterate through the remaining Bell numbers from i + 1 to n\n        for j in range(i + 1, n + 1):\n            # If the Bell number can be partitioned with the remaining Bell numbers, increment the partition count\n            if j - i >= 0:\n                partition_count += partitioned_bell[j - i]\n            # Update the partitioned Bell numbers array and the maximum partition count if necessary\n            partitioned_bell[j] = partition_count\n            if partition_count > max_count:\n                max_count = partition_count\n        # Update the partition count to the maximum partition count at this point in the loop\n        count += max_count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1, 1]\n    for i in range(2, n):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_nums = [1, 2, 4, 7, 13, 24, 44, 81, 159, 312, 576, 1093, 2274, 4865, 9729, 19457, 38913, 77824, 155647, 311293, 622585, 1245169, 2490336, 5080671, 10161341, 20322681, 40645360, 81290720, 162581440, 325162880, 650325760, 1300651520, 2601303040, 5202606080, 10405212160, 20810424320, 41620848640, 83241697280, 166483394560, 332966789120, 665933578240, 1331867156480, 2663734312960, 5327468625920, 10654937251840, 21309874503680, 42619749007360, 85239498014720, 170478996029440, 340957992058880, 681915984117760, 1363831968235520, 2727663936471040, 5455327872942080, 10910655745884160, 21821311491768320, 43642622983536640, 87285245967073280, 174570491934146560, 349140983868293120, 698281967736586240, 1396563935473172480, 2793127870946344960, 5586255741892689920, 11172511483785379840, 22345022967570759680, 44690045935141519360, 89380091870283038720, 178760183740566077440, 357520367481132154880, 715040734962264309760, 1430081469924528619520, 2860162939849057239040, 572032587"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3) + bell_number(n-4)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3) + bell_number(n-4)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    # Create a list of Bell numbers up to n\n    bell_numbers = [bell_number(i) for i in range(n+1)]\n    \n    # Calculate the number of ways to partition the list\n    ways_to_partition = 1\n    for i in range(1,n+1):\n        ways_to_partition *= bell_numbers[i]\n    return ways_to_partition"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\nn = int(input(\"Enter a number: \"))\nprint(\"Number of ways to partition a set of Bell numbers:\", bell_number(n))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = 0\n    for i in range(n+1):\n        ways += 1/(i+1)\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case: 0 ways to partition\n    if n == 0:\n        return 1\n\n    # Initialize the number of ways to partition to 0\n    ways = 0\n\n    # Loop through all possible Bell numbers\n    for i in range(n+1):\n        # For each Bell number, check if it can be divided by 2\n        if i % 2 == 0:\n            # If it can be divided by 2, recursively calculate the number of ways to partition the set with Bell numbers 1 and 2\n            ways += bell_number(i-1) * bell_number(i-2)\n\n    return ways"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[1] > A[0]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    # Initialize variables to keep track of previous element and current element\n    prev_elem = float('inf')\n    curr_elem = float('inf')\n    # Loop through the array A and check if the current element is monotonic or not\n    for elem in A:\n        if elem <= prev_elem:\n            if curr_elem <= prev_elem:\n                return False\n            else:\n                prev_elem = elem\n        else:\n            prev_elem = curr_elem\n            curr_elem = elem\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    \n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return False\n        elif A[i] < A[i-1]:\n            return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n\n    Parameters:\n    A (list): A list of integers.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n\n    Time Complexity: O(n), where n is the length of the array.\n\n    Space Complexity: O(1), since we are not using any extra space for storing the array.\n    '''\n\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n\n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n\n    # Initialize the minimum and maximum values\n    min_val = A[0]\n    max_val = A[0]\n\n    # Traverse the array and update the minimum and maximum values\n    for i in range(1, len(A)):\n        if A[i] < min_val:\n            min_val = A[i]\n        elif A[i] > max_val:\n            max_val = A[i]\n\n    # Check if the minimum and maximum values are the same\n    if min_val == max_val:\n        return True\n\n    # Check if the array is monotonic in increasing order\n    if len(A) > 1 and A[0] < A[1] and A[1] < A[2]:\n        return True\n    elif len(A) > 2 and A[1] < A[2] and A[0] > A[2]:\n        return True\n\n    # Check if the array is monotonic in decreasing order\n    if len(A) > 1 and A[len(A) - 1] > A[len(A) - 2] and A[len(A) - 2] > A[len(A) - 3]:\n        return True\n    elif len(A) > 2 and A[len(A) - 2] > A[len(A) - 3] and A[len(A) - 1] < A[len(A) - 3]:\n        return True\n\n    # If none of the above conditions are true, then the array is not monotonic\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    if len(A) <= 1: \n        return True\n    \n    if A[0] <= A[1]: \n        for i in range(1, len(A)-1): \n            if A[i] > A[i+1]: \n                return False\n        return True\n    \n    else: \n        for i in range(1, len(A)-1): \n            if A[i] < A[i+1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A of n integers as input and returns True if the array is monotonic (increasing or decreasing) or False otherwise.\n    '''\n    if len(A) < 2:\n        return False\n    \n    prev_val = A[0]\n    for i in range(1, len(A)):\n        if A[i] > prev_val:\n            return False\n        prev_val = A[i]\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns a boolean value indicating whether the array is monotonic or not.\n    '''\n    if len(A) == 1: # base case for single-element array\n        return True\n    if A[0] < A[1] and A[1] > A[2]: # monotonic increasing\n        return True\n    elif A[0] > A[1] and A[1] < A[2]: # monotonic decreasing\n        return True\n    else: # not monotonic\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    n = len(A) \n    is_increasing = True \n    is_decreasing = True \n    for i in range(1, n): \n        if A[i-1] > A[i]: \n            is_increasing = False \n        elif A[i-1] < A[i]: \n            is_decreasing = False \n    return is_increasing and is_decreasing "
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) >= len(s):\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) >= len(s):\n        for i in range(len(l) - len(s) + 1):\n            if l[i:i+len(s)] == s:\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    i = 0\n    j = 0\n\n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n\n    return j == len(s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # check if the list is empty\n    if not l:\n        return False\n    # check if the first element of the list is the same as the first element of the sublist\n    if l[0] == s[0]:\n        # check if the sublist is a sublist of the remaining list\n        if is_sublist(l[1:], s[1:]):\n            return True\n        # check if the remaining list is a sublist of the sublist\n        elif is_sublist(l[1:], s):\n            return True\n    # check if the sublist is a sublist of the remaining list\n    elif is_sublist(l[1:], s):\n        return True\n    # check if the remaining list is a sublist of the sublist\n    elif is_sublist(l, s[1:]):\n        return True\n    # if none of the above conditions are true, the list does not contain the sublist\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    if len(Input) == 0:\n        return False\n\n    for i in range(len(Input[0])):\n        flag = True\n        for j in range(1, len(Input)):\n            if len(Input[j])!= len(Input[0]):\n                flag = False\n                break\n        if flag:\n            return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if len(Input)!= len(Input[i]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    # create a dictionary to store the length of each tuple\n    lengths = {}\n    # iterate through the input list of tuples\n    for tup in Input:\n        # if the tuple has already been seen before, return True\n        if tup in lengths:\n            return True\n        # otherwise, update the length of the tuple in the dictionary\n        lengths[tup] = len(tup)\n    # if all the tuples have been seen before, return False\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    count = 0\n    for tuple_ in Input:\n        if len(tuple_) == count:\n            count += 1\n        else:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        if len(i) == len(Input[0]):\n            count += 1\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        for i in range(0, n - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n\n    n = len(nums)\n    swapped = True\n\n    while swapped:\n        swapped = False\n\n        # Iterate over the array, comparing adjacent elements\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                # Swap the elements\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n\n        # Decrease the gap size by half\n        n //= 1.3\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    n = len(nums)\n    while swapped:\n        swapped = False\n        for i in range(1, n):\n            if nums[i-1] > nums[i]:\n                nums[i-1], nums[i] = nums[i], nums[i-1]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    # define the size of the range\n    n = len(nums)\n    # define the maximum range of swaps\n    max_range = n // 2\n    # define the swapping function\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # initialize the swaps and the minimum range\n    swaps = 0\n    min_range = 1\n\n    # iterate until the minimum range is reached\n    while min_range < max_range:\n        # reset the minimum range\n        min_range = n\n\n        # iterate over the range [0, max_range]\n        for i in range(max_range):\n            # calculate the index of the next element to swap\n            j = i + min_range\n            # check if the element at j is greater than the element at i\n            if j < n and nums[j] < nums[i]:\n                # swap the elements\n                swap(i, j)\n                # increment the swaps count\n                swaps += 1\n                # update the minimum range\n                min_range = j\n\n        # decrease the maximum range\n        max_range = n // 2\n\n    # print the number of swaps\n    print(\"Number of swaps:\", swaps)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    # initialize the swap counter\n    swap_count = 0\n\n    # loop through the list\n    for i in range(len(nums)-1, 0, -1):\n\n        # initialize the minimum value to the first element\n        min_val = nums[0]\n\n        # loop through the unsorted part of the list\n        for j in range(i):\n\n            # if the current element is less than the minimum element, update the minimum element\n            if nums[j] < min_val:\n                min_val = nums[j]\n                swap_count += 1\n\n        # if the minimum element has been found, swap the first element with the minimum element\n        if nums[i] == min_val:\n            nums[i], nums[0] = nums[0], nums[i]\n\n    # return the sorted list and the number of swaps\n    return nums, swap_count"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    min_val = min(nums)\n    gap = n\n    while gap > 1:\n        gap = (gap * 10) // 13\n\n    for i in range(gap):\n        for j in range(n - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n\n    for i in range(n - 1):\n        if nums[i] > nums[i + 1]:\n            nums[i], nums[i + 1] = nums[i + 1], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n\n    Parameters:\n    nums (list): A list of integers to be sorted.\n\n    Returns:\n    list: The sorted list.\n    '''\n\n    # Define the gap sequence\n    gap = len(nums)\n\n    # Keep track of swaps made in each iteration\n    swaps = 0\n\n    # Start the sorting loop\n    while gap > 1 or swaps > 0:\n\n        # Calculate the new gap size based on the gap sequence\n        if gap > 1:\n            gap = int(gap / 1.3)\n        else:\n            gap = 1\n\n        # Reset the swaps counter for each iteration\n        swaps = 0\n\n        # Start the iteration loop\n        for i in range(len(nums)-gap):\n\n            # If the elements are out of order, swap them\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swaps += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    This function takes a list of numbers as input and sorts them using the Comb sort algorithm.\n    '''\n\n    # Set the initial gap size to the length of the list\n    gap = len(nums)\n\n    # Start a flag to keep track of whether the list is sorted or not\n    is_sorted = False\n\n    # While the gap is greater than 1 and the list is not sorted\n    while gap > 1 and not is_sorted:\n\n        # Set the new gap size as half of the previous gap size\n        gap = gap // 2\n\n        # Set the flag to false while iterating through the list\n        is_sorted = True\n\n        # Iterate through the list using a for loop and the gap value\n        for i in range(gap, len(nums)):\n\n            # If the current element is greater than the next element, swap them\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n\n                # Set the flag to true as the list is not sorted any more\n                is_sorted = False\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    gap = len(nums) // 2\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap //= 1.3"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    # check if n is a square number\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and i**2 == n:\n            return True\n        elif n % i == 0 and i**2!= n:\n            return False\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Initialize the sum of squares to 0\n    square_sum = 0\n\n    # Check if the input number can be represented as the difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        square_sum += i**2\n        if square_sum == n:\n            return True\n        elif square_sum > n:\n            break\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef dif_Square(n): \n\n    # Check whether the given number is a perfect square or not. \n    if math.sqrt(n) - math.sqrt(n**2) == int(math.sqrt(n) - math.sqrt(n**2)): \n        print(n, \"can be represented as the difference of two squares.\") \n    else: \n        print(n, \"cannot be represented as the difference of two squares.\") "
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    if n % 4!= 0:\n        return \"Not possible\"\n    i = 2\n    while i*i <= n:\n        if n % i == 0 and n % (i*i) == 0:\n            return \"Possible\"\n        i += 1\n    return \"Not possible\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is divisible by 4 or 2\n    if n % 4 == 0 or n % 2 == 0:\n        return False\n\n    # Square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the difference of two squares can be represented as a square\n    diff_square = sqrt_n * sqrt_n - n\n\n    # Check if the difference of two squares is divisible by 4 or 2\n    if diff_square % 4 == 0 or diff_square % 2 == 0:\n        return False\n\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"Cannot find the difference of squares for negative numbers\"\n\n    # Check if the given number can be represented as the sum of two squares\n    for i in range(1, int(n**0.5)+1):\n        if (n-i*i)**2 == i**2:\n            return \"The number can be represented as the difference of two squares\"\n\n    return \"The number cannot be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    This function will take an integer as input and check whether it can be represented as the difference of two squares or not.\n    '''\n    \n    if n < 0:\n        print(\"Number must be non-negative.\")\n        return\n    \n    # Check if the given number can be represented as the sum of two squares\n    sum_sq = n**2 + (n//2)**2\n    if sum_sq == n:\n        print(n, \"can be represented as the difference of two squares.\")\n    else:\n        print(n, \"cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Find the square of the given number\n    square = n*n\n\n    # Check if the square of the given number is divisible by 2\n    if square % 2 == 0:\n        # If the square is divisible by 2, then the number is not representable as the difference of two squares.\n        return False\n\n    # Check if the square of the given number can be written as the sum of two squares\n    # If yes, then the number is representable as the difference of two squares.\n    else:\n        # Calculate the sum of squares of the given number\n        sum_squares = (square + (square-n))\n\n        # Check if the sum of squares is divisible by 2\n        if sum_squares % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(n)\n    # Check if the number is a valid integer\n    if not num_str.isdigit():\n        return \"Invalid input\"\n    # Convert the number to integer\n    num = int(num_str)\n    # Check if the number can be represented as the difference of two squares\n    for i in range(int(num/2)+1):\n        if num-i*i*i*i*i*i == i*i*i*i*i*i:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # find the square root of the given number\n    root = int(n ** 0.5)\n    # check whether the given number can be represented as the difference of two squares\n    if root * root == n:\n        print(f\"{n} can be represented as the difference of two squares.\")\n    else:\n        print(f\"{n} cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    pattern_index = 0\n    for color in colors:\n        if color == patterns[pattern_index]:\n            pattern_index += 1\n            if pattern_index == len(patterns):\n                return True\n        else:\n            pattern_index = 0\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function takes a list of colors and a list of patterns and returns True if the\n    colors are consistent with the patterns and False otherwise.\n\n    The patterns list contains integers, where each integer represents a color. The\n    integer represents the number of times the corresponding color appears in the sequence.\n\n    For example, if patterns is [1, 2, 2, 1] and colors is [1, 2, 3], then the function\n    will return False, since the sequence [1, 2, 3] doesn't match the patterns.\n    \"\"\"\n    pattern_count = {}\n    total_count = 0\n    \n    for pattern in patterns:\n        color = pattern\n        if color in pattern_count:\n            pattern_count[color] += 1\n        else:\n            pattern_count[color] = 1\n        total_count += pattern\n    \n    for color in colors:\n        if color in pattern_count:\n            pattern_count[color] -= 1\n        else:\n            raise ValueError(f\"Color '{color}' is not present in the patterns list\")\n        total_count -= pattern_count[color]\n    \n    return total_count == 0"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # check if the length of patterns array is equal to the length of colors array\n    if len(colors)!= len(patterns):\n        return False\n    \n    # check if all colors present in the colors array match any of the patterns in the patterns array\n    for color in colors:\n        match = False\n        for pattern in patterns:\n            if pattern.count(color) > 0:\n                match = True\n                break\n        if not match:\n            return False\n    \n    # if all the above conditions are true, then it follows the sequence given in the patterns array\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n\n    Args:\n    colors (list): A list of colors.\n    patterns (list): A list of patterns, where each pattern is a list of colors.\n\n    Returns:\n    bool: True if the colors follow the patterns, False otherwise.\n    \"\"\"\n\n    # Check if the number of patterns is the same as the number of colors\n    if len(patterns)!= len(colors):\n        return False\n\n    # Check if the patterns are valid\n    for pattern in patterns:\n        if len(pattern)!= len(set(pattern)):\n            return False\n\n    # Create a dictionary to store the pattern as a string\n    pattern_dict = {}\n    for pattern in patterns:\n        pattern_str = ''.join(sorted(str(pattern)))\n        if pattern_str in pattern_dict:\n            pattern_dict[pattern_str].append(colors.index(pattern))\n        else:\n            pattern_dict[pattern_str] = [colors.index(pattern)]\n\n    # Check if the colors follow the patterns\n    for i in range(len(colors)):\n        if i not in pattern_dict:\n            return False\n        for pattern in pattern_dict[str(i)]:\n            if colors[i]!= pattern:\n                return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(patterns)\n\n    # Check if all patterns have the same length\n    for pattern in patterns:\n        if len(pattern)!= n:\n            return False\n\n    # Create a dictionary to store the count of each pattern\n    pattern_count = {}\n    for i in range(n):\n        pattern = patterns[i]\n        if pattern not in pattern_count:\n            pattern_count[pattern] = 0\n        pattern_count[pattern] += 1\n\n    # Check if the given colors follow the sequence of patterns\n    current_pattern = ''\n    current_count = 0\n    for color in colors:\n        if color == current_pattern:\n            current_count += 1\n        else:\n            if current_count == pattern_count[current_pattern]:\n                del pattern_count[current_pattern]\n            if current_pattern in pattern_count:\n                pattern_count[current_pattern] -= 1\n            current_pattern = color\n            current_count = 1\n\n    # If all patterns have been used, the colors must have been used as well\n    if not pattern_count:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) == 0 or len(colors) == 0:\n        return False\n    if len(patterns[0])!= len(colors[0]):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two arrays, colors and patterns, and checks whether the colors array\n    follows the patterns array. A color follows a pattern if it has the same color value as\n    the corresponding pattern value in the patterns array. If all colors follow their respective\n    patterns, the function returns True. Otherwise, it returns False.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if all the colors match the patterns in the array\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    n = len(colors)\n    pattern = 0\n\n    # Iterate over the colors array and the patterns array\n    for i in range(n):\n        # Check if the current color is in the current pattern\n        if colors[i] in patterns[pattern]:\n            # Move to the next pattern if the current color is present in it\n            pattern += 1\n            if pattern == len(patterns):\n                return True\n\n    # If the loop completes, it means the sequence is not valid\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tuple_ in test_list:\n        if all(x % K == 0 for x in tuple_):\n            divisible_tuples.append(tuple_)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_list = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            filtered_list.append(tup)\n    return filtered_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if sum(test_list[i]) % K == 0 and sum(test_list[j]) % K == 0:\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tup in test_list:\n        if K % tup[i]!= 0:\n            continue\n        else:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        divisible = True\n        for elem in tup:\n            if elem % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    filtered_list = []\n    for tuple in test_list:\n        if all(num % K == 0 for num in tuple):\n            filtered_list.append(tuple)\n    return filtered_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # loop through each element in the tuple\n        for j in range(len(test_list[i])):\n            # if the element is not divisible by K, skip to the next tuple\n            if test_list[i][j] % K!= 0:\n                continue\n            # if we have found a tuple with all elements divisible by K, return the tuple\n            else:\n                return test_list[i]"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n    - test_list (list): A list of tuples.\n    - K (int): An integer that indicates the divisor.\n\n    Returns:\n    - list: A list of tuples that have all elements divisible by k from the given list of tuples.\n    \"\"\"\n\n    # Create an empty list to store the tuples that have all elements divisible by K\n    result = []\n\n    # Loop through each tuple in the list of tuples\n    for tup in test_list:\n\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n\n            # If all elements are divisible by K, append the tuple to the result list\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if it is divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    # Split the string into words\n    words = s.split()\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Check the length of the word\n        if len(word) % 2 == 0:\n            # If the length of the word is even, print \"Even\"\n            print(word, \"is Even\")\n        else:\n            # If the length of the word is odd, print \"Odd\"\n            print(word, \"is Odd\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through each character in the string\n    for char in s: \n        # If the character is a space, reset the count to 0\n        if char == \" \": \n            count = 0\n        \n        # If the character is a letter, increment the count\n        elif char.isalpha(): \n            count += 1\n    \n    # If the count is odd, return True\n    if count % 2!= 0: \n        return True\n    \n    # If the count is even, return False\n    else: \n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(\"The word '{}' has an odd length.\".format(word))\n        else:\n            print(\"The word '{}' has an even length.\".format(word))"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    word = s.split()[0]\n    if len(word) % 2!= 0:\n        return \"The length of the word is odd.\"\n    else:\n        return \"The length of the word is even.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} has an even length.\")\n        else:\n            print(f\"{word} has an odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Split the string by spaces\n    words = s.split()\n\n    # Iterate through each word\n    for word in words:\n        # Check the length of the word\n        if len(word) % 2 == 1:\n            return True\n\n    # If no odd length word is found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd, False otherwise.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    words = s.split()\n    for word in words:\n        if len(word)%2 == 0:\n            print(word, \"is even\")\n        else:\n            print(word, \"is odd\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    total = 0\n    num = 1\n    \n    # Loop through the range of n\n    for i in range(1, n+1):\n        # Calculate the sum of the numbers in the range\n        sum_range = (num * (num + 1)) // 2\n        \n        # Calculate the new value of num\n        num = (sum_range * (num - 1)) // 2\n        \n        # Add the value of num to the total sum\n        total += num\n    \n    # Return the final sum\n    return total"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 14\n    elif n == 2:\n        return 72\n    elif n == 3:\n        return 288"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n\n    # Initialize the value of the nth tetrahedral number to 1\n    tetra_num = 1\n\n    # Loop from 1 to n-1\n    for i in range(1, n):\n        # For each number i, the next tetrahedral number is 4*i*(i+1)\n        tetra_num = 4 * i * (i + 1)\n\n    # Return the nth tetrahedral number\n    return tetra_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4 * (n - 1) ** 3 - 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 0\n    c = 0\n    d = 0\n\n    # Iterate n times\n    for i in range(n):\n        # Calculate the next term\n        a = (a + b + c + d) / 2\n        b = a - b\n        c = a - c\n        d = a - d\n\n    # Return the nth term\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2) * (n + 3)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return 4 * (n - 1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = 1\n    while n > 0:\n        num += n\n        n -= 1\n    return num - 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n\n    # Initialize a counter for the tetrahedral numbers\n    count = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Check if the nth tetrahedral number is a prime number\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            # Increment the count if the number is prime\n            count += 1\n\n    # Return the count of prime tetrahedral numbers\n    return count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def t_helper(n, k, t):\n        if n == 0:\n            return t\n        elif n == 1:\n            return t + k\n        else:\n            return t_helper(n-1, k, t)\n    \n    t = 1\n    for i in range(n-1):\n        t = t_helper(i+1, t, 1)\n    \n    return t"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere given its radius.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Calculate the volume of a sphere\n    volume = (4/3) * math.pi * r ** 3\n\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize an empty string to store the ASCII value of each character\n    char_ascii = ''\n    # loop through each character in the given string\n    for char in strr:\n        # convert the character to its ASCII value\n        ascii_char = ord(char)\n        # add the ASCII value to the char_ascii string\n        char_ascii += str(ascii_char)\n    # subtract the ASCII value of 'a' from each character in the char_ascii string modulo 26 and convert the result back to a character\n    result = chr(int(char_ascii) % 26 + ord('a'))\n    # return the result\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    return char % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = sum(ord(char) for char in strr)\n    return chr(ascii_value % 26 + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Convert the string to lowercase\n    strr = strr.lower()\n    \n    # Iterate over each character in the string\n    for char in strr:\n        # Add the ASCII value of the character modulo 26 to the sum variable\n        sum += ord(char) % 26\n    \n    # Convert the sum variable to a character and return it\n    return chr(sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through each character in the input string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(char)\n        # Add the ASCII value of the current character to the result modulo 26\n        result += chr((ascii_value + 13) % 26)\n    # Return the result\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr(char_sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + 65) # adding 65 to get the ASCII value of 'A' in case the sum is negative\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    # initialize the sum variable to zero\n    sum = 0\n    \n    # loop through each character in the string\n    for char in strr:\n        # convert the character to its ASCII value\n        ascii_val = ord(char)\n        \n        # add the ASCII value to the sum\n        sum += ascii_val\n        \n        # if the sum is greater than 25, subtract 26 from it\n        while sum > 25:\n            sum -= 26\n    \n    # convert the sum back to a character and return it\n    return chr(sum % 26 + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + 65)\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2, 1]\n    while len(sequence) < n:\n        next_sequence = [2*x - 1 for x in sequence]\n        sequence = next_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 1, 1\n    for i in range(n): \n        a, b = b, a+b\n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n\n    sequence = [1, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20]\n\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0] * n\n    sequence[0] = 1\n    sequence[1] = 0\n\n    for i in range(2, n):\n        sequence[i] = (3 ** (i - 1)) - 1\n\n    return sequence[n - 1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 0, 1, 0, 1, 0, 1, 0]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    i = 1\n    while i < n:\n        next_number = sequence[i - 1] + sequence[i - 2] + sequence[i - 3]\n        sequence.append(next_number)\n        i += 1\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        for i in range(n-3):\n            sequence(i)\n            if i == 0:\n                print(\"0\")\n            elif i == 1:\n                print(\"1\")\n            elif i == 2:\n                print(\"10\")\n            elif i == 3:\n                print(\"100\")\n            elif i == 4:\n                print(\"1000\")"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4*math.pi*(r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Using the formula A = 4 * pi * r^2\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    s = 4 * math.pi * r**2  # surface area of a sphere\n    return s"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # convert radius to meters\n    r = r * 1000\n    # use Heron's formula to find the surface area\n    area = (4/3) * math.pi * r * r\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n\nprint(surfacearea_sphere(5))"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r ** 3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere using the formula:\n    S = (4/3) * pi * r^2\n    '''\n    return (4/3) * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    \n    return 4 * math.pi * r**2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 20\n    else:\n        return 42 - (2 * (n - 2) * (n - 1)) + 6 * (n - 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Centered hexagonal number is the sum of the centered square numbers\n    # centered = n * (n + 1) * (2 * n + 1)\n    centered = n * (n + 1) * (2 * n + 1)\n    # The centered square numbers are the centered hexagonal numbers\n    # centered_square = centered * centered\n    centered_square = centered ** 2\n    return centered_square"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    elif n == 3:\n        return 28\n    elif n == 4:\n        return 84\n    elif n == 5:\n        return 220\n    elif n == 6:\n        return 576\n    elif n == 7:\n        return 1382\n    elif n == 8:\n        return 3374\n    elif n == 9:\n        return 8880\n    elif n == 10:\n        return 23376\n    elif n == 11:\n        return 61056\n    elif n == 12:\n        return 146336\n    elif n == 13:\n        return 360640\n    elif n == 14:\n        return 945664\n    elif n == 15:\n        return 2536512\n    elif n == 16:\n        return 6422400\n    elif n == 17:\n        return 15625000\n    elif n == 18:\n        return 38477568\n    elif n == 19:\n        return 100000000\n    elif n == 20:\n        return 270000000\n    elif n == 21:\n        return 702970297\n    elif n == 22:\n        return 1679619296\n    elif n == 23:\n        return 4032914672\n    elif n == 24:\n        return 10888869456\n    elif n == 25:\n        return 29349816384\n    elif n == 26:\n        return 76711203200\n    elif n == 27:\n        return 181440000000\n    elif n == 28:\n        return 434861888000\n    elif n == 29:\n        return 1137625625000\n    elif n == 30:\n        return 3145728000000\n    elif n == 31:\n        return 8225833600000\n    elif n == 32:\n        return 20316160000000\n    elif n == 33:\n        return 48628800000000\n    elif n == 34:\n        return 124633600000000\n    elif n == 35:\n        return 342177280000000\n    elif n == 36:\n        return 914006272000000\n    elif n == 37:\n        return 2248424064000000\n    elif n == 38:\n        return 5210299904000000\n    elif n == 39:\n        return 13200000000000000\n    elif n == 40:\n        return 36000000000000000\n\n    # Recursive case\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    num = (n * (3 * n - 1)) // 2\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 0.8660254037844386\n    b = 0.5\n\n    return int(n * (a + b))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # Function to find centered hexagonal number\n    def hexagonal_number(n):\n        return n * (3 * n - 1) / 2\n\n    # Function to find centered hexagonal number for given n\n    def centered_hexagonal_number(n):\n        return hexagonal_number(n) - hexagonal_number(n - 1)\n    \n    return centered_hexagonal_number(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n\n    # Initialize variables for the centered hexagonal number\n    first = 0\n    second = 1\n    third = 2\n\n    # Calculate the nth centered hexagonal number\n    for i in range(n):\n        # Calculate the next centered hexagonal number\n        next_first = (first + second) // 2\n        next_second = (3 * first + second) // 2\n        next_third = (5 * first + 3 * second) // 2\n\n        # Update the variables for the next iteration\n        first = next_first\n        second = next_second\n        third = next_third\n\n    # Return the nth centered hexagonal number\n    return third"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal(k, m):\n        return m * (k * (3 * k - 1) + 1) / 2\n\n    if n < 1:\n        return 0\n    elif n == 1:\n        return centered_hexagonal(0, 1)\n    elif n % 2 == 0:\n        return centered_hexagonal(n // 2 - 1, 1) + centered_hexagonal(n // 2 - 1, 2)\n    else:\n        return centered_hexagonal(n // 2, 2) + centered_hexagonal(n // 2, 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n\n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n\n    a = 1\n    b = 1\n    c = 4\n\n    while n > 1:\n        if n % 2 == 0:\n            n -= 2\n            a += 1\n            b -= 1\n            c -= 1\n        else:\n            n -= 1\n            a -= 2\n            b += 1\n            c += 1\n\n    return a + 2 * b - 1"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    \n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    \n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes in three dictionaries as input and returns a new dictionary that contains all the key-value pairs from all the input dictionaries.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Create a new empty dictionary to store the merged values\n    merged_dict = {}\n    \n    # Loop through the keys in the first dictionary\n    for key in dict1:\n        # Check if the key is already in the merged dictionary\n        if key not in merged_dict:\n            # If not, add the value to the merged dictionary\n            merged_dict[key] = dict1[key]\n    \n    # Loop through the keys in the second dictionary\n    for key in dict2:\n        # Check if the key is already in the merged dictionary\n        if key not in merged_dict:\n            # If not, add the value to the merged dictionary\n            merged_dict[key] = dict2[key]\n    \n    # Loop through the keys in the third dictionary\n    for key in dict3:\n        # Check if the key is already in the merged dictionary\n        if key not in merged_dict:\n            # If not, add the value to the merged dictionary\n            merged_dict[key] = dict3[key]\n    \n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n\n    merged_dict = {}\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        if key in dict1 and key in dict2 and key in dict3:\n            merged_dict[key] = (dict1[key], dict2[key], dict3[key])\n        elif key in dict1 and key in dict2:\n            merged_dict[key] = (dict1[key], dict2[key], dict2[key])\n        elif key in dict1 and key in dict3:\n            merged_dict[key] = (dict1[key], dict1[key], dict3[key])\n        elif key in dict2 and key in dict3:\n            merged_dict[key] = (dict2[key], dict2[key], dict3[key])\n        else:\n            merged_dict[key] = (dict1[key], dict1[key], dict1[key])\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create an empty dictionary to hold the merged dictionaries\n    merged_dict = {}\n    # loop through the three dictionaries and merge them into the merged_dict\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Use the.items() method to convert each dictionary to a list of key-value pairs\n    items1 = dict1.items()\n    items2 = dict2.items()\n    items3 = dict3.items()\n\n    # Combine the lists of key-value pairs into one list of key-value pairs\n    combined = items1 + items2 + items3\n\n    # Create a new dictionary using the.from_items() method\n    merged_dict = dict.from_items(combined)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Loop through the list and update the frequency of each element in the dictionary\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    \n    # Return the dictionary with the frequency of each element\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Loop through each element in the list\n    for elem in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if elem in freq:\n            freq[elem] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[elem] = 1\n    \n    # Return the frequency dictionary\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n\n    # iterate over the list and update the frequency of each element in the dictionary\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n    # return the dictionary\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 1\n    elif N % 2 == 0:\n        return closest_num(N//2)\n    else:\n        return closest_num((N-1)//2) + 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    # Initialize the left and right endpoints of the search range\n    left, right = 0, N\n\n    # Initialize the closest smaller number found so far\n    closest = float('inf')\n\n    # Loop until the left endpoint is greater than the right endpoint\n    while left < right:\n        # Calculate the middle index of the search range\n        mid = (left + right) // 2\n\n        # If the middle number is smaller than N, update the closest smaller number\n        if mid < N:\n            closest = min(closest, mid)\n            left = mid + 1\n        else:\n            # If the middle number is greater than N, update the search range to the right half\n            right = mid\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # loop through all numbers in range(1, N+1)\n    closest_num = 999999999\n    for num in range(1, N+1):\n        # check if the current number is closer than the closest number found so far\n        if abs(num-N) < abs(closest_num-N):\n            closest_num = num\n    \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = list(range(1, N+1))\n    closest = abs(nums[0]-N)\n    for num in nums[1:]:\n        diff = abs(num-N)\n        if diff < closest:\n            closest = diff\n    return N - closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    def find_closest(n):\n        min_diff = float('inf')\n        closest = None\n        for i in range(1, N+1):\n            if i < n:\n                diff = i - n\n                if diff < min_diff:\n                    min_diff = diff\n                    closest = i\n        return closest\n\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        return find_closest(N)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    closest = None\n    min_diff = float('inf')\n\n    for i in range(1, N):\n        diff = abs(N - i)\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    min_num = float('inf')\n    for num in range(N, 0, -1):\n        diff = abs(num - N)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = num\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    if n == 0:\n        return 0\n    else:\n        smaller_nums = [i for i in range(1, n+1) if n-i == 0 or n-i > 0]\n        smaller_num = min(smaller_nums, key=lambda x: abs(x-n))\n        return smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    smallest = 0\n    smallest_diff = abs(n - smallest)\n    \n    for i in range(1, N+1):\n        if abs(n - i) < smallest_diff:\n            smallest = i\n            smallest_diff = abs(n - smallest)\n            \n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # initialize variables\n    min_num = float('inf')\n    closest_num = float('inf')\n\n    # loop through all numbers less than n\n    for num in range(1, N):\n        # calculate the absolute difference between n and num\n        abs_diff = abs(num - N)\n\n        # check if this absolute difference is smaller than the current closest_num\n        if abs_diff < abs(closest_num - N):\n            # update the closest_num\n            closest_num = num\n\n    # return the closest_num\n    return closest_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list.\n    '''\n    # initializing a variable to store the length of the longest word\n    max_len = 0\n\n    # looping through the list of words and comparing the length of each word with the maximum length found so far\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # convert sub_str to a set to remove duplicates\n    sub_set = set(sub_str)\n    # loop through the list of strings and check if each string is a substring of str1\n    for item in str1:\n        if set(item) == sub_set:\n            return True\n    # if no match is found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} is present in {str1}.\")\n    else:\n        print(f\"{sub_str} is not present in {str1}.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} is present in the list.\")\n    else:\n        print(f\"{sub_str} is not present in the list.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'Even number is not undulating.'\n    else:\n        if n == 1:\n            return '1 is undulating.'\n        else:\n            for i in range(2, int(n**0.5)+1):\n                if n % i == 0:\n                    return 'The number is not undulating.'\n            return 'The number is undulating.'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check for special case where n is even\n    if n % 2 == 0: \n        return False\n\n    # Initialize variables\n    sum = 0\n    prev_sum = 0\n\n    # Calculate sum of first n odd numbers\n    for i in range(1, n+1, 2): \n        sum += i\n\n    # Check if sum is greater than 2n\n    if sum > 2*n: \n        return True\n\n    # Calculate sum of first n even numbers\n    for i in range(2, n+1, 2): \n        sum += i\n\n    # Check if sum is greater than 2n\n    if sum > 2*n: \n        return True\n\n    # Calculate sum of first n odd numbers\n    for i in range(1, n+1, 2): \n        sum += i\n\n    # Check if sum is greater than 2n\n    if sum > 2*n: \n        return True\n\n    # If sum is not greater than 2n, then it is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n // 2)\n    else:\n        return not is_undulating((n - 1) // 2)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if n is a positive integer greater than 1\n    if not isinstance(n, int) or n <= 1 or n % 2 == 0:\n        return \"Invalid input\"\n    \n    # Check if n is divisible by 3 or 5\n    if n % 3 == 0 or n % 5 == 0:\n        return \"N\"\n    \n    # Check if n is divisible by 15\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            return \"N\"\n    \n    # If none of the conditions are true, n is undulating\n    return \"Y\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # check for even or odd number\n    if n % 2 == 0:\n        # check for power of 2\n        if n == 2**i for i in range(1, int(log2(n))+1):\n            return True\n        else:\n            return False\n    else:\n        # check for power of 2\n        if 3*n == 2**i for i in range(1, int(log2(n))+1):\n            return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2==0:\n        return False\n    else:\n        for i in range(1,int(n**0.5)+1):\n            if n%i==0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return \"Number is negative\"\n    elif n == 0:\n        return \"Number is zero\"\n    else:\n        return \"Number is undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # If the number is divisible by 4, it is undulating.\n    if n % 4 == 0:\n        return True\n    # If the number is odd, it is not undulating.\n    elif n % 2 == 1:\n        return False\n    # If the number is divisible by 3 and even, it is not undulating.\n    elif n % 3 == 0 and n % 2 == 0:\n        return False\n    # If the number is divisible by 3 and odd, it is undulating.\n    elif n % 3 == 0 and n % 2 == 1:\n        return True\n    # If the number is divisible by 2 and odd, it is undulating.\n    elif n % 2 == 1:\n        return True\n    # If none of the above conditions are satisfied, the number is not undulating.\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n\n    result = 1\n    for i in range(b):\n        result *= a\n\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value in ascending order using the itemgetter function\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the first value of the smallest tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples based on the second value of each tuple using the itemgetter() function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the index of the first tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list in ascending order based on the second value of each tuple\n    test_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) < min_length:\n                min_length = len(lst[i][j])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for sublist in lst:\n        if min_length is None or len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # initialize the minimum length to infinity\n    for i in lst:\n        if len(i) < min_length: # if the length of the current list is smaller than the minimum length\n            min_length = len(i) # update the minimum length to the current length\n    return min_length # return the minimum length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n\n    # Initialize a variable to store the length of the smallest list\n    min_len = float('inf')\n\n    # Loop through each sublist in the list\n    for sublist in lst:\n        # If the length of the current sublist is less than the minimum length, update the minimum length\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n\n    # Return the minimum length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists and returns the length of the smallest list in the list.\n    '''\n    length = len(lst[0])\n    for i in lst:\n        if len(i) < length:\n            length = len(i)\n    return length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list. \n    '''\n\n    # initialize min_length variable to the length of the first list in the list of lists\n    min_length = len(lst[0])\n    \n    # loop through the list of lists\n    for i in range(1, len(lst)):\n        # check if the length of the current list is less than the current min_length\n        if len(lst[i]) < min_length:\n            # update min_length to the length of the current list\n            min_length = len(lst[i])\n    \n    # return min_length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            if i!= n//i:\n                count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisors = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Flatten the list to one level\n    flat_list = [num for sublist in list1 for num in sublist]\n\n    # Loop through each element in the flat list and add it to the freq_dict\n    for num in flat_list:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Iterate over the flattened list of lists\n    for elem in flatten_list(list1):\n        # If the element is already in the dictionary, increment its frequency\n        if elem in freq:\n            freq[elem] += 1\n        # Otherwise, add the element to the dictionary with frequency 1\n        else:\n            freq[elem] = 1\n    \n    # Return the dictionary of frequency counts\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Iterate over the flattened list\n    for item in flat_list:\n        # If the item is not in the dictionary yet, add it with a frequency of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        # If the item is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[item] += 1\n\n    # Return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if type(item) == list:\n            for sub_item in item:\n                if sub_item in frequency_dict:\n                    frequency_dict[sub_item] += 1\n                else:\n                    frequency_dict[sub_item] = 1\n        else:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store frequency of elements\n    freq_dict = {}\n\n    # Loop through each element in the flattened list\n    for element in list1:\n        # If the element is not already in the dictionary, add it with a frequency of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[element] += 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(lst):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store frequency\n    freq = {}\n    \n    # Loop through each list in the flattened list\n    for item in lst:\n        # Check if the current item is already in the dictionary\n        if item in freq:\n            # If it is, increment its frequency by 1\n            freq[item] += 1\n        else:\n            # If it's not, add it to the dictionary with frequency 1\n            freq[item] = 1\n    \n    # Return the frequency dictionary\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary\n    freq_dict = {}\n\n    # loop through each element in the list\n    for item in list1:\n        # check if the element is already in the dictionary\n        if item in freq_dict:\n            # if it is, increment its count by 1\n            freq_dict[item] += 1\n        else:\n            # if it isn't, add it with a count of 1\n            freq_dict[item] = 1\n\n    # return the dictionary containing the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # loop over each element of the flattened list\n    for element in list1:\n        # if the element is not already in the dictionary, add it with a frequency of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        # otherwise, increment its frequency by 1\n        else:\n            freq_dict[element] += 1\n    # return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product // len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty string to hold the binary equivalent\n    binary_string = ''\n    # loop through each digit of the decimal number\n    while n > 0:\n        # extract the last digit of the decimal number and convert it to binary\n        digit = n % 2\n        # add the binary digit to the beginning of the binary string\n        binary_string = str(digit) + binary_string\n        # remove the last digit from the decimal number\n        n = n // 2\n    # return the binary string with no leading zeros\n    return binary_string.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_num = \"\"\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n = n // 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    binary = \"\"\n    while n > 0: \n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n < 0:\n        n = -n\n        return '-' + decimal_to_binary(n)\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string and remove the last digit\n    num_str = str(num)[:-1]\n    # Initialize the smallest palindrome number and its corresponding index\n    smallest_palindrome = int(num_str)\n    smallest_palindrome_index = num_str.index(smallest_palindrome)\n    \n    # Iterate from the smallest palindrome to the largest palindrome, checking if each number is a palindrome\n    for i in range(smallest_palindrome, 0, -1):\n        # Convert the current palindrome to a string and remove the last digit\n        palindrome_str = str(i)[:-1]\n        # Check if the current palindrome is a palindrome\n        if palindrome_str == palindrome_str[::-1]:\n            # If it is, check if it is the next smallest palindrome\n            if i < 10**(len(palindrome_str)-1):\n                return i\n    \n    # If no palindrome was found, return the largest palindrome\n    return int('9' * (len(num_str) - 1))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Get the maximum length of the number as a string\n    max_length = len(str(num))\n\n    # Iterate through all possible palindromes of the same length\n    for i in range(max_length):\n        # Check if the palindrome is a palindrome of the same length\n        if str(num)[i] == str(num)[::-1][:i+1]:\n            # Check if the palindrome is greater than the current number\n            if int(str(num)[i:i+max_length]) > num:\n                # If it is, return the next smallest palindrome of the same length\n                return int(str(num)[i:i+max_length])\n\n    # If we reach here, there is no next smallest palindrome\n    return -1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n\n    # Check if the number is already a palindrome\n    if num % 10 == 0 and num // 10 == 0:\n        return num + 1\n\n    # Check for even cases\n    if num % 2 == 0:\n        return next_smallest_palindrome(num // 2) * 10\n\n    # Check for odd cases\n    palindrome = num\n    for i in range(1, 10):\n        palindrome = palindrome * 10 + i\n        if palindrome < num:\n            return palindrome\n\n    # If the loop completes, then there is no next smallest palindrome\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    # reverse the number and check if it is a palindrome\n    reversed_num = int(str(num)[::-1])\n    if str(reversed_num) == str(reversed_num)[::-1]:\n        # add 1 to the reversed number and check if it is a palindrome\n        next_palindrome = reversed_num + 1\n        if str(next_palindrome) == str(next_palindrome)[::-1]:\n            return next_palindrome\n        else:\n            return next_smallest_palindrome(num)\n    else:\n        return next_smallest_palindrome(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    if num % 10 == 0:\n        return 10**9\n    else:\n        for i in range(10, 100):\n            for j in range(10, 100):\n                product = i * j\n                if str(product) == str(product)[::-1] and product > num:\n                    return product"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if num % 2 == 0:\n        num += 1\n    while num % 10 == 9:\n        num -= 1\n    while num > 0:\n        if str(num) == str(int(str(num)[::-1])):\n            return num\n        num -= 1\n    return None\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter an integer: \"))\n    next_num = next_smallest_palindrome(num)\n    if next_num is not None:\n        print(f\"The next smallest palindrome of {num} is: {next_num}\")\n    else:\n        print(f\"{num} is already the smallest palindrome.\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def find_next_smallest(n):\n        for i in range(10**9, n, -1):\n            if is_palindrome(i):\n                return i\n\n    return find_next_smallest(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        print(\"Error: input must be an integer.\")\n        sys.exit()\n\n    # Initialize the largest palindrome to start with\n    largest_palindrome = 0\n    num_str = str(num)\n    num_length = len(num_str)\n\n    # Check if the input number is already a palindrome\n    for i in range(num_length):\n        if num_str[i] == num_str[num_length-i-1]:\n            largest_palindrome = int(num_str)\n            break\n\n    # Check if the input number is already a smallest palindrome\n    for i in range(num_length, 0, -1):\n        if num_str[:i] == num_str[:num_length-i] and num_str[i:num_length] == num_str[num_length-i:]:\n            next_palindrome = int(num_str)\n            break\n\n    # Find the next smallest palindrome\n    if next_palindrome == 0:\n        next_palindrome = 10**(num_length-1)\n    else:\n        next_palindrome += 1\n\n    return next_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        num = abs(num)\n    \n    # check if num is a palindrome\n    reverse = 0\n    while num > 0:\n        reverse = 10*reverse + num % 10\n        num //= 10\n    \n    if num == reverse:\n        return num\n    \n    # if num is not a palindrome, check the next smaller palindrome\n    return next_smallest_palindrome(num+1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # find all palindromic numbers smaller than or equal to num\n    palindromic_numbers = []\n    for i in range(num-1, 0, -1):\n        if is_palindrome(i):\n            palindromic_numbers.append(i)\n\n    # find the next smallest palindromic number in the list\n    next_palindrome = sys.maxsize\n    for i in palindromic_numbers:\n        if i < next_palindrome:\n            next_palindrome = i\n    return next_palindrome\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n\n    # convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n\n    # compare the original number with its reversed version\n    return num == int(reversed_num)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return 'Invalid input'\n    left = 1\n    right = n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid-1] < arr[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    if k == 1:\n        return arr[0]\n    return kth_element(arr[:k-1], k-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        raise ValueError('Invalid index')\n    if k == 1:\n        return arr[0]\n    else:\n        left_half = arr[:k-1]\n        right_half = arr[k-1:]\n        return kth_element(left_half, len(left_half))"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return None\n    \n    # Find the leftmost element\n    left = 1\n    right = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If k is in the left half, search in the right half\n        if k == mid:\n            right = mid - 1\n        # If k is in the right half, search in the left half\n        elif k > mid:\n            left = mid + 1\n        # If k is in the middle, return it\n        else:\n            return arr[mid - 1]\n    \n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in two arguments: an array and an integer k.\n    The function returns the kth element of the array. The index of the kth element is 1-based.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if the array is empty or has only one element\n    if len(arr) == 0 or len(arr) == 1:\n        return None\n    # if the array has more than one element, we need to find the kth element\n    else:\n        # loop through the array and keep track of the count of elements\n        count = 0\n        for i in range(len(arr)):\n            count += 1\n            # if we have found the kth element, return it\n            if count == k:\n                return arr[i]\n            # if we have gone through all the elements and haven't found the kth element, return None\n            elif count > k:\n                return None"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case_word += char.lower()\n        else:\n            camel_case_word += char.upper()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n\n    camel_case_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case_word += word[i].lower()\n        else:\n            if word[i].isupper():\n                camel_case_word += '_' + word[i].lower()\n            else:\n                camel_case_word += word[i]\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_word = word.split('_')[0]\n    camel_word = first_word.capitalize()\n    for word in word.split('_')[1:]:\n        camel_word += word.capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        elif char.isupper():\n            camel_case += '_' + char.lower()\n        else:\n            camel_case += char\n    return camel_case.lstrip('_')"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert all words to lowercase\n    word = word.lower()\n    # Split the word into words\n    words = word.split('_')\n    # Join the words together with capitalized first letter\n    camel_case = ''.join([words[0].capitalize(), words[1:]])\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    prev_char = None\n\n    for char in word:\n        if char == \"_\":\n            if prev_char.isupper():\n                camel_case += char.lower()\n            else:\n                camel_case += char\n        else:\n            camel_case += char.upper()\n            prev_char = char.upper()\n\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i > 0 and char.isupper():\n            camel_case += \"_\"\n        camel_case += char.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        else:\n            camel_case += char.upper()\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m: \n        n, m = m, n  # swap n and m if n is greater than m\n    \n    # number of divisors of n\n    num_divisors = 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            num_divisors += 1\n    \n    # number of divisors of m\n    num_divisors += m\n    \n    # calculate the Eulerian number using the formula\n    a = n - m + 2 * num_divisors\n    \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the matrix\n    matrix = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Set the diagonal elements to 1\n    for i in range(1, n+1):\n        matrix[i][i] = 1\n\n    # Set the non-diagonal elements to -1\n    for i in range(1, n):\n        for j in range(1, m):\n            matrix[i][j] = -1\n\n    # Find the Eulerian number a(n, m)\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            matrix[i][j] = matrix[i-1][j] + matrix[i][j-1]\n\n    return matrix[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m) using the following formula:\n    a(n, m) = n * (n + 1) * m / 2\n    \"\"\"\n    return n * (n + 1) * m / 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i**2 + j**2 == n**2:\n                return 1\n    \n    return 0"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function finds the Eulerian number a(n, m) for a given n and m.\n    '''\n    if n == 1:\n        return m\n    elif n == m:\n        return n * m - 1\n    else:\n        return n * (eulerian_num(n-1, m) + eulerian_num(n-m, m))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    This function takes two integers n and m and returns the value of a(n, m), which is the number of possible ways to arrange n objects in m ways.\n\n    The value of a(n, m) can be found using the formula:\n\n    a(n, m) = n! / (m! * (n - m)!)\n\n    where n! is the factorial of n and m! is the factorial of m.\n\n    This formula is derived from the fact that the number of ways to arrange n objects in m ways is equal to the product of the number of objects in the first m positions and the number of objects in the last n - m positions.\n    \"\"\"\n    import math\n    return math.factorial(n) // (math.factorial(m) * math.factorial(n - m))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the matrix\n    matrix = [[0] * m for _ in range(n)]\n\n    # Fill the matrix\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = (i + 1) * (j + 1)\n\n    # Initialize the starting point\n    start = (n - 1) // 2, (m - 1) // 2\n\n    # Initialize the queue\n    queue = [(start, 0)]\n\n    # Initialize the visited set\n    visited = set()\n\n    # Initialize the maximum length\n    max_length = 0\n\n    # Loop until the queue is empty\n    while queue:\n        # Get the current position and length\n        pos, length = queue.pop(0)\n\n        # Check if the position has been visited before\n        if (pos[0], pos[1]) in visited:\n            continue\n\n        # Check if the position is the end point\n        if pos == (0, 0):\n            # Update the maximum length\n            max_length = max(max_length, length)\n            continue\n\n        # Mark the position as visited\n        visited.add((pos[0], pos[1]))\n\n        # Check the four directions to get the next position\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            next_pos = (pos[0] + dx, pos[1] + dy)\n\n            # Check if the next position is within the matrix bounds\n            if 0 <= next_pos[0] < n and 0 <= next_pos[1] < m:\n                # Add the next position to the queue with the updated length\n                queue.append((next_pos, length + 1))\n\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the factorial of n and m\n    n_factorial = 1\n    m_factorial = 1\n    for i in range(1, n+1):\n        n_factorial *= i\n    for i in range(1, m+1):\n        m_factorial *= i\n\n    # Calculate the factorial of (n-m)\n    n_minus_m_factorial = 1\n    for i in range(1, n-m+1):\n        n_minus_m_factorial *= i\n\n    # Calculate the Eulerian number a(n, m)\n    a = n_factorial // (m_factorial * n_minus_m_factorial)\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case\n    if n == 1 or m == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return m\n    elif m == 0:\n        return 1\n    elif m == 1:\n        return n\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = sorted(input_list[i][j])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # sort the sublist in alphabetical order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if type(element) == bool:\n            if element:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if type(item) == bool and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if type(elem) == bool:\n            if elem == True:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item == True:\n                count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Concatenate the lists and tuples\n    combined_list = list(test_list) + list(test_tup)\n    # Convert the combined list back into a tuple\n    combined_tup = tuple(combined_list)\n    return combined_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    combined_list = test_list + test_tup\n    return combined_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # concatenate the lists using the + operator\n    concatenated_list = test_list + test_tup\n    # convert the concatenated list into a tuple\n    concatenated_tuple = tuple(concatenated_list)\n    # return the concatenated tuple\n    return concatenated_tuple"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert test_list to tuple\n    test_tup = tuple(test_list)\n    # Append test_list to test_tup\n    test_tup += test_list\n    # Return the modified test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple and append it to the tuple\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples to modify them in place\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    \n    # Append the list to the tuple\n    test_tup += test_list\n    \n    # Convert the modified tuple back to a list and return it\n    return list(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Append the given list to the test_tup\n    test_tup += (test_list,)\n\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Create a new tuple with the elements of the original tuple and the new list\n    new_tup = test_tup + tuple(test_list)\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n\n    # Merge the two lists into one\n    merged_list = num1 + num2\n    merged_list.sort()\n\n    # Merge the sorted list with the third list\n    merged_list += num3\n    merged_list.sort()\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Returns:\n    A single sorted list containing all elements from num1, num2, and num3.\n    \"\"\"\n    # Merge the three lists into a single sorted list\n    merged_list = heapq.merge(num1, num2, num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n\n    # Merge the three lists into a single sorted list\n    while num1 and num2 and num3:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(num1[0])\n            num1 = num1[1:]\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(num2[0])\n            num2 = num2[1:]\n        else:\n            merged_list.append(num3[0])\n            num3 = num3[1:]\n\n    # Add any remaining elements from the lists\n    if num1:\n        merged_list.extend(num1)\n    if num2:\n        merged_list.extend(num2)\n    if num3:\n        merged_list.extend(num3)\n\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # convert all the lists into sets to remove duplicates\n    num1 = set(num1)\n    num2 = set(num2)\n    num3 = set(num3)\n\n    # merge all the sets using heapq\n    merged_set = heapq.merge(num1, num2, num3)\n\n    # convert the merged set back into a list\n    merged_list = list(merged_set)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as input and merges them into a single sorted list.\n    '''\n    # Merge the three lists into one sorted list\n    merged_list = num1 + num2 + num3\n    \n    # Create a max-heap from the merged list\n    heap = []\n    for i in merged_list:\n        heapq.heappush(heap, i)\n    \n    # Create a new list to store the merged list\n    new_list = []\n    \n    # Pop elements from the heap and append them to the new list\n    while len(heap) > 0:\n        new_list.append(heapq.heappop(heap))\n        \n    return new_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Concatenate all three lists\n    all_lists = [num1, num2, num3]\n    merged_list = []\n\n    # Iterate over all three lists and append their elements to the merged list\n    for list in all_lists:\n        for element in list:\n            merged_list.append(element)\n\n    # Sort the merged list using heapq\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Combine the three lists into one\n    all_numbers = num1 + num2 + num3\n    \n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(all_numbers)\n    \n    # Convert the set back to a list and sort it\n    sorted_numbers = sorted(list(unique_numbers))\n    \n    return sorted_numbers"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # convert the lists to sets to remove duplicates\n    set1 = set(num1)\n    set2 = set(num2)\n    set3 = set(num3)\n\n    # merge the three sets into a single sorted list\n    merged_set = set1.union(set2, set3)\n\n    # convert the merged set back to a list\n    merged_list = list(merged_set)\n\n    # sort the list in ascending order\n    merged_list.sort()\n\n    # return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n\n    # Merge num1 and num2\n    merged_list = num1 + num2\n\n    # Use heapq to find the smallest element from num3\n    heapq.heapify(num3)\n    for num in merged_list:\n        if not heapq.heappop(num3) <= num:\n            heapq.heappush(num3, num)\n\n    # Convert the heap to a list and reverse it\n    final_list = []\n    while num3:\n        final_list.append(heapq.heappop(num3))\n\n    # Reverse the final list and return it\n    return final_list[::-1]"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    def rotate(s, n):\n        # Convert the string to a list of characters\n        chars = list(s)\n        # Rotate the list n positions to the right\n        for i in range(n):\n            chars.append(chars.pop(0))\n        # Convert the list back to a string\n        result = ''.join(chars)\n        return result\n\n    # Initialize the count variable\n    count = 0\n\n    # Iterate n times\n    for i in range(n):\n        # Rotate the binary string\n        rotated_s = rotate(s, i)\n        # Check if there are any odd numbers in the rotated string\n        if any(int(char) % 2!= 0 for char in rotated_s):\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and rotates it n number of times to find the number of odd values in the rotated string.\n    \"\"\"\n    # initialize variables\n    even_count = 0\n    odd_count = 0\n    length = len(s)\n    # loop through the binary string s n times\n    for i in range(n):\n        # create a new binary string with the same length as s\n        rotated_s = s + '0' * (length - len(s))\n        # count the number of even and odd values in the rotated string\n        for j in range(len(rotated_s)):\n            if rotated_s[j] == '0':\n                even_count += 1\n            else:\n                odd_count += 1\n    # return the number of odd values in the rotated string\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize a variable to store the count of odd values\n    count = 0\n    \n    # Loop n number of times\n    for i in range(n):\n        # Create a new string by rotating the original binary string by i positions\n        rotated_s = s[(i+len(s)//2)%len(s):] + s[:(i+len(s)//2)%len(s)]\n        \n        # Check if each character in the rotated string is odd\n        for char in rotated_s:\n            if int(char) % 2 == 1:\n                count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Check if the input string is a binary string\n    if not s.replace('0', '').replace('1', '').isascii():\n        return \"Input string is not a binary string.\"\n\n    # Find the length of the binary string\n    length = len(s)\n\n    # Find the number of rotations\n    rotations = n // length\n    left_rotations = n % length\n\n    # Find the number of odd numbers in the first rotation\n    first_odd = 0\n    for i in range(length):\n        if int(s[i]) % 2 == 1:\n            first_odd += 1\n\n    # Find the number of odd numbers in the left rotations\n    left_odd = 0\n    for i in range(length):\n        if int(s[-(i + 1) % length]) % 2 == 1:\n            left_odd += 1\n\n    # Return the result\n    return f\"{first_odd + left_odd * left_rotations} odd numbers with an odd value after {n} rotations.\""
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of bits\n    bits = [int(bit) for bit in s]\n    # Rotate the bits n times\n    for _ in range(n):\n        bits = bits[1:] + [bits[0]]\n    # Count the number of odd bits\n    count = sum(bit for bit in bits if bit % 2!= 0)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    if n == 1:\n        return s.count('1')\n    else:\n        s = s + s\n        return odd_Equivalent(s,n-1)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        count += s.count('1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert binary string to a list of digits\n    s_list = [int(x) for x in s]\n\n    # Rotate the list by n positions\n    s_list = s_list[n:] + s_list[:n]\n\n    # Count the number of odd numbers in the rotated list\n    count = sum(1 for x in s_list if x % 2 == 1)\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and an integer n as input. \n    It returns the number of odd numbers after rotating the binary string s the given number of times.\n\n    Example:\n    odd_Equivalent(\"101010\", 2) # returns 5\n    odd_Equivalent(\"101010\", 4) # returns 1\n    \"\"\"\n    # Initialize a counter for odd numbers\n    count = 0\n    # Convert the binary string to a list of integers\n    s = list(map(int, list(s)))\n    # Loop n times\n    for i in range(n):\n        # Rotate the binary list\n        s.append(s.pop(0))\n        # Count the odd numbers\n        for num in s:\n            if num % 2!= 0:\n                count += 1\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n): \n    # Initialize variables\n    count = 0\n    odd_count = 0\n    # Convert string to binary\n    binary_s = bin(int(s, 2))[2:]\n    # Loop through each character in the binary string\n    for char in binary_s:\n        # If the character is odd, increment odd_count and count\n        if int(char) % 2 == 1:\n            odd_count += 1\n            count += 1\n        # If the count is greater than or equal to n, increment odd_count and reset count\n        if count >= n:\n            odd_count += 1\n            count = 0\n    # Return the count of odd values\n    return odd_count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create an empty set to store the common elements\n    common = set()\n\n    # Loop through each list in the nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Add the element to the set of common elements\n            common.add(element)\n\n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list containing the common elements in the nested lists.\n    '''\n    # initialize an empty set to store common elements\n    common = set()\n    \n    # loop through each nested list\n    for sublist in nestedlist:\n        # loop through each element in the sublist\n        for element in sublist:\n            # add the element to the set of common elements\n            common.add(element)\n    \n    # convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_list:\n                common_list.remove(nestedlist[i][j])\n            else:\n                common_list.append(nestedlist[i][j])\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for lst in nestedlist:\n        for item in lst:\n            if item not in common:\n                common.append(item)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty dictionary to store common elements\n    common_dict = {}\n\n    # Loop through each nested list\n    for i in range(len(nestedlist)):\n        # Loop through each element in the current nested list\n        for j in range(len(nestedlist[i])):\n            # Check if the current element is already in the dictionary\n            if nestedlist[i][j] in common_dict:\n                # If yes, increment the count by 1\n                common_dict[nestedlist[i][j]] += 1\n            else:\n                # If not, add the current element with a count of 1\n                common_dict[nestedlist[i][j]] = 1\n\n    # Initialize an empty list to store common elements\n    common_list = []\n\n    # Loop through each key in the dictionary\n    for key in common_dict:\n        # Check if the count is greater than 1\n        if common_dict[key] > 1:\n            # If yes, add the key to the common list\n            common_list.append(key)\n\n    # Return the common list\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for item in nestedlist:\n        for subitem in item:\n            common_set.add(subitem)\n    return common_set"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_list.append((nestedlist[i], nestedlist[j]))\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    def find_common(lst1, lst2):\n        \"\"\"\n        Function to find common elements in two lists.\n        \"\"\"\n        common_elements = []\n        for i in lst1:\n            if i in lst2 and i not in common_elements:\n                common_elements.append(i)\n        return common_elements\n\n    # Check if all the elements of the nested list are lists\n    if not all(isinstance(item, list) for item in nestedlist):\n        print(\"All elements must be lists.\")\n        return\n\n    # Initialize an empty set to store common elements\n    common_elements = set()\n\n    # Iterate through each sublist of the nested list\n    for sublist in nestedlist:\n        # Call the find_common function to find common elements in each sublist\n        sublist_common = find_common(sublist, list(common_elements))\n        # Add the common elements to the common_elements set\n        common_elements |= set(sublist_common)\n\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for sublist in nestedlist:\n        common_set = common_set.union(set(sublist))\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty set to store the common elements\n    common = set()\n\n    # Iterate through the nested lists\n    for lst in nestedlist:\n        # Iterate through the elements in each list\n        for elem in lst:\n            # Check if the element is already in the set\n            if elem in common:\n                # If it is, add it to the set\n                common.add(elem)\n            # If it's not, add it to the set\n            else:\n                # Add the element to the set\n                common.add(elem)\n\n    # Return the set of common elements\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        if num.bit_length() <= 32:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Check if the string is a number\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Check if the string contains any non-numeric characters\n    if not text.isdigit():\n        return False\n\n    # Convert the string to an integer and check if it's an integer\n    try:\n        num = int(text)\n        if num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if not list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if not list1[i]:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple to a list\n    num_list = list(nums)\n    # Convert the list to a string\n    num_str = ''.join(map(str, num_list))\n    # Convert the string to an integer\n    result = int(num_str)\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty string to store the integer representation of the given tuple\n    int_str = ''\n    # Loop through the tuple and convert each element to an integer and append it to the string\n    for num in nums:\n        int_str += str(num)\n    # Convert the string to an integer and return the result\n    return int(int_str)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty string to store the final result\n    result = ''\n    # Loop through each number in the tuple\n    for num in nums:\n        # Convert the number to a string and append it to the result string\n        result += str(num)\n    # Convert the result string to an integer and return it\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize an empty string to hold the result\n    result = \"\"\n    # Iterate through each element in the tuple\n    for num in nums:\n        # Convert the element to a string and append it to the result\n        result += str(num)\n    # Convert the result to an integer and return it\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for col in row:\n            try:\n                float(col)\n            except ValueError:\n                continue\n            else:\n                test_list[test_list.index(row)][test_list[test_list.index(row)].index(col)] = float(col)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                raise TypeError(\"Error: Unable to convert element '{}' to float.\".format(item))\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n                row[test_list.index(row)] = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n            except ValueError:\n                if item.isnumeric():\n                    test_list[test_list.index(row)][test_list[test_list.index(row)].index(item)] = float(item)\n                else:\n                    raise TypeError(\"Non-numeric value found in the list.\")"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                sublist.remove(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_sublist.append(float(element))\n            except ValueError:\n                continue\n        result.append(new_sublist)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (str, int, float, complex)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    words = string.split()\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on the space character\n    words = string.split()\n    # create a list to store the split words\n    list_of_words = []\n    # loop through each word and add it to the list\n    for word in words:\n        list_of_words.append(word)\n    # return the list of words\n    return list_of_words"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == arr[i]:\n            continue\n        if arr[i] in arr[i+1:]:\n            return arr[i]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    elif n == 2:\n        if arr[0]!= arr[1]:\n            return None\n        else:\n            return arr[0]\n    else:\n        start = 0\n        end = n-1\n        while start < end:\n            mid = (start + end) // 2\n            if arr[mid] == arr[mid-1]:\n                end = mid\n            else:\n                start = mid+1\n        return arr[start]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    # create a dictionary to store the count of each element in the array\n    count = {}\n\n    # iterate over the array\n    for num in arr:\n        # if the element is already in the dictionary, increment its count\n        if num in count:\n            count[num] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            count[num] = 1\n\n    # iterate over the keys of the count dictionary and find the one that appears only once\n    for num in count:\n        if count[num] == 1:\n            return num\n\n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    first_element = arr[0]\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == first_element:\n            count += 1\n        else:\n            if count == 1:\n                return first_element\n            first_element = arr[i]\n            count = 1\n    if count == 1:\n        return first_element\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Loop through the array and update the frequency dictionary with the count of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Loop through the dictionary and find the first element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            return unique_element\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    n = len(arr)\n    # Traverse the array and check if the current element is present only once.\n    for i in range(n):\n        if arr[i]!= arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for i in arr:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    for i in count:\n        if count[i] == 1:\n            return i"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the elements and their counts\n    counts = {}\n    # Traverse through the array and count the occurrences of each element\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    # Traverse through the dictionary and return the element that appears only once\n    for num in counts:\n        if counts[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # initialize a variable to store the element that appears only once\n    element = None\n\n    # iterate through the array\n    for i in range(len(arr)):\n        # if the current element is equal to the element that appears only once, return it\n        if arr[i] == element:\n            return element\n\n        # if the current element is not equal to the element that appears only once, update the element\n        else:\n            element = arr[i]\n\n    # if the loop completes without finding the element that appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    max_product = float('-inf')\n    max_tuple = (float('-inf'), float('-inf'))\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                max_tuple = (list1[i][0], list1[j][1])\n    \n    return max_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list of tuples and returns the maximum absolute product between pairs of numbers in the tuples.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0] * list1[j][1]) > max_product:\n                max_product = (list1[i][0] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            product = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Function to find the absolute value of a number\n    def abs_value(num):\n        return num if num >= 0 else -num\n\n    # Initialize max_product variable to 0\n    max_product = 0\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each other tuple in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the current pair of tuples\n            product = abs(list1[i] * list1[j])\n\n            # Check if the product is greater than the current max_product\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize variables to store the maximum absolute product and the list of pairs\n    max_product = float('-inf')\n    max_pairs = []\n    \n    # loop through the list of tuples\n    for i in range(len(list1)-1):\n        # loop through the list of tuples starting from the current index\n        for j in range(i+1, len(list1)):\n            # find the absolute difference between the two numbers in each pair and add it to the product\n            pair_product = abs(list1[i][0] * list1[j][1])\n            \n            # update the maximum absolute product and list of pairs if necessary\n            if pair_product > max_product:\n                max_product = pair_product\n                max_pairs = [(list1[i][0], list1[j][1]), (list1[j][0], list1[i][1])]\n    \n    # return the maximum absolute product and list of pairs\n    return max_product, max_pairs"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            product = abs(pair[0] * pair[1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_pair = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            max_product = max(max_product, max_pair)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes in a list of tuples and returns the maximum absolute product of numbers in pairs of tuples.\n    '''\n\n    # Initialize variables to store maximum absolute product\n    max_prod = float('-inf')\n    max_prod_tuple = (float('-inf'), float('-inf'))\n\n    # Iterate through the list of tuples\n    for tup in list1:\n        # Calculate absolute product of first element and second element\n        abs_product = abs(tup[0] * tup[1])\n        # Check if absolute product is greater than current maximum\n        if abs_product > max_prod:\n            # Update maximum absolute product and corresponding tuple\n            max_prod = abs_product\n            max_prod_tuple = tup\n\n    # Return the maximum absolute product and corresponding tuple\n    return max_prod, max_prod_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize sum variable to 0\n    total = 0\n    \n    # Loop through all numbers from 1 to limit\n    for num in range(1, limit + 1):\n        # Check if number is a amicable number\n        if is_amicable(num):\n            # Add number to sum if it is a amicable number\n            total += num\n            \n    # Return sum of all amicable numbers\n    return total\n\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is a amicable number.\n    '''\n    # Check if number is divisible by any number between 1 and num/2\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            return False\n    \n    # If number is divisible by any number, then it is a amicable number\n    return True\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize sum to 0\n    total = 0\n    \n    # Iterate through numbers from 1 to limit\n    for i in range(1, limit+1):\n        # Check if the number is amicable\n        if i == sum_of_proper_divisors(i):\n            # If the number is amicable, add it to the total\n            total += i\n    \n    # Return the total\n    return total\n\ndef sum_of_proper_divisors(n):\n    '''\n    Write a function to calculate the sum of proper divisors of a given number n.\n    '''\n    # Initialize sum to 0\n    total = 0\n    \n    # Iterate through numbers from 1 to n-1\n    for i in range(1, n):\n        # Check if n is a proper divisor of i\n        if n % i == 0:\n            # If n is a proper divisor of i, add i to the total\n            total += i\n    \n    # Return the total\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if num == sum_of_divisors(num):\n            amicable_sum += num\n    return amicable_sum\n\ndef sum_of_divisors(n):\n    '''\n    Write a function to find the sum of all divisors of a given number.\n    '''\n    sum = 1\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            sum += i\n            if i!= n//i:\n                sum += n//i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function takes a number limit as input and returns the sum of all the Amicable Numbers from 1 to the limit.\n\n    Amicable numbers are numbers that are divisible by both 1 and themselves. For example, 28 is an Amicable Number because 28 = 1 + 22. Therefore, we need to find all the Amicable numbers in the range of 1 to the limit and sum them up.\n\n    We can use the following algorithm to find all the Amicable numbers from 1 to the limit:\n\n    1. Create a dictionary to store all the Amicable numbers found so far.\n    2. Loop through all the numbers from 1 to the limit.\n    3. For each number, check if it is divisible by both 1 and itself. If it is, check if it has a corresponding key in the dictionary. If it does, then we have found an Amicable number and we add it to the sum and remove it from the dictionary.\n    4. After looping through all the numbers, we return the sum of all the Amicable numbers found.\n\n    Time Complexity: O(limit*sqrt(limit)), where sqrt(limit) is the square root of the limit. We are looping through all the numbers from 1 to limit and checking if they are Amicable numbers.\n\n    Space Complexity: O(limit), where limit is the range of numbers we are checking for Amicable numbers. We are storing all the Amicable numbers in a dictionary.\n    \"\"\"\n    amicable_numbers = {}\n    sum_of_amicable_numbers = 0\n\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        for j in range(1, limit + 1):\n            if j in amicable_numbers:\n                continue\n            if i + j == limit:\n                if i!= j:\n                    amicable_numbers[i] = True\n                    amicable_numbers[j] = True\n                    sum_of_amicable_numbers += i + j\n                break\n\n    return sum_of_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Loop through each number from 1 to the specified limit\n    for i in range(1, limit+1):\n        # Check if the number is amicable by checking if it is equal to the sum of its proper divisors\n        sum_of_proper_divisors = sum(proper_divisors(i))\n        if i!= sum_of_proper_divisors:\n            # If the number is not amicable, add it to a list of amicable numbers\n            amicable_numbers.append(i)\n\n    # Calculate the sum of the amicable numbers and return it\n    return sum(amicable_numbers)\n\ndef proper_divisors(n):\n    \"\"\"\n    Calculate the proper divisors of a number n.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            if i!= n//i:\n                divisors.append(i)\n            divisors.append(n//i)\n    return divisors"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i!= sum([j for j in range(1, i) if i % j == 0]):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    This function returns the sum of all the amicable numbers between 1 and a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num in amicable_numbers:\n            continue\n        for other_num in range(1, limit+1):\n            if other_num in amicable_numbers:\n                continue\n            if num+other_num == limit and is_amicable(num, other_num):\n                amicable_numbers.append(num)\n                amicable_numbers.append(other_num)\n                break\n    return sum(amicable_numbers)\n\ndef is_amicable(num, other_num):\n    '''\n    This function checks if a number is amicable to another number.\n    '''\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0 and other_num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Check if the limit is a positive integer\n    if not isinstance(limit, int) or limit <= 0:\n        raise ValueError(\"The limit must be a positive integer.\")\n    \n    # Initialize variables to store the sum of all amicable numbers\n    sum_of_amicable_numbers = 0\n    amicable_numbers = []\n    \n    # Loop through all numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Add the number to the list of amicable numbers\n            amicable_numbers.append(num)\n            # Add the sum of the amicable numbers to the sum of all amicable numbers\n            sum_of_amicable_numbers += num\n            \n    # Return the sum of all amicable numbers\n    return sum_of_amicable_numbers\n\ndef is_amicable(num):\n    '''\n    Write a helper function to check if a number is amicable.\n    '''\n    # Check if the number is a positive integer\n    if not isinstance(num, int) or num <= 0:\n        raise ValueError(\"The number must be a positive integer.\")\n    \n    # Check if the number is prime\n    if is_prime(num):\n        # Calculate the sum of all proper divisors of the number\n        sum_of_proper_divisors = sum(proper_divisors(num))\n        # Check if the sum of proper divisors is equal to the number\n        if sum_of_proper_divisors == num:\n            return True\n    return False\n\ndef proper_divisors(num):\n    '''\n    Write a helper function to calculate the proper divisors of a number.\n    '''\n    # Check if the number is a positive integer\n    if not isinstance(num, int) or num <= 0:\n        raise ValueError(\"The number must be a positive integer.\")\n    \n    # Initialize an empty list to store the proper divisors\n    divisors = []\n    \n    # Loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(num ** 0.5) + 1):\n        # Check if the number is divisible by the current number\n        if num % i == 0:\n            # Add the current number to the list of divisors\n            divisors.append(i)\n            # Add the number divided by the current number to the list of divisors\n            divisors.append(num // i)\n    \n    # Return the list of proper divisors\n    return divisors\n\ndef is_prime(num):\n    '''\n    Write a helper function to check if a number is prime.\n    '''\n    # Check if the number is a positive integer\n    if not isinstance(num, int) or num <= 0:\n        raise ValueError(\"The number must be a positive integer.\")\n    \n    # Check if the number is equal to 1\n    if num == 1:\n        return False\n    \n    # Loop through all numbers from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        # Check if the number is divisible by the current number\n        if num % i == 0:\n            # If the number is divisible by the current number, it is not prime\n            return False\n    \n    # If the number is not divisible by any number, it is prime\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        '''\n        Helper function to check if a number is amicable or not.\n        '''\n        if num == 1 or num == limit:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            amicable_sum += num\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize sum variable to zero\n    amicable_sum = 0\n    \n    # Loop through all numbers from 1 to limit\n    for num in range(1, limit+1):\n        \n        # Check if number is amicable\n        if num == amicable_numbers(num):\n            \n            # Add amicable number to sum\n            amicable_sum += num\n            \n    # Return the sum of all amicable numbers\n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    return round(angle.real, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculating the angle of a complex number using the argument method\n    angle = cmath.phase(a + b*1j)\n\n    # converting the angle from radians to degrees\n    angle = angle * 180 / cmath.pi\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle * (180/cmath.pi)\n    return round(angle,2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # calculate the angle of the complex number using the argument of the complex function\n    angle = cmath.phase(a+b*1j)\n\n    # return the angle as a float value\n    return float(angle)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # convert the complex number to polar coordinates\n    r = cmath.sqrt(a**2 + b**2)\n    phi = cmath.phase(a + b*1j)\n    \n    # calculate the angle in degrees\n    angle = (phi*180)/cmath.pi\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        diff = abs(count_0 - count_1)\n        \n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    length = len(string)\n    max_diff = 0\n\n    for i in range(length):\n        for j in range(i + 1, length):\n            if string[i] == '0' and string[j] == '1':\n                diff = j - i\n                if diff > max_diff:\n                    max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    for i in range(n-1):\n        diff = 0\n        for j in range(i+1, n):\n            if string[j] == '0':\n                diff += 1\n            else:\n                diff -= 1\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    length = 0\n    count0 = 0\n    count1 = 0\n    for char in string:\n        if char == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        if count0 > count1:\n            length = max(length, count0 - count1)\n        else:\n            length = max(length, count1 - count0)\n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    count = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        elif string[i] == '1':\n            count -= 1\n\n        if count < 0:\n            count = 0\n            max_diff = max(max_diff, i - count)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string): \n    n = len(string) \n    max_diff = 0 \n\n    for i in range(n): \n        j = i + 1 \n        while j < n: \n            diff = 0 \n            while j < n and string[j] == '0': \n                j += 1 \n                diff += 1 \n            while j < n and string[j] == '1': \n                j += 1 \n                diff -= 1 \n            if diff > max_diff: \n                max_diff = diff \n\n    return max_diff "
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize variables for counting 0s and 1s\n    zero_count = 0\n    one_count = 0\n\n    # Iterate through each character in the string\n    for char in string:\n\n        # If the character is a 0, increment the 0 count\n        if char == '0':\n            zero_count += 1\n\n        # If the character is a 1, increment the 1 count\n        else:\n            one_count += 1\n\n        # If the 0 count is greater than the 1 count, return the difference\n        if zero_count > one_count:\n            return one_count - zero_count\n\n    # If we have iterated through the entire string and have not found a difference, return 0\n    return 0"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        # Update the maximum difference found so far\n        max_diff = max(max_diff, abs(count_0 - count_1))\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize two variables to store the number of 0s and 1s in the entire string\n    total_0s = total_1s = 0\n\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is a 0, increment the number of 0s\n        if char == '0':\n            total_0s += 1\n        # Otherwise, increment the number of 1s\n        else:\n            total_1s += 1\n\n    # Initialize two variables to store the maximum difference and the current difference between the number of 0s and 1s\n    max_diff = 0\n    curr_diff = 0\n\n    # Iterate through each substring of the string\n    for i in range(len(string)):\n        # Initialize a variable to store the number of 0s and 1s in the current substring\n        curr_0s = curr_1s = 0\n\n        # Iterate through each character in the substring\n        for j in range(i, len(string)):\n            # If the character is a 0, increment the number of 0s\n            if string[j] == '0':\n                curr_0s += 1\n            # Otherwise, increment the number of 1s\n            else:\n                curr_1s += 1\n\n            # Calculate the difference between the number of 0s and 1s in the substring and the total number of 0s and 1s in the entire string\n            curr_diff = abs(curr_0s - curr_1s - total_0s + total_1s)\n\n            # Update the maximum difference if the current difference is greater than the maximum difference\n            if curr_diff > max_diff:\n                max_diff = curr_diff\n\n    # Return the maximum difference between the number of 0s and 1s in any sub-string of the given binary string\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    for i in range(1,a+1): \n        if a%i==0 and b%i==0: \n            print(\"The sum of common divisors is:\",a+b//i) "
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Function to find the greatest common divisor of two numbers\n    def gcd(a, b):\n        \"\"\"\n        Find the greatest common divisor of two numbers.\n        \"\"\"\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    # Find the common divisors of the two numbers\n    a_divisors = set()\n    b_divisors = set()\n\n    # Calculate the number of divisors of each number\n    for i in range(1, a + 1):\n        if a % i == 0:\n            a_divisors.add(i)\n    for j in range(1, b + 1):\n        if b % j == 0:\n            b_divisors.add(j)\n\n    # Find the common divisors and their sum\n    common_divisors = a_divisors.intersection(b_divisors)\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_divisors(a, b):\n    \"\"\"\n    Returns a list of the common divisors of a and b.\n    \"\"\"\n    divisors = []\n    i = 1\n    while i <= a and i <= b:\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n        i += 1\n    return divisors\n\ndef sum(a, b):\n    \"\"\"\n    Returns the sum of the common divisors of a and b.\n    \"\"\"\n    divisors = common_divisors(a, b)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    def gcd(a, b):\n        '''\n        Write a python function to find the greatest common divisor of two given numbers.\n        '''\n        while b:\n            a, b = b, a % b\n        return a\n\n    def common_divisors(a, b):\n        '''\n        Write a python function to find the common divisors of two given numbers.\n        '''\n        divisors = []\n        for i in range(1, min(a, b) + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n        return divisors\n\n    common_div = gcd(a, b)\n    sum_div = sum(common_divisors(a, b))\n\n    return sum_div"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Calculate the sum of all divisors of a and b\n    total_divisors = sum(set(range(1, a+1)) & set(range(1, b+1)))\n    \n    # Return the sum of common divisors\n    return total_divisors - (a*b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers using the Euclidean algorithm.\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        if a % b == 0:\n            return b + sum(b, a % b)\n        else:\n            return sum(b, a)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = set()\n\n    # calculate the sum of divisors of a and b\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n\n    # calculate the sum of divisors of a and b that are present in both a and b\n    for i in range(max(a, b) + 1, min(a, b) * 2):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a Python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # First, find all common divisors of a and b\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # Then, calculate the sum of all common divisors\n    sum_divisors = sum(divisors)\n\n    return sum_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n\n    # Function to find the gcd of two numbers\n    def gcd(a, b):\n        \"\"\"\n        This function takes two numbers as input and returns their gcd.\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    # Calculate the sum of common divisors\n    sum_cd = sum([gcd(a, b) for b in range(min(a, b), max(a, b) + 1)])\n\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    This function takes two numbers as input and returns their sum of their common divisors. \n    '''\n    divisor_list = []\n    num1 = a\n    num2 = b\n    \n    # Get the list of common divisors of the two numbers\n    while num1 > 0:\n        if num1 % num2 == 0:\n            divisor_list.append(num2)\n        num1, num2 = num2, num1 % num2\n        \n    # Calculate the sum of common divisors\n    sum_divisor = sum(divisor_list)\n    \n    return sum_divisor"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1 == 1:\n            result = result + x\n        x = x << 1\n        y = y >> 1\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    \n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n            \n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Returns a list of words from the input list `words` that are longer than `n` characters long.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has a certain number of rows and columns\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if each row, column, and diagonal of the matrix are all the same\n    for i in range(len(my_matrix)):\n        if not all(my_matrix[i][j] == my_matrix[j][i] for j in range(len(my_matrix))):\n            return False\n\n    # Check if the matrix has any duplicate values\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= '.' and my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check the dimensions of the matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check that the matrix contains only integers\n    for row in my_matrix:\n        for entry in row:\n            if not isinstance(entry, int):\n                return False\n    \n    # Check if the matrix is a magic square\n    sum_rows = sum(sum(row) for row in my_matrix)\n    sum_cols = sum(sum(my_matrix[j][i] for j in range(len(my_matrix))) for i in range(len(my_matrix[0])))\n    if sum_rows == sum_cols == 10:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if the sum of each row and column is equal to the sum of the matrix\n    if row_sums == col_sums:\n        return True\n\n    # Check for a magic square pattern\n    magic_square = [\n        [16, 2, 8],\n        [4, 10, 12],\n        [12, 2, 6]\n    ]\n\n    # Check if the matrix is a magic square\n    if my_matrix == magic_square:\n        return True\n\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    magic_sum = 0\n    for i in range(n):\n        for j in range(n):\n            magic_sum += my_matrix[i][j]\n    # Check if magic sum is equal to n^2 + 1\n    if magic_sum == n*n + 1:\n        for i in range(n):\n            row_sum = sum(my_matrix[i])\n            if row_sum!= magic_sum:\n                return False\n        for j in range(n):\n            col_sum = sum([my_matrix[k][j] for k in range(n)])\n            if col_sum!= magic_sum:\n                return False\n        # Check if the main diagonal and secondary diagonal have the same sum\n        main_diagonal_sum = my_matrix[0][0]\n        secondary_diagonal_sum = my_matrix[0][n-1]\n        for i in range(n):\n            main_diagonal_sum += my_matrix[i][i]\n            secondary_diagonal_sum += my_matrix[i][n-1-i]\n        if main_diagonal_sum!= magic_sum or secondary_diagonal_sum!= magic_sum:\n            return False\n    else:\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_sum = 0\n    for i in range(rows):\n        for j in range(cols):\n            magic_sum += my_matrix[i][j]\n    if magic_sum == rows*cols*100:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Calculate the sum of each row and column in the matrix\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if the sum of each row and column is equal to the sum of the matrix\n    if row_sum == col_sum:\n        # Check if the sum of the diagonals is equal to the sum of the matrix\n        if sum(row_sum) == sum(my_matrix) ** 2:\n            return True\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_sum = sum(sum(row) for row in my_matrix)\n    if magic_sum == 0:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if sum(my_matrix[i][j:])!= magic_sum - sum(my_matrix[i][:j]):\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the size of the matrix\n    size = len(my_matrix)\n    # Check if the matrix is a square\n    if size!= size**2:\n        return False\n    # Check if each row and column is the same length\n    for i in range(size):\n        if len(my_matrix[i])!= size:\n            return False\n        if len(my_matrix[j])!= size:\n            return False\n    # Check if each pair of adjacent elements is different\n    for i in range(size):\n        for j in range(size):\n            if my_matrix[i][j]!= my_matrix[i][j+1] or my_matrix[i][j]!= my_matrix[i+1][j] or my_matrix[i][j]!= my_matrix[i+1][j+1]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    n = len(my_matrix)\n    m = len(my_matrix[0])\n\n    # Check if the matrix is a square\n    if n!= m:\n        return False\n\n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int):\n                return False\n\n    # Check if each row has the same elements\n    for i in range(n):\n        row = my_matrix[i]\n        for j in range(m):\n            if row[j]!= i + j + 1:\n                return False\n\n    # Check if each column has the same elements\n    for j in range(m):\n        col = [row[j] for row in my_matrix]\n        for i in range(n):\n            if col[i]!= i + j + 1:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    # Check if all the rows have the same length\n    for row in my_matrix:\n        if len(row)!= len(my_matrix[0]):\n            return False\n    \n    # Check if all the columns have the same length\n    for col in range(len(my_matrix[0])):\n        col_sum = sum([row[col] for row in my_matrix])\n        if col_sum!= sum([row[i] for i in range(len(my_matrix))]):\n            return False\n    \n    # Check if the first diagonal has the same sum as the last diagonal\n    diag_sum = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    if diag_sum!= sum([my_matrix[i][-i-1] for i in range(len(my_matrix))]):\n        return False\n    \n    # Check if the second diagonal has the same sum as the first diagonal\n    if diag_sum!= sum([my_matrix[i][-i-1] for i in range(len(my_matrix))]):\n        return False\n    \n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = 0\n    max_item = None\n\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    # Count the frequency of each item in the list\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    return [key for key, value in freq_dict.items() if value == max_freq]"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    \n    max_freq = 0\n    max_num = None\n    for num in count:\n        if count[num] > max_freq:\n            max_freq = count[num]\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n    for item, freq in freq.items():\n        if freq == max_freq:\n            return item\n    return None"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result.append(str1[i])\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # initialize an empty list to store the reversed string\n    rev_str = []\n    # iterate over the string in reverse order\n    for i in range(len(str1)-1, -1, -1):\n        # check if the current character is a vowel\n        if str1[i] in vowels:\n            # add it to the reversed string if it is not already there\n            if str1[i] not in rev_str:\n                rev_str.append(str1[i])\n    # convert the list of reversed vowels back to a string and return it\n    return ''.join(rev_str)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    reversed_string = \"\"\n    for char in string:\n        if char.lower() not in vowels:\n            reversed_string += char\n    return reversed_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    # Split the string into individual characters\n    str1_list = list(str1)\n    # Initialize an empty string to store the reversed vowels\n    result = ''\n    # Loop through each character in the string\n    for char in str1_list:\n        # If the character is a vowel, append it to the result string\n        if char in vowels:\n            result += char\n    # Reverse the result string and return it\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char in vowels and char not in new_str:\n            new_str = char + new_str\n        elif char not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    vowels_str = ''.join(vowels_list)\n    vowels_str_reverse = vowels_str[::-1]\n    return vowels_str_reverse"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result = char + result\n        else:\n            result = result + char\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string_format = '{0}, {1}, {2}'.format(*tup1)\n    return string_format"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Using join() function to concatenate the elements of the tuple into a string\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_nums = [num for num in nums if num < 0]  # list comprehension to filter out negative numbers\n    return sum(neg_nums)  # sum of negative numbers"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # initialize sum variable to zero\n    neg_sum = 0\n    # loop through the list of numbers\n    for num in nums:\n        # check if the number is negative\n        if num < 0:\n            # add the negative number to the sum variable\n            neg_sum += num\n    # return the sum of the negative numbers\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * n) ** 0.5"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((n*n) + (16*n) - 1) // 16"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((n * (3 * n - 1)) // 2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Function to find the nth hexagonal number\n    def hexagonal_num_helper(n, a=1, b=6, c=15, d=20, e=22):\n        if n == 1:\n            return a\n        elif n == 2:\n            return b\n        elif n == 3:\n            return c\n        elif n == 4:\n            return d\n        elif n == 5:\n            return e\n        else:\n            return hexagonal_num_helper(n-1, d-1, c, b-2, a+e-b-d, c+2)\n\n    # Return the nth hexagonal number\n    return hexagonal_num_helper(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*n*2*n - n*n//2 + 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = (3 * n - 1) / 2   # Calculate the first term in the series\n    b = 2 * n - 1        # Calculate the second term in the series\n    c = a + b             # Calculate the sum of the first two terms\n    return a + b + c      # Return the sum of all three terms"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list to make it mutable\n    nums = list(nums)\n    # Count the number of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    # Calculate the ratio of zeroes to non-zeroes and return it as a float\n    if non_zero_count == 0:\n        return 0.0\n    else:\n        return float(zero_count) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n\n    # Convert the list to an array and count the number of zeros and non-zeros\n    zeros = nums.count(0)\n    ones = len(nums) - zeros\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zeros / ones\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums)) # initialize an array of zeros\n    \n    for num in nums:\n        if num == 0: # increment the count of zeros if the number is zero\n            zeros[0] += 1\n    \n    non_zeros = len(nums) - zeros[0] # calculate the number of non-zero elements in the array\n    \n    return zeros[0] / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))  # initialize array of zeros\n    for num in nums:\n        count[num] += 1  # count number of non-zeroes at each index\n    zero_count = sum(count) / len(nums)  # calculate ratio of zeroes to non-zeroes\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*len(nums))\n    for num in nums:\n        count[int(num)] += 1\n    total = 0\n    for count_i in count:\n        total += count_i\n    return total / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    zero_ratio = zeros / non_zeros\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for i in arr:\n        if i == 0:\n            count += 1\n    zero_count = count/len(arr)\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    non_zeros = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num)] += 1\n        else:\n            non_zeros[non_zeros.index(num)] += 1\n    return zeros[0] / non_zeros[0]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # convert the array to a list\n    nums = list(nums)\n\n    # create an empty dictionary to store the count of non-zeroes and zeroes\n    count_dict = {}\n\n    # loop through the list and count the non-zeroes and zeroes\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # calculate the ratio of zeroes to non-zeroes\n    zero_ratio = sum([1 for num in count_dict.values() if num == 0]) / len(count_dict.values())\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            zeros.append(0)\n    zero_count = sum(zeros)\n    non_zero_count = len(nums)\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def check_power_of_two(num):\n        '''\n        A helper function to check whether a number is a power of 2 or not.\n        '''\n        return num > 0 and (num & (num - 1)) == 0\n\n    def check_sum_of_powers_of_two(num):\n        '''\n        A helper function to check whether a number can be represented as sum of non-zero powers of 2 or not.\n        '''\n        return check_power_of_two(num) and (num & (num >> 1)) == 0\n\n    return check_sum_of_powers_of_two(n)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n % 2!= 0:\n        return False\n    \n    bit = n & 1 # take the last bit of the number\n    res = 0 # initialize the sum of non-zero powers of 2\n    \n    while bit!= 0:\n        if bit == 1:\n            res += 2\n        n >>= 1 # shift the last bit to the left\n        bit = n & 1 # take the last bit of the number\n        \n    return res"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Check if the number is less than 2^32\n    if n < 2 ** 32:\n        # Create a set to store the powers of 2\n        powers_of_two = set()\n        # Loop through the binary representation of the number\n        for bit in bin(n)[2:]:\n            # If the bit is 1, add it to the set of powers of 2\n            if bit == '1':\n                powers_of_two.add(int(bit))\n        # Check if the sum of powers of 2 is equal to the original number\n        return sum(powers_of_two) == n\n    else:\n        # If the number is too big to fit in a 32-bit signed integer, return False\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Initialize two variables to keep track of sum and power count\n    sum = 0\n    power_count = 0\n    \n    # Loop through each bit of the binary representation of n\n    for bit in bin(n)[2:]: \n        # If bit is 1, add power of 2 to sum and increment power count\n        if bit == '1': \n            sum += 2**power_count\n            power_count += 1\n        \n        # If power count becomes 32, stop looping and return True\n        elif power_count == 32: \n            return True\n    \n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    # Loop from 2 to sqrt(n) and check if the number can be written as a sum of non-zero powers of 2\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            if n / i == 1:\n                return True\n            elif (n / i) % 2 == 0:\n                return False\n    # If the number cannot be written as a sum of non-zero powers of 2, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    for i in range(1, 32):\n        if n & (1 << i):\n            if is_Sum_Of_Powers_Of_Two(n ^ (1 << i)):\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if n is already a power of 2 or not\n    if n & (n - 1) == 0: \n        return True\n    else:\n        # Calculate the sum of non-zero powers of 2\n        power_of_two_sum = 0\n        power = 1\n        while power <= n:\n            if power == n:\n                power_of_two_sum += power\n                power *= 2\n            else:\n                power_of_two_sum += power\n                power <<= 1\n\n        # Check if the given number can be represented as sum of non-zero powers of 2 or not\n        if n == power_of_two_sum:\n            return True\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n    else:\n        return is_Sum_Of_Powers_Of_Two(3*n+1)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # check if the number is 0\n    if n == 0: \n        return True\n    \n    # check if the number is 1\n    if n == 1: \n        return False\n    \n    # initialize a variable to store the sum of powers of 2\n    sum_of_powers_of_two = 0\n    \n    # loop through the number of bits required to represent n\n    for i in range(32):\n        \n        # check if the bit at position i is 1\n        if n & (1 << i)!= 0:\n            \n            # add the bit to the sum of powers of 2\n            sum_of_powers_of_two += 2**i\n            \n    # check if the number is equal to the sum of powers of 2\n    if n == sum_of_powers_of_two: \n        return True\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # loop through all the possible powers of 2 \n    for i in range(1,32):\n        # if the given number can be represented as sum of i powers of 2, return True\n        if (n & (1<<i))!= 0:\n            return True\n    # if no such number exists, return False\n    return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265358979323846\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # using the formula for circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    print(\"The circumference of the circle is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r  # formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \n    Parameters:\n    r (float): the radius of the circle\n    \n    Returns:\n    float: the circumference of the circle\n    \n    \"\"\"\n    # calculate the circumference\n    circumference = 2 * 3.14159 * r\n    \n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # formula for circumference of circle\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened += sublist\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    # flatten the list of lists\n    flat_list = [num for sublist in test_list for num in sublist]\n\n    # convert the flattened list into a set of unique numbers\n    unique_nums = set(flat_list)\n\n    return unique_nums"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    # Initialize an empty set\n    result = set()\n    # Loop over each element in the list of lists\n    for sublist in test_list:\n        # Loop over each element in the sublist\n        for element in sublist:\n            # Add the element to the result set\n            result.add(element)\n    # Convert the result set back to a list\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of numbers using the pancake sort algorithm.\n    The algorithm sorts the list in ascending order using the following steps:\n\n    - Start with the largest element and swap it with the last element of the list.\n    - Move the largest element to the beginning of the list and decrement its size.\n    - Repeat step 2 for each element in the list except for the largest element.\n\n    This process is repeated until the list is sorted.\n\n    Args:\n    nums: a list of numbers\n\n    Returns:\n    None\n    '''\n\n    # The maximum size of the pancake is the length of the list minus one.\n    max_size = len(nums) - 1\n\n    # Repeat this process until the maximum size is zero.\n    while max_size > 0:\n        # Start with the largest element and swap it with the last element.\n        max_index = 0\n        for i in range(1, max_size + 1):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # Move the largest element to the beginning of the list.\n        nums[max_index], nums[max_size] = nums[max_size], nums[max_index]\n\n        # Decrement the maximum size and continue with the next iteration.\n        max_size -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize the length of the list and the swapped flag\n    n = len(nums)\n    swapped = True\n\n    # Iterate until the swapped flag is False\n    while swapped:\n        # Reset the swapped flag\n        swapped = False\n\n        # Iterate over the list from the second to the nth element\n        for i in range(1, n-1):\n            # If the current element is greater than the next element, swap them\n            if nums[i] < nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Helper function to reverse the order of elements in the list\n    def reverse_list(lst):\n        return lst[::-1]\n\n    # Helper function to swap two elements in the list\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n\n    # Helper function to perform pancake sort on the list\n    def pancake_sort_helper(lst, start):\n        # Find the length of the list\n        n = len(lst)\n\n        # Find the maximum element in the list\n        max_elem = max(lst[:start])\n\n        # Find the index of the maximum element in the list\n        max_index = lst.index(max_elem)\n\n        # Reverse the list\n        reverse_lst = reverse_list(lst)\n\n        # Swap the maximum element with the first element of the reversed list\n        swap(reverse_lst, 0, max_index)\n\n        # Update the start index\n        start += 1\n\n        # Base case: the list is sorted\n        if start == n:\n            return lst\n\n        # Recursively sort the remaining elements\n        pancake_sort_helper(reverse_lst, start)\n\n    # Sort the list using the helper function\n    pancake_sort_helper(nums, 0)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Initialize a list to keep track of the indices of the largest pancake in each iteration\n    pancake_indices = [0] * n\n\n    for i in range(n):\n        # Find the index of the largest pancake in the remaining unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # If the largest pancake has not been swapped with the current pancake, swap them\n        if max_index!= i:\n            nums[max_index], nums[i] = nums[i], nums[max_index]\n\n            # Update the pancake indices list\n            for k in range(n):\n                if k < i:\n                    pancake_indices[k] -= 1\n                elif k == i:\n                    pancake_indices[k] = i\n                elif k > i:\n                    pancake_indices[k] += 1\n\n    # Reverse the sorted list to obtain the sorted order\n    nums.reverse()\n\n    # Extract the sorted order from the pancake indices list\n    sorted_order = [nums[i] for i in pancake_indices]\n\n    return sorted_order"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def pancake_sort_helper(nums, k):\n        '''\n        Helper function to sort the list using the pancake sort algorithm.\n        '''\n        # Move the largest element to the end\n        nums[k], nums[-1] = nums[-1], nums[k]\n        # Decrease the size of the list by 1\n        k -= 1\n        # Recursively sort the sublist from index 0 to k\n        pancake_sort_helper(nums, k)\n\n    # Call the helper function with the size of the list as k\n    pancake_sort_helper(nums, len(nums)-1)\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n\n    The pancake sort algorithm is a variation of the bubble sort algorithm that uses a technique called the \"pancake\" technique.\n    In pancake sort, the array is divided into two parts - one with the smallest elements and one with the largest elements. \n    The algorithm compares the two parts and swaps them if the smaller part is greater than the larger part. This process is repeated until the two parts are of equal size.\n\n    This algorithm has a time complexity of O(n^2) and space complexity of O(1), which is better than bubble sort's O(n^2) time complexity and O(1) space complexity.\n\n    Example:\n    pancake_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])\n    Output: [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]\n    '''\n\n    # Initialize the variables for swapping and iterating\n    swapped = True\n    end = len(nums) - 1\n\n    while swapped and end > 0:\n        # Find the index of the smallest element in the first half\n        min_idx = 0\n        for i in range(1, end + 1):\n            if nums[i] < nums[min_idx]:\n                min_idx = i\n        \n        # Find the index of the largest element in the second half\n        max_idx = end\n        for i in range(end - 1, min_idx - 1, -1):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        \n        # Swap the elements if they are in the wrong order\n        if min_idx!= max_idx:\n            nums[min_idx], nums[max_idx] = nums[max_idx], nums[min_idx]\n        \n        # Decrement the end index to continue the process\n        swapped = nums[end] < nums[min_idx]\n        end -= 1\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Get the length of the list\n    n = len(nums)\n\n    # Create a pancake with n cubes\n    pancake = [n] * n\n\n    # Perform the pancake sort\n    for i in range(n - 1, 0, -1):\n        # Find the largest element in the sublist [0, i]\n        largest = i\n        for j in range(i):\n            if nums[j] > nums[largest]:\n                largest = j\n        # Swap the largest element with the first element of the sublist\n        nums[largest], nums[i] = nums[i], nums[largest]\n        # Reverse the sublist [0, i]\n        pancake[largest], pancake[i] = pancake[i], pancake[largest]\n\n    # Reverse the pancake to restore the sorted order\n    pancake = pancake[::-1]\n\n    # Rearrange the sorted list\n    for i in range(n):\n        nums[i] = nums[pancake[i]]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the largest number in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap the largest number with the first unsorted number\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # reverse the unsorted part of the array to put it in ascending order\n        for j in range(i+1, n):\n            nums[i], nums[j] = nums[j], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Start from the end and sort each sublist in descending order\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the sublist\n        max_idx = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the last element of the sublist\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    # The sorted list is in nums[0] to nums[n-1]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the maximum element in the list\n    max_num = max(nums)\n\n    # Sort the list in decreasing order\n    for i in range(len(nums)):\n        # Find the index of the maximum element\n        max_index = nums.index(max_num)\n\n        # Swap the maximum element with the last element in the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Find the new maximum element\n        max_num = max(nums)\n\n    # Print the sorted list\n    print(nums)"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    # initialize count variable to 0\n    count = 0\n\n    # iterate through each element in the tuple\n    for i in Input:\n\n        # if the element is a list, increment count by 1\n        if isinstance(i, list):\n            count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # Initialize two variables to store the maximum difference found so far\n    max_diff = float('-inf')\n    max_diff_index = -1\n    \n    # Iterate over the array\n    for i in range(len(arr)):\n        # Iterate over the remaining elements of the array\n        for j in range(i+1, len(arr)):\n            # Calculate the absolute difference between the elements\n            diff = abs(arr[i] - arr[j])\n            \n            # If the absolute difference is greater than the current maximum difference, update the variables\n            if diff > max_diff:\n                max_diff = diff\n                max_diff_index = i\n                \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Find the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n\n    # Calculate the maximum difference between any two elements\n    max_diff = 0\n    for i in range(len(arr)):\n        diff = abs(arr[i] - min_val)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff_pairs = []\n    for pair in combinations(arr, 2):\n        diff = abs(pair[0] - pair[1])\n        diff_pairs.append(diff)\n    return max(diff_pairs)"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are not zero\n    if a == 0 or b == 0:\n        return None\n    \n    # If a is not equal to 1, then it has a root in the form y = -b/a\n    if a!= 1:\n        y = -b // a\n        return (None, y)\n    \n    # If a is equal to 1, then it has two distinct roots in the form x = -n/b and x = n/b\n    x1 = -n // b\n    x2 = n // b\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-n, n + 1):\n        for y in range(-n, n + 1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Find the discriminant and check if it's positive\n    d = b ** 2 - 4 * a * n\n\n    if d > 0:\n        # Solve for x and y and check if they are real numbers\n        x1 = (-b + d ** 0.5) / (2 * a)\n        x2 = (-b - d ** 0.5) / (2 * a)\n\n        if x1.is_integer() and x2.is_integer():\n            return (int(x1), int(x2))\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_solution(a, b, n):\n    \"\"\"\n    Find x and y that satisfy ax + by = n using the Newton-Raphson method.\n    \"\"\"\n    x = y = 1  # initial guess\n    while True:\n        fx = a * x + b * y - n  # function value at x and y\n        dx = fx / (a * x + b)  # derivative at x\n        dy = fx / b  # derivative at y\n        x -= dx  # update x\n        y -= dy  # update y\n        if abs(dx) < 10e-6 and abs(dy) < 10e-6:  # convergence criterion\n            return (x, y)  # return solution if within tolerance"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    x = -n // b\n    y = a * x\n    if a * x + b * y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the equation is solvable\n    if b == 0:\n        return None\n    \n    # Find the two solutions\n    x1 = -n / b\n    x2 = (n - a * x1) / b\n    \n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return None\n    else:\n        x_1 = -n / b\n        y_1 = a * x_1\n        x_2 = (n - b * x_1) / a\n        y_2 = b * x_2\n        return (x_1, y_1), (x_2, y_2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the given equation has no solutions\n    if b == 0:\n        return None\n\n    # Calculate the discriminant\n    d = b ** 2 - 4 * a * n\n\n    # Check if the given equation has two real solutions\n    if d > 0:\n        x1 = (-b + d ** 0.5) / (2 * a)\n        x2 = (-b - d ** 0.5) / (2 * a)\n        return (x1, x2)\n    # Check if the given equation has one real solution\n    elif d == 0:\n        x = -b / (2 * a)\n        return (x, x)\n    # Check if the given equation has no solutions\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    if b == 0:\n        return None\n\n    # Finding the discriminant\n    discriminant = b**2 - 4*a*n\n\n    # If discriminant is negative, there is no solution\n    if discriminant < 0:\n        return None\n\n    # If discriminant is zero, x = -b/2a and y = n/2b\n    elif discriminant == 0:\n        x = -b/2*a\n        y = n/2*b\n        return (x, y)\n\n    # If discriminant is positive, there are two solutions\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        y1 = x1*a + n*x1*b\n        y2 = x2*a + n*x2*b\n        return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the discriminant\n    disc = b**2 - 4*a*n\n    # check if the discriminant is positive\n    if disc > 0:\n        # calculate the two solutions\n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n        return (x1, x2)\n    # check if the discriminant is zero\n    elif disc == 0:\n        return ((-b)/(2*a), (-b)/(2*a))\n    else:\n        return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through the list2\n    for item in list2:\n        # loop through the list1 and remove the item\n        for index in range(len(list1)):\n            if list1[index] == item:\n                del list1[index]\n                break  # stop looping through the list1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    Parameters:\n    - list1: the list to remove elements from\n    - list2: the list with the elements to remove\n\n    Returns:\n    - the updated list1 without the elements in list2\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list2:\n        if item in list1:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n\n    # Create a set to store the elements present in list2\n    set2 = set(list2)\n\n    # Loop through the elements of list1 and remove those present in list2\n    for i in range(len(list1)):\n        if list1[i] in set2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Loop through each element of list1\n    for element in list1:\n\n        # Check if the element is present in list2\n        if element in list2:\n\n            # If it is, remove it from list1\n            list1.remove(element)\n\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n <= 2:\n        return 0\n    else:\n        return n - 2 * sum_series(n - 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n\n    sum_series = 0\n    for i in range(n // 2):\n        sum_series += n - 2*i\n\n    return sum_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    total = 0\n    while i < n // 2:\n        total += (n - 2 * i)\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return 0\n    return n + sum_series(n - 2 * (n // 2 + 1))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    if n % 2 == 0:\n        return 0\n\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += (n - 2*i)\n\n    return series_sum\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n < 2:\n        return n\n    else:\n        return n + sum_series(n-2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n*(n-1)//2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        sum_result = 0\n        i = 0\n        while n-2*i >= 0:\n            sum_result += n-2*i\n            i += 1\n        return sum_result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Convert the length and number of sides to radians and store them in variables\n    theta = pi / l\n    # Calculate the area of the polygon using the formula A = (s/2) * (tan(theta/2))^2\n    area = (s/2) * (tan(theta/2))**2\n    # Return the calculated area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s * tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += s * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(i * pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/l)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (tan(i*2*pi/l) ** 2) * s\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i*360/l\n        area += s*tan(angle*pi/180)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the length of a side\n    side = s / l\n\n    # Calculate the area using the formula for the area of a regular polygon\n    area = (l * s) / (4 * tan(pi / l))\n\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    i = 1\n    while i <= int(math.sqrt(n)): \n        if n % i: \n            i += 1 \n        else: \n            n //= i \n            divs.append(i)\n    if n > 1: \n        divs.append(n)\n    return divs\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n using the Euclidean algorithm\n    def sum_divisors(n):\n        if n < 2:\n            return 0\n        s = 1\n        d = 2\n        while d <= n:\n            if n % d == 0:\n                s += d\n                n //= d\n            else:\n                d += 1\n        return s\n\n    # Check if the sum of the divisors of n and 2*n are the same\n    return sum_divisors(n) == sum_divisors(2*n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_set = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_set.add(i)\n            if n//i!= i:\n                div_set.add(n//i)\n    if sum(div_set) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    return all(i in divisors for i in range(1, n+1))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i + n // i\n    \n    # Check if the sum of the divisors is equal to n\n    if div_sum == n:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Function to calculate the sum of the divisors of a number \n    def sum_of_divisors(num): \n        div_list = [] \n        for i in range(1, num+1): \n            if num % i == 0: \n                div_list.append(i) \n        return sum(div_list)\n\n    # Function to check if the sum of the divisors of two numbers is the same or not\n    def check_div_sum(num1, num2): \n        sum1 = sum_of_divisors(num1) \n        sum2 = sum_of_divisors(num2) \n        if sum1 == sum2: \n            return True \n        else: \n            return False\n\n    # Testing the function\n    print(check_div_sum(6, 12))  # Output: True\n    print(check_div_sum(15, 24))  # Output: True\n    print(check_div_sum(20, 30))  # Output: True\n    print(check_div_sum(25, 35))  # Output: False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i + n // i\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Function to find the sum of divisors of a number\n    def sum_divisors(num):\n        divisors = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divisors.append(i)\n                if i!= num//i:\n                    divisors.append(num//i)\n        return sum(divisors)\n\n    # Calculate the sum of divisors of n\n    n_divisors = sum_divisors(n)\n\n    # Calculate the sum of divisors of n-1\n    n_minus_one_divisors = sum_divisors(n-1)\n\n    # Check if the sum of divisors of n and n-1 is the same\n    if n_divisors == n_minus_one_divisors:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer n and returns True if the sum of the divisors of n is the same, and False otherwise. \n    '''\n    \n    # Calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    \n    # Compare the sum of the divisors with the original value of n\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i\n            if n // i!= i:\n                divisor_sum += n // i\n\n    # Check if the sum of the divisors of n is the same as n\n    return divisor_sum == n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through each character in the string\n    for i in range(26):\n        # If the current character is the same as the corresponding character in the English alphabet\n        if str1[i] == chr(ord('a') + i):\n            # Increment the count by 1\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    count_dict = {}\n\n    for i in range(26):\n        count_dict[chr(65 + i)] = 0\n\n    for char in str1:\n        if char.isalpha():\n            if char.lower() in count_dict:\n                count_dict[char.lower()] += 1\n\n    count = 0\n    for count in count_dict.values():\n        if count > 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    for char in alphabet:\n        if str1.lower().count(char) == len(str1.lower()):\n            count += 1\n            \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        char1 = chr(65 + i)\n        char2 = chr(97 + i)\n        if char1 in str1 and char2 in str1:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if i!= j and str1[i].lower() == str1[j].lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        char = chr(i+ord('a'))\n        if char in str1.lower():\n            count += str1.lower().count(char)\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in str1:\n        if i in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    for char in str1:\n        if char.lower() in english_alphabet.lower():\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    count = 0\n    str2 = str1.lower()\n    for i in range(26):\n        if str1[i] == str2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is a letter, add it to the dictionary with a value of 1\n        if char.isalpha():\n            freq_dict[char] = freq_dict.get(char, 0) + 1\n\n    # Iterate through the English alphabet and count the frequency of each character in the string\n    for i in range(ord('a'), ord('z') + 1):\n        # If the character is in the dictionary, increment its value by 1\n        if chr(i) in freq_dict:\n            freq_dict[chr(i)] += 1\n\n    # Return the total number of characters in the string\n    return sum(freq_dict.values())"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    # count the number of pairs of even numbers that xor to an even number\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] + A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the closest power of 2 to n\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    # Return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**(int(log2(n))+1)\n\ndef log2(n):\n    '''\n    Write a python function to find the logarithm of n in base 2.\n    '''\n    if n == 0:\n        return float('inf')\n    else:\n        return math.log2(n)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Use binary search to find the next power of 2\n    low = 1\n    high = n\n    while low < high:\n        mid = (low + high) // 2\n        if mid * mid >= n:\n            high = mid\n        else:\n            low = mid + 1\n    return low"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2 ** int(n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2 ** ((n - 1).bit_length() + 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the highest power of 2 smaller than or equal to n\n    highest = 1\n    while highest < n:\n        highest <<= 1\n    \n    # Return the highest power of 2\n    return highest\n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to an integer\n    n = int(n)\n\n    # Initialize the power of 2 as 2\n    power = 2\n\n    # Loop until power is greater than or equal to n\n    while power >= n:\n        power *= 2\n\n    # Return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n - 1)!= 0:\n        n = n | (n - 1)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Using binary search\n    low = 1\n    high = n\n    \n    while low < high:\n        mid = (low + high) // 2\n        \n        if mid * mid <= n:\n            low = mid + 1\n        else:\n            high = mid\n        \n    return low"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two arguments: a list and a number x. The function counts the number of occurrences of x in the list and returns the count.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments: a list and a number.\n    It returns the number of times the given number appears in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Calculate the length of the list\n    length = len(list1)\n\n    # Check if the indices are valid\n    if m < 0 or n >= length or n < m:\n        raise ValueError(\"Invalid indices\")\n\n    # Initialize the sum variable to zero\n    sum_range = 0\n\n    # Iterate over the range of indices and add the corresponding numbers to the sum\n    for i in range(m, n + 1):\n        sum_range += list1[i]\n\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize the sum to zero\n    sum = 0\n    # loop through the list and add the elements in the range to the sum\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    # return the final sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        m, n = n, m\n    \n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    \n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return \"Invalid input\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= n:\n        return \"Invalid input: m should be less than n\"\n    total = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            return \"Invalid input: m and n should be less than the length of the list\"\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n    return sum_range"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    This function takes the length of a side of a regular pentagon as input and returns the perimeter of the pentagon.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the perimeter of the pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the semi-perimeter\n    s = (a+math.sqrt(3)*a)**(1/3)\n\n    # calculate the perimeter\n    p = 5*s\n\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n\na = float(input(\"Enter the length of one side of the pentagon: \"))\nperimeter = perimeter_pentagon(a)\nprint(\"The perimeter of the pentagon is:\", perimeter)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the diagonal length of the pentagon\n    diagonal = 5 * a / 4\n    # calculate the number of sides of the pentagon\n    num_sides = int(diagonal / 3)\n    # calculate the circumference of the pentagon\n    circumference = (2 * a) + (5 * a ** 2) / 4\n    # calculate the perimeter of the pentagon\n    perimeter = 12 * a\n    # return the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    std_index = s.find('std')\n    while std_index!= -1:\n        count += 1\n        std_index = s.find('std', std_index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurances of the string'std' in a given string.\n    \"\"\"\n    return s.count(\"std\")"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    \n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    \n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    first_element = test_tuple[0]\n    for element in test_tuple:\n        if not isinstance(element, type(first_element)):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    \n    # Check the data type of each element in the tuple\n    for element in test_tuple:\n        data_types.append(type(element))\n    \n    # Check if all the data types are same or not\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if all elements have the same data type or not\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    first_element = test_tuple[0]\n    for element in test_tuple:\n        if type(element)!= type(first_element):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize a boolean variable to check if all elements have same data type or not\n    same_data_type = True\n    \n    # Iterate over each element of the tuple\n    for i in test_tuple:\n        # If any element is not of the same data type as the first element, set same_data_type to False and break the loop\n        if type(i)!= type(test_tuple[0]):\n            same_data_type = False\n            break\n    \n    # Return the boolean variable\n    return same_data_type"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(test_tuple) == 1:\n        return True\n\n    first_item = test_tuple[0]\n    for item in test_tuple[1:]:\n        if not isinstance(item, type(first_item)):\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize a count variable to store the number of occurrences of x\n    count = 0\n\n    # Iterate through the array\n    for i in range(n):\n\n        # If the current element is equal to x, increment the count\n        if arr[i] == x:\n            count += 1\n\n        # If the count reaches n/2, return True\n        if count >= n/2:\n            return True\n\n    # If no majority element is found, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # initialize variables to keep track of count and current count\n    count = 0\n    current_count = 0\n    \n    # loop through array and count occurrences of x\n    for i in arr:\n        if i == x:\n            count += 1\n        if i!= x:\n            current_count += 1\n            if current_count == 0:\n                count = 0\n                current_count = 0\n            elif current_count > count:\n                return False\n    \n    # if we make it through the loop without finding a majority element, return False\n    if current_count > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Count the number of occurrences of each element in the array\n    count = [0] * n\n    \n    # Iterate through the array and count the occurrences of each element\n    for i in arr:\n        count[i] += 1\n    \n    # Find the majority element by checking the count of each element\n    majority = None\n    for i in range(n):\n        if count[i] > n/2:\n            majority = i\n    \n    # Return True if the majority element is equal to the given element, False otherwise\n    return x == majority"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n % 2 == 1: \n            count += 1 \n        n = n >> 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n & 1 == 1: \n            count += 1\n        n >>= 1 \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0 \n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1 # find the rightmost bit\n        n >>= 1 # shift n to the right\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n % 2 == 1: \n            count += 1 \n        n = n >> 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index_chars = [str[i] for i in range(len(str)) if i % 2 == 1]\n    return ''.join(odd_index_chars)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Remove the characters at odd indices of a given string.\n    \"\"\"\n    odd_indices = [i for i in range(len(string)) if i % 2 == 1]\n    return string.translate(str.maketrans('', '', ''.join(odd_indices)))"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    odd_values = [i for i in range(len(str)) if i % 2!= 0]\n    return ''.join([str[i] for i in odd_values])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    # Remove characters at odd indices\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2!= 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum number.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    \"\"\"\n    # Check if the input is valid (i.e. a number)\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"Input should be a number.\")\n    if not isinstance(b, (int, float)):\n        raise TypeError(\"Input should be a number.\")\n    if not isinstance(c, (int, float)):\n        raise TypeError(\"Input should be a number.\")\n\n    # Compare the numbers and return the minimum\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # initialize minimum value to first number\n    min_val = a\n\n    # compare second number with minimum value\n    if b < min_val:\n        min_val = b\n\n    # compare third number with minimum value\n    if c < min_val:\n        min_val = c\n\n    # return minimum value\n    return min_val"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Create an empty string of length n, which will hold the bits of n\n    bit_string = ''\n    # Loop through each digit in the range [l,r]\n    for i in range(l, r+1):\n        # Convert each digit to a binary string of length n\n        binary = bin(i)[2:]\n        # Pad the binary string with leading zeros to length n\n        padded_binary = binary.zfill(n)\n        # Append the padded binary string to the bit string\n        bit_string += padded_binary\n    # Create a boolean variable to store whether all the bits are set or not\n    all_set = True\n    # Loop through each bit in the bit string\n    for bit in bit_string:\n        # If a bit is not set, set the all_set variable to False\n        if bit == '1':\n            all_set = False\n            break\n    # Return the value of all_set\n    return all_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Calculate the number of set bits between l and r\n    count = 0\n    for i in range(l, r+1):\n        count += bin(i).count('1')\n\n    # Check if all bits are set\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check whether all the bits are unset in the given range or not.\n\n    Args:\n        n (int): Integer representation of the binary number.\n        l (int): Lower bound of the range.\n        r (int): Upper bound of the range.\n\n    Returns:\n        bool: True if all the bits are unset, False otherwise.\n    \"\"\"\n\n    # Convert the integer representation of the binary number to binary string\n    binary_string = bin(n)[2:]\n\n    # Check if all the bits are unset in the given range\n    for i in range(l, r+1):\n        if binary_string[i-l] == '1':\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert n to binary string\n    n_binary = bin(n)[2:]\n\n    # Check if all bits are unset in the given range\n    all_unset = True\n    for i in range(l-1, r):\n        if n_binary[i] == '1':\n            all_unset = False\n            break\n\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # convert n, l, and r to binary\n    n = bin(n)[2:]\n    l = bin(l)[2:]\n    r = bin(r)[2:]\n    \n    # check if all the bits of n are set to 1 or not\n    for i in range(len(n)):\n        if n[i] == '0' and l[i] == '0' and r[i] == '0':\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function will check whether all the bits are unset in the given range or not.\n    \"\"\"\n    mask = (1 << (r - l + 1)) - 1\n    return (n & mask) == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0\n    for i in range(l-1, r):\n        mask = mask | (1 << i)\n    return (n & mask) == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the result variable with True\n    result = True\n    # Loop through the bits of n\n    for i in range(l-1, r):\n        # Check if the current bit is set\n        if n & (1 << i):\n            # If the bit is set, return False\n            return False\n    # If all the bits are unset, return True\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # loop through the bits of the given range\n    for i in range(l, r + 1):\n        # if a bit is set, return False\n        if n & (1 << i):\n            return False\n    # if all bits are unset, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize an empty list to store the unset bits\n    unset_bits = []\n    # Loop through all the bits in the given range\n    for i in range(l, r+1):\n        # Check if the bit is unset\n        if n & (1 << i):\n            # If the bit is unset, add it to the list\n            unset_bits.append(i)\n    # Check if the list is empty or not\n    if unset_bits:\n        # If the list is empty, return True\n        return False\n    else:\n        # If the list is not empty, return False\n        return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Filter out negative elements and sort them in ascending order\n    neg_elements = sorted([x for x in arr[:n] if x < 0])\n    # Filter out positive elements and sort them in descending order\n    pos_elements = sorted([x for x in arr[:n] if x >= 0], reverse=True)\n    # Merge the two sorted lists and append them to the original array\n    arr[:n] = neg_elements + pos_elements"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize three pointers for the array: negative, positive, and temp\n    neg_ptr = 0\n    pos_ptr = n\n    temp_ptr = 0\n\n    # Iterate through the array\n    while temp_ptr < len(arr):\n\n        # If the current element is negative, swap it with the negative pointer\n        if arr[temp_ptr] < 0:\n            arr[temp_ptr], arr[neg_ptr] = arr[neg_ptr], arr[temp_ptr]\n            neg_ptr += 1\n\n        # If the current element is positive, swap it with the positive pointer\n        elif arr[temp_ptr] > 0:\n            arr[temp_ptr], arr[pos_ptr] = arr[pos_ptr], arr[temp_ptr]\n            pos_ptr += 1\n\n        # Increment the temporary pointer\n        temp_ptr += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # create a temporary list to store the negative elements\n    neg_list = []\n\n    # loop through the array and add the negative elements to the temp list\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n\n    # add the positive elements to the array\n    for i in range(n, len(arr)):\n        arr[i] += n\n\n    # add the negative elements to the array\n    for i in range(len(neg_list)):\n        arr[i] = neg_list[i]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for the positive elements and one for the negative elements\n    i = 0\n    j = 0\n    \n    # Traverse the array and swap elements between pointers\n    while i < n and j < len(arr):\n        if arr[i] >= 0:\n            # If the current element is positive, move the pointer to the next position\n            i += 1\n        else:\n            # If the current element is negative, swap it with the next element and move the pointers\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = []\n    neg = []\n    for i in arr:\n        if i > 0:\n            pos.append(i)\n        elif i < 0:\n            neg.append(i)\n    pos.extend(neg)\n    return pos[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables\n    negative = 0\n    positive = 0\n    # iterate through the array\n    for i in range(n):\n        # check if the current element is negative\n        if arr[i] < 0:\n            # if negative, increment negative counter\n            negative += 1\n        else:\n            # if positive, increment positive counter\n            positive += 1\n    # iterate through the array again and swap negative elements with positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            # if negative, swap with last positive element\n            arr[i], arr[negative] = arr[negative], arr[i]\n            # decrement negative counter\n            negative -= 1\n        else:\n            # if positive, do nothing\n            pass\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # loop through the array\n    for i in range(len(arr)):\n        # if the current element is negative\n        if arr[i] < 0:\n            # check if the current element is the first negative element\n            if i == 0:\n                # if it is, swap it with the last negative element\n                if len(arr) > 1:\n                    arr[0], arr[-1] = arr[-1], arr[0]\n                else:\n                    arr[0] = -arr[0]\n            else:\n                # if it's not, swap it with the next negative element\n                arr[i], arr[i-1] = arr[i-1], arr[i]\n        # if the current element is positive\n        else:\n            # check if the current element is the first positive element\n            if i == 0:\n                # if it is, swap it with the last positive element\n                if len(arr) > 1:\n                    arr[0], arr[-1] = arr[-1], arr[0]\n                else:\n                    arr[0] = -arr[0]\n            else:\n                # if it's not, swap it with the next positive element\n                arr[i], arr[i-1] = arr[i-1], arr[i]\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # initialize two pointers to track the negative and positive elements\n    left = 0\n    right = n-1\n    \n    # loop through the array and swap elements until the negative elements are all at the beginning of the array\n    while left < right:\n        if arr[left] < 0:\n            left += 1\n        elif arr[right] > 0:\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n    \n    # swap elements so that all negative elements are at the beginning of the array and the relative order of negative and positive elements is preserved\n    while left < right:\n        if arr[left] < 0:\n            left += 1\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n    \n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # initialize two pointers, one for positive elements and one for negative elements\n    i = j = 0\n    \n    # while the pointers are not equal, process the array\n    while i < n:\n        # if the current element is positive, move the pointer forward\n        if arr[i] >= 0:\n            i += 1\n        # if the current element is negative, move the pointer backward\n        else:\n            arr[j], arr[i] = arr[i], arr[j]\n            j += 1\n    \n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n    # loop through the input array and append negative and positive elements to the corresponding lists\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n    # sort the negative list in ascending order\n    neg_list.sort()\n    # loop through the sorted negative list and append elements to the output array\n    for num in neg_list:\n        arr.append(num)\n    # loop through the remaining elements in the sorted negative list and append them to the output array\n    for num in neg_list:\n        if num not in arr:\n            arr.append(num)\n    # append the remaining positive elements to the output array in the original order\n    arr.extend(pos_list)\n    # return the final output array\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # replace blank spaces with the character\n    str1 = str1.replace(\" \", char)\n    \n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Replace all occurrences of blank spaces with the given character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and a character, replaces blank spaces in the string with the character, and returns the modified string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    if len(list1) < n:\n        raise ValueError(\"List must contain at least n elements\")\n    \n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Convert the list to a heap\n    heap = [x for x in list1]\n    heapq.heapify(heap)\n    \n    # Extract the n largest numbers from the heap\n    largest = []\n    for _ in range(n):\n        largest.append(heapq.heappop(heap))\n    \n    return largest"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    if len(list1) < n:\n        return []\n    else:\n        return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a min heap of size n, and initialize it with the first n elements of the list\n    heap = list1[:n]\n    heapq.heapify(heap)\n    # Iterate over the remaining elements of the list\n    for num in list1[n:]:\n        # If the current number is greater than or equal to the minimum element of the heap, remove the minimum element and add the new number\n        if num >= heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    # Return the heap as the output\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min-heap of the first n items in the list\n    heapq.heapify(list1[:n])\n\n    # remove the smallest items from the min-heap to get the n largest items\n    result = []\n    while len(result) < n:\n        result.append(heapq.heappop(list1))\n\n    # add the remaining items back to the min-heap to maintain the min-heap property\n    for item in list1[n:]:\n        heapq.heappush(list1, item)\n\n    return result"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * (h + r)\n    print(\"The lateral surface area of the cylinder is:\", area)\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    lateral_surface_area = (2 * r * h) + (2 * r * r) + (2 * h * h)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*3.14159*(r**2)*h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2 + 2*3.14159*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function finds the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of a cylinder using the formula A = pi * r^2 * h\n    A = 3.14159 * r ** 2 * h\n    \n    # Return the lateral surface area\n    return A"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n\n    # initialize a variable to store the result\n    result = 0\n\n    # iterate over each bit in the number\n    for i in range(32):\n        # extract the ith bit\n        bit = (n >> i) & 1\n\n        # if the bit is even, set it to 1\n        if bit == 0:\n            result |= (1 << i)\n\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through each bit of the input number\n    for i in range(32):\n        # If the current bit is even, set its position in the result to 1\n        if n & (1 << i):\n            result |= (1 << i)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(len(bin(n)) - 2):\n        n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of the number\n    even_bits = 0\n    \n    # Iterate through each bit of the number and set the corresponding bit to 1 if it's even, otherwise leave it unchanged\n    for i in range(32):\n        if n & (1 << i) and (n & (1 << i)) == (1 << i):\n            even_bits |= (1 << i)\n            \n    # Return the number with all even bits set to 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    result = 0\n\n    while n:\n        # Get the last bit of the number\n        last_bit = n % 2\n\n        # Set the last bit of the result to the last bit of the number\n        result |= last_bit << (n.bit_length() - 1)\n\n        # Shift the number one bit to the left\n        n >>= 1\n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a new variable to store the result\n    result = 0\n\n    # Loop through each bit in the original number\n    for i in range(8):\n        # Check if the current bit is even\n        if (n >> i) & 1 == 0:\n            # If it is, set the corresponding bit in the result variable\n            result |= 1 << i\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0: \n        # Check if the least significant bit is 1 \n        if n & 1 == 1: \n            # Set all even bits to 1 \n            n |= n & 0b01111111 # XOR with all 1's except the least significant bit \n        n >>= 1 # Shift the number to the right by 1 \n    return n "
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result of the bitwise AND operation\n    result = 0\n    # Loop through each bit in the binary representation of n\n    for i in range(32): \n        # If the i-th bit in n is even, set the corresponding bit in result to 1\n        if n & (1 << i): \n            result |= (1 << i) \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize variable to keep track of even bits\n    even_bits = 0\n    \n    # loop through each bit in the number\n    for bit in bin(n)[2:]:\n        # if the bit is even, set it in the even_bits variable\n        if bit == '0':\n            even_bits = even_bits << 1\n        else:\n            even_bits = even_bits | (1 << 1)\n    \n    # return the number with all even bits set\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize an empty list to store the even bits\n    even_bits = []\n    \n    # loop through each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # if the current bit is even, append it to the even_bits list\n        if bin(n)[2:][i] == '0':\n            even_bits.append(bin(n)[2:][i])\n            \n    # convert the list of even bits back to an integer and return it\n    return int(''.join(even_bits), 2)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use the Counter class to count the number of occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    counts = Counter(unique_tuples)\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create an empty dictionary to store the count of each tuple\n    count_dict = {}\n\n    # Iterate over the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # Return the dictionary of unique tuples and their counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item not in count_dict:\n            count_dict[item] = 1\n        else:\n            count_dict[item] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    unique_count = {}\n\n    # iterate over each tuple in the list and count its occurrences\n    for tup in test_list:\n        if tup in unique_count:\n            unique_count[tup] += 1\n        else:\n            unique_count[tup] = 1\n\n    # return the dictionary with the count of each unique tuple\n    return unique_count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(tuple(x) for x in test_list)\n    counter = Counter(unique_tuples)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # Loop through the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n            \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # create a dictionary to map unique tuples to their counts\n    counts_dict = {}\n    # iterate over the unique tuples and update the counts dictionary\n    for tup in unique_tuples:\n        counts_dict[tup] = test_list.count(tup)\n    return counts_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_tuples = set(test_list)\n    \n    # Create a dictionary to count the occurrences of each unique tuple\n    counts = Counter(unique_tuples)\n    \n    return counts"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)+1):\n            substring = string[i:j]\n            if len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substr = str[i:j]\n            if substr!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    \n    # Iterate through all possible substrings of the string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n            \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize a counter variable to keep track of the number of possible sequences \n    count = 0 \n\n    # Iterate through all possible sequences of length n \n    for i in range(n,m+1): \n\n        # If the first element of the sequence is greater than or equal to twice the previous element but less than or equal to m, then add the sequence to the count \n        if i >= 2*m and i <= m: \n            count += 1 \n\n    # Return the total number of possible sequences \n    return count "
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count variable\n    count = 0\n    # Iterate through all possible sequences of length n\n    for i in range(2, m + 1):\n        # Check if each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m\n        for j in range(i, m + 1, i):\n            if j <= 2 * i and j >= 2 * (i - 1) and isinstance(j, int) and j > 0:\n                count += 1\n    # Return the final count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a list of all possible sequences of length n that can be formed from the range of positive integers from 1 to m\n    all_sequences = [[]] * (m - 1)\n    for i in range(1, m):\n        # Add the current sequence to the list of all possible sequences\n        all_sequences[i - 1] = [(i,) + s for s in all_sequences[i - 1]]\n        # Add the previous sequence to the list of all possible sequences\n        all_sequences[i - 1] = [(0,) + s for s in all_sequences[i - 1]]\n        # Add the first element of each sequence to the list of all possible sequences\n        for s in all_sequences[i - 1]:\n            all_sequences[i - 1].append((s[0],) + s)\n    # Find the total number of sequences that can be formed with length n\n    total_sequences = sum(1 for s in all_sequences if len(s) == n)\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    count = 0\n\n    # Iterate through all possible subsequences\n    for i in range(m, 0, -1):\n        for j in range(i, m+1, 2):\n            if j <= n and j % 2 == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    prev_num = 0\n    for i in range(1, m + 1):\n        if i >= 2 * prev_num and i <= m:\n            total_sequences += 1\n        prev_num = i\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, m + 1):\n        if i >= 2 * i:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    prev_element = -1\n\n    for i in range(m):\n        element = i + 1  # initialize first element to 1\n        if element < m * 2:  # if element is less than 2m, add to count and update prev_element\n            count += 1\n            prev_element = element\n        elif element <= m:  # if element is between 2m and m, check if it satisfies the condition\n            if (element - prev_element) % 2 == 0 and element <= m and element >= m * 2:\n                count += 1\n        else:  # if element is greater than m, initialize prev_element to 1 and continue\n            prev_element = 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(n+1):\n        if i < m:\n            count += 1\n        elif i < 2*m:\n            count += i//2\n        else:\n            break\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    prev = 0\n    for i in range(m):\n        if i >= 2 * prev and i <= m:\n            count += 1\n        prev = i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    total = 0\n    for i in range(n):\n        for j in range(i+2,m+1):\n            total += 1\n            \n    return total"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the last element of the first list\n    last_element = list1[-1]\n    \n    # Remove the last element from the first list\n    list1 = list1[:-1]\n    \n    # Add the elements of the second list to the first list\n    list1.extend(list2)\n    \n    # Add the last element back to the first list\n    list1.append(last_element)\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) < len(list2):\n        list1.append(list2.pop())\n    else:\n        for i in range(len(list1)-len(list2)):\n            list1.pop()\n        list1.append(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1,-1,-1):\n        list1[i] = list2[0]\n        list2.pop(0)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length1 = len(list1)\n    \n    # Reverse the second list\n    list2.reverse()\n    \n    # Append the second list to the first list\n    list1[length1-1:length1] = list2\n    \n    # Reverse the first list again\n    list1.reverse()\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) > 0:\n        list1[-1] = list2\n    else:\n        list1.extend(list2)\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = len(str1)\n    return total_chars\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def next_prime(n):\n        i = n + 1\n        while not is_prime(i):\n            i += 1\n        return i\n\n    def next_square(n):\n        i = n + 1\n        while True:\n            i += 1\n            if is_prime(i):\n                return i\n\n    if not is_prime(N):\n        return -1\n\n    while True:\n        i = next_prime(N)\n        j = next_square(i)\n        if j > N and i > 1:\n            return j"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    Returns the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    if sqrt_N.is_integer():\n        return int(sqrt_N) + 1\n    else:\n        return int(sqrt_N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    sqrtN = math.sqrt(N)\n    if sqrtN.is_integer():\n        return int(sqrtN) + 1\n    else:\n        return int(sqrtN) + 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        i = num + 1\n        while not is_prime(i):\n            i += 1\n        return i\n\n    def is_perfect_square(num):\n        root = int(math.sqrt(num))\n        return root * root == num\n\n    def next_square(N):\n        i = N\n        while not is_perfect_square(i):\n            i += 1\n        return i\n\n    next_prime_greater = next_prime(N)\n    next_square_greater = next_square(next_prime_greater)\n    return next_square_greater"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # find square root of N\n    sqrt_N = math.sqrt(N)\n\n    # find largest integer y such that x^2 > y^2\n    y = int(sqrt_N)\n    while True:\n        x = y + 1\n        if x * x > N:\n            break\n        y += 1\n\n    # return x\n    return x"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square greater than N.\n    \"\"\"\n    # Initialize the value of 'next_square' and set it to 1.\n    next_square = 1\n    \n    # While next_square is less than N\n    while next_square < N:\n        # If next_square is a perfect square, break out of the loop\n        if math.isqrt(next_square) ** 2 == next_square:\n            break\n        \n        # Increment the value of 'next_square' by 1.\n        next_square += 1\n        \n    # If next_square is already equal to N, return the same value.\n    if next_square == N:\n        return N\n    \n    # Otherwise, return the next perfect square greater than N.\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    This function takes a positive integer N and returns the next perfect square greater than N.\n    '''\n\n    # Taking the square root of N and finding the closest integer to the square root\n    sqrt_N = int(math.sqrt(N))\n\n    # Adding 1 to the square root to get the next perfect square\n    next_square = sqrt_N + 1\n\n    # Checking if the next perfect square is greater than N\n    while next_square <= N:\n        if next_square * next_square == N:\n            # Returning the next perfect square\n            return next_square\n        else:\n            # Incrementing the next perfect square by 1\n            next_square += 1\n\n    # If the next perfect square is greater than N but less than or equal to the square root of N,\n    # the next perfect square will be sqrt_N + 1\n    return sqrt_N + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function finds the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n    \n    # Find the square of the square root\n    square_sqrt_N = math.sqrt(sqrt_N)\n    \n    # Check if the square of the square root is equal to the square of the square root of N\n    if square_sqrt_N**2 == sqrt_N:\n        # If it is, then return the square root of N + 1\n        return math.sqrt(N) + 1\n    else:\n        # If not, then return the square root of the square of the square root of N + 1\n        return math.sqrt(square_sqrt_N + 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_perfect_square(num):\n        \"\"\"\n        Check if a number is a perfect square.\n        \"\"\"\n        return int(math.sqrt(num)) ** 2 == num\n\n    def next_square(num):\n        \"\"\"\n        Find the next perfect square greater than a given number.\n        \"\"\"\n        num += 1\n        while not is_perfect_square(num):\n            num += 1\n        return num\n\n    square = int(math.sqrt(N))\n    if square * square == N:\n        square += 1\n\n    return next_square(square)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N == 1:\n        return 1\n    while True:\n        N -= 1\n        square = int(math.sqrt(N))\n        if square*square == N:\n            return N\n        else:\n            N += 1"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Check if the array is bitonic\n    if is_bitonic(arr): \n        # Get the sum of the first subsequence\n        subseq1_sum = sum(arr[:len(arr)//2]) \n        # Get the sum of the second subsequence\n        subseq2_sum = sum(arr[len(arr)//2:]) \n        # Return the maximum sum\n        return max(subseq1_sum, subseq2_sum) \n    else: \n        # If the array is not bitonic, return None\n        return None\n\n\ndef is_bitonic(arr): \n    '''\n    This function checks if the given array is bitonic.\n    '''\n    # Check if the array has even length\n    if len(arr) % 2 == 0: \n        # If the array has an even length, check if the first half is increasing and the second half is decreasing\n        if arr[:len(arr)//2] == sorted(arr[:len(arr)//2]) and arr[len(arr)//2:] == sorted(arr[len(arr)//2:], reverse=True): \n            return True \n        else: \n            return False \n    else: \n        # If the array has an odd length, check if the first half is increasing and the second element is decreasing\n        if arr[:len(arr)//2] == sorted(arr[:len(arr)//2]) and arr[len(arr)//2] == sorted(arr[len(arr)//2], reverse=True): \n            return True \n        else: \n            return False "
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    max_sum = float('-inf')\n    prev = float('-inf')\n    for i in range(n):\n        if arr[i] < prev:\n            if arr[i] + prev > max_sum:\n                max_sum = arr[i] + prev\n        elif arr[i] > prev:\n            if arr[i] - prev > max_sum:\n                max_sum = arr[i] - prev\n        prev = arr[i]\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    else:\n        # Initialize the maximum sum and the current sum\n        max_sum = arr[0]\n        curr_sum = arr[0]\n        # Traverse through the array from 1 to n-1\n        for i in range(1, n):\n            # If the current element is greater than the previous element and the next element is less than the previous element,\n            # update the current sum to the sum of the current element and the next element\n            if arr[i] > arr[i-1] and arr[i+1] < arr[i-1]:\n                curr_sum += arr[i+1]\n            # Update the maximum sum if the current sum is greater than the maximum sum\n            elif curr_sum > max_sum:\n                max_sum = curr_sum\n            # Reset the current sum to the current element if the current element is less than the previous element\n            else:\n                curr_sum = arr[i]\n        # Return the maximum sum found\n        return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize two pointers for the current subsequence\n    left, right = 0, n-1\n    \n    # Initialize two variables to store the maximum sum of increasing and decreasing subsequences\n    inc_max, dec_max = float('-inf'), float('-inf')\n    \n    # Loop through the array and update the maximum sum of increasing and decreasing subsequences\n    while left < right:\n        if arr[left] < arr[right]:\n            # If the next element is increasing, update the maximum sum\n            inc_max = max(inc_max + arr[left], dec_max)\n            \n            # If the next element is decreasing, update the maximum sum\n            dec_max = max(inc_max, dec_max)\n            \n            # Move the left pointer to the next element\n            left += 1\n        else:\n            # If the next element is decreasing, update the maximum sum\n            dec_max = max(dec_max + arr[right], inc_max)\n            \n            # If the next element is increasing, update the maximum sum\n            inc_max = max(dec_max, inc_max)\n            \n            # Move the right pointer to the next element\n            right -= 1\n            \n    # Return the maximum sum of the two subsequences\n    return max(inc_max, dec_max)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # check if the array is bitonic\n    if arr[0] < arr[1]:\n        if arr[n-1] > arr[n-2]:\n            # check if there are odd number of elements in the array\n            if n % 2 == 0:\n                # find the sum of the first half of the array\n                sum_left = sum(arr[:n//2])\n                # find the sum of the last half of the array\n                sum_right = sum(arr[n//2:])\n                # find the maximum sum of a bitonic subsequence in the first half of the array\n                max_sum_left = max_sum(arr[:n//2])\n                # find the maximum sum of a bitonic subsequence in the last half of the array\n                max_sum_right = max_sum(arr[n//2:])\n                # return the maximum sum of a bitonic subsequence\n                return max(sum_left, sum_right, max_sum_left+max_sum_right)\n            else:\n                # find the sum of the first half of the array\n                sum_left = sum(arr[:n//2])\n                # find the sum of the last half of the array\n                sum_right = sum(arr[n//2:])\n                # find the maximum sum of a bitonic subsequence in the first half of the array\n                max_sum_left = max_sum(arr[:n//2])\n                # return the maximum sum of a bitonic subsequence\n                return max(sum_left, sum_right, max_sum_left)\n        else:\n            # check if there are odd number of elements in the array\n            if n % 2 == 0:\n                # find the sum of the first half of the array\n                sum_left = sum(arr[:n//2])\n                # find the sum of the last half of the array\n                sum_right = sum(arr[n//2:])\n                # find the maximum sum of a bitonic subsequence in the first half of the array\n                max_sum_left = max_sum(arr[:n//2])\n                # return the maximum sum of a bitonic subsequence\n                return max(sum_left, sum_right, max_sum_left)\n            else:\n                # return the maximum sum of a bitonic subsequence in the array\n                return max_sum(arr)\n    else:\n        # check if the array is bitonic\n        if arr[0] > arr[1]:\n            # check if there are odd number of elements in the array\n            if n % 2 == 0:\n                # find the sum of the first half of the array\n                sum_left = sum(arr[:n//2])\n                # find the sum of the last half of the array\n                sum_right = sum(arr[n//2:])\n                # find the maximum sum of a bitonic subsequence in the first half of the array\n                max_sum_left = max_sum(arr[:n//2])\n                # find the maximum sum of a bitonic subsequence in the last half of the array\n                max_sum_right = max_sum(arr[n//2:])\n                # return the maximum sum of a bitonic subsequence\n                return max(sum_left, sum_right, max_sum_left+max_sum_right)\n            else:\n                # find the sum of the first half of the array\n                sum_left = sum(arr[:n//2])\n                # find the sum of the last half of the array\n                sum_right = sum(arr[n//2:])\n                # find the maximum sum of a bitonic subsequence in the first half of the array\n                max_sum_left = max_sum(arr[:n//2])\n                # return the maximum sum of a bitonic subsequence\n                return max(sum_left, sum_right, max_sum_left)\n        else:\n            # return the maximum sum of a bitonic subsequence in the array\n            return max_sum(arr)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Check if the array is bitonic\n    is_bitonic = True\n    for i in range(1, n-1):\n        if arr[i-1] < arr[i] < arr[i+1]:\n            is_bitonic = False\n            break\n\n    if is_bitonic:\n        return max_sum_bitonic(arr)\n    else:\n        return max_sum_non_bitonic(arr)\n\ndef max_sum_bitonic(arr):\n    n = len(arr)\n    max_sum = arr[0]\n    for i in range(1, n-1):\n        max_sum = max(max_sum, arr[i-1] + arr[i+1])\n    return max_sum\n\ndef max_sum_non_bitonic(arr):\n    n = len(arr)\n    max_sum = arr[0]\n    for i in range(1, n-1):\n        max_sum = max(max_sum, arr[i-1] + arr[i+1])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            dp[i] = dp[i - 1] + arr[i]\n        else:\n            dp[i] = dp[i - 1] - arr[i]\n\n    return max(dp)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    max_sum = float('-inf')\n    left_max = float('-inf')\n    right_min = float('inf')\n\n    for i in range(n):\n        if arr[i] < left_max:\n            left_max = arr[i]\n            max_sum = max(max_sum, right_min - left_max)\n        elif arr[i] > right_min:\n            right_min = arr[i]\n            max_sum = max(max_sum, right_min - left_max)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    # initialize the maximum sum and the current sum\n    max_sum = arr[0]\n    curr_sum = arr[0]\n\n    # iterate over the array and calculate the maximum sum\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            curr_sum += arr[i]\n        else:\n            curr_sum = arr[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n\n    # Find the max sum in the first and last subsequences\n    max_sum_1 = max(arr[1:], arr[:-1])\n    max_sum_n = max(arr[2:], arr[:-2])\n\n    # Find the max sum in the middle subsequence\n    max_sum_m = 0\n    for i in range(1, n-1):\n        max_sum_m = max(max_sum_m, arr[i] + arr[i+1])\n\n    # Return the maximum of the two middle subsequence sums\n    return max(max_sum_1, max_sum_n, max_sum_m)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize the guess and the difference between the guess and the square root\n    guess = number / 2\n    difference = 1.0\n\n    # loop until the difference between the guess and the square root is less than a small number\n    while difference > 0.0001:\n        # calculate the new guess by subtracting the square root of the difference from the number\n        new_guess = number / guess\n        # update the difference between the guess and the square root\n        difference = abs(guess - new_guess)\n        # update the guess\n        guess = new_guess\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Number cannot be negative.')\n    sqrt_list = []\n    while number > 0.1:\n        sqrt_list.append(number)\n        number = 1/(number + number/sqrt_list[-1])\n    sqrt_list.append(number)\n    return sqrt_list"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2  # Start with a guess of half the number\n    while abs(guess**2 - number) > 0.0001:  # Keep guessing until the difference between the square of the guess and the number is less than 0.0001\n        guess = (guess + number/guess)/2  # Calculate a new guess based on the old guess\n    return guess  # Return the final guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a = 0\n    b = number\n    while b**2 - number > 0.00001:\n        c = (a + b) / 2\n        a = b\n        b = c\n    return a"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    y = 0.0\n    z = x/2.0\n    k = 1\n    while abs(y-x) > 0.000001:\n        y = x\n        z = (x+number/x)/2.0\n        x = z\n        k = k+1\n    return x, k"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    x = number\n\n    while guess ** 2 > x:\n        guess = (guess + x / guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number // 2\n    while guess * guess > number:\n        guess = (guess + number // guess) // 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Define the maximum number of iterations\n    MAX_ITERATIONS = 50\n\n    # Initialize the guess and the number of iterations\n    guess = number / 2\n    iterations = 0\n\n    # Use the babylonian method to find the square root\n    while iterations < MAX_ITERATIONS:\n        # Compute the next iteration\n        x = (guess + number / guess) / 2\n        iterations += 1\n\n        # Check if the new guess is closer to the square root than the previous guess\n        if abs(x - guess) < abs(number / x - 1):\n            guess = x\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n\n    Args:\n    number (float): The number for which we want to compute the square root.\n\n    Returns:\n    float: The square root of the input number using the babylonian method.\n    \"\"\"\n    guess = number/2\n    while guess**2 > number:\n        guess = (guess + number/guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x_prev = 0\n    x_curr = number / 2\n    x = x_curr\n\n    while abs(x_prev - x_curr) > 0.0000001:\n        x_prev = x_curr\n        x_curr = (x + number / x) / 2\n        x = x_curr\n\n    return x"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(string):\n    n = len(string)\n    # Initialize the result with length of the first character\n    result = 1\n    # Initialize the length of the longest palindromic subsequence seen so far\n    max_length = 1\n\n    # Check all possible substrings of the string\n    for i in range(1, n):\n        # Find the length of the longest palindromic subsequence ending at index i\n        left = 0\n        right = 0\n        while left < right and i - left - 1 >= 0 and i + right + 1 < n and string[i - left - 1] == string[i + right + 1]:\n            left += 1\n            right += 1\n\n        # Update the result and the length of the longest palindromic subsequence\n        result = max(result, right)\n        max_length = max(max_length, result)\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(string):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(string)\n    dp = [1] * n\n    max_length = 1\n\n    for i in range(1, n):\n        if string[i] == string[i-1]:\n            dp[i] = dp[i-1] + 2\n            if dp[i] > max_length:\n                max_length = dp[i]\n        else:\n            dp[i] = 1\n\n    return max_length\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_palindrome(s):\n    # remove spaces and convert to lowercase\n    s = ''.join(s.split()).lower()\n    # check if the string is empty or has only one character\n    if len(s) <= 1:\n        return True\n    # initialize the longest palindrome length and start and end indices\n    max_length = 1\n    start = 0\n    end = 0\n    # iterate over each character in the string\n    for i in range(len(s)):\n        # check if the current character is a palindrome\n        if s[i] == s[len(s)-i-1]:\n            # update the longest palindrome length and the start and end indices\n            max_length = max(max_length, 2*i+1)\n            start = i\n            end = len(s)-1-i\n    # check if the string is a palindrome\n    if s[start] == s[end]:\n        return True\n    return False\n\n\ndef lps(str):\n    # initialize the longest palindromic subsequence length and start and end indices\n    max_length = 1\n    start = 0\n    end = 0\n    # iterate over each character in the string\n    for i in range(len(str)):\n        # check if the current character is a palindrome\n        if is_palindrome(str[i:i+max_length]):\n            # update the longest palindromic subsequence length and the start and end indices\n            max_length = max(max_length, len(str[i:i+max_length]))\n            start = i\n            end = i+max_length-1\n    # return the longest palindromic subsequence length\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(string):\n    # Function to check if two strings are palindromes or not\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    # Initialize variables\n    max_length = 1\n    start = 0\n    \n    # Loop through the string\n    for i in range(len(string)):\n        # Check if the substring starting from i is a palindrome\n        if is_palindrome(string[i:]):\n            # If it is a palindrome, check if its length is greater than the current max_length\n            if len(string[i:]) > max_length:\n                max_length = len(string[i:])\n                start = i\n                \n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    n = len(str) \n    lps_list = [1] * n \n    \n    # Check for the even length palindromes \n    for i in range(1, n, 2): \n        if str[i] == str[i-1]: \n            lps_list[i] = 2 \n            while i - lps_list[i] >= 0 and i + lps_list[i] < n and str[i-lps_list[i]] == str[i+lps_list[i]]: \n                lps_list[i] += 2\n        \n    # Check for the odd length palindromes \n    for i in range(1, n, 2): \n        if str[i] == str[i-1]: \n            lps_list[i] = 2 \n            while i - lps_list[i] >= 0 and i + lps_list[i] < n and str[i-lps_list[i]] == str[i+lps_list[i]]: \n                lps_list[i] += 2\n                \n    max_length = max(lps_list) \n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    # Create a 2D array to store the results of subsequence length calculation\n    table = [[0 for _ in range(len(str)+1)] for _ in range(len(str)+1)]\n\n    # Initialize the first row and first column with 1\n    for i in range(len(str)+1):\n        table[i][0] = 1\n        table[0][i] = 1\n\n    # Calculate the subsequence length for all possible pairs of substrings in the string\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            # If the characters are the same, consider only one of them\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            # If the characters are different, consider both of them\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Table to store length of longest palindromic subsequence ending at index i\n    table = [0] * len(str)\n\n    # Initialize length of longest palindromic subsequence to zero\n    max_length = 0\n\n    # Initialize maximum length to zero\n    max_start = 0\n\n    # Initialize start index of longest palindromic subsequence\n    max_end = 0\n\n    # Loop through the string\n    for i in range(1, len(str)): \n        # If the current character is same as the previous character\n        if str[i] == str[i-1]: \n            # If length of longest palindromic subsequence ending at previous index is greater than 1\n            if table[i-1] > 1: \n                # Update length of longest palindromic subsequence ending at current index\n                table[i] = table[i-1] + 2\n            # If length of longest palindromic subsequence ending at previous index is equal to 1\n            else: \n                # Update length of longest palindromic subsequence ending at current index\n                table[i] = 2\n        # If the current character is different from the previous character\n        else: \n            # If length of longest palindromic subsequence ending at previous index is greater than 1\n            if table[i-1] > 1: \n                # Update length of longest palindromic subsequence ending at current index\n                table[i] = table[i-1] + 1\n            # If length of longest palindromic subsequence ending at previous index is equal to 1\n            else: \n                # Update length of longest palindromic subsequence ending at current index\n                table[i] = 1\n\n        # If length of longest palindromic subsequence is greater than current maximum length\n        if table[i] > max_length: \n            # Update current maximum length and start and end indices of longest palindromic subsequence\n            max_length = table[i]\n            max_start = i - max_length\n            max_end = i\n\n    # Return length of longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    # create a list to store the lengths of all palindromic subsequences found so far\n    lps = [0] * len(str) \n    # initialize the length of the longest palindromic subsequence found so far to 0 \n    max_lps = 0 \n    # loop through all possible substrings of the string and check if they are palindromes\n    for i in range(1, len(str)): \n        # check if the current substring is a palindrome\n        if str[i] == str[i-1]: \n            # if it is, update the length of the longest palindromic subsequence found so far \n            if lps[i-1] + 2 > lps[i]: \n                lps[i] = lps[i-1] + 2 \n            # if the length is greater than the current maximum, update the maximum \n            if lps[i] > max_lps: \n                max_lps = lps[i] \n    return max_lps "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_palindrome(s):\n    \"\"\"\n    Helper function to check if a given string is palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef longest_palindromic_subseq(s):\n    \"\"\"\n    Finds the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    max_length = 1\n    start = 0\n    end = 0\n\n    # Compute the length of the longest palindrome ending at i\n    for i in range(n):\n        for j in range(i, n):\n            if is_palindrome(s[i:j+1]):\n                length = j - i + 1\n                if length > max_length:\n                    max_length = length\n                    start = i\n                    end = j\n\n    return max_length, start, end"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0:\n        return 0\n\n    # create a 2D table to store the lengths of palindromic subsequences\n    table = [[0] * (n+1) for _ in range(n+1)]\n\n    # fill the first row and first column of the table\n    for i in range(1, n+1):\n        table[i][i] = 1\n\n    # fill the rest of the table using dynamic programming\n    for i in range(2, n+1):\n        for j in range(1, i):\n            if str[j-1] == str[i-1]:\n                table[i][j] = table[j-1][i-1] + 2\n            else:\n                table[i][j] = max(table[i-1][j], table[j][i-1])\n\n    # return the length of the longest palindromic subsequence\n    return table[n][n]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/2) + (1/3) + (1/4) + (1/5) + (1/6) + (1/7) + (1/8) + (1/9) + (1/10)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n - 1) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    # initialize sum to zero\n    sum = 0\n\n    # calculate the sum of 1/i for i in range(1, n+1)\n    for i in range(1, n+1):\n        sum += 1/i\n\n    # return the harmonic sum of n-1\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n    :param n: An integer representing the value of n.\n    :return: The harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += (1/i)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n**2) + (1/n**3) +... + (1/n**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (1/n + 1/n**2 +... + 1/n**n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2*n - 1"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of their elements.\n    \"\"\"\n    intersection = []\n\n    # Loop through the first array and check if the element is present in the second array\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the occurrence of each element in both arrays\n    common_dict = {}\n    for num in array_nums1:\n        if num in array_nums2:\n            if num in common_dict:\n                common_dict[num] += 1\n            else:\n                common_dict[num] = 1\n    \n    # find the intersection of both arrays by creating a new array and adding elements from common_dict\n    intersection_arr = []\n    for num in array_nums2:\n        if num in common_dict and common_dict[num] > 0:\n            intersection_arr.append(num)\n            common_dict[num] -= 1\n    \n    # return the intersection array\n    return intersection_arr"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two sets to store the unique elements from both arrays\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    \n    # Find the intersection of the two sets and convert it back to a list\n    intersection = list(set_nums1.intersection(set_nums2))\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create sets from the arrays\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create two dictionaries to store the frequency of each element in both arrays\n    freq1 = {}\n    freq2 = {}\n\n    # Loop through the first array and add its elements to the dictionaries\n    for num in array_nums1:\n        freq1[num] = freq1.get(num, 0) + 1\n\n    # Loop through the second array and add its elements to the dictionaries\n    for num in array_nums2:\n        freq2[num] = freq2.get(num, 0) + 1\n\n    # Find the intersection of the dictionaries by finding the intersection of their keys\n    intersection = set(freq1.keys()).intersection(set(freq2.keys()))\n\n    # Return the intersection of the dictionaries as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set from array_nums1\n    set_nums1 = set(array_nums1)\n    # Create an empty list to hold the intersection\n    intersection = []\n    # Iterate through array_nums2\n    for num in array_nums2:\n        # If num is in set_nums1, add it to intersection\n        if num in set_nums1:\n            intersection.append(num)\n    # Return the intersection\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a new array containing the common elements of both arrays.\n\n    Args:\n        array_nums1 (list): A list of integers.\n        array_nums2 (list): A list of integers.\n\n    Returns:\n        list: A new list containing the common elements of both arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n\n    # Initialize an empty set to store the unique elements of array_nums2\n    set_nums2 = set()\n\n    # Iterate through array_nums2 and add each element to set_nums2\n    for num in array_nums2:\n        set_nums2.add(num)\n\n    # Initialize an empty set to store the intersection of array_nums1 and array_nums2\n    intersection = set()\n\n    # Iterate through array_nums1 and add each element to the intersection set if it exists in set_nums2\n    for num in array_nums1:\n        if num in set_nums2:\n            intersection.add(num)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input, array_nums1 and array_nums2,\n    and returns a new array containing the common elements between the two arrays.\n    \"\"\"\n    # Create a set of elements from array_nums1\n    set_nums1 = set(array_nums1)\n    # Create an empty list to store the common elements\n    common_elements = []\n    # Loop through array_nums2 and add common elements to common_elements\n    for num in array_nums2:\n        if num in set_nums1:\n            common_elements.append(num)\n    # Return the common elements list\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    This function takes in a list and an element and returns a new list with the element inserted before each element in the original list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Iterate through the list and insert the element before each element\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Insert an element before each element in the list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    return [elem] + lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # create an empty list to hold the new list\n    new_list = []\n    # loop through the original list\n    for item in list:\n        # insert the element before the current item\n        new_list.insert(0, item)\n    # add the last element to the end of the new list\n    new_list.append(element)\n    # return the new list\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    # create an empty list to store the modified elements\n    modified_list = []\n    \n    # loop through the original list\n    for i in range(len(list)):\n        # add the element to the front of the modified list\n        modified_list.append(element)\n        # add the original element to the end of the modified list\n        modified_list.append(list[i])\n    \n    # return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    # Loop through the list and insert the element before each element\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = num\n        abs_value = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        print(f\"Polar coordinates for {num}: (|r| = {abs_value:.2f}, theta = {angle:.2f}\u00b0)\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''  \n    for number in numbers:  \n        real, imag = cmath.polar(number)  \n        print(\"Real part:\", real)  \n        print(\"Imaginary part:\", imag)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n        \n        # Append the polar coordinates to the result list\n        result.append((r, theta))\n        \n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input, and returns a list of polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # convert to polar coordinates\n        r = abs(number)\n        phi = cmath.phase(number)\n        \n        # add polar coordinates to list\n        polar_coordinates.append([r, phi])\n    \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        print('({}, {})'.format(real, imag))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        x, y = num.real, num.imag\n        r = cmath.sqrt(x**2 + y**2)\n        theta = cmath.phase(num)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(complex(number))\n\n    polar_coordinates = []\n    for complex_number in complex_numbers:\n        r = abs(complex_number)\n        theta = cmath.phase(complex_number)\n        polar_coordinates.append((r, theta))\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            r = abs(num)\n            theta = cmath.phase(num)\n            print(f'({r:.2f}, {theta:.2f})')\n        else:\n            print('Invalid input')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        complex_number = complex(number)\n        r = abs(complex_number)\n        phi = cmath.phase(complex_number)\n        print(f\"({number}) = ({r}, {phi}\u00b0)\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(complex(real, imag))\n        print(\"({}, {})\".format(magnitude, angle))\n\nif __name__ == \"__main__\":\n    numbers = [3+4j, 5+6j, 7+8j]\n    convert(numbers)"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    This function counts the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Count the number of integer elements in a given list.\n\n    Args:\n        lst (list): the list to count integers in.\n\n    Returns:\n        int: the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all possible combinations of the elements of the list\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            for k in range(j+1, len(l)+1):\n                for l in range(k+1, len(l)+1):\n                    for m in range(l+1, len(l)+1):\n                        for n in range(m+1, len(l)+1):\n                            combination = (l, m, n)\n                            yield combination"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:i+n], n):\n            comb_list.append(tuple(j))\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all combinations with repetition\n    combs = list(combinations_with_replacement(l, n))\n    # convert each combination to a tuple\n    combs_tuple = [tuple(comb) for comb in combs]\n    # return the list of tuples\n    return combs_tuple"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Combinations function with repetition\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l) - n + 1):\n        comb = tuple(l[i:i+n])\n        result.append(comb)\n    return result"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        flag = True\n        for j in range(2, i):\n            if i % j == 0:\n                flag = False\n                break\n        if flag == True:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    def is_prime(num):\n        '''\n        Helper function to check if a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Count the number of prime numbers less than a given number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # Function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Counter variable to keep track of prime numbers\n    count = 0\n    \n    # Loop through all numbers less than n\n    for i in range(2, n):\n        # Check if the current number is prime\n        if is_prime(i):\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a\n\nprint(swap_numbers(1, 2))  # Output: (2, 1)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Get the length of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Initialize a variable to store the maximum value\n    max_value = test_tup1[0]\n\n    # Check if the maximum value can be obtained from one tuple only\n    if max_value >= test_tup2[0]:\n        return test_tup1\n\n    # Check if the maximum value can be obtained from the second tuple only\n    elif max_value >= test_tup1[0]:\n        return test_tup2\n\n    # If none of the above conditions are satisfied, find the maximum value\n    # by comparing the values of all elements of both tuples\n    else:\n        for i in range(len1):\n            if test_tup1[i] > test_tup2[i]:\n                max_value = test_tup1[i]\n                break\n            elif test_tup2[i] > test_tup1[i]:\n                max_value = test_tup2[i]\n                break\n        else:\n            print(\"Error: Cannot find the maximum value in the tuples.\")\n        return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the length of the first tuple\n    len1 = len(test_tup1)\n    # Get the length of the second tuple\n    len2 = len(test_tup2)\n    # If the length of the first tuple is greater than the length of the second tuple, swap the tuples\n    if len1 > len2:\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    # Initialize the max value to 0\n    max_value = 0\n    # Iterate through each element in the first tuple\n    for i in range(len1):\n        # Get the value of the current element in the first tuple\n        value1 = test_tup1[i]\n        # Iterate through each element in the second tuple\n        for j in range(len2):\n            # Get the value of the current element in the second tuple\n            value2 = test_tup2[j]\n            # If the value in the first tuple is greater than the value in the second tuple and the value in the second tuple is greater than the current max value, update the max value\n            if value1 > value2 and value2 > max_value:\n                max_value = value2\n    # Return the max value\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and returns the maximum element from both tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    \n    max_elem = max(test_tup1)\n    \n    for num in test_tup2:\n        if num > max_elem:\n            max_elem = num\n    \n    return max_elem"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Check if the two tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        return None\n\n    # Initialize a list to store the max values\n    max_list = []\n\n    # Iterate over the values in each tuple\n    for i in range(len(test_tup1)):\n        # If the value in the first tuple is greater, add it to the max list\n        if test_tup1[i] > test_tup2[i]:\n            max_list.append(test_tup1[i])\n        # Otherwise, if the value in the second tuple is greater, add it to the max list\n        elif test_tup2[i] > test_tup1[i]:\n            max_list.append(test_tup2[i])\n        # Otherwise, if the values are equal, add the first value to the max list\n        else:\n            max_list.append(test_tup1[i])\n\n    # Return the max list\n    return max_list"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Initialize variables to store maximum values\n    max1, max2 = None, None\n\n    # Check each element of the tuples and update the maximum values\n    for i in range(len(test_tup1)):\n        if max1 is None or test_tup1[i] > max1:\n            max1 = test_tup1[i]\n        if max2 is None or test_tup2[i] > max2:\n            max2 = test_tup2[i]\n\n    # Return the maximum values\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    max_val = max(test_tup1)\n    max_idx = test_tup1.index(max_val)\n    max_idx2 = test_tup2.index(max_val)\n    return (max_val, test_tup2[max_idx2], test_tup1[max_idx])"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = test_tup1 if test_tup1 > test_tup2 else test_tup2\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Check which list has the maximum value\n    if max(list1) > max(list2):\n        return max(list1)\n    else:\n        return max(list2)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for i in primes:\n        if n % i == 0:\n            count += 1\n        if count == n:\n            return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    p = 2\n    while True:\n        if is_prime(p):\n            count = 0\n            for i in range(2, p):\n                if p % i == 0:\n                    count += 1\n                    if count == 3:\n                        break\n            if count == 3:\n                print(p)\n                if n == 1:\n                    return p\n                n -= 1\n        p += 1\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 3\n    elif n == 2: \n        return 5\n    else:\n        for i in range(3, n+1, 2):\n            if is_prime(i) and is_prime(i+2):\n                return i+2\n            \n        return -1\n\ndef is_prime(n): \n    '''\n    Write a function to check if a given number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        '''\n        Helper function to check if a given number is prime.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def nth_newman_prime(n):\n        '''\n        Main function to find the nth newman prime number.\n        '''\n        i = 0\n        num = 2\n        while True:\n            if is_prime(num):\n                i += 1\n                if i == n:\n                    return num\n            num += 1\n    \n    return nth_newman_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define the sequence of odd numbers from 3 to 2*n\n    sequence = [3]\n    for i in range(2, 2*n, 2):\n        sequence.append(i)\n\n    # Initialize the count of primes to 0\n    count = 0\n\n    # Initialize the index of the sequence to start\n    index = 0\n\n    # Initialize the current prime number to the first element of the sequence\n    current_prime = sequence[index]\n\n    # Loop until the count of primes equals n\n    while count < n:\n        # Check if the current prime number is a newman-shanks-williams prime\n        if is_prime_newman_shanks_williams(current_prime):\n            count += 1\n        # Increment the index and update the current prime number\n        index = (index + 1) % len(sequence)\n        current_prime = sequence[index]\n\n    # Return the nth newman-shanks-williams prime number\n    return current_prime\n\n\ndef is_prime_newman_shanks_williams(num):\n    '''\n    Write a function to check if a number is a newman-shanks-williams prime.\n    '''\n    # Check if the number is less than 3\n    if num < 3:\n        return False\n    # Check if the number is divisible by 2\n    elif num % 2 == 0:\n        return False\n    # Check if the number is divisible by 3\n    elif num % 3 == 0:\n        return False\n    # Check if the number is divisible by 5\n    elif num % 5 == 0:\n        return False\n    # Check if the number is divisible by 7\n    elif num % 7 == 0:\n        return False\n    # Check if the number is divisible by 11\n    elif num % 11 == 0:\n        return False\n    # Check if the number is divisible by 13\n    elif num % 13 == 0:\n        return False\n    # Check if the number is divisible by 17\n    elif num % 17 == 0:\n        return False\n    # Check if the number is divisible by 19\n    elif num % 19 == 0:\n        return False\n    # Check if the number is divisible by 23\n    elif num % 23 == 0:\n        return False\n    # Check if the number is divisible by 29\n    elif num % 29 == 0:\n        return False\n    # Check if the number is divisible by 31\n    elif num % 31 == 0:\n        return False\n    # Check if the number is divisible by 37\n    elif num % 37 == 0:\n        return False\n    # Check if the number is divisible by 41\n    elif num % 41 == 0:\n        return False\n    # Check if the number is divisible by 43\n    elif num % 43 == 0:\n        return False\n    # Check if the number is divisible by 47\n    elif num % 47 == 0:\n        return False\n    # Check if the number is divisible by 53\n    elif num % 53 == 0:\n        return False\n    # Check if the number is divisible by 59\n    elif num % 59 == 0:\n        return False\n    # Check if the number is divisible by 61\n    elif num % 61 == 0:\n        return False\n    # Check if the number is divisible by 67\n    elif num % 67 == 0:\n        return False\n    # Check if the number is divisible by 71\n    elif num % 71 == 0:\n        return False\n    # Check if the number is divisible by 73\n    elif num % 73 == 0:\n        return False\n    # Check if the number is divisible by 79\n    elif num % 79 == 0:\n        return False\n    # Check if the number is divisible by 83\n    elif num % 83 == 0:\n        return False\n    # Check if the number is divisible by 89\n    elif num % 89 == 0:\n        return False\n    # Check if the number is divisible by 97\n    elif num % 97 == 0:\n        return False\n    # Check if the number is divisible by 101\n    elif num % 101 == 0:\n        return"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n\n    # Initialize count and current prime number\n    count = 0\n    current_prime = 2\n\n    # Check if the current prime is greater than n\n    while count < n:\n\n        # Check if the current prime is prime\n        is_prime = True\n        for i in range(2, int(current_prime ** 0.5) + 1):\n            if current_prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n\n        # Move to the next prime number\n        current_prime += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return current_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    i = 2\n    j = 0\n    is_prime = True\n\n    # Check if n is less than 2\n    if n < 2:\n        return 0\n\n    # Loop through the numbers\n    while i <= n:\n        # Check if i is prime\n        if j == 0:\n            for k in range(2, i):\n                if i % k == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                break\n            j = 1\n        # Check if i is greater than n\n        elif i > n:\n            break\n        i += 1\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list of prime numbers up to the square root of n\n    primes = [2]\n    while primes[-1] * primes[-1] <= n:\n        primes.append(primes[-1] + 1)\n\n    # Find the nth prime number\n    for i in range(n - 1):\n        if is_prime(primes[i]):\n            return primes[i]\n        else:\n            if primes[i] * primes[i] > n:\n                return primes[i - 1]\n\ndef is_prime(n):\n    '''\n    Check if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    count = 0\n    prime = 2\n\n    # Iterate through numbers until n is reached\n    while count < n:\n        # Check if the current number is prime\n        if is_prime(prime):\n            # If it is prime, add it to the count and increment the prime\n            count += 1\n            prime += 1\n        # If not prime, increment the prime\n        else:\n            prime += 1\n\n    # Return the nth prime\n    return prime\n\ndef is_prime(num):\n    '''\n    Check if a given number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # first, we define the list of primes up to 100,000\n    primes = [True] * 100001\n    primes[0] = primes[1] = False # 0 and 1 are not prime\n\n    # then, we loop through the list of primes and mark all the multiples of the current prime as not prime\n    for i in range(2, int(primes.index(True)) + 1):\n        if primes[i]:\n            for j in range(i*i, 100001, i):\n                primes[j] = False\n\n    # finally, we loop through the list of primes and find the nth prime that is still marked as prime\n    for i in range(n, 100001):\n        if primes[i]:\n            return i"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    \n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            result_tup += (float('nan'),)\n        else:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    # Perform element-wise division operation\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    \n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # initialize the result tuple with the same length as the input tuples\n    result_tup = (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            raise ValueError(\"Cannot perform division by zero\")\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have same length\")\n        return\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            print(\"Error: Cannot divide by zero\")\n            return\n        else:\n            result_tup.append(test_tup1[i]/test_tup2[i])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The number of elements in the two tuples must be equal.\"\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] / test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuple sizes do not match\")\n        return None\n\n    # perform element-wise division and return result as a new tuple\n    result_tup = tuple([num1/num2 for num1, num2 in zip(test_tup1, test_tup2)])\n    return result_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(x / y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half_len = len(list1) // 2\n    return (list1[:half_len], list1[half_len:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts\n    where the length of the first part of the list is L and returns the resulting lists in a tuple.\n    \"\"\"\n    # Check if L is a positive integer\n    if not isinstance(L, int) or L <= 0:\n        raise ValueError(\"L must be a positive integer\")\n\n    # Split the list into two parts\n    mid = len(lst) // 2\n    lst1 = lst[:mid]\n    lst2 = lst[mid:]\n\n    # Check if the length of lst1 is equal to L\n    if len(lst1) == L:\n        return lst1, lst2\n    else:\n        return lst2, lst1"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Use slicing to split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = len(list1) // 2\n    part1 = list1[:half]\n    part2 = list1[half:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if n % L == 0:\n        # If the number of elements in the list is divisible by L, then the first part will have L elements and the second part will have n-L elements.\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)\n    else:\n        # If the number of elements in the list is not divisible by L, then the first part will have L elements and the second part will have n-L+1 elements.\n        first_part = list1[:L]\n        second_part = list1[L+1:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2!= 0: # check if list length is odd\n        L = L + 1 # add one to L if list length is odd\n    L = L // 2 # divide L by 2 to get number of elements in first part\n    \n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # return the two parts as a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L!= 0:\n        raise ValueError(\"The length of the list should be a multiple of L.\")\n    mid = len(list1) // 2\n    part1 = list1[:mid]\n    part2 = list1[mid:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Find the length of the first part of the list\n    n = len(list1)\n    if L > n:\n        raise ValueError(\"L is greater than the length of the list.\")\n    first_part = list1[:L]\n    second_part = list1[L:]\n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * h_age + 5\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    breed = input(\"What is the breed of your dog? \")\n    age = int(input(\"How old is your dog? \"))\n    if breed == \"Labrador Retriever\" and age >= 3:\n        dog_years = 3 + age\n    elif breed == \"Golden Retriever\" and age >= 4:\n        dog_years = 4 + age\n    elif breed == \"Poodle\" and age >= 4:\n        dog_years = 4 + age\n    else:\n        dog_years = 1 + age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_years = h_age * 7\n    return age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = h_age * 7\n    return dog_age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 12 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog's years based on the height in inches.\n    \"\"\"\n    dog_years = 7.0 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Check if the step is valid\n    if step <= 0:\n        raise ValueError(\"The step must be a positive integer.\")\n\n    # Split the list and count the elements\n    n = len(S)\n    count = n // step\n    if n % step!= 0:\n        count += 1\n\n    # Initialize the result list\n    result = []\n\n    # Split the list for every nth element and append the resulting lists to the result list\n    for i in range(count):\n        start = i * step\n        end = min((i + 1) * step, n)\n        result.append(S[start:end])\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if isinstance(S, list):\n        length = len(S)\n        result = []\n        for i in range(0, length, step):\n            result.append(S[i:i+step])\n        return result\n    else:\n        raise TypeError('Input must be a list.')"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Define an empty list to store the resulting lists\n    results = []\n    # Initialize a variable to keep track of the current index\n    i = 0\n    # Loop through the list\n    while i < len(S):\n        # Check if the current index is divisible by the step parameter\n        if i % step == 0:\n            # Split the list at the current index\n            sublist = S[:i]\n            # Append the resulting sublist to the results list\n            results.append(sublist)\n            # Reset the sublist to the current index + 1\n            S = S[i+1:]\n        # Increment the current index by 1\n        i += 1\n    # Return the results list\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    while n < len(S):\n        result.append(S[::n])\n        n += step\n    result.append(S[::step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i::step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step == 1:\n        return [S]\n    else:\n        result = []\n        for i in range(0, len(S), step):\n            result.append(S[i:i+step])\n        return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S)\n    if n % step == 0:\n        return [S[i:i+step] for i in range(0, n, step)]\n    else:\n        return [S[i:i+step] for i in range(0, n, step)] + [S[n-n%step:]]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = 6 * l * l\n    return s"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    # Formula for lateral surface area of a cube\n    # Lateral surface area = 6 * (l^2)\n    # where, l^2 = side length^2\n    \n    lateral_surface_area = 6 * (l**2)\n    \n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return (6*l**2)"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initialize sum to 0\n    sum = 0\n\n    # loop through the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the square of i\n        square = i ** 2\n        # add the square to the sum\n        sum += square\n\n    # return the sum\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_squares = 0\n    for i in range(1, n+1, 2):\n        odd_squares += i*i\n    return odd_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 2\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):  \n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    count = 1\n    sum = 0\n    while count <= n:\n        sum += count*count\n        count += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the odd natural number to the sum of squares\n        sum_of_squares += i**2\n        \n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    current_number = 1\n    while current_number <= n:\n        sum_of_squares += current_number ** 2\n        current_number += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Define the star pattern\n    pattern = \"*\"\n    # Initialize the result variable\n    result = \"\"\n    # Loop n times\n    for i in range(n):\n        # Append the pattern to the result variable\n        result += pattern\n        # Calculate the number of spaces required to complete the pattern\n        spaces = n - i\n        # Add spaces to the result variable\n        result += \" \" * spaces\n    # Return the final result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the result to 0\n    result = 0\n    # Loop n times and add 1 to the result for each new line\n    for i in range(n):\n        # Add 1 to the result\n        result += 1\n        # Print the result\n        print('*' * result)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    if n == 1:\n        return \"*\"\n    else:\n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return str(n) + \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # initialize variables\n    count = 1\n    result = 1\n\n    # calculate then'th star number\n    while count <= n:\n        result *= 2\n        count += 1\n\n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define the number of rows and columns in the pyramid\n    num_rows = n\n    num_cols = n\n\n    # Initialize a list to store the pyramid\n    pyramid = []\n\n    # Define the base value for the pyramid\n    base = 1\n\n    # Loop through the rows and columns of the pyramid\n    for i in range(num_rows):\n        # Initialize an empty list to store the current row\n        row = []\n\n        # Loop through the columns of the current row\n        for j in range(num_cols):\n            # Calculate the value of the current pyramid cell\n            val = (base * (num_rows - i - 1)) // (2 * j + 1)\n\n            # Add the value to the row list\n            row.append(val)\n\n        # Add the row list to the pyramid list\n        pyramid.append(row)\n\n        # Update the base value for the next row\n        base += 1\n\n    # Return the nth pyramid cell value\n    return pyramid[n - 1][n - 1]"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    num = 0\n    current_star = ''\n    \n    # loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # multiply i by 10 (since each number is a power of 10)\n        num += i*10\n        \n        # determine the number of leading zeros in the number\n        leading_zeros = len(str(num)) - len(str(num).lstrip('0'))\n        \n        # determine the number of stars that need to be printed\n        stars = num//(10**(leading_zeros))\n        \n        # print the stars\n        for j in range(stars):\n            print('*', end='')\n            \n        # update the number for the next iteration\n        num %= 10**(leading_zeros)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    for i in range(1, n+1):\n        print(\"*\" * count)\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the star number\n    star_num = 1\n    # loop through the numbers up to n\n    for i in range(1, n+1): \n        # multiply the previous star number by 2\n        star_num = star_num * 2\n        # print the current star number\n        print(star_num)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # ASCII values start from 32\n    return ord(k) - 32"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        k = k.lower()\n        if k == 'a':\n            return 97\n        elif k == 'b':\n            return 98\n        elif k == 'c':\n            return 99\n        elif k == 'd':\n            return 100\n        elif k == 'e':\n            return 101\n        elif k == 'f':\n            return 102\n        elif k == 'g':\n            return 103\n        elif k == 'h':\n            return 104\n        elif k == 'i':\n            return 105\n        elif k == 'j':\n            return 106\n        elif k == 'k':\n            return 107\n        elif k == 'l':\n            return 108\n        elif k =='m':\n            return 109\n        elif k == 'n':\n            return 110\n        elif k == 'o':\n            return 111\n        elif k == 'p':\n            return 112\n        elif k == 'q':\n            return 113\n        elif k == 'r':\n            return 114\n        elif k =='s':\n            return 115\n        elif k == 't':\n            return 116\n        elif k == 'u':\n            return 117\n        elif k == 'v':\n            return 118\n        elif k == 'w':\n            return 119\n        elif k == 'x':\n            return 120\n        elif k == 'y':\n            return 121\n        elif k == 'z':\n            return 122\n        else:\n            return -1\n    else:\n        return -1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character k as input and returns its ascii value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if even_index % 2 == 0:\n                sum += arr[i]\n            even_index += 1\n    \n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0  \n    index = 0  \n    length = len(arr)  \n\n    while index < length:  \n        if arr[index] % 2 == 0:  \n            sum_even += arr[index]  \n            if index % 2 == 0:  \n                print(\"Even number at index:\", index, \"is:\", arr[index])  \n        index += 1  \n\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n        if even_index % 2 == 0:\n            print(even_sum)\n            even_sum = 0\n            even_index = 0\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and i % 2 == 0:\n            even_sum += num\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index = i\n                break\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    count = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n\n    return even_sum, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:  # check if the number is even\n            even_sum += arr[i]  # add it to the sum\n            even_index += 1  # increment the index if even\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # Initialize a variable to store the sum of even numbers at even positions of the list\n    even_sum = 0\n\n    # Loop through each element in the list\n    for i in range(len(arr)):\n        # If the current element is even and its position is even, add it to the even_sum variable\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0\n\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_power_sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            even_power_sum += i\n    return even_power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i ** 5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i ** 5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2): \n        # Add the current number raised to the fifth power to the sum variable\n        sum += i**5\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_list)):\n        rear_elements.append(test_list[i][1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [rear for (front, rear) in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    # initialize empty list to store rear elements\n    rear_elements = []\n    # iterate through each tuple in the list\n    for tup in test_list:\n        # extract the rear element from the tuple and add it to the rear_elements list\n        rear_elements.append(tup[1])\n    # return the rear_elements list\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples must have the same length.\")\n        return\n    \n    # create a new tuple to store the result\n    result_tup = []\n    \n    # loop through the tuples and subtract the elements\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    \n    # return the result tuple\n    return tuple(result_tup)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check that both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return None\n\n    # Create a new tuple with the subtraction result\n    subtraction_result = ()\n    for i in range(len(test_tup1)):\n        subtraction_result += (test_tup1[i] - test_tup2[i],)\n\n    return subtraction_result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result.append(test_tup1[i] - test_tup2[i])\n        else:\n            result.append(test_tup1[i])\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even = 0\n    for i in range(2, n+1, 2):\n        coeff = math.factorial(n) / (math.factorial(i-1) * math.factorial(n-i+1))\n        sum_even += coeff\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize sum to 0\n    total_sum = 0\n\n    # Loop through each odd index\n    for i in range(1, n+1, 2):\n        # Calculate the even index binomial coefficient\n        coeff = math.comb(n, i)\n        # Check if the index is even and add the coefficient to the sum\n        if i % 2 == 0:\n            total_sum += coeff\n\n    return total_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize variables\n    coeff_sum = 0\n    # Iterate through the range of even indices\n    for i in range(0, n, 2):\n        coeff_sum += math.factorial(n-i) / (math.factorial(i) * math.factorial(n-i))\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # initialize variables\n    sum = 0\n    i = 0\n    j = 0\n\n    # loop through even index binomial coefficients\n    while i <= n:\n        j = 0\n        while j <= i:\n            # calculate binomial coefficient\n            binomial_coeff = math.comb(i, j)\n\n            # check if even index\n            if j % 2 == 0:\n                sum += binomial_coeff\n\n            j += 1\n        i += 1\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += math.comb(n, 2*i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2, n+1, 2):\n        coeff_sum += math.comb(n, i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Use the formula for even index binomial coefficients\n    for i in range(2, n+1):\n        sum += math.comb(n, i)*i\n    \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_index_coeffs = 0\n    for i in range(1, n+1):\n        for j in range(2, i+1):\n            sum_even_index_coeffs += math.comb(i,j) * (2*j-1) // (2*i-1)\n    return sum_even_index_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        for j in range(2, i+1):\n            if (i-j) % 2 == 0:\n                sum += binomial(i, j)\n    return sum\n\ndef binomial(n, k):\n    '''\n    Returns the binomial coefficient C(n, k).\n    '''\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n-k))"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(2, n+1):\n        sum_even_coeffs += math.comb(n, i-2)*2**i\n\n    return sum_even_coeffs"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14159 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (3.14 * r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    V = (1/3) * pi * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function calculates the volume of a cylinder given its radius and height.\n    \n    :param r: the radius of the cylinder (float)\n    :param h: the height of the cylinder (float)\n    :return: the volume of the cylinder (float)\n    \"\"\"\n    volume = (3.14 * r ** 2 * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * (3.14 * r ** 2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * (r ** 2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    vol = 1/3 * pi * r * r * h\n    return vol\n\nprint(volume_cylinder(3,5))  # Output: 61.47"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3) * 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14159 * (r**2) * h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0 or test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i, x in enumerate(test_tup):\n        if i == 0:\n            continue\n        if x == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(n):\n        decagonal = 5*i*i + 5*i + 1\n        print(decagonal)\n\nis_num_decagonal(int(input(\"Enter the value of n: \")))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n % 2!= 0:  # Check if n is even\n        return (n * (3 * n - 1)) // 2  # If n is odd, return (3n - 1) // 2\n    else:  # If n is even\n        return (n * (5 * n - 3)) // 2  # Return (5n - 3) // 2\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_number = 1\n    for i in range(1, n+1):\n        decagonal_number += i*5\n    return decagonal_number"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_nums = []\n    for i in range(1, n+1):\n        decagonal_nums.append(i * (2*i-1))\n    return decagonal_nums[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 0: \n        return False \n\n    # Initialize variables\n    decagonal_number = 1\n    count = 1\n\n    # Iterate until nth decagonal number is found\n    while count <= n:\n        decagonal_number += count\n        count += 2\n    \n    return decagonal_number"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    row = 1\n    col = 1\n    count = 1\n\n    # Calculate the nth decagonal number\n    while count <= n:\n        # If the number is divisible by 5, add 2 to it\n        if count % 5 == 0:\n            count += 2\n        # If the number is divisible by 2, add 1 to it\n        elif count % 2 == 0:\n            count += 1\n        # If the number is not divisible by 5 or 2, add 1 to it\n        else:\n            count += 1\n        \n        # Move to the next number in the decagonal row\n        if row == col:\n            row += 1\n            col = 1\n        else:\n            col += 1\n            \n    # If the count is less than n, the nth decagonal number is not found\n    if count < n:\n        return False\n    # Otherwise, the nth decagonal number is found\n    else:\n        return True"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal = decagonal + i*(i+1)\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    else:\n        return (n * (3 * n - 1) + 2 * n) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize a variable to store the decagonal number\n    decagonal = 0\n\n    # Check if the input n is greater than 0\n    if n <= 0:\n        return None\n\n    # Initialize a variable to store the sum of the cubes of odd numbers from 1 to n\n    odd_sum = n * (n + 1) * (2 * n + 1) // 6\n\n    # Initialize a variable to store the sum of the cubes of even numbers from 1 to n\n    even_sum = n * (n + 1) * (2 * n + 1) // 4\n\n    # Check if the sum of the cubes of odd numbers is greater than the sum of the cubes of even numbers\n    if odd_sum > even_sum:\n        return decagonal\n    else:\n        # If the sum of the cubes of odd numbers is less than the sum of the cubes of even numbers,\n        # find the decagonal number by subtracting the sum of the cubes of odd numbers from the sum of the cubes of even numbers\n        decagonal = odd_sum - even_sum\n        return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 5 * is_num_decagonal(n-1) + n"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return (found, i)\n    return (found, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    index = -1\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n\n    return (found, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as an argument and returns True if all the elements in the list are unique and False otherwise.\n    '''\n    unique_set = set(test_list)\n    if len(test_list) == len(unique_set):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all its elements are unique, and False otherwise.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = set(test_list)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a dictionary to store the elements of the list\n    unique_dict = {}\n    # iterate through the list\n    for item in test_list:\n        # check if the item already exists in the dictionary\n        if item in unique_dict:\n            # if it does, return False (the list contains duplicates)\n            return False\n        # add the item to the dictionary if it doesn't exist\n        else:\n            unique_dict[item] = True\n    # if all the items are unique, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # Subtract each element of the two lists\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must have the same length\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]-nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes in two lists and subtracts the corresponding element-wise values.\n\n    Args:\n    nums1: List of numbers\n    nums2: List of numbers\n\n    Returns:\n    List of numbers, where each element is the difference between the corresponding elements of the input lists.\n\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have the same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists have different lengths\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    frequency = [0] * 10\n    \n    # Counting frequency of digits in the integer\n    for i in str(n):\n        frequency[int(i)] += 1\n    \n    # Checking if frequency of each digit is less than or equal to the digit itself\n    for digit in range(10):\n        if frequency[digit] > 0 and frequency[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    # Initialize variables\n    count = [0]*10 # Initialize count list with zeros for each digit\n\n    # Loop through each digit in the integer\n    for digit in str(n):\n        # Add 1 to the corresponding digit count in the count list\n        count[int(digit)] += 1\n\n    # Loop through the count list and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in count:\n        if digit > n//digit:\n            return False\n\n    # If all the digits have a valid frequency, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    num_digits = len(str(n))\n    freq = {}\n    \n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit in str(n):\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in range(10):\n        freq[i] = 0\n    while n > 0:\n        digit = n % 10\n        freq[digit] += 1\n        n //= 10\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = {}\n    \n    # count the frequency of each digit\n    for digit in str(n):\n        if digit in count:\n            count[digit] += 1\n        else:\n            count[digit] = 1\n    \n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in count:\n        if count[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize an empty dictionary to store the frequency of digits\n    freq = {}\n\n    # loop through each digit in the integer and increment its frequency in the dictionary\n    for digit in str(n):\n        freq[int(digit)] = freq.get(int(digit), 0) + 1\n\n    # loop through each digit in the integer and check if its frequency is greater than or equal to its value\n    for digit in str(n):\n        if freq[int(digit)] < int(digit):\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # loop through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    # if all digits have a frequency less than or equal to themselves, the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # initialize a dictionary to store the frequency of digits in the integer\n    freq = {}\n\n    # loop through each digit in the integer and increment its frequency in the dictionary\n    for digit in str(n):\n        freq[int(digit)] = freq.get(int(digit), 0) + 1\n\n    # loop through each digit in the dictionary and check whether its frequency is less than or equal to itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    # if no errors were found, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10\n    for d in digits:\n        freq[d] += 1\n    for i in range(10):\n        if freq[i] > 0 and n % i!= 0:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # create a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # loop through each digit in the integer\n    for digit in str(n):\n        # check if the digit has already been added to the dictionary\n        if digit in freq:\n            # increment the frequency of the digit in the dictionary\n            freq[digit] += 1\n        else:\n            # add the digit to the dictionary with frequency 1\n            freq[digit] = 1\n    \n    # loop through the dictionary to check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    \n    # if all the digits have valid frequency, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    if list[0]!= element:\n        return False\n    return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB][bB]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(?=b{2,3})')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?:b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b[23]'\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab[b]{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*(b){2,3}')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    # Define a regular expression pattern to match the 'a' character followed by two or three 'b' characters\n    pattern = re.compile(r'^a(?=b{2,3})')\n    \n    # Use the search() method to search for a match in the text\n    match = pattern.search(text)\n    \n    # If a match is found, return True; otherwise, return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'[ab]{2,3}a')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Get the original array\n    arr = a\n    \n    # Calculate the maximum sum of the original array\n    max_sum = max(arr)\n    \n    # Calculate the maximum sum of the original array repeated k times\n    max_sum_repeated = max_sum * k\n    \n    # Loop through the original array and add its values to a list\n    sum_list = []\n    for num in arr:\n        sum_list.append(num)\n    \n    # Calculate the maximum sum of the modified array\n    max_sum = max(sum_list)\n    \n    # Calculate the maximum sum of the modified array repeated k times\n    max_sum_repeated = max_sum * k\n    \n    # Return the maximum sum of the modified array repeated k times\n    return max_sum_repeated"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize max_sum with the first element of the array\n    max_sum = a[0]\n    # Initialize the result list with the first element of the array\n    result = [a[0]]\n    # Repeat the array k times\n    for i in range(1, k):\n        # Copy the current element to the end of the result list\n        result.append(a[i])\n        # Calculate the sum of the current element and the sum of the result list\n        temp_sum = a[i] + sum(result)\n        # Update the max_sum if the sum is greater than the current max_sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize the maximum sum and the maximum sum of the subarray without repetition\n    max_sum_with_repetition = float('-inf')\n    max_sum_without_repetition = float('-inf')\n\n    # Initialize the sum of the subarray without repetition\n    sum_without_repetition = 0\n\n    # Iterate through the given array n times\n    for _ in range(n):\n        # Check if the sum of the subarray without repetition is greater than the current maximum sum of the subarray without repetition\n        if sum_without_repetition > max_sum_without_repetition:\n            max_sum_without_repetition = sum_without_repetition\n\n        # Add the current element to the sum of the subarray without repetition\n        sum_without_repetition += a[0]\n\n        # Initialize the sum of the subarray with repetition\n        sum_with_repetition = 0\n\n        # Iterate through the given array k times\n        for _ in range(k):\n            # Add the current element to the sum of the subarray with repetition\n            sum_with_repetition += a[0]\n\n            # Check if the sum of the subarray with repetition is greater than the current maximum sum of the subarray with repetition\n            if sum_with_repetition > max_sum_with_repetition:\n                max_sum_with_repetition = sum_with_repetition\n\n        # Remove the first element from the subarray without repetition\n        a = a[1:]\n\n    # Return the maximum sum of the subarray with repetition\n    return max_sum_with_repetition"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create the modified array\n    modified_array = [0] * (n*k)\n    # Initialize the maximum sum and current sum to zero\n    max_sum = 0\n    current_sum = 0\n    # Iterate through the original array\n    for i in range(n):\n        # Add the element to the current sum\n        current_sum += a[i]\n        # If the current sum exceeds the length of the modified array, remove the element from the current sum\n        if current_sum > n*k:\n            current_sum -= a[i-k]\n        # Add the element to the modified array\n        modified_array[i*k] = a[i]\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    if n % k!= 0:\n        raise ValueError(\"The size of the original array must be a multiple of the number of repetitions.\")\n    original_array = a\n    modified_array = [0] * n\n    for i in range(k):\n        modified_array[i*n:(i+1)*n] = a\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += modified_array[i]\n        max_sum = max(max_sum, current_sum)\n        current_sum -= original_array[i]\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_sum = float('-inf') # initialize max_sum to negative infinity\n    \n    # iterate through all possible positions of the repeated array\n    for i in range(n):\n        # initialize sum to the sum of the first element of the original array\n        sum = a[0]\n        \n        # iterate through all possible subarrays of length n-i\n        for j in range(i, n):\n            # add the current element to the sum\n            sum += a[j]\n            \n            # if the sum is greater than the max_sum, update max_sum\n            if sum > max_sum:\n                max_sum = sum\n                \n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    This function takes a list of integers a, the length of the array, and an integer k.\n    It returns the maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the starting and ending indices of the largest sum\n    max_sum = float('-inf')\n    start_index = 0\n    end_index = 0\n\n    # Repeat the array k times and add each element to the sum\n    for i in range(k):\n        temp_sum = 0\n        for j in range(n):\n            temp_sum += a[j]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            start_index = i\n            end_index = i\n        else:\n            end_index += 1\n\n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1: \n        return a[0]\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = a[0]\n    repeated_sum = 0\n\n    for i in range(1, n): \n        current_sum = current_sum + a[i] - a[i % k]\n        repeated_sum = repeated_sum + a[i] - a[i % k]\n\n        if current_sum > max_sum: \n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def repeated_array_sum(a, n, k):\n        '''\n        Helper function to calculate the sum of the repeated array.\n        '''\n        repeated_array = [a] * k\n        return sum(repeated_array)\n\n    max_sum = float('-inf')\n    repeated_array_sum_list = []\n    for i in range(n):\n        repeated_array_sum_list.append(repeated_array_sum(a, n, i+1))\n        max_sum = max(max_sum, repeated_array_sum_list[i])\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # calculate the maximum subarray sum of the original array\n    max_sum = max(a)\n    # initialize the maximum subarray sum of the modified array\n    max_sum_modified = max_sum * k\n\n    # loop through the array and find the maximum subarray sum of the modified array\n    for i in range(n):\n        # calculate the sum of the current element and all previous elements in the original array\n        subarray_sum = sum(a[i:i+k])\n        # update the maximum subarray sum of the modified array if necessary\n        if subarray_sum > max_sum_modified:\n            max_sum_modified = subarray_sum\n\n    return max_sum_modified"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(n):\n        if i % 2 == 0:  # Check if the number is even\n            sum_of_squares += i ** 2  # Add the square of even numbers to the sum\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        num = 2 * count + 1\n        sum_of_squares += num ** 2\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # Initialize sum of squares to 0\n    sum_of_squares = 0\n\n    # Loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate square of even natural number\n        square = i**2\n        # Add square to sum of squares\n        sum_of_squares += square\n\n    # Return sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum and count variables to zero\n    sum_of_squares = 0\n    count = 0\n    \n    # loop until count reaches n\n    while count < n:\n        # add square of current number to sum\n        sum_of_squares += (2*count + 1)**2\n        # increment count by 1\n        count += 1\n    \n    # return sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum_square = 0\n    num = 2\n\n    while num <= n:\n        sum_square += num ** 2\n        num += 2\n\n    return sum_square"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_numbers = [i for i in range(2, n+1, 2)]\n    return sum([i**2 for i in even_numbers])"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum_of_squares += i ** 2\n        i += 1\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        if len(sublist) > len(lengths):\n            lengths = sublist\n    return lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        sublist_length = len(sublist)\n        if sublist_length not in max_lengths:\n            max_lengths.append(sublist_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        sublist_length = len(sublist)\n        if sublist_length not in max_lengths:\n            max_lengths.append(sublist_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list of maximum length in the input list.\n    '''\n    max_lengths = []\n    for lst in list1:\n        max_length = max(len(x) for x in lst)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(sublist)]\n        for item in sublist:\n            lengths.append(len(str(item)))\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize a dictionary to store the lengths of each list in the list of lists\n    lengths = {}\n    # Loop through each list in the list of lists\n    for sublist in list1:\n        # If the length of the sublist is not already in the dictionary, add it with a value of 1\n        if len(sublist) not in lengths:\n            lengths[len(sublist)] = 1\n        # Otherwise, increment the length of the sublist by 1 in the dictionary\n        else:\n            lengths[len(sublist)] += 1\n    # Find the maximum length of any sublist in the list of lists and return it as a list\n    return [k for k,v in lengths.items() if v == max(lengths.values())]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize max_length to 0\n    max_length = 0\n    \n    # Iterate through the list of lists\n    for lst in list1:\n        # Update max_length if the length of the current list is greater than max_length\n        if len(lst) > max_length:\n            max_length = len(lst)\n    \n    # Return the maximum length of all lists in the list of lists\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for i in range(len(list1)):\n        lengths.append(len(list1[i]))\n    return max(lengths)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def helper(left, right, colors):\n        if left > right:\n            return 1\n        \n        if colors == 0:\n            return 0\n        \n        if colors % 2 == 0:\n            if fence[left] == fence[right]:\n                return helper(left+1, right, colors-1) + helper(left, right-1, colors-1)\n            else:\n                return helper(left+1, right, colors-1) + helper(left, right-1, colors-1)\n        else:\n            if fence[left] == fence[right]:\n                return helper(left+1, right, colors-1)\n            else:\n                return helper(left+1, right, colors-1) + helper(left, right-1, colors-1)\n            \n    fence = [0]*n\n    for i in range(n):\n        fence[i] = int(input())\n    \n    return helper(0, n-1, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # initialize a 2D array to store the number of ways to paint the fence\n    ways = [[0] * (k+1) for i in range(n+1)]\n\n    # base case: if there are only n posts and k colors, then there is only one way to paint the fence\n    ways[n][k] = 1\n\n    # iterate through the previous rows of the 2D array\n    for i in range(n, 0, -1):\n        for j in range(k, 0, -1):\n            # check if there are more than 2 adjacent posts with the same color as the current post\n            if j - 1 >= 0 and ways[i-1][j-1] > 0 and ways[i-1][j] > 0:\n                ways[i][j] += ways[i-1][j]\n\n    return ways[1][1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Create a boolean list to store the colors assigned to each post\n    color_assigned = [False] * n\n\n    # Loop through the posts from 0 to n-1\n    for i in range(n):\n\n        # Loop through the colors from 0 to k-1\n        for j in range(k):\n\n            # If there are less than 2 posts assigned to the same color, increment the count\n            if color_assigned[i] and color_assigned[i-1] and color_assigned[i-2]:\n                count += 1\n\n            # Assign the current color to the current post\n            color_assigned[i] = True\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # base case\n    if n == 0:\n        return 1\n\n    # count ways of painting fence\n    if n % 2 == 0:\n        return (count_no_of_ways(n // 2, k) * 2) % 10**9 + (count_no_of_ways((n + 1) // 2, k) * 2) % 10**9\n    else:\n        return count_no_of_ways((n + 1) // 2, k) * 2 % 10**9"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize an array to store the number of ways for each color \n    # and an array to store the number of ways for each number of colors\n    ways = [[0] * (k+1) for _ in range(n+1)]\n\n    # Initialize the number of ways for 0 colors and 0 posts\n    ways[0][0] = 1\n\n    # Loop through each number of posts and each number of colors\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # If the previous number of colors is less than or equal to 2\n            if j <= 2:\n                # If the previous number of colors is 0 and the previous number of posts is greater than or equal to 2\n                if j == 0 and i >= 2:\n                    ways[i][j] += ways[i-2][j-1]\n                # If the previous number of colors is greater than 0 and the previous number of posts is greater than or equal to 2\n                elif j > 0 and i >= 2:\n                    ways[i][j] += ways[i-2][j]\n\n    # Return the final answer\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a 2D list to store the count of ways for each number of adjacent posts and each color.\n    count = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\n    # Base case: If there is only one post, there is only one way to paint the fence.\n    if n == 1:\n        return 1\n\n    # Base case: If there is only one color, there is only one way to paint the fence.\n    if k == 1:\n        return n\n\n    # Fill in the 2D list using dynamic programming.\n    for i in range(n + 1):\n        for j in range(k + 1):\n            if i == 0 or j == 0:\n                count[i][j] = 1\n            else:\n                # If the adjacent posts have the same color, there is only one way to paint the fence.\n                if i == j:\n                    count[i][j] = count[i - 1][j - 1]\n                else:\n                    # If the adjacent posts have different colors, there can be two ways:\n                    # (1) Paint one color from the first post and the other from the second post.\n                    # (2) Paint one color from the second post and the other from the first post.\n                    count[i][j] = count[i - 1][j] + count[i][j - 1]\n\n    # Return the count of ways.\n    return count[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Calculate the number of ways of painting the fence with n-1 posts and k colors\n    ways1 = count_no_of_ways(n-1, k)\n    \n    # Initialize a 2D array to store the number of ways of painting the fence with n-2 posts and k colors for each color\n    ways = [[0]*k for i in range(k)]\n    \n    # Calculate the number of ways of painting the fence with n-2 posts and k colors for each color\n    for color in range(k):\n        ways[color][color] = 1\n    \n    # Calculate the number of ways of painting the fence with n-2 posts and k colors for each color pair\n    for color1 in range(k):\n        for color2 in range(k):\n            if color1!= color2:\n                ways[color1][color2] = ways[color1][color2] + ways[color1][color1] + ways[color2][color2]\n    \n    # Return the number of ways of painting the fence with n-2 posts and k colors for each color pair\n    return ways[0][0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Helper function to check if two adjacent posts have the same color\n    def check_colors(post1, post2):\n        return post1[0] == post2[0] and post1[1] == post2[1] and post1[2] == post2[2]\n\n    # Initialize an empty list to store the count of ways\n    count = []\n\n    # Check if k is less than or equal to 2, if so return 1\n    if k <= 2:\n        count.append(1)\n\n    # Check if the number of posts is greater than or equal to 3\n    if n >= 3:\n        # Iterate through the range of n values\n        for i in range(1, n+1):\n            # Initialize a count variable to 0\n            c = 0\n\n            # Iterate through the range of k values starting from 2 to k\n            for j in range(2, k+1):\n                # Check if the condition of having at most 2 adjacent posts with the same color is met for i posts and j colors\n                if i * j <= n and check_colors(i, j) and i * j * j <= n * (n-1):\n                    # Increment the count variable\n                    c += 1\n\n            # Append the count to the count list\n            count.append(c)\n\n    # Return the sum of all the counts in the count list\n    return sum(count)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # number of ways to paint the fence\n    ways = [1] * k\n    ways[0] = 1\n    \n    # iterate through the remaining colors\n    for i in range(1, k):\n        # iterate through the remaining posts\n        for j in range(n-1):\n            # if the adjacent posts have different colors\n            if ways[j] > ways[j+1]:\n                # update the count of ways to paint the fence\n                ways[i] += ways[j]\n                \n    return ways[k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize a boolean array to store the number of ways for each possible arrangement of colors \n    dp = [[0]*(k+1) for _ in range(n+1)] \n\n    # Base case: If there are less than 2 posts, there are no ways \n    if n < 2: \n        return 0 \n\n    # Base case: If there is only one color, there is only one way \n    if k == 1: \n        return n \n\n    # Fill the dp array using the recursive relation \n    for i in range(2, n+1): \n        for j in range(1, k+1): \n            if j >= dp[i-1][j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1] \n\n    # Return the last element in the dp array, which contains the number of ways for the last color \n    return dp[n][k] "
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Cannot divide by zero.\"\n    else:\n        return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # convert both numbers to float and calculate the quotient\n    quotient = int(n / m)\n    # round down to the nearest integer\n    quotient = quotient - (quotient % 1)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns the quotient of the two numbers.\n    The quotient is rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w+h)/2\n    \n    # Calculate the square root of the semi-perimeter\n    s_root = math.sqrt(s)\n    \n    # Calculate the third side of the triangle\n    third_side = s_root * math.sin(math.pi/3)\n    \n    # Return the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w ** 2 + h ** 2)\n    b = w / 2\n    c = h / 2\n    return a + b + c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # calculate the semi-perimeter\n    s = (w + h) / 2\n    \n    # calculate the area of the triangle\n    area = math.sqrt(s * (s-w) * (s-h))\n    \n    # calculate the third side of the triangle\n    third_side = math.sqrt(area / math.sin(math.pi/3))\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of one side\n    s = math.sqrt(w**2 + h**2)\n    # calculate the area of the triangle\n    A = math.sqrt(s*(s-w)*(s-h))\n    # calculate the third side of the triangle\n    side = 2 * A / h\n    return side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w**2 + h**2 + math.sqrt((w**2 + h**2)**2 - 4*w*h)) / 2\n    \n    # Return the third side\n    return math.sqrt(s*(s-w)*(s-h))"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    s = (w ** 2 + h ** 2) ** 0.5  # Finding the semi-perimeter of the triangle\n    area = 0.5 * w * h  # Finding the area of the triangle\n    c = s / math.sin(math.acos(area / (w * h)))  # Using trigonometry to find the c parameter of the triangle\n\n    return c  # Returning the third side of the right angled triangle"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Finding the square root of the product of the lengths of the other two sides\n    sqrt_product = math.sqrt(w * h)\n    \n    # Returning the third side\n    return sqrt_product"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    if isinstance(listval[0], int):\n        max_num = listval[0]\n        for num in listval:\n            if num > max_num:\n                max_num = num\n        return max_num\n    elif isinstance(listval[0], float):\n        max_num = listval[0]\n        for num in listval:\n            if num > max_num:\n                max_num = num\n        return max_num\n    elif isinstance(listval[0], str):\n        max_str = listval[0]\n        for strg in listval:\n            if strg > max_str:\n                max_str = strg\n        return max_str\n    else:\n        return None"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]  # assume the first element is the maximum\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize maximum value to None\n    max_val = None\n    # Loop through each value in the list\n    for val in listval:\n        # If current value is greater than maximum value, update it\n        if val > max_val:\n            max_val = val\n    # Return maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize max_val to the first element of the list\n    max_val = listval[0]\n    # Loop through the list and find the maximum value\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for item in listval:\n        if max_value is None or item > max_value:\n            max_value = item\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        print(\"Invalid input! Please provide a list.\")\n        return\n\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        return \"Invalid input\"\n\n    max_val = None\n\n    for i in listval:\n        if max_val is None or i > max_val:\n            max_val = i\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')  # initialize maximum value to negative infinity\n    for item in listval:\n        if item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of heterogeneous data types and returns the maximum value.\n    '''\n    # initialize max_val to the first value in the list\n    max_val = listval[0]\n    \n    # iterate through the rest of the list\n    for item in listval[1:]:\n        # compare each item to the current max_val\n        if item > max_val:\n            max_val = item\n            \n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # Initialize a variable to store the sum of divisors\n    sum_div = 0\n    \n    # Loop through all numbers from 1 to the square root of the input number\n    for i in range(1, int(number**0.5)+1):\n        # Check if the input number is divisible by i\n        if number % i == 0:\n            # If the input number is divisible by i, add i to the sum of divisors\n            sum_div += i\n    \n    # Return the sum of divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\nprint(sum_div(12)) # Output: 32"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Function to count inversions\n    def count_inv(arr, left, right):\n        if left >= right:\n            return 0\n        \n        # Divide the array into two halves\n        mid = (left + right) // 2\n        inv_left = count_inv(arr, left, mid)\n        inv_right = count_inv(arr, mid+1, right)\n        inv_full = merge_sort(arr, left, mid, right)\n        \n        return inv_left + inv_right + inv_full\n    \n    # Function to merge two sorted arrays\n    def merge_sort(arr, left, mid, right):\n        inv_count = 0\n        temp = [0] * len(arr)\n        \n        i = left\n        j = mid+1\n        k = left\n        \n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n        \n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        \n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        \n        # Copy the sorted array back to the original array\n        for i in range(left, right+1):\n            arr[i] = temp[i]\n        \n        return inv_count\n    \n    # Call the count_inv function with the array as the argument\n    return count_inv(arr, 0, len(arr)-1)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    else:\n        mid = n // 2\n        inv_l = get_Inv_Count(arr[:mid])\n        inv_r = get_Inv_Count(arr[mid:])\n        inv_sum = inv_l + inv_r\n\n        # Count inversions in the middle half of the array\n        i, j = mid, n - 1\n        inv_count = 0\n        while i < j:\n            if arr[i] > arr[j]:\n                inv_count += j - i\n                i += 1\n            else:\n                j -= 1\n\n        return inv_sum + inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\n\ndef get_Inv_Count(arr):\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n    for i in range(len(sorted_arr) - 1):\n        for j in range(i + 1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(1, n): \n        # consider all elements from i to n-1\n        for j in range(i, n): \n            # consider all elements from j to n-1\n            if arr[i] > arr[j]: \n                inv_count += (n - i - 1) * (j - i)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        # find the maximum element in the current subarray\n        max_idx = i\n        for j in range(i+1, n):\n            if arr[j] > arr[max_idx]:\n                max_idx = j\n        # swap the maximum element with the current element\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        # calculate the inversion count for the current subarray\n        inv_count += max_idx - i + 1\n        # reverse the subarray\n        arr[i+1:max_idx+1] = arr[i+1:max_idx+1][::-1]\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the count of inversions in it.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Find the length of the array\n    n = len(arr)\n\n    # Create an auxiliary array to store the indices of the sorted array\n    inv_arr = [0] * n\n\n    # Use merge sort to sort the array\n    merge_sort(arr, 0, n - 1, inv_arr)\n\n    # Count the number of inversions in the sorted array\n    inv_count = 0\n    for i in range(1, n):\n        inv_count += inv_arr[i]\n\n    return inv_count\n\n\ndef merge_sort(arr, left, right, inv_arr):\n    if left < right:\n        # Find the middle point of the array\n        mid = (left + right) // 2\n\n        # Recursively sort the left and right halves of the array\n        merge_sort(arr, left, mid, inv_arr)\n        merge_sort(arr, mid + 1, right, inv_arr)\n\n        # Count the number of inversions in the two sorted halves\n        inv_count = 0\n        i = left\n        j = mid + 1\n        for k in range(left, right + 1):\n            if i > mid or (j <= right and arr[i] > arr[j]):\n                inv_count += mid - i + 1\n                inv_arr[k] = inv_count\n            else:\n                inv_arr[k] = 0\n            if i <= mid and (j < right and arr[i] < arr[j]):\n                inv_count += j - i + 1\n                inv_arr[k] += inv_arr[k - 1]\n            i += 1\n            j += 1\n\n    return\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    # Traverse the array and calculate inversion count\n    for i in range(1, n):\n        left = 0\n        right = i - 1\n\n        # Find the largest element in the subarray from left to right\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] <= arr[i]:\n                left = mid + 1\n            else:\n                right = mid\n\n        # Update the inversion count\n        inv_count += right - left\n\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a given nested list structure.\n    \"\"\"\n    flat_lst = []\n    for item in lst:\n        if type(item) == list:\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    # Define an empty list to hold the flattened list\n    flattened_list = []\n\n    # Loop through each item in the list\n    for item in list1:\n\n        # If the item is a list, recursively call the `flatten_list` function on it\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n\n        # If the item is not a list, append it to the flattened list\n        else:\n            flattened_list.append(item)\n\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Parameters:\n    lst (list): A nested list to be flattened.\n\n    Returns:\n    list: A flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n    for transaction in stdata:\n        for item in transaction:\n            max_sum[item] += transaction[item]\n    return max(max_sum.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the number of shares for each stock\n    stock_data = defaultdict(int)\n\n    # Iterate through the list of tuples and update the stock_data dictionary\n    for stock, shares in stdata:\n        stock_data[stock] += shares\n\n    # Calculate the maximum aggregate\n    max_aggregate = max(stock_data.values())\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the count of each item in the list\n    item_counts = defaultdict(int)\n    # Iterate through the list of tuples\n    for item, price in stdata:\n        # Increment the count for the current item in the defaultdict\n        item_counts[item] += 1\n\n    # Calculate the maximum aggregate by iterating through the item counts and finding the maximum value\n    max_agg = max(item_counts.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the count of each item\n    count_dict = defaultdict(int)\n    \n    # Loop through the list of tuples and update the count_dict\n    for item, count in stdata:\n        count_dict[item] += count\n    \n    # Initialize the maximum aggregate and the maximum count to negative infinity\n    max_agg = float('-inf')\n    max_count = float('-inf')\n    \n    # Loop through the count_dict and update the maximum aggregate and count if necessary\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_agg = item\n            max_count = count\n    \n    # Return the maximum aggregate and count\n    return max_agg, max_count"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the aggregate of each item\n    item_agg = defaultdict(int)\n    max_agg = 0\n\n    # Loop through the list of tuples\n    for item, price in stdata:\n        # Add the price to the aggregate of the item\n        item_agg[item] += price\n\n        # Check if the aggregate of the item is greater than the maximum aggregate\n        if item_agg[item] > max_agg:\n            max_agg = item_agg[item]\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict with 0 values for each customer\n    cust_agg = defaultdict(int)\n    # Iterate over the list of tuples\n    for customer, amount in stdata:\n        # Update the customer's aggregate with the current amount\n        cust_agg[customer] += amount\n    # Find the maximum aggregate value\n    max_value = max(cust_agg.values())\n    # Return the maximum aggregate value\n    return max_value"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the maximum aggregate for each day\n    max_aggr = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for date, quantity in stdata:\n\n        # Update the maximum aggregate for the current day\n        max_aggr[date] += quantity\n\n    # Return the maximum aggregate for the last day in the list\n    return max_aggr[max(max_aggr)]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    # create a defaultdict to store the count of each item in the list\n    counts = defaultdict(int)\n\n    # iterate through the list of tuples\n    for item, count in stdata:\n        # increment the count of the current item in the defaultdict\n        counts[item] += count\n\n    # create a list of tuples containing the item and its count\n    items = [(item, count) for item, count in counts.items()]\n\n    # sort the list of tuples by the count in descending order\n    items.sort(key=lambda x: x[1], reverse=True)\n\n    # initialize the maximum aggregate as the first item in the sorted list\n    max_agg = items[0][0] * items[0][1]\n\n    # iterate through the remaining items in the sorted list and update the maximum aggregate\n    for item, count in items[1:]:\n        max_agg = max(max_agg, item * count)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Convert the list of tuples to a defaultdict, which allows us to store the count of each item\n    item_count = defaultdict(int)\n    for item, quantity in stdata:\n        item_count[item] += quantity\n\n    # Calculate the maximum aggregate using the defaultdict\n    max_agg = max(item_count.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    counts = defaultdict(int)\n    max_count = 0\n    \n    # Count the frequency of each item in the list\n    for item, freq in stdata:\n        counts[item] += freq\n        \n    # Find the maximum value in the dictionary\n    for count in counts.values():\n        if count > max_count:\n            max_count = count\n        \n    return max_count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        num = bin(i)[2:].zfill(n)\n        if num[:n] == num[-n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n, 2**(2*n)):\n        first = sum([int(digit) for digit in bin(i)[2:]])\n        second = sum([int(digit) for digit in bin(i)[-n:]])\n        if first == second:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        sum1 = 0\n        sum2 = 0\n        for j in range(n):\n            if i & (1<<j):\n                sum1 += 1\n            else:\n                sum2 += 1\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": ""
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(2*n)):\n        sum_first = sum([int(bit) for bit in bin(i)[2:].zfill(n)])\n        sum_last = sum([int(bit) for bit in bin(i)[-2:].zfill(n)])\n        if sum_first == sum_last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    count = 0\n    # loop through all possible values of the first n bits\n    for i in range(1, 2**n+1):\n        # loop through all possible values of the last n bits\n        for j in range(1, 2**n+1):\n            # check if the sum of the first n bits and the last n bits is equal to the sum of both\n            if i^j == i+j-1:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_num = bin(i)[2:]\n        first_sum = 0\n        last_sum = 0\n        for j in range(n):\n            first_sum += int(binary_num[j])\n            last_sum += int(binary_num[n-1-j])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:] # remove the '0b' prefix\n        first_n_bits = binary[:n]\n        last_n_bits = binary[-n:]\n        if sum(int(bit) for bit in first_n_bits) == sum(int(bit) for bit in last_n_bits):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        # check if the sum of first n bits is same as sum of last n bits\n        if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(i)[n:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1, 2**n, -1):\n        sum1 = 0\n        sum2 = 0\n        for j in range(n):\n            if i & (1<<j):\n                sum1 += 1\n            else:\n                sum2 += 1\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the depth\n    depth = 0\n    \n    # Loop through each key in the dictionary\n    for key in d:\n        # Check if the value is another dictionary\n        if isinstance(d[key], dict):\n            # If it is, increment the depth by one\n            depth += 1\n        \n        # Check if the value is a list\n        elif isinstance(d[key], list):\n            # If it is, loop through each item in the list\n            for item in d[key]:\n                # Check if the item is another dictionary\n                if isinstance(item, dict):\n                    # If it is, increment the depth by one\n                    depth += 1\n                \n    # Return the depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the depth\n    depth = 0\n    # Recursively iterate through the dictionary\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            # Recursively call the function for the nested dictionary\n            dict_depth(d[key])\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Base case\n    if len(d) == 0:\n        return 0\n    \n    # Recursive case\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            depth = max(depth, dict_depth(value))\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key])+1)\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item)+1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables\n    start = 0\n    end = len(arr) - 1\n\n    # Iterate through the ranges\n    for i in range(len(ranges)):\n        # Check if the index is in the range\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            # Calculate the starting and ending indices for the rotation\n            start = arr[index] - (rotations - i)\n            end = arr[index] + (rotations - i)\n\n            # Check if the rotation is possible\n            if start >= 0 and end < len(arr):\n                return arr[start], arr[end]\n\n    # If the index is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of rotation ranges, and a rotation index as input. It \n    finds the element at the given index after rotating the array for the given number of rotations.\n    \"\"\"\n    for i in range(rotations):\n        left, right = ranges[i]\n        arr[left:right+1] = arr[left:right+1][::-1]\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the number of elements to be rotated \n    n = len(arr)\n    rotations = rotations % n\n\n    # Find the first element to be rotated \n    start_rot = index - rotations + n\n\n    # Calculate the end index of the rotated sub-array \n    end_rot = start_rot + n - 1\n\n    # If the start index is less than 0, rotate the array to the right \n    if start_rot < 0: \n        rotations = rotations + n\n        start_rot = index + n - rotations\n\n    # If the end index exceeds the array size, rotate the array to the left \n    if end_rot >= n: \n        rotations = rotations - n\n        end_rot = index + rotations\n\n    # Find the index of the element to be searched \n    elem_index = start_rot + (end_rot - start_rot + 1) // 2\n\n    # If the element is found, return it \n    if elem_index == index: \n        return arr[elem_index]\n\n    # If the element is in the left sub-array, search in the left sub-array \n    elif elem_index < index: \n        return find_Element(arr[start_rot:end_rot+1],ranges,rotations,index)\n\n    # If the element is in the right sub-array, search in the right sub-array \n    else: \n        return find_Element(arr[0:elem_index],ranges,rotations,index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    if index < 0 or index >= len(arr):\n        return \"Index out of range\"\n    \n    # Find the maximum value in the given range\n    max_val = max(arr[ranges[0]:ranges[1]+1])\n    \n    # Find the element at the given index after rotations\n    temp_arr = []\n    for i in range(len(arr)):\n        temp_arr.append(0)\n    temp_arr[index] = max_val\n    for i in range(rotations):\n        temp_arr = temp_arr[1:] + [max_val] + temp_arr[:1]\n    element = temp_arr[index]\n    \n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(ranges) < rotations or len(ranges) - rotations!= len(arr):\n        print(\"Error: Length of ranges is less than rotations\")\n        return None\n    \n    for i in range(rotations):\n        arr.append(arr.pop(0))\n    \n    result = arr[index]\n    \n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize the current and next indices\n    curr_idx = index\n    next_idx = index\n    # Loop through the rotations\n    for i in range(rotations):\n        # Find the next index\n        if curr_idx == 0:\n            next_idx = len(arr) - 1\n        else:\n            next_idx = curr_idx - 1\n        # Check if the next index is in the range\n        if next_idx >= len(ranges):\n            next_idx = 0\n        # Swap the elements at the current and next indices\n        arr[curr_idx], arr[next_idx] = arr[next_idx], arr[curr_idx]\n        # Update the current index\n        curr_idx = next_idx\n    # Return the element at the final index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find element at a given index after rotations.\n\n    Parameters:\n    arr (list): List of integers representing the array.\n    ranges (list): List of integers representing the ranges of each element in the array.\n    rotations (int): Number of rotations required to find the element at the given index.\n    index (int): Index of the element to be found after the specified number of rotations.\n\n    Returns:\n    int: Element at the given index after rotations.\n    \"\"\"\n    # Calculate the total rotation of the array.\n    total_rotation = rotations * len(ranges)\n\n    # Calculate the minimum and maximum indices for the given index.\n    min_index = total_rotation + index - ranges[index-1]\n    max_index = total_rotation + index - 1\n\n    # Check if the given index is within the range of the array.\n    if min_index <= 0 or max_index >= len(arr):\n        raise ValueError(\"Index out of range.\")\n\n    # Calculate the index of the element after rotations.\n    element_index = (min_index + max_index) // 2\n\n    # Return the element at the given index.\n    return arr[element_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # get the number of elements in the array\n    n = len(arr)\n    \n    # get the number of elements in each range\n    range_size = n//len(ranges)\n    \n    # initialize the result list\n    result = []\n    \n    # iterate through each range\n    for i in range(len(ranges)):\n        \n        # get the start and end indices for the current range\n        start = i*range_size\n        end = (i+1)*range_size\n        \n        # rotate the range with the given rotation\n        if rotations[i] == 'R':\n            arr[start:end] = arr[start:end][::-1]\n        elif rotations[i] == 'L':\n            arr[start:end] = arr[start:end][::-1]\n            \n        # find the element at the given index in the rotated range\n        element = arr[index-start]\n        \n        # add the element to the result list\n        result.append(element)\n        \n        # rotate the range back to its original state\n        arr[start:end] = arr[start:end][rotations.index(rotations[i])]\n        \n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array and a list of ranges and rotations, and an index as input.\n    It returns the element at the given index after the number of rotations specified in the ranges.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    ranges = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    rotations = 2\n    index = 2\n\n    Output: The element at index 2 after 2 rotations will be 4.\n    \"\"\"\n    # Convert the ranges and rotations into a list of tuples\n    rotations_list = [(x, y) for x, y in zip(rotations, rotations[1:])]\n\n    # Iterate through the ranges and rotations, finding the element at the given index\n    for i in range(len(rotations_list)):\n        start, end = ranges[i]\n        rotations_list[i] = (start + end) % len(arr)\n\n    # Calculate the final index after the number of rotations\n    final_index = (index + rotations_list[0][0]) % len(arr)\n\n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges and rotations, and an index.\n    The array is rotated by rotations times.\n    The function returns the element at the given index after the rotations.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = []\n\n    # Loop through the rotations number of times\n    for i in range(rotations):\n        # Loop through the ranges and add the elements to the result list\n        for j in range(len(ranges)):\n            result.append(arr[ranges[j][0] + index])\n            result.append(arr[ranges[j][1] + index])\n\n    # Return the last element in the result list\n    return result[-1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    matches = pattern.findall(words)\n    if len(matches) < 2:\n        return None\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word.startswith('p')]\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return 'There are less than 2 words starting with letter \"p\"'"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a regular expression pattern that matches words starting with letter 'p'\n    pattern = r'^p\\w+'\n    \n    # Loop through the list of words and look for matches using the pattern\n    for word in words:\n        if re.match(pattern, word):\n            # If a match is found, split the word into its two components and return them as a tuple\n            return word.split('p')"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'\\b[Pp]\\w+'\n    matches = re.findall(pattern,''.join(words))\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) == 0:\n        return \"There are no words starting with 'p'.\"\n    elif len(p_words) == 1:\n        return f\"There is only one word starting with 'p': {p_words[0]}\"\n    else:\n        return f\"There are two words starting with 'p': {p_words[0]} and {p_words[1]}\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'^p.*'\n    for word in words:\n        if re.match(pattern, word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Get all the words starting with letter 'p'\n    start_p_words = [word for word in words if word[0] == 'p']\n\n    # If there are no words starting with 'p', return an empty list\n    if len(start_p_words) == 0:\n        return []\n\n    # Return the first two words starting with 'p'\n    return start_p_words[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'^p'\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the max_sum and current_sum variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through the array from index to n-1\n    for i in range(index, n):\n        # If the current element is greater than k, update the current_sum\n        if a[i] > k:\n            current_sum = a[i] - k\n        \n        # Update the max_sum if the current_sum is greater than max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [[0] * n for _ in range(n + 1)]\n    max_sum = float('-inf')\n\n    for i in range(n, 0, -1):\n        for j in range(i, n + 1):\n            if i == index:\n                dp[i][j] = max(dp[i][j], a[j - 1]) + a[j - 1]\n            elif i > index:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + a[j - 1])\n                if i == k:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + a[j - 1] - a[k - 1])\n            max_sum = max(max_sum, dp[i][j])\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * (n+1) # Create a dynamic programming array dp[i] to store the maximum sum of increasing subsequence ending at index i\n    \n    # Initialize the first element of the array with 0\n    dp[0] = 0\n    \n    # Initialize the first element of the array with the first element of the array\n    dp[1] = a[0]\n    \n    # Traverse through the array starting from index 1\n    for i in range(1, n):\n        # If the kth element is greater than the current element, set it to the maximum of the previous sum and the kth element\n        if k > i:\n            dp[i+1] = max(dp[i], a[k])\n        else:\n            # If the kth element is not greater than the current element, set it to the previous sum\n            dp[i+1] = dp[i]\n        \n        # If the current element is greater than the first element of the array, set it to the current element\n        if a[i] > dp[0]:\n            dp[0] = a[i]\n    \n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Initialize max sum and subsequence sum\n    max_sum = float('-inf')\n    subsequence_sum = float('-inf')\n    \n    # Initialize prefix sum\n    prefix_sum = 0\n    \n    # Traverse through the array from index to n-1\n    for i in range(index, n):\n        \n        # Calculate current element and its prefix sum\n        current_element = a[i]\n        prefix_sum += current_element\n        \n        # Check if current element is kth element or not\n        if i == k - 1:\n            \n            # If yes, then include the current element in the subsequence and update the max sum\n            subsequence_sum = current_element\n            max_sum = max(max_sum, subsequence_sum)\n            \n        elif prefix_sum > subsequence_sum:\n            \n            # If not, then include the current element in the subsequence and update the max sum\n            subsequence_sum = prefix_sum\n            max_sum = max(max_sum, subsequence_sum)\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    increasing_subseq = []\n\n    # Traverse through the array from index to n-1\n    for i in range(index, n):\n        # Add the current element to the sum\n        current_sum += a[i]\n\n        # If current sum is greater than the maximum sum so far and kth element is less than i+1, then update the maximum sum and add the current subsequence to the list\n        if current_sum > max_sum and a[k] < i+1:\n            max_sum = current_sum\n            increasing_subseq = [a[index]]\n            current_sum = a[i]\n        elif current_sum > max_sum and a[k] >= i+1:\n            current_sum += a[i]\n            increasing_subseq.append(a[i])\n\n    return max_sum, increasing_subseq\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables to keep track of the maximum sum of increasing subsequence and the corresponding subsequence\n    max_sum = float('-inf')\n    subseq = []\n    \n    # Loop through the array from 0 to n-1\n    for i in range(n):\n        # If the element at index i is greater than or equal to k, then we can add it to the current increasing subsequence\n        if i >= k:\n            # Initialize a variable to keep track of the current sum of increasing subsequence\n            curr_sum = a[index-1] + a[i]\n            \n            # If the current sum is greater than the maximum sum, then update the maximum sum and corresponding subsequence\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                subseq = [a[index-1], a[i]]\n            \n            # Otherwise, if the current sum is equal to the maximum sum, then add the element at index i to the current increasing subsequence\n            elif curr_sum == max_sum:\n                subseq.append(a[i])\n    \n    # If there is no subsequence, return 0\n    if not subseq:\n        return 0\n    \n    # Return the maximum sum of increasing subsequence and the corresponding subsequence\n    return max_sum, subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize max_so_far to the first element of the array and max_ending_here to 0\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    # Iterate over the array starting from index+1\n    for i in range(index+1, n):\n        # If the current element is greater than max_ending_here, update max_ending_here and max_so_far\n        if a[i] > max_ending_here:\n            max_ending_here = a[i]\n            max_so_far = max_ending_here\n\n        # If the current element is greater than k and max_ending_here is less than k, update max_so_far to be the sum of the current element and the maximum sum ending here\n        elif a[i] > k and max_ending_here < k:\n            max_so_far = max_ending_here + a[i]\n\n    # Return the maximum sum of increasing subsequence starting from the given index until the kth element is reached\n    return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # create a list to store the sum of increasing subsequence for each index\n    sums = [0] * n\n    \n    # calculate the sum of increasing subsequence for index 0\n    sums[0] = a[0]\n    \n    # calculate the sum of increasing subsequence for remaining indices\n    for i in range(1, n):\n        sums[i] = max(sums[i-1], a[i])\n        \n    # create a list to store the length of increasing subsequence for each index\n    lengths = [0] * n\n    \n    # calculate the length of increasing subsequence for index 0\n    lengths[0] = 1\n    \n    # calculate the length of increasing subsequence for remaining indices\n    for i in range(1, n):\n        if sums[i] < sums[i-1]:\n            lengths[i] = lengths[i-1]\n        else:\n            lengths[i] = lengths[i-1] + 1\n    \n    # create a list to store the maximum sum of increasing subsequence for each index\n    max_sums = [0] * n\n    \n    # calculate the maximum sum of increasing subsequence for index 0\n    max_sums[0] = sums[0]\n    \n    # calculate the maximum sum of increasing subsequence for remaining indices\n    for i in range(1, n):\n        if sums[i] < sums[i-1]:\n            if lengths[i] < lengths[i-1]:\n                max_sums[i] = sums[i-1] + a[i]\n            else:\n                max_sums[i] = max(sums[i-1], max_sums[i-1])\n        else:\n            max_sums[i] = max(sums[i], max_sums[i-1])\n    \n    # find the index of the kth element which is after index i\n    for i in range(n-1, -1, -1):\n        if a[i] > k and i < index:\n            k_index = i\n            break\n    \n    # create a list to store the maximum sum of increasing subsequence for each index after k_index\n    max_sums_after_k = [0] * (k_index - index + 1)\n    \n    # calculate the maximum sum of increasing subsequence for each index after k_index\n    for i in range(k_index - index + 1):\n        if i == 0:\n            max_sums_after_k[i] = sums[index] - k\n        else:\n            max_sums_after_k[i] = max(max_sums_after_k[i-1], max_sums[index-i] - k)\n    \n    # calculate the maximum sum of increasing subsequence for the given prefix\n    result = max(max_sums[index], max_sums_after_k)\n    \n    return result"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * (n+1)\n    max_sum = float('-inf')\n    for i in range(index, n+1):\n        dp[i] = max(dp[i-1], a[i-1] + dp[min(i, k)])\n        max_sum = max(max_sum, dp[i])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(index, k):\n        if a[i] > a[i-1]:\n            current_sum += a[i]\n        else:\n            max_sum = max(max_sum, current_sum)\n            current_sum = a[i]\n    if k < n:\n        current_sum += a[k]\n    else:\n        current_sum += a[n-1]\n    max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # make a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n    # generate m copies of the first element of the tuple\n    new_tuplex[:m] = [tuplex[0]] * m\n    # generate n copies of the last element of the tuple\n    new_tuplex[-n:] = [tuplex[-1]] * n\n    # return the new tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple as input and returns a colon of the same tuple.\n    The colon is a new tuple which is a sub-tuple of the input tuple where each element is\n    the nth element of the original tuple.\n\n    Args:\n    tuplex (tuple): The input tuple.\n    m (int): The number of elements in the colon.\n    n (int): The index of the element to take as the nth element of the colon.\n\n    Returns:\n    tuple: The colon of the input tuple.\n    '''\n    colon = deepcopy(tuplex)\n    for i in range(m):\n        colon[i] = colon[i][n]\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple and returns a tuple where each element\n    is a column of the original tuple.\n    '''\n    # Create a new empty list to hold the colon\n    colon = []\n\n    # Loop over the elements of the tuple\n    for i in range(len(tuplex)):\n        # Create a new list to hold the elements in this column\n        col = []\n\n        # Loop over the rows of the tuple\n        for j in range(m):\n            # Get the element at the current position\n            elem = tuplex[i][j]\n\n            # Add the element to the current column\n            col.append(elem)\n\n        # Add the new column to the colon\n        colon.append(tuple(col))\n\n    # Return the colon of the tuple\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    copy_tuplex = deepcopy(tuplex)\n    new_tuplex = []\n    for i in range(m):\n        new_tuplex.append(deepcopy(copy_tuplex[i]))\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = (new_tuplex[0], new_tuplex[n+i])\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the length of the original tuple\n    length = len(new_tuplex)\n\n    # Check if the mth element is out of range\n    if m >= length:\n        raise IndexError(\"The index m is out of range.\")\n\n    # Check if n is greater than the length of the new tuple\n    if n > length:\n        raise IndexError(\"The index n is out of range.\")\n\n    # Get the first m elements and concatenate them with the nth element\n    colon = new_tuplex[:m] + (new_tuplex[n],)\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    ----------\n    tuplex : tuple\n        A tuple of integers.\n    m : int\n        The row index of the colon.\n    n : int\n        The column index of the colon.\n\n    Returns:\n    --------\n    tuple\n        A tuple of integers representing the colon.\n    \"\"\"\n    col = []\n    for i in range(m, m + n):\n        col.append(tuplex[i])\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Initialize a new list to store the colon\n    colon = []\n    # Iterate over each item in the input tuple\n    for i in range(m):\n        # Create a new list to store the column\n        col = []\n        # Iterate over each item in the input tuple\n        for j in range(n):\n            # Get the i-th item from the input tuple\n            item = tuplex[i][j]\n            # Add it to the new column\n            col.append(item)\n        # Add the new column to the colon\n        colon.append(col)\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex[i] = new_tuplex[i][:j] + ('-',) + new_tuplex[i][j:]\n\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    This function takes a tuplex and returns a colon of the tuplex.\n    The colon is a tuple that contains the m first elements of the tuplex.\n    The first element of the colon is the first element of the tuplex.\n    The last element of the colon is the nth element of the tuplex.\n    The function does not modify the original tuplex.\n    \"\"\"\n    if m > len(tuplex):\n        raise ValueError(\"m should be less than or equal to the length of the tuplex\")\n    \n    colontuple = deepcopy(tuplex[:m])\n    colontuple.append(tuplex[m-1])\n    colontuple.append(tuplex[n-1])\n    return colontuple"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    largest_products = []\n\n    for i in range(len(nums1) - N + 1):\n        product = 1\n        for j in range(N):\n            product *= max(nums1[i+j], nums2[i+j])\n        largest_products.append(product)\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Input lists must have the same length.')\n\n    if N > max(len(nums1), len(nums2)):\n        raise ValueError('Cannot select more products than there are elements in the lists.')\n\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    products = []\n\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        products.append(product1)\n\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables for largest products\n    max_product1 = max_product2 = float('-inf')\n\n    # Iterate over the N largest products\n    for i in range(N):\n        # Calculate the product of the two selected factors\n        product = nums1[i] * nums2[i]\n\n        # Update the largest products if the current product is larger\n        if product > max_product1:\n            max_product2 = max_product1\n            max_product1 = product\n        elif product > max_product2:\n            max_product2 = product\n\n    # Return the largest products\n    return max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Find the product of the first N elements of each list\n    product1 = 1\n    product2 = 1\n    for i in range(N):\n        product1 *= nums1[i]\n        product2 *= nums2[i]\n\n    return product1 * product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables for the largest products and the count of products\n    largest_products = []\n    count = 0\n\n    # Iterate through the sorted lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the selected factors and append it to the list if it is greater than the current largest product\n            if nums1[i] * nums2[j] > largest_products[-1] if largest_products else 0:\n                largest_products.append(nums1[i] * nums2[j])\n                count += 1\n                # If we have found the desired number of products, break out of the inner loop\n                if count == N:\n                    break\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        nums1 (list): List of integers.\n        nums2 (list): List of integers.\n        N (int): Number of products to find.\n\n    Returns:\n        list: List of integers, where each integer represents the largest product found.\n    \"\"\"\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list\n    result = []\n\n    # Loop over the specified number of products\n    for _ in range(N):\n        # Calculate the product of the two largest numbers from each list\n        product = nums1[-1] * nums2[-1]\n\n        # Add the product to the result list\n        result.append(product)\n\n        # Remove the two largest numbers from the lists\n        nums1 = nums1[:-1]\n        nums2 = nums2[:-1]\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Initialize the largest products to negative infinity\n    max_product_1 = -float('inf')\n    max_product_2 = -float('inf')\n    \n    # Calculate the maximum product for each list using the two factors\n    max_product_1 = max(max_product_1, nums1[0] * nums2[0])\n    max_product_2 = max(max_product_2, nums1[-1] * nums2[-1])\n    \n    for i in range(len(nums1)-1):\n        for j in range(len(nums2)-1):\n            # Calculate the maximum product for each list using the two factors and the remaining factors\n            product_1 = max(nums1[i] * nums2[j], nums1[i] * nums2[j+1], nums1[i+1] * nums2[j], nums1[i+1] * nums2[j+1])\n            product_2 = max(nums1[i] * nums2[-j-1], nums1[i] * nums2[-j], nums1[i+1] * nums2[-j-1], nums1[i+1] * nums2[-j])\n            \n            # Update the maximum products\n            max_product_1 = max(max_product_1, product_1)\n            max_product_2 = max(max_product_2, product_2)\n    \n    # Return the specified number of largest products\n    return max(max_product_1, max_product_2)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    if N > len(nums1) or N > len(nums2):\n        raise ValueError(\"N must be less than or equal to the length of the two lists.\")\n    max_product = float('-inf')\n    for i in range(len(nums1)):\n        factor1 = nums1[i]\n        factor2 = nums2[i]\n        product = factor1 * factor2\n        if product > max_product:\n            max_product = product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Initialize two variables to store the maximum product and its corresponding index\n    max_product = float('-inf')\n    max_index = 0\n    \n    # Iterate through each list and find the maximum product for each list\n    for i in range(N):\n        for j in range(N):\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n                max_index = i\n    \n    # Find the factor that maximizes the product for the given number of N\n    factor = nums1[max_index]\n    \n    # Return the factor and the maximum product found\n    return factor, max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n\n    # Iterate over the specified number of products\n    for i in range(N):\n        # Calculate the product of the largest elements from both lists\n        product = nums1[-1] * nums2[-1]\n\n        # Update the largest products\n        max_product1 = max(max_product1, product)\n        max_product2 = max(max_product2, product)\n\n        # Remove the largest elements from both lists\n        nums1.pop()\n        nums2.pop()\n\n    return max_product1, max_product2"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"The maximum number is:\", a)\n    elif b>a:\n        print(\"The maximum number is:\", b)\n    else:\n        print(\"The numbers are equal.\")"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Convert the list of characters to a tuple\n    return tuple(char_list)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Create an empty tuple\n    result = ()\n    # Loop through each character in the string\n    for char in str1:\n        # Append the character to the result tuple\n        result += (char,)\n    # Return the result tuple\n    return result"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Initialize an empty list to store the characters of the string\n    lst = []\n    # Loop through each character in the string\n    for char in str1:\n        # Append the character to the list\n        lst.append(char)\n    # Convert the list to a tuple and return it\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as an argument and returns the same number with the leftmost unset bit set to 1.\n    \"\"\"\n    # Find the number of bits in the binary representation of n\n    num_bits = len(bin(n)[2:])\n\n    # Loop through each bit in reverse order, starting from the leftmost bit\n    for bit in range(num_bits-1, -1, -1):\n        # If the current bit is unset, set it to 1 and break out of the loop\n        if n & (1 << bit) == 0:\n            n |= (1 << bit)\n            break\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize leftmost unset bit as -1\n    leftmost_unset_bit = -1\n    # Loop through each bit in the binary representation of n\n    for i in range(32):\n        # If the bit is 0, set it to 1 and update the leftmost unset bit\n        if n & (1 << i) == 0:\n            n |= (1 << i)\n            leftmost_unset_bit = i\n            break\n    return n, leftmost_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit in a given number n.\n    \"\"\"\n    # Convert binary representation of n into a list of digits\n    digits = [int(d) for d in bin(n)[2:]]\n    # Find the index of the first unset bit\n    left_most_unset = next((i for i, d in enumerate(digits) if d == 1), None)\n    if left_most_unset is None:\n        return n\n    # Set the left most unset bit to 1\n    digits[left_most_unset] = 1\n    # Convert the list of digits back into a binary number\n    binary_digits = \"\".join(str(d) for d in digits)\n    # Convert the binary number back into an integer\n    n = int(binary_digits, 2)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the mask to 1\n    mask = 1\n    # Initialize the leftmost unset bit to 0\n    leftmost_unset_bit = 0\n\n    # Loop until all the bits in the mask are set\n    while mask > 0:\n        # Check if the current bit is set in the n\n        if n & mask:\n            # If it is, set the leftmost unset bit to 1\n            leftmost_unset_bit = mask\n        # Shift the mask to the right\n        mask = mask >> 1\n\n    # Set the leftmost unset bit to 1\n    n = n | leftmost_unset_bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    # Calculate the length of binary representation of n\n    binary_length = n.bit_length()\n    \n    # Initialize the leftmost unset bit to 0\n    left_most_unset_bit = 0\n    \n    # Loop through the bits of n\n    for i in range(binary_length-1, -1, -1):\n        \n        # Calculate the XOR of binary representation of n with a binary number with the i-th bit set to 1\n        xor_num = n ^ (1 << i)\n        \n        # If the XOR is not equal to n, then we set the leftmost unset bit to i\n        if xor_num!= n:\n            left_most_unset_bit = i\n            \n            # Exit the loop since we have found the leftmost unset bit\n            break\n    \n    # Return the leftmost unset bit\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the count of unset bits to n\n    count = n\n    \n    # Find the rightmost set bit\n    while count & 1 == 0:\n        count >>= 1\n    \n    # Set the leftmost unset bit\n    n |= (1 << count)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function will set the left most unset bit in a number n.\n    '''\n    # Create a binary representation of n\n    n_binary = bin(n)[2:]\n    \n    # Find the index of the first unset bit\n    unset_index = len(n_binary) - n_binary.find('1') - 1\n    \n    # Set the left most unset bit to 1\n    n_binary = n_binary[:unset_index] + '1' + n_binary[unset_index:]\n    \n    # Convert the binary representation back to an integer\n    n = int(n_binary, 2)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]: \n        # Check if the bit is already set\n        if int(bit) == 1: \n            # If it is, return n\n            return n\n        # If the bit is unset, return n with that bit set\n        else:\n            n = n | (1 << int(bit))\n            # Check if the leftmost unset bit has been set\n            if n == (1 << int(bit)): \n                # If it has, return n\n                return n\n            else:\n                continue"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the leftmost unset bit to be 1\n    left_most_unset_bit = 1\n    \n    # iterate through the bits of the integer n in reverse order\n    for i in range(31, -1, -1):\n        # if the i-th bit of n is 0, then set the i-th bit of left_most_unset_bit to 1\n        if n & (1 << i) == 0:\n            left_most_unset_bit |= (1 << i)\n    \n    # return the leftmost unset bit\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # loop through all bits in binary representation of n\n    for i in range(31, -1, -1):\n        # check if current bit is unset\n        if (n & (1 << i)) == 0:\n            # set the current bit to 1 and break out of loop\n            n |= (1 << i)\n            break\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone with the given radius and height.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    '''\n    volume = math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3) * math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone using the formula:\n    \n    V = (1/3) * \u03c0 * r^2 * h\n    \n    Where:\n        r is the radius of the base of the cone\n        h is the height of the cone\n    \n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    \"\"\"\n    # Formula for volume of a cone\n    volume = (1/3) * math.pi * r * r * h\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h / 3\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # loop through the integers from 1 to n\n    for i in range(1, n+1):\n        # check if the current integer is a power of 2\n        if i & (i-1) == 0:\n            # if it is, return the integer\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize variable to store the highest power of 2\n    highest = 1\n    \n    # Iterate through the numbers from 2 to n\n    for i in range(2, n+1):\n        # If the power of 2 is less than the current highest power of 2, update the variable\n        if highest < 2**(i):\n            highest = 2**(i)\n    \n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # initialize the highest power of 2\n    highest_power_of_2 = 0\n\n    # iterate through the powers of 2\n    for power_of_2 in range(1, n+1):\n        # if the power of 2 is less than or equal to n, update the highest power of 2\n        if power_of_2 <= n:\n            highest_power_of_2 = power_of_2\n\n    # return the highest power of 2\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    highest_power = 1\n    while highest_power <= n:\n        highest_power <<= 1\n    \n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is a power of 2\n        if i & (i-1) == 0:\n            # if it is, return the number\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Find the highest power of 2 less than or equal to n\n    highest_pow_of_2 = 1\n    while highest_pow_of_2 <= n:\n        highest_pow_of_2 <<= 1\n\n    return highest_pow_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while (2 ** power) <= n:\n        power += 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest <= n: \n        highest = highest * 2\n        \n    return highest - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    # Find the power of 2 that is greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    # Find the highest power of 2 less than or equal to n\n    highest_power = 1\n    while highest_power < power:\n        highest_power <<= 1\n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n >> 1\n    return n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    lucas_seq = [2]\n    for i in range(1, n):\n        lucas_seq.append(lucas_seq[i-1] + lucas_seq[i-2])\n    return lucas_seq[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Base case: if n=0, return 2\n    if n == 0:\n        return 2\n    # Base case: if n=1, return 1\n    elif n == 1:\n        return 1\n    # Recursive case: find the (n-1)'th lucas number\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize the first two numbers\n    a, b = 2, 1\n\n    # Loop until we've found the nth lucas number\n    for i in range(n):\n        # Calculate the next lucas number\n        c = a + b\n        # Update a and b for the next iteration\n        a, b = b, c\n\n    return a"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Initialize the first two Lucas numbers as 2\n    a, b = 2, 1\n    # Check if the given number is greater than 2\n    if n > 2:\n        # Loop through the remaining Lucas numbers\n        for i in range(2, n+1):\n            # Update the next Lucas number\n            c = a + b\n            # Update the values for the next iteration\n            a = b\n            b = c\n    # Return the nth Lucas number\n    return a"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize variables\n    prev_num = 0\n    curr_num = 2\n\n    # Loop n times\n    for i in range(1, n+1):\n        # Calculate next number\n        next_num = prev_num + curr_num\n\n        # Update variables\n        prev_num = curr_num\n        curr_num = next_num\n\n    # Return the nth lucas number\n    return curr_num"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    # Loop through each element in the list\n    for i in range(len(list_)):\n        # Apply the format string to the current element and store the result back in the list\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    This function converts more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    \n    # iterate over each list and add each item as a key with the corresponding list index\n    for index, list_item in enumerate(lists):\n        result[index] = list_item\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, lst in enumerate(lists):\n        for j, item in enumerate(lst):\n            if type(item) == list:\n                for k, subitem in enumerate(item):\n                    if type(subitem) == tuple:\n                        key = f\"{i}_{j}_{k}\"\n                        result[key] = {subitem[0]: subitem[1]}\n                    else:\n                        key = f\"{i}_{j}_{k}\"\n                        result[key] = subitem\n            else:\n                key = f\"{i}_{j}\"\n                result[key] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert the first list to dictionary\n    d1 = {str(i):l1[i] for i in range(len(l1))}\n\n    # Convert the second list to dictionary\n    d2 = {str(i):l2[i] for i in range(len(l2))}\n\n    # Convert the third list to dictionary\n    d3 = {str(i):l3[i] for i in range(len(l3))}\n\n    # Combine all dictionaries in a single dictionary\n    d = {**d1, **d2, **d3}\n\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Convert the first list to a dictionary using default values\n    d1 = dict(zip(l1[0], [0] * len(l1[0])))\n    \n    # Convert the second list to a dictionary using default values\n    d2 = dict(zip(l2[0], [0] * len(l2[0])))\n    \n    # Convert the third list to a dictionary using default values\n    d3 = dict(zip(l3[0], [0] * len(l3[0])))\n    \n    # Loop through each list and update the corresponding dictionary\n    for i in range(len(l1)):\n        for j in range(len(l2[i])):\n            d1[l1[i][j]] = l2[i][j]\n        for j in range(len(l3[i])):\n            d2[l2[i][j]] = l3[i][j]\n        for j in range(len(l1[i])):\n            d3[l1[i][j]] = l1[i][j]\n            \n    # Return the nested dictionary\n    return d1, d2, d3"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = {k: l2[i][j] for j, k in enumerate(l3[i])}\n        result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Define a list to store the result\n    result = []\n\n    # Loop through each list and append the elements to the result list\n    for i in range(len(l1)):\n        result.append({l1[i]: l2[i], l3[i]: l3[i]})\n\n    # Return the result list\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        sub_dict = {}\n        for j in range(len(l2)):\n            sub_dict[l2[j]] = l3[i*len(l2)+j]\n        result[l1[i]] = sub_dict\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    # Calculate the first half of the sequence\n    half = n // 2\n    first_half_sum = half * (half + 1) // 2\n\n    # Calculate the second half of the sequence\n    second_half_sum = half * (half + 1) // 2 + n\n\n    # Return the maximum sum\n    return max(first_half_sum, second_half_sum)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Define the function f(n)\n    def f(n):\n        if n == 1:\n            return 1\n        else:\n            return n * f(n-1)\n    \n    # Define the function that calculates the maximum sum\n    def max_sum_helper(a, b, c, d, n):\n        if a >= b and a >= c and a >= d:\n            return a * f(n)\n        elif b >= a and b >= c and b >= d:\n            return b * f(n)\n        elif c >= a and c >= b and c >= d:\n            return c * f(n)\n        else:\n            return d * f(n)\n    \n    # Calculate the maximum sum for n=1 to n=n\n    max_sum = max_sum_helper(f(1), f(2), f(3), f(4), n)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    half = get_max_sum(n // 2)\n    three = get_max_sum(n // 3)\n    four = get_max_sum(n // 4)\n    five = get_max_sum(n // 5)\n    \n    return max(half + three + four + five, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n\n    # Base case: return the sum of all odd numbers from 1 to n\n    if n % 2 == 1:\n        return n * (n + 1) // 2\n\n    # Recursive case: find the maximum sum using the given equation\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    # Compute the sum of the first n/2 terms\n    sum_1 = n\n    sum_2 = 0\n    \n    for i in range(1, n//2):\n        sum_2 += i\n    \n    # Compute the sum of the remaining terms\n    sum_3 = 0\n    sum_4 = 0\n    sum_5 = 0\n    \n    for i in range(n//2, n):\n        sum_3 += i\n    \n    for i in range(n//2+1, n):\n        sum_4 += i\n    \n    for i in range(n//2+2, n):\n        sum_5 += i\n    \n    # Compute the maximum sum by choosing the maximum of the sum of the first n/2 terms and the sum of the remaining terms\n    return max(sum_1 + sum_2 + sum_3 + sum_4 + sum_5, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    if n == 2:\n        return 5\n\n    half = get_max_sum(n // 2)\n    third = get_max_sum(n // 3)\n    fourth = get_max_sum(n // 4)\n    fifth = get_max_sum(n // 5)\n\n    return max(half + third + fourth + fifth, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case: n=1\n    if n == 1:\n        return 1\n    \n    # Recursive case: n>1\n    else:\n        # Calculate the sum of the first n/5 terms using the formula:\n        # f(n/5) = (f(n/2) + f(n/3) + f(n/4)) / 5\n        sum_5 = get_max_sum(n/5)\n        \n        # Calculate the sum of the first n/2 terms using the formula:\n        # f(n/2) = (f(n/4) + f(n/5) + f(n/6)) / 2\n        sum_2 = get_max_sum(n/2)\n        \n        # Calculate the sum of the first n/3 terms using the formula:\n        # f(n/3) = (f(n/4) + f(n/5) + f(n/6)) / 3\n        sum_3 = get_max_sum(n/3)\n        \n        # Calculate the sum of the first n/4 terms using the formula:\n        # f(n/4) = (f(n/5) + f(n/6) + f(n/7)) / 4\n        sum_4 = get_max_sum(n/4)\n        \n        # Calculate the sum of the first n terms using the given equation:\n        # f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n        sum_n = max(sum_5, sum_2, sum_3, sum_4, n)\n        \n        return sum_n\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the list with maximum length.\n    \"\"\"\n    max_length = len(input_list[0])\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = len(input_list[0])\n    max_length = 0\n    max_list = None\n    for i in range(len(input_list)):\n        if len(input_list[i]) > length:\n            length = len(input_list[i])\n            max_list = input_list[i]\n        elif len(input_list[i]) == length and input_list[i] > max_list:\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function takes a tuple as input and returns True if all elements in the tuple are distinct, and False otherwise.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple into a set\n    test_set = set(test_tup)\n    # if the set is the same length as the tuple, it means there are duplicates\n    if len(test_set) == len(test_tup):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # Check if the set has any elements left\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store the elements of the tuple\n    distinct_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(distinct_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to set to remove duplicates\n    test_set = set(test_tup)\n    # check if set is empty\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character\n    char_count = {}\n\n    # iterate over the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # increment the count of the character in the dictionary\n            char_count[char] += 1\n        else:\n            # add the character to the dictionary with a count of 1\n            char_count[char] = 1\n\n    # find the first non-repeated character by iterating over the dictionary and returning the first key\n    for key in char_count:\n        if char_count[key] == 1:\n            return key\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    If no non-repeating character is present in the string, then the function returns None.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # iterate over the dictionary and find the first non-repeating character\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # iterate through each character in the string again to find the first non-repeating character\n    for char in str1:\n        # if the character is not in the dictionary or its count is 1, return the character\n        if char not in char_count or char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(string):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in it.\n    \"\"\"\n    # Initialize a dictionary to keep track of the frequency of each character in the string\n    char_freq = {}\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Find the first character with a frequency of 1 in the dictionary\n    for char in string:\n        if char_freq[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first non-repeating character\n    for char, count in freq.items():\n        if count == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n            return char\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if not re.match(regex, string):\n        return False\n    else:\n        return string[0] == string[-1]"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return \"False\"\n    else:\n        return \"True\""
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # Define a regular expression pattern to match strings that start and end with the same character\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n\n    # Use the re.match() function to check if the pattern matches the input string\n    match = re.match(pattern, string)\n\n    # If the pattern matches, return True\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    # Sorting the three numbers\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculating the median\n    median = sorted_numbers[1]\n\n    # Returning the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_list = sorted([a,b,c])\n    \n    # Calculate the median based on the length of the sorted list\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[len(sorted_list)//2] + sorted_list[len(sorted_list)//2 - 1])/2\n    else:\n        median = sorted_list[len(sorted_list)//2]\n    \n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the length of the list\n    n = len(sorted_numbers)\n\n    # If the length of the list is odd, the median is the middle number\n    if n % 2 == 1:\n        median = sorted_numbers[n//2]\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        median = (sorted_numbers[n//2-1] + sorted_numbers[n//2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # find the middle number\n    middle_number = sorted_numbers[len(sorted_numbers) // 2]\n    \n    # return the middle number\n    return middle_number"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    \n    # calculate the median\n    n = len(sorted_list)\n    if n % 2 == 0:\n        median = (sorted_list[n//2-1] + sorted_list[n//2]) / 2\n    else:\n        median = sorted_list[n//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import random\n\ndef quickselect(arr, k):\n    \"\"\"\n    Quickselect algorithm implementation to find the kth smallest element in a list.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[random.randint(0, len(arr) - 1)]\n    lows = [x for x in arr if x < pivot]\n    highs = [x for x in arr if x > pivot]\n    pivots = [x for x in arr if x == pivot]\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\n\ndef median_numbers(a, b, c):\n    \"\"\"\n    Finds the median of three numbers using the quickselect algorithm.\n    \"\"\"\n    arr = [a, b, c]\n    arr.sort()\n    n = len(arr)\n    k = n // 2\n    return quickselect(arr, k)"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    middle = len(sorted_numbers) // 2\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[middle - 1] + sorted_numbers[middle]) / 2\n    else:\n        return sorted_numbers[middle]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median value.\n    \"\"\"\n    a_plus_b = a + b\n    a_minus_b = a - b\n    c_plus_b = c + b\n    c_minus_b = c - b\n\n    # Sort the three numbers\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the median\n    if sorted_numbers.index(a) % 2 == 0:\n        median = (sorted_numbers[sorted_numbers.index(a)] + sorted_numbers[sorted_numbers.index(b)]) / 2\n    else:\n        median = sorted_numbers[sorted_numbers.index(a) + 1]\n\n    # Return the median value\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Find the median index based on the length of the sorted_numbers list\n    median_index = len(sorted_numbers) // 2\n    \n    # Return the median value based on the median_index\n    return sorted_numbers[median_index]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(set(str(num)))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # Initialize an empty list to store the sum of digits for each number in the list\n    result = []\n\n    # Iterate over each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(digit) for digit in str(num)]\n        # Compute the sum of the digits\n        digit_sum = sum(digits)\n        # Append the digit sum to the result list\n        result.append(digit_sum)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            temp += num % 10\n            num //= 10\n        total += temp\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        digit_sum += sum(digits)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        # convert the number to a string and loop through each character\n        for digit in str(num):\n            # add the integer value of the character to the total\n            total += int(digit)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        temp = num\n        while temp > 0:\n            sum += temp % 10\n            temp //= 10\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Loop through the numbers in the list and compute the sum of their digits\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # iterate over the tuples\n    for i in range(len(test_tup1)):\n        # perform the bitwise xor operation\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # get the length of the two tuples\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    \n    # create an empty list to store the result\n    result_list = []\n    \n    # iterate over the tuples and perform the bitwise xor operation on each element\n    for i in range(min(tup1_len, tup2_len)):\n        result_list.append(test_tup1[i] ^ test_tup2[i])\n        \n    # pad the result list with zeros if the lengths don't match\n    for i in range(tup1_len - tup2_len):\n        result_list.append(0)\n        \n    for i in range(tup2_len - tup1_len):\n        result_list.append(0)\n    \n    # convert the list to a tuple\n    result_tup = tuple(result_list)\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the same length as test_tup1\n    result_tup = (0,) * len(test_tup1)\n    \n    # Iterate over each element of the tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation on the two elements of the tuple\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_sum = 0\n    for i in range(len(test_tup1)):\n        xor_sum ^= test_tup1[i] ^ test_tup2[i]\n    return xor_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # Loop through each pair of elements in the tuples\n    for i in range(len(test_tup1)):\n        test_tup1[i] ^= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += ((test_tup1[i] ^ test_tup2[i]),)\n    return result_tuple"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    unique_tuples = set(test_list)\n\n    # Return the number of unique tuples in the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for elem in test_list:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if (item[0], item[1]) in freq:\n            freq[(item[0], item[1])] += 1\n        else:\n            freq[(item[0], item[1])] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    unique_tuples = []\n    for key, value in freq_dict.items():\n        if value == 1:\n            unique_tuples.append(key)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create an empty set to store unique tuples\n    unique_tuples = set()\n\n    # iterate over each element in the list\n    for element in test_list:\n        # check if the element is a tuple\n        if isinstance(element, tuple):\n            # add the tuple to the set of unique tuples\n            unique_tuples.add(element)\n\n    # return the length of the set of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if tuple(item) not in unique_tuples:\n            unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        return \"Both input tuples must be of type tuple\"\n    elif len(test_tup1)!= len(test_tup2):\n        return \"Both input tuples must have same length\"\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] + test_tup2[i])\n        return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Define the length of the two tuples to be added\n    length = max(len(test_tup1), len(test_tup2))\n\n    # Create a new empty list to store the result\n    result = []\n\n    # Loop through the length of the two tuples\n    for i in range(length):\n        # Add the elements of each tuple at the current index\n        result.append(test_tup1[i] + test_tup2[i])\n\n    # Return the result tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new tuple to store the result\n    result = ()\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Loop through the second tuple\n        for j in range(len(test_tup2[i])):\n            # Calculate the sum of the elements at the current indices\n            sum_element = test_tup1[i][j] + test_tup2[i][j]\n            # Add the sum to the result tuple\n            result = result + ((sum_element, ), )\n    # Return the new result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n    Parameters:\n    test_tup1 (tuple): A tuple of nested tuples.\n    test_tup2 (tuple): A tuple of nested tuples.\n\n    Returns:\n    A tuple of the same size as the input tuple, where each element is the sum of corresponding elements in the two input tuples.\n    \"\"\"\n\n    result = []\n    for i in range(len(test_tup1)):\n        inner_result = []\n        for j in range(len(test_tup1[i])):\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_result))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    if tuplex in tuple1: \n        print(\"The element exists in the tuple.\") \n    else: \n        print(\"The element does not exist in the tuple.\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes in two parameters: tuplex (a tuple) and tuple1 (another tuple).\n    It returns a boolean value indicating whether the element exists in tuple1 or not.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes two arguments: tuplex (a tuple) and tuple1 (another tuple).\n    It checks whether an element exists within the first tuple and returns True if it does.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if it is odd, False otherwise.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    \n    # loop through each digit of the number and check if it's even or odd\n    for digit in str(x):\n        if int(digit) % 2 == 0:\n            parity += 1\n    \n    if parity % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x%2 == 0:\n        return \"The parity of the given number is even.\"\n    else:\n        return \"The parity of the given number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    # To find the parity of a number, we first check if it's divisible by 2. If it is, the parity is even, \n    # otherwise it's odd.\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = x % 2\n    if parity == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Initialize a variable to store the next bigger number\n    next_bigger = 0\n    \n    # Iterate through the digits of the given number\n    for digit in str(n):\n        # Multiply the next bigger number by 10 and add the current digit\n        next_bigger += int(digit) * 10\n    \n    # Add 1 to the next bigger number to make it greater than or equal to the given number\n    next_bigger += 1\n    \n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Reverse the digits of the input number\n    digits = [int(digit) for digit in str(n)]\n    digits.reverse()\n    \n    # Find the smallest number greater than the input number\n    next_bigger = 10\n    for i in range(len(digits)):\n        if digits[i] < digits[i+1]:\n            break\n        next_bigger *= 10\n        \n    # Concatenate the digits of the input number and the next bigger number\n    result = []\n    for digit in digits:\n        result.append(digit)\n    for digit in str(next_bigger):\n        result.append(digit)\n    \n    # Convert the result to an integer and return it\n    result_str = ''.join(result)\n    return int(result_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Create the next bigger number by rearranging the digits of a given number.\n\n    Parameters:\n    n (int): the given number\n\n    Returns:\n    int: the next bigger number\n    \"\"\"\n    digits = str(n)\n    digits = digits.split('')  # convert to list of digits\n    for i in range(len(digits)):\n        digits[i] = int(digits[i])\n    for i in range(len(digits)):\n        if digits[i] == 0:\n            continue\n        for j in range(i+1, len(digits)):\n            if digits[j] > digits[i]:\n                digits[i], digits[j] = digits[j], digits[i]\n                break\n        if i == len(digits)-1:\n            break\n    return int(''.join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string\n    num = str(n)\n    \n    # find the position of the highest digit in the number\n    highest = 0\n    for i in range(len(num)):\n        if int(num[i]) > int(num[highest]):\n            highest = i\n    \n    # find the digit to swap with the highest digit\n    swap_with = 10**(len(num)-1)\n    for i in range(len(num)):\n        if int(num[i]) == int(num[highest]):\n            if int(num[i]) < int(num[len(num)-1]):\n                swap_with = int(num[i])\n            else:\n                swap_with = int(num[i]) + 10*(int(num[i]) - int(num[len(num)-1]) + 1)\n    \n    # swap the highest digit with the digit to swap with\n    temp = num[highest]\n    num[highest] = str(swap_with)\n    num[len(num)-1] = temp\n    \n    # convert the resulting string back to an integer\n    next_bigger = int(num)\n    \n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a list of digits for each position\n    digit_count = [0] * 10\n    for d in str(n):\n        digit_count[int(d)] += 1\n    # find the position with the highest count\n    max_count = max(digit_count)\n    max_pos = digit_count.index(max_count)\n    # create a new number by shifting all the digits to the right\n    new_num = 0\n    for i in range(10):\n        if i == max_pos:\n            new_num += max_count\n        else:\n            new_num += digit_count[i]\n    # add the sign bit\n    if n < 0:\n        new_num = -new_num\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    digits = str(n)\n    max_digit = max(digits)\n    \n    for i in range(9):\n        digit = str(i)\n        if digit in digits:\n            for j in range(9):\n                if digit == str(j):\n                    continue\n                new_digits = ''.join(sorted(digits.replace(digit, ''), reverse=True))\n                new_n = int(new_digits + str(i) + str(j))\n                if new_n > n:\n                    return new_n\n    \n    return None"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize the result string\n    result = ''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Iterate through the digits of the number\n    for digit in num_str:\n        # Find the index of the digit in the string\n        digit_index = num_str.index(digit)\n        # If the digit is the first digit, move on\n        if digit_index == 0:\n            continue\n        # If the digit is the last digit, move it to the beginning\n        if digit_index == len(num_str) - 1:\n            result += digit\n        # If the digit is in the middle, swap it with the previous digit\n        else:\n            prev_digit = num_str[digit_index - 1]\n            result += prev_digit\n            result += digit\n    # Convert the result string to an integer\n    result_int = int(result)\n    # Return the next bigger number\n    return result_int"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    digits.sort(reverse=True)\n    num = 0\n    for digit in digits:\n        num += int(digit) * (10**(len(digits)-digits.index(digit)))\n    return num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] >= 10:\n            digits[i] -= 10\n            digits[i-1] += 1\n    return int(''.join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Initialize variables\n    new_num = ''\n    i = 0\n    \n    # Iterate over each digit in the string\n    while i < len(num_str):\n        \n        # Check if the current digit is 9\n        if int(num_str[i]) == 9:\n            \n            # If yes, check if the next digit is 9\n            if i < len(num_str) - 1:\n                if int(num_str[i+1]) == 9:\n                    # If yes, skip the current digit and move to the next one\n                    i += 1\n                else:\n                    # If not, add the previous digit to the new number\n                    new_num += str(int(num_str[i-1])+1)\n            \n            # If no, add the current digit to the new number\n            else:\n                new_num += str(num_str[i])\n                \n        # If the current digit is not 9, add it to the new number\n        else:\n            new_num += str(num_str[i])\n        \n        # Move to the next digit\n        i += 1\n    \n    # Convert the new number to an integer and return it\n    return int(new_num)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    \n    while k > 0:\n        if heapq.heappop(nums1) < heapq.heappop(nums2):\n            pairs.append((heapq.heappop(nums1), -heapq.heappop(nums2)))\n        else:\n            pairs.append((-heapq.heappop(nums2), heapq.heappop(nums1)))\n        k -= 1\n        \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a min heap to store the minimum element pairs\n    min_heap = []\n    \n    # Iterate through the first array\n    for num1 in nums1:\n        # Initialize a boolean variable to keep track of whether a pair has already been found\n        found_pair = False\n        \n        # Iterate through the second array\n        for num2 in nums2:\n            # Check if the current pair is greater than or equal to the smallest pair in the min heap\n            if (num1 + num2) >= -min_heap[0][0]:\n                # Add the current pair to the min heap if it's not already there\n                if len(min_heap) < k or (num1 + num2) < min_heap[0][0]:\n                    heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n                \n                # If the length of the min heap is k, remove the smallest pair from the heap if the current pair is less than the smallest pair in the heap\n                if len(min_heap) == k:\n                    if (num1 + num2) > min_heap[0][0]:\n                        heapq.heappop(min_heap)\n                        \n                # If a pair is found, return it\n                if not found_pair:\n                    found_pair = True\n                    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the smallest k pairs\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Create a new tuple (nums1[i], nums2[j]), which represents a pair of elements\n            new_pair = (nums1[i] + nums2[j], (i, j))\n            # If the heap is full (i.e., we have added k pairs so far), we remove the smallest pair (which is the last one added to the heap)\n            if len(min_heap) == k:\n                heapq.heappop(min_heap)\n            # If the new pair is smaller than the smallest pair in the heap, we add it to the heap\n            if len(min_heap) == 0 or new_pair[0] < min_heap[0][0]:\n                heapq.heappush(min_heap, new_pair)\n    # Extract and return the k smallest pairs from the heap\n    result = []\n    while len(min_heap) > 0:\n        result.append(min_heap[0][1])\n        heapq.heappop(min_heap)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    for num in nums1:\n        heapq.heappush(pq, (num, -1))\n    for num in nums2:\n        if pq and pq[0][0] > num:\n            heapq.heappop(pq)\n        heapq.heappush(pq, (num, -2))\n    ans = []\n    while pq and k > 0:\n        val, idx = heapq.heappop(pq)\n        if idx == -1:\n            ans.append((val, nums2[nums2.index(val) - 1]))\n            k -= 1\n        elif idx == -2:\n            ans.append((val, nums1[nums1.index(val) - 1]))\n            k -= 1\n    return ans"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    for num in nums1:\n        heapq.heappush(pq, num)\n        if len(pq) > k:\n            heapq.heappop(pq)\n    for num in nums2:\n        if len(pq) < k:\n            heapq.heappush(pq, num)\n        else:\n            heapq.heappushpop(pq, num)\n        if len(pq) == k:\n            result = []\n            while pq:\n                result.append(heapq.heappop(pq))\n            return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    heapq.heapify(heap)\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            if not heap or (num1 > heap[0][0] or (num1 == heap[0][0] and num2 > heap[0][1])):\n                heapq.heappush(heap, (num1, num2))\n                if len(heap) > k:\n                    heapq.heappop(heap)\n                \n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n        \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the indices of the smallest elements in the first array\n    min_heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(min_heap, (nums1[i], i))\n    \n    # Initialize a min heap to store the indices of the smallest elements in the second array\n    min_heap2 = []\n    for i in range(len(nums2)):\n        heapq.heappush(min_heap2, (nums2[i], i))\n    \n    # Initialize a list to store the result\n    result = []\n    \n    # Find the k pairs and add them to the result\n    for i in range(k):\n        if min_heap and min_heap2:\n            # Get the indices of the smallest elements in the first array and the second array\n            num1, idx1 = heapq.heappop(min_heap)\n            num2, idx2 = heapq.heappop(min_heap2)\n            \n            # If the sum of the elements is less than the current smallest sum, update the min heap\n            if num1 + num2 < min_heap[0][0]:\n                heapq.heapreplace(min_heap, (num1 + num2, idx1))\n                \n            # Add the current pair to the result list\n            result.append((num1, num2, idx1, idx2))\n            \n            # If the result list contains k pairs, break the loop\n            if len(result) == k:\n                break\n            \n            # If the sum of the elements is greater than or equal to the current smallest sum, remove the smallest pair from the second array\n            if num1 + num2 >= min_heap2[0][0]:\n                heapq.heappop(min_heap2)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # Sort the arrays in non-decreasing order\n    nums1.sort()\n    nums2.sort()\n    \n    # Initialize a min heap of size k and a list to store the pairs\n    min_heap = []\n    pairs = []\n    \n    # Loop through the arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # If the size of the heap is less than k, add the pair to the heap\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n            # If the size of the heap is equal to k, find the pair with the smallest value\n            elif len(min_heap) == k:\n                if (nums1[i] + nums2[j]) < min_heap[0][0]:\n                    heapq.heappushpop(min_heap, (nums1[i] + nums2[j], (i, j)))\n                elif (nums1[i] + nums2[j]) == min_heap[0][0]:\n                    if nums1[i] < nums2[j]:\n                        heapq.heappushpop(min_heap, (nums1[i] + nums2[j], (i, j)))\n            # If the size of the heap is greater than k, find the kth smallest pair\n            else:\n                if (nums1[i] + nums2[j]) < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n                elif (nums1[i] + nums2[j]) == min_heap[0][0]:\n                    if nums1[i] < nums2[j]:\n                        heapq.heappop(min_heap)\n                        heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n            \n            # If the size of the heap is equal to k, add the pair to the list\n            if len(min_heap) == k:\n                pairs.append((nums1[i], nums2[j]))\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    unique_pairs = set()\n    for num1 in nums1:\n        for num2 in nums2:\n            if (num1, num2) not in unique_pairs and (num2, num1) not in unique_pairs:\n                heapq.heappush(min_heap, (-num1-num2, (num1, num2)))\n                if len(min_heap) > k:\n                    heapq.heappop(min_heap)\n                unique_pairs.add((num1, num2))\n    return [pair[1] for pair in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the array in ascending order\n    nums1.sort()\n    nums2.sort()\n    \n    # Create a heap of size k to store the smallest k pairs\n    min_heap = []\n    \n    # Initialize the minimum index to 0\n    min_index = 0\n    \n    # Initialize the count to 0\n    count = 0\n    \n    # Iterate over the first array\n    for i in range(len(nums1)):\n        # If the heap is not full and the sum of the elements in the heap is less than or equal to the current element, add the current element to the heap and increment the count\n        if len(min_heap) < k and (len(min_heap) == 0 or sum(min_heap[0]) <= nums1[i]):\n            heapq.heappush(min_heap, nums1[i])\n            count += 1\n            \n        # If the heap is full and the sum of the elements in the heap is greater than the current element, remove the smallest element from the heap and decrement the count\n        elif len(min_heap) == k and sum(min_heap[0]) > nums1[i]:\n            heapq.heappop(min_heap)\n            count -= 1\n        \n        # If the heap is full and the sum of the elements in the heap is less than or equal to the current element, add the current element to the heap and decrement the count\n        else:\n            heapq.heappop(min_heap)\n            count -= 1\n            \n        # If the count is equal to k, return the minimum k pairs\n        if count == k:\n            return min_heap\n    \n    # If the count is less than k, return None\n    return None"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                result = [(list1[i][0], list1[i][1]), (list1[j][0], list1[j][1])]\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product \n    of any two tuples within the list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    product = 1\n    \n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # Update the minimum product if it is smaller than the current minimum\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x: x[0]*x[1])\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples as input and returns the minimum product of the pairs of tuples.\n    \"\"\"\n    lst = sorted(lst, key=lambda x: x[0]*x[1])\n    min_product = lst[0][0] * lst[0][1]\n    for i in range(1, len(lst)):\n        if lst[i][0]*lst[i][1] < min_product:\n            min_product = lst[i][0] * lst[i][1]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    products = []\n    for pair in list1:\n        product = pair[0] * pair[1]\n        products.append(product)\n    min_product = min(products)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples and returns the minimum product of all pairs of tuples within the list.\n\n    Args:\n        list1 (list): A list of tuples containing integers.\n\n    Returns:\n        int: The minimum product of all pairs of tuples within the list.\n    \"\"\"\n\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of any two tuples in the list.\n    '''\n    list1.sort()  # sort the list in ascending order\n    min1 = list1[0][0] * list1[0][1]\n    min2 = list1[0][0] * list1[1][1]\n    max1 = list1[0][0] * list1[1][0]\n    max2 = list1[1][0] * list1[1][1]\n\n    if min1 < min2 and min1 < max1 and min1 < max2:\n        return min1\n    elif min2 < min1 and min2 < max1 and min2 < max2:\n        return min2\n    elif max1 < min1 and max1 < min2 and max1 < max2:\n        return max1\n    else:\n        return max2"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for num in listval:\n        if num < min_val:\n            min_val = num\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for value in listval:\n        if value < min_val:\n            min_val = value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a list of values as input and returns the minimum value.\n    If the list is empty or contains only one element, the function returns the element itself.\n    \"\"\"\n    if not listval:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = listval[0]\n        for val in listval[1:]:\n            if val < min_val:\n                min_val = val\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0] # initializing the minimum value to the first element of the list\n    for i in range(1, len(listval)): # iterating over the list from second element to the last\n        if listval[i] < min_val: # checking if the current element is less than the minimum value\n            min_val = listval[i] # updating the minimum value if it's less\n    return min_val # returning the minimum value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to maximum value\n    min_val = float('inf')\n    # iterate over each element in the list\n    for item in listval:\n        # check if the current element is less than the minimum value\n        if item < min_val:\n            # if so, update the minimum value\n            min_val = item\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a list of values and returns the minimum value.\n    \"\"\"\n    # Initialize a variable to store the minimum value\n    min_val = listval[0]\n    # Loop through the list and compare each value to the current minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Create an empty list to store the minimum value\n    min_list = []\n\n    # Iterate through each element in the list\n    for val in listval:\n        # If the value is smaller than the minimum value, add it to the list\n        if val < min_list[-1] or len(min_list) == 0:\n            min_list.append(val)\n        # If the value is larger than the minimum value, remove the last element from the list and add the new value\n        elif val > min_list[-1]:\n            min_list.pop()\n            min_list.append(val)\n\n    # Return the minimum value\n    return min_list[-1]"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # initialize variables to keep track of minimum and current values\n    min_val = float('inf')  # set initial minimum value to infinity\n    curr_val = None  # set initial current value to None\n\n    # loop through list of values and compare each value to the minimum\n    for val in listval:\n        if val < min_val:\n            min_val = val\n            curr_val = val\n        elif val == min_val:\n            curr_val = val\n\n    # return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    word_list = re.findall(r'\\w+', word)\n    \n    # Convert the first word to lowercase and remove the underscore\n    first_word = word_list.pop(0).lower()\n    \n    # Convert the remaining words to camel case\n    camel_case = ''.join(w.title() for w in word_list)\n    \n    # Return the camel case string\n    return first_word + camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into individual words\n    words = word.split('_')\n    \n    # Convert the first letter to uppercase and add it to the rest of the words\n    result = words[0].upper()\n    for word in words[1:]:\n        result += word.capitalize()\n    \n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Convert the given word to camel case\n    camel_case = re.sub('_(.)', lambda m: m.group(1).upper(), word)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for char in word:\n        if char.isupper():\n            camel_case += char\n        elif char.islower():\n            camel_case += \"_\" + char.lower()\n    return camel_case.lstrip(\"_\")"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Convert each word to camel case\n    camel_case = ''.join(word.title() for word in words)\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'\\b[a-z]+\\b', word)\n    camel_words = [word[0].lower() + word[1:].capitalize() for word in words]\n    camel_string = ''.join(camel_words)\n    return camel_string"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_(.)', lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    components = re.findall(r'(?<!^)(?=[A-Z])', word)\n    return ''.join(x.capitalize() for x in components)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert the snake case word to camel case\n    camel_case_word = re.sub(r'_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with all odd numbers removed.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Create an empty list to store odd numbers\n    odd_list = []\n    # Loop through each number in the list\n    for num in l:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # Add the odd number to the new list\n            odd_list.append(num)\n    # Return the new list with odd numbers removed\n    return odd_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for num in l:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with all odd numbers removed.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        # if the current index is equal to the nth element, return the value\n        if i == n-1:\n            return list1[i][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1 or n > len(list1):\n        return \"Invalid index\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if n > len(list1) or n <= 0:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError('Input must be a list.')\n    elif not all(isinstance(x, tuple) for x in list1):\n        raise TypeError('All elements in the list must be tuples.')\n    elif n <= 0 or n > len(list1):\n        raise ValueError('n must be a positive integer less than or equal to the length of the list.')\n\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    return any(x in list1 for x in list2)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two list as input and returns True if there is a common value in both lists, else False.\n    '''\n    # converting both lists to sets to remove duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n    # checking if there are any common values in both sets\n    if list1.intersection(list2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and checks whether any value in the first list exists in the second list or not.\n    \"\"\"\n\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # check if list1 is a subset of list2\n    if list1.issubset(list2):  \n        return True  \n    else:  \n        return False  "
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value in the first list exists in the second list or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    return max(max1 * max2, max2 * min1)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    '''\n    max_pair = (0, 0)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_pair[0]:\n                max_pair = (arr[i] * arr[j], arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2 and arr[i]!= max1:\n            max2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    This function takes in an array of integers and returns the pair with the highest product.\n    '''\n\n    # Find the minimum and maximum value in the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # Initialize the product variables\n    max_product = min_val * max_val\n\n    # Find the maximum product for each pair of elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i] * arr[j]\n            if prod > max_product:\n                max_product = prod\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes in an array of integers and returns a tuple containing the indices of the two numbers in the array with the highest product.\n    If there are multiple pairs with the same highest product, the function returns the indices of the pair with the smallest index.\n    \"\"\"\n    max1 = max2 = float('-inf')\n    max_pair = (-1, -1)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max1:\n                max2 = max1\n                max1 = product\n                max_pair = (i, j)\n            elif product > max2 and product!= max1:\n                max2 = product\n                max_pair = (i, j)\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    '''\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    \"\"\"\n    This function takes an array of integers as input and returns the pair with the highest product from the array.\n    \"\"\"\n    max1 = max2 = float('-inf')\n    for i in range(len(arr)): \n        if arr[i] > max1: \n            max2 = max1 \n            max1 = arr[i] \n        elif arr[i] > max2 and arr[i]!= max1: \n            max2 = arr[i] \n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize two variables to hold the maximum and minimum products\n    max_product = float('-inf')\n    min_product = float('inf')\n    \n    # Iterate through the array and update the maximum and minimum products\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the product of the current pair of integers\n            product = arr[i] * arr[j]\n            \n            # Update the maximum and minimum products if the current product is greater than the maximum or minimum\n            if product > max_product:\n                max_product = product\n            if product < min_product:\n                min_product = product\n    \n    # Return the pair with the maximum product\n    return (arr[arr.index(max_product)], arr[arr.index(min_product)])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    max1 = max2 = arr[0]\n    min1 = min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return (max1, min1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = 0\n    max2 = 0\n    max3 = 0\n\n    for num in arr:\n        if num > max1:\n            if num > max2:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            else:\n                max3 = max2\n                max2 = num\n        elif num > max2:\n            if num > max3:\n                max3 = num\n\n    return max3"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through the given list of tuples\n    for i in Input:\n\n        # Loop through the first element of each tuple\n        for j in range(len(i)):\n\n            # Check if the common first element exists in the result list\n            if i[j] not in result:\n\n                # If the common first element does not exist, add it to the result list\n                result.append(i[j])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    CommonElements = []\n\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                CommonElements.append(i[0])\n\n    return CommonElements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for tuple in Input:\n        for i in range(len(tuple)):\n            if i == 0 or tuple[i]!= tuple[i-1]:\n                common_elements.append(tuple[i])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Group tuples by their first element\n    grouped = {}\n    for t in Input:\n        if t[0] in grouped:\n            grouped[t[0]].append(t)\n        else:\n            grouped[t[0]] = [t]\n\n    # Find the common first element in each group\n    result = []\n    for t in grouped:\n        common_t = t\n        for s in grouped:\n            if s!= t:\n                if t[0] in s and s not in result:\n                    common_t = s\n                    break\n        result.append(common_t)\n\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    # create an empty dictionary to store common elements\n    common = {}\n    # loop through the input list of tuples\n    for tup in Input:\n        # if the first element of the tuple is not already in the dictionary\n        if tup[0] not in common:\n            # add the first element to the dictionary with a value of 1\n            common[tup[0]] = 1\n        else:\n            # if the first element is already in the dictionary, increment the value by 1\n            common[tup[0]] += 1\n    # loop through the dictionary and find the common element(s) with the highest count\n    for key, value in common.items():\n        if value == max(common.values()):\n            # print the common element(s) and their count\n            print(\"Common element(s):\", key, \"Count:\", value)\n    # if there are no common elements, print a message\n    if len(common) == 0:\n        print(\"There are no common elements in the list of tuples.\")"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    Common = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Common.append(Input[i])\n    return Common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_list = []\n    for tup in Input:\n        first_elem = tup[0]\n        if first_elem not in common_list:\n            common_list.append(first_elem)\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # creating a dictionary to store count of common elements\n    count = {}\n    # iterating through the input list of tuples\n    for tup in Input:\n        # checking if the first element of the tuple is present in the dictionary\n        if tup[0] in count:\n            # incrementing the count of the first element in the tuple\n            count[tup[0]] += 1\n        # if the first element is not present in the dictionary, adding it with count 1\n        else:\n            count[tup[0]] = 1\n    # iterating through the dictionary to find the common first element\n    for key in count:\n        if count[key] == Input.count((key,)):\n            # returning the common first element\n            return key\n    # if no common first element is found, returning None\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    \n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append((Input[i][0], (Input[i][1], Input[j][1])))\n    \n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Create an empty dictionary to store common first element and their frequency\n    common_dict = {}\n    \n    # Iterate over the input list of tuples\n    for i in Input:\n        # Get the first element from the tuple\n        first = i[0]\n        \n        # If the first element is already in the dictionary, increment its frequency\n        if first in common_dict:\n            common_dict[first] += 1\n        # If the first element is not in the dictionary, add it with frequency of 1\n        else:\n            common_dict[first] = 1\n            \n    # Sort the dictionary by the frequency in descending order\n    sorted_dict = dict(sorted(common_dict.items(), key=lambda item: item[1], reverse=True))\n    \n    # Get the first key value pair in the sorted dictionary\n    result = next(iter(sorted_dict.items()))\n    \n    # Return the first element and its frequency\n    return result"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    for i in lst:\n        if len(i) == max_len:\n            return i"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst)\n    max_element = lst[0]\n    \n    for i in range(1,len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_element = lst[i]\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_element = item\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_len = 0\n    max_elem = None\n\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    total *= len(lst)\n    print(total)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        rounded_number = round(number)\n        total_sum += rounded_number\n\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize sum variable to zero\n    sum_cubes = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the cube of the number\n        cube = i**3\n\n        # add the cube to the sum\n        sum_cubes += cube\n\n    # return the sum of cubes\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    This function finds the sum of the cubes of first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += i**3\n    return total"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of the current even natural number\n        cube = i**3\n        # Add the cube to the sum\n        sum += cube\n    # Return the sum of the cubes of even natural numbers\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element)\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" - \"\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result.strip(delimiter)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_str = ''\n    for i in test_tup:\n        concatenated_str += str(i) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = delimiter.join(str(item) for item in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    result = []\n    for element in test_tup:\n        result.append(str(element))\n    concatenated_string = delimiter.join(result)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter.\n    \"\"\"\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-1] # remove the last delimiter"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #initializing variables\n    count = 0\n    total_sum = 0\n    \n    #calculating the sum of cubes\n    for i in range(1, n+1):\n        total_sum += i*i*i\n        count += 1\n    \n    #calculating the average of cubes\n    average = total_sum/count\n    \n    #printing the average of cubes\n    print(\"The average of cubes of the first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initializing the sum and count to 0\n    sum = count = 0\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # calculating the cube of the current number\n        cube = i ** 3\n        # adding the cube to the sum\n        sum += cube\n        # incrementing the count\n        count += 1\n    # calculating the average of the cubes\n    average = sum / count\n    # printing the average\n    print(\"The average of cubes of first\", n, \"natural numbers is\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize the sum and count to 0\n    sum = 0\n    count = 0\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # calculate the cube of the current number and add to the sum\n        cube = i ** 3\n        sum += cube\n        # increment the count of cubes\n        count += 1\n    # calculate the average of cubes\n    average = sum / count\n    # return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize the sum of cubes to zero\n    cube_sum = 0\n    \n    # initialize the count of cubes to zero\n    cube_count = 0\n    \n    # loop from 1 to n\n    for i in range(1, n+1):\n        # calculate the cube of the current number and add it to the sum\n        cube_sum += i ** 3\n        \n        # increment the count of cubes by 1\n        cube_count += 1\n        \n    # calculate the average of cubes\n    average_cube = cube_sum / cube_count\n    \n    # return the average\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n    return sum_of_cubes/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total / (n**3)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    # initialize a variable to keep track of the sum of the cubes\n    total_cubes = 0\n    \n    # loop through the first n natural numbers\n    for i in range(n):\n        # calculate the cube of the current natural number\n        cube = i ** 3\n        # add the cube to the running total\n        total_cubes += cube\n        \n    # calculate the average of the cubes\n    average_cubes = total_cubes / n\n    \n    # return the average of the cubes\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    average = sum / n\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple)) if isinstance(test_tuple[i], str)]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([test_tuple[i][-1] for i in range(len(test_tuple))])"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for i, element in enumerate(test_tuple):\n        if isinstance(element, str):\n            rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for item in test_tuple:\n        rear_index.append(item[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(str(elem)[::-1] for elem in test_tuple)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple) - 1:\n            rear_list.append(test_tuple[i])\n        else:\n            rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = 1\n    rear_elements = []\n    for i, element in enumerate(test_tuple):\n        if i == rear_index:\n            rear_elements.append(element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(lst, elem):\n    count = 0\n    for sublst in lst:\n        if elem in sublst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of integers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.sub() method to replace the matched pattern with the new format\n    return re.sub(pattern, r'\\2-\\1-\\3', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd_regex = r'^\\d{4}-\\d{2}-\\d{2}$'\n    if re.match(yyyy_mm_dd_regex, dt):\n        # Convert the date format\n        dt_list = dt.split('-')\n        dt_list[2], dt_list[1], dt_list[0] = dt_list[0], dt_list[1], dt_list[2]\n        dt_new = '-'.join(dt_list)\n        return dt_new\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert date format to yyyy-mm-dd\n    date_format = dt.split('-')\n    year = date_format[0]\n    month = date_format[1]\n    day = date_format[2]\n    \n    # Convert date format to dd-mm-yyyy\n    new_dt = day + '-' + month + '-' + year\n    \n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # Use the re.sub() method to replace the date format with dd-mm-yyyy format\n    dt = re.sub(pattern, lambda match: match.group(0).replace('-', '/'), dt)\n\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the regular expression pattern to match the date in the input string\n    match = re.match(pattern, dt)\n    # If the match object is not None, the date format matches yyyy-mm-dd\n    if match:\n        # Use the string.replace() method to replace the '-' with '-' and reverse the order of the month and day\n        dt = match.group(2) + '-' + match.group(3) + '-' + match.group(1)\n    # Return the modified date in the dd-mm-yyyy format\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define the pattern for matching date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # use re.sub() function to replace the matched pattern with desired format\n    return re.sub(pattern, lambda x: x.group().replace('-', ''), dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace hyphens with spaces\n    dt = re.sub(r'(-)','', dt)\n    # Split the date into its components\n    date_components = dt.split()\n    # Reverse the components\n    date_components.reverse()\n    # Join the components with spaces\n    new_dt =''.join(date_components)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern for matching date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use re.search() method to match pattern in date string\n    match = re.search(pattern, dt)\n\n    # Check if match was found\n    if match:\n        # Extract year, month, and day from match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # Format new date string in dd-mm-yyyy format\n        new_date = f'{day}-{month}-{year}'\n\n        # Return formatted date string\n        return new_date\n    else:\n        # If no match found, return original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use the re module to search for matches in the string\n    match = re.search(pattern, dt)\n    \n    # If a match was found, extract the components and format them in the new date format\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    \n    # If no match was found, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function takes an array as an input and sorts it using shell sort.\n    \"\"\"\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # calculate the gap sequence using a formula\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            # shift the elements by gap position\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Step 1: Find the largest element in the array\n    largest = max(my_list)\n\n    # Step 2: Perform increments of 10 to 1 until the largest element is reached\n    increment = largest // 10\n    while increment >= 1:\n        # Step 3: Sort the array by comparing adjacent elements with the current increment\n        for i in range(increment, len(my_list)):\n            current = my_list[i]\n            j = i\n            while j >= increment and my_list[j-increment] > current:\n                my_list[j] = my_list[j-increment]\n                j -= increment\n            my_list[j] = current\n\n        # Step 4: Decrease the increment by 10 until it is equal to 1\n        increment //= 10\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # calculate the length of the array\n    n = len(my_list)\n    \n    # calculate the gap for each sublist\n    gap = n // 2\n    \n    while gap > 0:\n        # traverse through the sublist for each gap\n        for i in range(gap, n):\n            # shift the elements that are not in their proper position\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        # shrink the gap\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Get the length of the array\n    n = len(my_list)\n    # The gap variable controls the size of the increments between passes\n    gap = n//2\n    # Perform multiple passes through the array until gap is 1\n    while gap > 0:\n        # For each gap, sort the array using increments of gap\n        for i in range(gap, n):\n            # Temporarily store the current element\n            temp = my_list[i]\n            # Shift the elements that are greater than temp\n            j = i\n            while j >= gap and temp > my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            # Insert the temp element\n            my_list[j] = temp\n        # Decrease the gap size\n        gap = gap//2"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i], test_tup1[i], test_tup2[i]))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Create an empty list to store the elementwise and tuples\n    result = []\n\n    # Loop through each element in both tuples\n    for i in range(len(test_tup1)):\n        # Extract the elements from the two tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n\n        # Perform the elementwise and operation\n        and_elem = elem1 & elem2\n\n        # Add the and element to the result list\n        result.append(and_elem)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize empty tuples to hold the elementwise and tuples\n    and_tup1 = ()\n    and_tup2 = ()\n    \n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Extract the first element from both tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        \n        # Perform the elementwise and operation on the elements\n        and_elem = elem1 & elem2\n        \n        # Append the result to the appropriate tuple\n        if i % 2 == 0:\n            and_tup1 += (and_elem,)\n        else:\n            and_tup2 += (and_elem,)\n    \n    # Return the elementwise and tuples\n    return (and_tup1, and_tup2)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x1 and x2 for x1, x2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple(a and b for a, b in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # create an empty list to store the elementwise and tuples\n    result_list = []\n    # loop through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # add the elementwise and of the corresponding elements of the two tuples to the result list\n        result_list.append(test_tup1[i] & test_tup2[i])\n    # return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        print(\"The equation of the parabola does not have a real root.\")\n    elif delta == 0:\n        print(\"The directrix of the parabola is equal to the two solutions.\")\n        x1 = -b/(2*a)\n        x2 = -b/(2*a)\n        print(\"The directrix is:\", x1)\n        print(\"The other solution is:\", x2)\n    else:\n        print(\"The directrix of the parabola is equal to the two solutions.\")\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        print(\"The directrix is:\", x1)\n        print(\"The other solution is:\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Find the equation of the parabola\n    parabola_eq = 'x^2 = a*x^2 + b*x + c'\n    \n    # Extract the coefficients from the equation\n    a_coef = float(a.split('x^2')[0])\n    b_coef = float(a.split('x^2')[1].split('+')[0])\n    c_coef = float(a.split('x^2')[1].split('+')[1])\n    \n    # Find the discriminant\n    discriminant = b_coef**2 - 4*a_coef*c_coef\n    \n    # Find the roots of the discriminant\n    discriminant_sqrt = discriminant**(1/2)\n    root1 = (-b_coef + discriminant_sqrt)/(2*a_coef)\n    root2 = (-b_coef - discriminant_sqrt)/(2*a_coef)\n    \n    # Find the two directrices\n    directrix1 = root1\n    directrix2 = root2\n    \n    # Return the two directrices\n    return directrix1, directrix2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        return (-b + discriminant**0.5) / (2*a)\n    else:\n        return (-b - discriminant**0.5) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the coefficients of the quadratic equation\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the quadratic equation has a real root\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return x1, x2\n    \n    # If the quadratic equation has no real root, then the directrix is at a single point\n    else:\n        return (-b) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # Compute the discriminant\n    disc = b**2 - 4*a*c\n    \n    # If the discriminant is negative, the directrix is complex\n    if disc < 0:\n        return None\n    \n    # Compute the directrix\n    directrix = (-b + (disc**0.5)) / (2*a)\n    \n    # Check if the directrix is real or imaginary\n    if a == 0:\n        # If the coefficient of x is zero, the directrix is a real number\n        if directrix.imag == 0:\n            return directrix.real\n        else:\n            return None\n    \n    # If the directrix is real, compute the corresponding complex number\n    elif a!= 0:\n        return complex(directrix, 0)\n    \n    # If the directrix is imaginary, compute the corresponding complex number\n    else:\n        return complex(0, directrix)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Solve the quadratic equation to find the roots of the parabola equation\n    D = b**2 - 4*a*c\n    x1 = (-b + D**0.5)/(2*a)\n    x2 = (-b - D**0.5)/(2*a)\n    \n    # Find the directrix of the parabola by taking the midpoint of the two roots\n    directrix = (x1 + x2) / 2\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Find the discriminant of the quadratic equation\n    discriminant = b**2 - 4*a*c\n    \n    # If the discriminant is positive, the directrix exists\n    if discriminant > 0:\n        # Find the two solutions of the quadratic equation\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Sort the solutions in ascending order\n        x1, x2 = sorted([x1, x2])\n        \n        # Return the two solutions as the directrix\n        return (x1, x2)\n    \n    # If the discriminant is zero, the directrix is the root of the quadratic equation\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return (x, x)\n    \n    # If the discriminant is negative, the directrix does not exist\n    else:\n        return (\"There is no directrix.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0: \n        x1 = (-b + discriminant**0.5)/(2*a) \n        x2 = (-b - discriminant**0.5)/(2*a) \n        print(\"The directrix of the parabola is\", x1, \"or\", x2) \n    else: \n        print(\"The parabola has no real root.\") "
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns true if they have at least one common element.\n    \"\"\"\n    # create a set to store the elements of list1\n    set1 = set(list1)\n    # create a set to store the elements of list2\n    set2 = set(list2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # if there is at least one element in the intersection, then there is a common element\n    if intersection:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a dictionary to store the count of each element in each list\n    count1 = {}\n    count2 = {}\n    for elem in list1:\n        if elem in count1:\n            count1[elem] += 1\n        else:\n            count1[elem] = 1\n    for elem in list2:\n        if elem in count2:\n            count2[elem] += 1\n        else:\n            count2[elem] = 1\n    # iterate over the keys of count1 and count2 and check if they have at least one common element\n    for key in count1.keys():\n        if key in count2.keys():\n            if count1[key] == count2[key]:\n                return True\n    # if we get here, there was no common element\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if the lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    \n    # Create a set to store the elements of both lists\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if there are any common elements\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # create a set from each list, and then find the intersection of the two sets\n    set1 = set(list1)\n    set2 = set(list2)\n    common = set1.intersection(set2)\n    if len(common) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates and check for intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2 and elem not in list1:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Create a set from each list to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if there is at least one common element\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the trapezium\n    length = (area / height) ** 0.5\n\n    # Calculate the median length of the trapezium\n    median_length = (base1 + base2 + length) / 3\n\n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height\n    area += 0.5 * base2 * height\n\n    # Calculate the sum of the sides of the trapezium\n    side1 = base1 + base2\n    side2 = (base1 * height) + (base2 * height)\n\n    # Calculate the median length of the trapezium\n    median = (area - side1 - side2) / (2 * height)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    \n    # Calculate the midpoint of the trapezium\n    midpoint = area / 2\n    \n    # Calculate the length of the smaller trapezium\n    smaller = base1 if midpoint < base2 else base2\n    \n    # Calculate the length of the larger trapezium\n    larger = base1 if midpoint > base2 else base2\n    \n    # Calculate the median of the two lengths\n    median = (smaller + larger) / 2\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium using the formula for the area of a trapezoid\n    area = 0.5 * (base1 + base2) * height\n    # Calculate the length of the half-perimeter of the trapezium\n    half_perimeter = 0.5 * (base1 + base2)\n    # Calculate the length of the lower half of the trapezium\n    lower_half = 0.5 * (base1 + base2 - area)\n    # Calculate the length of the upper half of the trapezium\n    upper_half = 0.5 * (base1 + base2 + area)\n    # Find the median length of the trapezium\n    median = max(lower_half, upper_half)\n    # Calculate the absolute difference between the median and half the perimeter\n    difference = abs(half_perimeter - median)\n    # Calculate the relative difference between the median and half the perimeter\n    relative_difference = difference / half_perimeter\n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium using Heron's formula\n    s = (base1 + base2) / 2\n    area = (s * (base1 + base2) * height) / 2\n\n    # Calculate the length of the semi-base and semi-height\n    sb = base1 / 2\n    sh = height / 2\n\n    # Calculate the lengths of the other two sides of the trapezium\n    a1 = sb\n    a2 = sh\n\n    # Calculate the lengths of the trapezium's base and height\n    b = a1 + a2\n    h = area / b\n\n    # Calculate the length of the trapezium's third side\n    c = sb + sh\n\n    # Calculate the length of the trapezium's median\n    m = (a1 + a2 + b + c) / 2\n\n    return m"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 + 0.5 * base2 * height + 0.5 * base1 * height\n    # Calculate the length of the first half of the trapezium\n    first_half_length = 0.5 * (base1 + base2)\n    # Calculate the length of the second half of the trapezium\n    second_half_length = 0.5 * (base1 + base2 - 2 * height)\n    # Calculate the median of the two halves using the formula\n    median_length = (first_half_length + second_half_length) / 2\n    # Return the median length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the trapezium using the trapezoidal rule\n    # and store it in the variable trapezium_length\n    trapezium_length = (base1 + base2) / 2 * height\n\n    # Calculate the lengths of the three equal sections\n    section1_length = base1 / 2\n    section2_length = (base1 + base2) / 2 - section1_length\n    section3_length = base2 / 2\n\n    # Sort the three sections by their lengths\n    sections = [section1_length, section2_length, section3_length]\n    sections.sort()\n\n    # Calculate the length of the median\n    if sections[1] == sections[2]:\n        median = sections[1]\n    else:\n        median = (sections[1] + sections[2]) / 2\n\n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n\n    Parameters:\n    base1 (float): The length of the first half of the trapezium.\n    base2 (float): The length of the second half of the trapezium.\n    height (float): The height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2\n\n    # Calculate the semi-perimeter of the trapezium\n    semi_perimeter = (base1 + base2) / 2\n\n    # Calculate the area of the parallelogram formed by the semi-perimeter and height\n    parallelogram_area = math.sqrt(semi_perimeter**2 - (base1 / 2)**2)\n\n    # Calculate the area of the trapezium\n    trapezium_area = area - parallelogram_area\n\n    # Calculate the length of the base of the trapezium\n    base = math.sqrt(2 * (semi_perimeter**2 - height**2))\n\n    # Calculate the length of the half of the trapezium\n    half_trapezium_length = perimeter / 2\n\n    # Calculate the length of the other half of the trapezium\n    other_half_length = math.sqrt(base**2 - half_trapezium_length**2)\n\n    # Determine the length of the longer half of the trapezium\n    if base2 > base1:\n        longer_half_length = half_trapezium_length\n    else:\n        longer_half_length = other_half_length\n\n    # Calculate the total length of the trapezium\n    total_length = base1 + longer_half_length + base2\n\n    # Calculate the median length of the trapezium\n    median = total_length / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Calculate the median length of a trapezium using the trapezoidal rule.\n\n    Parameters:\n    base1 (float): The length of the first base of the trapezium.\n    base2 (float): The length of the second base of the trapezium.\n    height (float): The height of the trapezium.\n\n    Returns:\n    (float): The median length of the trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    base = max(base1, base2)\n    return base * 2 - area / 3"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium using the trapezoidal rule.\n\n    Parameters:\n    base1 (float): Base length of the first trapezium.\n    base2 (float): Base length of the second trapezium.\n    height (float): Height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n\n    \"\"\"\n    # Calculate the length of the first trapezium\n    trapezium1 = 0.5 * (base1 + base2)\n\n    # Calculate the length of the second trapezium\n    trapezium2 = 0.5 * (base1 + base2 + height)\n\n    # Calculate the length of the combined trapezium\n    combined_trapezium = trapezium1 + trapezium2\n\n    # Calculate the sum of the lengths of the two trapezia\n    total_length = trapezium1 + trapezium2\n\n    # Calculate the area of the trapezium\n    area = 0.5 * combined_trapezium * height\n\n    # Calculate the sum of the areas of the two trapezia\n    total_area = 0.5 * (combined_trapezium ** 2)\n\n    # Calculate the median length of the trapezium\n    median_length = (total_area / total_length) ** 0.5\n\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    for i in arr:\n        if i > number:\n            print(\"The number is greater than the element at index\", i)\n            return True\n    print(\"The number is not greater than any element of the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    # Check if the number is greater than the maximum element in the array\n    if number > max(arr):\n        print(\"The number is greater than all elements in the array.\")\n    # Check if the number is greater than the minimum element in the array\n    elif number < min(arr):\n        print(\"The number is less than or equal to the minimum element in the array.\")\n    # Check if the number is greater than all elements in the array\n    else:\n        print(\"The number is greater than all elements in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            print(f\"The number {number} is greater than {element}.\")\n            return True\n        elif number < element:\n            continue\n    print(f\"The number {number} is not greater than any element in the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if number > i:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The number is greater than the element at index\", arr.index(i))\n            return\n    print(\"The number is not greater than any element in the array\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes an array and a number as inputs, and returns True if the number is greater than the elements of the array, False otherwise.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?:b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    # Define the regular expression pattern to match the pattern\n    pattern = r'a[bB]+'\n\n    # Use the regular expression pattern to search for matches in the input text\n    matches = re.findall(pattern, text)\n\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab*'\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        print(\"No matches found.\")\n    else:\n        print(\"Matches found:\")\n        for match in matches:\n            print(match)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # return the last character of the string\n    return num_str[-1]"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to a string\n    str_n = str(n)\n    # get the last character of the string\n    last_char = str_n[-1]\n    # convert the last character to an integer\n    last_digit = int(last_char)\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of the number.\n    \"\"\"\n    # Use integer division to find the last digit of n\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    if n < 0:\n        n = abs(n)\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns the negative numbers in the list.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters in a string.\n    '''\n    # Create a new string with only even characters\n    new_str = ''.join(char for char in str1 if char.isalnum())\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([char for char in str1 if char.isalpha() or char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(filter(str.isalpha, str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit(): # if char is a digit, add it to the new string\n            new_str += char\n        else: # if char is an odd character, skip it\n            pass\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Create an empty string to store the even characters\n    even_str = \"\"\n    # Loop through each character in the given string\n    for char in str1:\n        # If the character is even, append it to the even_str\n        if char % 2 == 0:\n            even_str += char\n    # Return the even_str\n    return even_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from the string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isalpha() and ord(char) % 2 == 1:\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = ''\n    for char in str1:\n        if char.isdigit() and int(char) % 2!= 0:\n            result += char\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i+1:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # Initialize counters\n    left_to_right = 0\n    right_to_left = 0\n\n    # Iterate over the list\n    for i in range(len(test_list)):\n        # Check if the element is a tuple and its first element is in the list\n        if isinstance(test_list[i], tuple) and test_list[i][0] in test_list[:i]:\n            left_to_right += 1\n\n        # Check if the element is a tuple and its second element is in the list\n        if isinstance(test_list[i], tuple) and test_list[i][1] in test_list[i+1:]:\n            right_to_left += 1\n\n    # Return the total number of bidirectional pairs\n    return left_to_right + right_to_left"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    n = len(test_list)\n\n    # Iterate over the list to compare adjacent tuples\n    for i in range(n):\n        for j in range(i+1, n):\n            # If the tuples are equal, count as a bidirectional tuple pair\n            if test_list[i] == test_list[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    # Initialize a counter variable for bidirectional pairs\n    bidirectional_count = 0\n    \n    # Iterate over each pair of items in the list\n    for i in range(len(test_list)):\n        # Check if the next item in the list is the same as the current item\n        if i < len(test_list) - 1 and test_list[i] == test_list[i+1]:\n            # Increment the counter if the items are bidirectional pairs\n            bidirectional_count += 1\n    \n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    # Loop through each element in the list\n    for num in L:\n        # If the element is a multiple of 5, add it to the sum\n        if num % 5 == 0:\n            sum += num\n    # Return the sum\n    return sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        if num < 0:\n            result -= num\n        else:\n            result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not all(isinstance(x, int) for x in L):\n        raise ValueError(\"All elements in the list must be integers.\")\n    single = 0\n    for x in L:\n        single += x\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        if i == 0:\n            result = L[i]\n        else:\n            result = result * L[i]\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        single_num = single_num * num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    # loop through each element of the list\n    for i in L:\n        # if the element is multiple of 3, add 3 to the result\n        if i % 3 == 0:\n            result += 3\n        # if the element is multiple of 5, add 5 to the result\n        elif i % 5 == 0:\n            result += 5\n        # if the element is not a multiple of 3 or 5, add the element to the result\n        else:\n            result += i\n    # return the result\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Regular expression to match adverbs\n    adverb_pattern = re.compile(r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expression to find all adverbs in the sentence\n    pattern = r'\\b(\\w+)(ing|ed|ingly|ly|ly|ly|ly|edly|ed|ly|edly|edly|ly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly|ed|ly|edly"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expressions to find all adverbs\n    adverbs = re.findall(r'\\b\\w*[aeiou]\\w*[aeiou]\\w*(\\b|\\.)', text)\n\n    # Iterate over the adverbs and their positions\n    for i, adverb in enumerate(adverbs):\n        # Split the adverb into its components\n        components = re.findall(r'\\b\\w*[aeiou]\\w*', adverb)\n\n        # Check if the first component is an adjective\n        if components[0][0].islower():\n            print('The first adverb is \"{}\" and its position is {}'.format(adverb, i+1))"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Compile regular expression pattern for finding adverbs\n    pattern = re.compile(r'\\b(\\w+)(\\w+\\b|\\b\\w+)(\\w+\\b|\\b\\w+)(\\w+\\b|\\b\\w+)\\b')\n    # Find all matches of the pattern in the given text\n    matches = pattern.findall(text)\n    # Initialize variables for storing adverbs and their positions\n    first_adverb = None\n    first_adverb_pos = None\n    # Iterate through all matches and update variables accordingly\n    for match in matches:\n        if match[0] == 'not':\n            continue\n        if first_adverb is None:\n            first_adverb = match[0]\n            first_adverb_pos = (match.start(), match.end())\n        else:\n            if match.start() < first_adverb_pos[1]:\n                first_adverb = match[0]\n                first_adverb_pos = (match.start(), match.end())\n    # Return the first adverb and its position\n    return first_adverb, first_adverb_pos"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern to search for adverbs\n    pattern = r'\\b(\\w+)-(\\w+)\\b'\n    \n    # Use the re.findall() method to find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if there are any matches\n    if len(matches) > 0:\n        # Loop through the matches to find the first adverb and their positions\n        for match in matches:\n            # Split the match into words\n            words = match.split('-')\n            \n            # Check if the second word is a noun or pronoun\n            if re.match(r'\\w+\\b', words[1]):\n                # Return the first adverb and its position in the sentence\n                return match, text.find(match)\n    \n    # If no matches are found, return None\n    return None, None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Remove all non-alphanumeric characters from the text\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    \n    # Split the text into words and store them in a list\n    words = text.split()\n    \n    # Initialize an empty list to store the adverb and their positions\n    adverbs = []\n    \n    # Loop through the words and check if the word is an adverb\n    for i, word in enumerate(words):\n        if word.lower() in ['very', 'great', 'amazing', 'awful', 'amazingly', 'awfully']:\n            # If the word is an adverb, add it to the list of adverbs and its position\n            adverbs.append((word.lower(), i))\n    \n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a pattern to match adverbs\n    pattern = r'\\b(?:adv|adverb)\\b'\n    # Find all matches of the pattern in the given text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    # Initialize an empty list to store the positions of all adverbs\n    adverb_positions = []\n    # Iterate through the matches and add their positions to the list\n    for match in matches:\n        # Convert the match to an integer\n        position = int(match)\n        # Add the position to the list\n        adverb_positions.append(position)\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    adverbs = ['really', 'actually', 'amazingly', 'amaze', 'awfully', 'awe', 'awfully', 'awful', 'badly', 'bad', 'awfully', 'awful', 'awful', 'awful', 'awfully', 'awful', 'awfully', 'awfully', 'awful', 'awfully', 'awful', 'awfully', 'awful', 'awful', 'awfully', 'awful', 'awfully', 'awfully', 'awful', 'awfully', 'awfully', 'awful', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', 'awfully', '"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Using regular expressions to match adverbs and their positions in the sentence\n    pattern = r'(?<![a-zA-Z])(no|not|just|so|really|well|well-|really-|already|already-|already\\s+is|already\\sis|just\\s+is|just\\sis|just\\s+are|just\\s+being|just\\s+were|just\\s+been|just\\s+are|just\\s+was|just\\s+being|just\\s+were|just\\s+been|just\\s+been\\s+now|just\\s+been\\s+before|just\\s+been\\s+after|just\\s+been\\s+since|just\\s+been\\s+ago|just\\s+been\\s+for|just\\s+been\\s+about|just\\s+been\\s+from|just\\s+been\\s+to|just\\s+been\\s+with|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+been\\s+through|just\\s+"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns a dictionary containing the\n    adverbs and their positions in the sentence.\n    '''\n    \n    # Removing all punctuations from the sentence\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Splitting the sentence into words\n    words = text.split()\n\n    # Creating a dictionary to store the adverbs and their positions\n    adverb_positions = {}\n\n    # Looping through all the words in the sentence\n    for i, word in enumerate(words):\n        \n        # Check if the word is an adverb\n        if word.lower() in ['very','really', 'rarely', 'often','sometimes','very often', 'usually']:\n            \n            # If yes, storing its position in the sentence\n            adverb_positions[word.lower()] = i\n\n    return adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    if neg_count == 0:\n        pos_ratio = 1\n    else:\n        pos_ratio = pos_count / neg_count\n\n    print(\"Positive numbers count: \", pos_count)\n    print(\"Negative numbers count: \", neg_count)\n    print(\"Positive numbers ratio: \", pos_ratio)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    pos_ratio = pos_count / (pos_count + neg_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i', [0])\n    negatives = array('i', [0])\n    \n    for num in nums:\n        if num > 0:\n            positives.append(num)\n        elif num < 0:\n            negatives.append(abs(num))\n    \n    total_numbers = positives.itemsize + negatives.itemsize\n    positive_ratio = (positives.itemsize / total_numbers) * 100\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0])  # initialize a new array of integers with a length of 1\n    \n    # iterate through the input array\n    for num in nums:\n        # check if the number is positive\n        if num > 0:\n            # increment the count by 1\n            count.itemset(0, count[0] + 1)\n    \n    # calculate the ration of positive numbers\n    ration = count[0] / len(nums)\n    \n    # return the ration\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_list = array('i', nums)\n    count = 0\n    for num in num_list:\n        if num > 0:\n            count += 1\n    return count / len(num_list) * 100"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize two arrays to store the positive and negative numbers in the array\n    positive_nums = array('i')\n    negative_nums = array('i')\n\n    # Iterate through the array and check if each number is positive or negative\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n        elif num < 0:\n            negative_nums.append(num)\n        else:\n            continue\n\n    # Calculate the ratio of positive numbers to the total number of numbers in the array\n    positive_ratio = len(positive_nums) / len(nums)\n\n    # Return the ratio of positive numbers to the total number of numbers in the array\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_positive = 0\n    count_total = len(nums)\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n    return count_positive / count_total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # create an array to store the positive numbers\n    pos_arr = array('i')\n    # iterate through the input array\n    for num in nums:\n        # check if the number is positive\n        if num > 0:\n            # add the positive number to the array\n            pos_arr.append(num)\n    # check the length of the array\n    if len(pos_arr) == 0:\n        # return zero if the array is empty\n        return 0.0\n    else:\n        # calculate the ratio of positive numbers to the length of the array\n        return pos_arr.count(1.0) / len(pos_arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_count = 0\n    total_count = 0\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        total_count += 1\n\n    if total_count == 0:\n        return 0\n\n    return positive_count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_num = 0\n    negative_num = 0\n    zero_num = 0\n    \n    for num in nums:\n        if num > 0:\n            positive_num += 1\n        elif num < 0:\n            negative_num += 1\n        else:\n            zero_num += 1\n            \n    positive_ratio = positive_num / (positive_num + negative_num + zero_num)\n    return positive_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0:\n            largest = max(largest, num)\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    '''\n    largest = float('-inf')  # initialize largest variable to negative infinity\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = -float('inf')\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf') # initialize the variable to negative infinity\n    for num in list1: # iterate through each element in the list\n        if num < 0 and num > max_neg: # if the element is negative and larger than current max_neg\n            max_neg = num # update the max_neg variable to this element\n    return max_neg # return the max_neg variable"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -float('inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_num = lst[0]\n    for num in lst:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = tup[:-K]\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(tuple(test_list[i][:K]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    This function takes in a list of tuples and an integer K as input.\n    It trims each tuple in the list by K in the same order as the tuples appear in the list.\n    \"\"\"\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # Trim each tuple by K\n        test_list[i] = tuple(test_list[i][:K] + tuple(test_list[i][K+1:])[::-1])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Iterate through the tuple list and trim each tuple by k\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = test_list[i][:K]\n                break"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(tuple(test_list[i][:K]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        tup = tup[:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tuple(tup[i:i+K]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    This function takes in a tuple list and a number K as input.\n    It trims each tuple by k and returns a new tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_tuple = (test_list[i][0], test_list[i][1][K:])\n        new_list.append(new_tuple)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j == 0:\n                new_list.append(test_list[i][j])\n            else:\n                new_list.append(test_list[i][j+1])\n    return new_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples must be equal\")\n        return None\n    # initialize a new tuple to store the result\n    result_tup = []\n    # loop through the two tuples\n    for i in range(len(test_tup1)):\n        # multiply the corresponding elements of the two tuples\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    # return the result tuple\n    return tuple(result_tup)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if both tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples must be of equal length.\"\n\n    # Initialize a new tuple of the same length as the input tuples\n    new_tup = []\n\n    # Perform index wise multiplication of the two input tuples and append the result to the new_tup tuple\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] * test_tup2[i])\n\n    return new_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Length of the two tuples should be equal.\"\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter()\n    for i in tup:\n        count.update([i])\n    for i in lst:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter()\n    for item in tup:\n        count[item] += lst.count(item)\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    return count.most_common(tup) "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_list = []\n\n    for i in lst:\n        count_dict[i] += 1\n\n    for key, value in count_dict.items():\n        count_list.append((key, value))\n\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a dictionary to store the count of each element in the tuple\n    count_dict = {}\n    \n    # Iterate through the tuple elements\n    for elem in tup:\n        # If the element is in the list, increment its count in the dictionary\n        if elem in lst:\n            count_dict[elem] = count_dict.get(elem, 0) + 1\n    \n    # Return the dictionary with the count of each element\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    count_dict = {}\n    for item in lst:\n        if item in counter:\n            count_dict[item] = counter[item]\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two arguments - a tuple and a list. The function counts the occurrence of all elements of the list in the tuple.\n    '''\n    count = Counter(tup)\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert tuple to set to remove duplicates\n    tup_set = set(tup)\n\n    # Count the occurrence of each element in the list in the tuple set\n    count_dict = Counter(lst)\n\n    # Merge the two dictionaries\n    for key, value in count_dict.items():\n        tup_set[key] += value\n\n    # Convert the merged dictionary to a list of tuples\n    result = list(tup_set.items())\n\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert the list to a set so that we can count the number of occurrences of each element\n    lst = set(lst)\n    # create a dictionary to store the count of each element in the list\n    count = Counter(tup)\n    # create a new list to store the count of each element in the list\n    result = []\n    # loop through the dictionary to count the number of occurrences of each element in the list\n    for key, value in count.items():\n        # check if the element is in the list and add the count of the element to the result list\n        if key in lst:\n            result.append(value)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    total_count = len(lst)\n    for elem in lst:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    count_dict['Total'] = total_count\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        cube = num ** 3\n        result.append(cube)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef perrin_numbers(n):\n    return [x for x in range(1, n+1) if is_prime(x)]\n\ndef cal_sum(n):\n    perrin_nums = perrin_numbers(n)\n    return sum(perrin_nums)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # initialize sum variable to zero\n    sum = 0\n\n    # loop through the number of iterations specified by user\n    for i in range(1, n+1):\n        # add the current number to the sum\n        sum += i\n\n    # return the final sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1, n+1):\n        perrin_sum += i\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 2\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (3*i - 1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    perrin_sum = 0\n    for i in range(n):\n        perrin_sum += perrin_numbers[i]\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += (i*i + 1)/i\n    return sum\n\nprint(cal_sum(5))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize the sum to zero\n    total = 0\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the perrin number\n        p = (i*i)*(i*i + 1)\n        # add the perrin number to the total\n        total += p\n    # return the total\n    return total"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of string values and a size as input and returns a list of extracted strings.\n    \"\"\"\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    This function takes a list of string values and a specified size of strings to extract and returns a list of extracted strings.\n    '''\n    extracted_strings = []\n    for i in range(len(l)//l):\n        extracted_strings.append(' '.join(l[i*l:(i+1)*l]))\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, l):\n    '''\n    Extract the specified length of strings from a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            new_list.append(str_list[i])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(l)):\n        if len(l[i]) >= l[i]:\n            extracted_list.append(l[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a desired size of the strings as input.\n    The function then iterates through the list and extracts strings of the desired size.\n    Returns a list of strings of the desired size.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of strings and a size as input.\n    It returns a new list containing the specified size of strings from the input list.\n    '''\n    new_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            new_list.append(str_list[i])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a desired size of strings to extract.\n    It returns a new list of extracted strings.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) <= size:\n            extracted_strings.append(str_list[i])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    string_list = []\n    for i in range(len(str_list) - l + 1):\n        string =''.join(str_list[i:i+l])\n        string_list.append(string)\n    return string_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text1)\n    return text.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces from the string\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    text2 = pattern.sub('', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Replace all whitespaces with a single space\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)\n\ntext1 = \"Hello, World!\"\nprint(remove_whitespaces(text1))"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # remove all whitespaces using regular expression\n    text = re.sub(r'\\s+','', text)\n    # remove whitespaces at the start and end of the string\n    text = text.strip()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text = re.sub('\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    \n    if loss_amount >= 0:\n        return 0\n    else:\n        return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount >= actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    loss_percentage = actual_cost/sale_amount * 100\n\n    if loss_percentage >= 10:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            if i % 2 == 0 :\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of the even factors of the number.\n    '''\n    evenFactors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            evenFactors += i\n    if n%2 == 0:\n        evenFactors += n\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even += i\n    return sum_even"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes an integer as input and returns the sum of even factors of the number.\n    '''\n\n    # Iterate through all possible factors of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If yes, add i to the sum\n            sum += i\n\n    # Return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            even_sum += i\n            even_sum += n//i\n    \n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the sum of even factors of the input number.\n    \"\"\"\n    evenSum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                evenSum += i\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0 \n    for i in range(2, int(math.sqrt(n))+1, 2): \n        if n % i == 0: \n            sum += i \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Create a list of even factors of n\n    factors = []\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            factors.append(i)\n\n    # Find the sum of even factors\n    sum_factors = 0\n    for factor in factors:\n        sum_factors += factor\n\n    return sum_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function takes a number as an input and returns the sum of even factors of that number.\n    '''\n    sum_of_factors = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum_of_factors += i \n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w+\\sz\\w+'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"The word containing 'z' in the text is: {match.group()}\")\n    else:\n        print(\"The word containing 'z' in the text was not found.\")"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\s[zZ]\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-z]+z\\b')\n    return pattern.search(text)\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w+z\\w+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Find all words that contain 'z'\n    words = re.findall(r'\\b[a-zA-Z]+\\b', text)\n    # Find words that contain 'z' followed by a space or punctuation mark\n    wordz_words = [word for word in words if re.search(r'\\b[a-zA-Z]+\\b[\\s\\.,;:!?]+', word)]\n    # Return the list of words that contain 'z' followed by a space or punctuation mark\n    return wordz_words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z\\b' # match words containing 'z' in the middle of words\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 > 12 or monthnum2 < 1:\n        return \"Invalid month number\"\n    elif monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return \"31 days\"\n    else:\n        return months[monthnum2 - 1]"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    This function takes a month number as input and returns True if it contains 31 days and False otherwise.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n\n    month_list = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if monthnum2 in month_list:\n        print(f\"{monthnum2} has 31 days.\")\n    else:\n        print(f\"{monthnum2} doesn't have 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum2 == 2 and (year % 4!= 0 or (year % 100 == 0 and year % 400!= 0)):\n        return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return False\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            if monthnum2 == 2:\n                return True\n        else:\n            return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    if monthnum2 in range(1, 13):\n        days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if monthnum2 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                days_in_month[1] = 29\n            else:\n                days_in_month[1] = 28\n        return days_in_month[monthnum2-1]\n    else:\n        print(f\"{monthnum2} is not a valid month number. Please enter a number between 1 and 12.\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns a boolean value indicating whether it contains 31 days or not.\n    '''\n    if monthnum in [1,3,5,7,8,10,12]:\n        return False\n    if monthnum % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        if monthnum % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 <= 0 or monthnum2 > 12:\n        return \"Invalid month number\"\n    else:\n        if monthnum2 == 2:\n            return \"It contains 28 or 29 days\"\n        else:\n            return \"It contains 31 days\""
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string using slicing\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Split the string into a list of characters\n        chars = list(stringlist[i])\n        # Reverse the list of characters\n        chars.reverse()\n        # Join the reversed list of characters back into a string\n        stringlist[i] = ''.join(chars)\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [value[::-1] for value in stringlist]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = 99999\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst)\n    min_lst = lst\n    \n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    min_sublist = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < len(min_sublist):\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    # Find the length of the smallest sublist\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    # Find the smallest sublist\n    for sublist in lst:\n        if len(sublist) == min_len:\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize the minimum length to the length of the list\n    min_length = len(lst)\n    # Initialize the sublist with the entire list\n    min_sublist = lst\n    # Loop through each sublist\n    for i in range(len(lst)):\n        # Initialize the current sublist to the length of the list\n        cur_length = len(lst[i])\n        # If the current sublist is shorter than the minimum, update the minimum length and the minimum sublist\n        if cur_length < min_length:\n            min_length = cur_length\n            min_sublist = lst[i]\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize minimum length to the length of the entire list\n    min_length = len(lst)\n    # Initialize the index of the minimum length sublist to -1\n    min_index = -1\n    # Iterate through the list and keep track of the minimum length sublist\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_index = i\n    # Return the sublist with the minimum length\n    return lst[min_index]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # initialize minimum length as infinity\n    min_len = float('inf')\n\n    # initialize sublist as an empty list\n    min_sublist = []\n\n    # iterate through the list\n    for i in range(len(lst)):\n        # iterate through the remaining elements\n        for j in range(i+1, len(lst)):\n            # check if the length of the sublist is smaller than the current minimum length\n            if len(lst[i:j+1]) < min_len:\n                # if so, update the minimum length and sublist\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n\n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(length, width):\n    \"\"\"\n    This function takes in the length and width of a rectangle and returns its area.\n    \"\"\"\n    return length * width"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[A-Z]\\w+\\b', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]\\w+\\b' # regex pattern to match uppercase substrings\n    substrings = re.findall(pattern, str1) # find all uppercase substrings\n    for substr in substrings:\n        str1 = str1.replace(substr, '') # replace the uppercase substring with an empty string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    \n    # Use the search() method to find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    \n    # Loop through the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    \n    # Find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    \n    # Replace each uppercase substring with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n        \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern for uppercase substrings\n    pattern = r'(?i)\\b[A-Z]+\\b'\n    # use the re.sub() method to replace uppercase substrings with empty strings\n    str2 = re.sub(pattern, '', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)[A-Z]'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z]+\\b'\n    # use the re.sub() function to replace the uppercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    # use re.findall() to find all uppercase substrings in the string\n    uppercase_substrings = re.findall(pattern, str1)\n    # use a for loop to iterate over the uppercase substrings and remove them from the string\n    for substr in uppercase_substrings:\n        str1 = str1.replace(substr, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub('[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and extracts the first element of each sublist and returns a new list with the extracted elements.\n    '''\n    extracted_list = []\n    for sublist in lst:\n        extracted_list.append(sublist[0])\n    return extracted_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a new list with the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Iterate through each sublist in the list\n    for sublist in lst: \n        # Get the first element of the sublist and print it\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            new_lst.append(sublist[0])\n        else:\n            new_lst.append(sublist)\n    return new_lst"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    # initialize a counter variable to keep track of the number of upper case characters in the string\n    upper_count = 0\n    \n    # loop through each character in the string\n    for char in str:\n        # if the character is uppercase, increment the counter\n        if char.isupper():\n            upper_count += 1\n    \n    # return the total number of upper case characters in the string\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(1, len(list1) + 1):\n        for j in range(1, len(list1) + 1):\n            if j > i:\n                break\n            if (j * i) <= len(list1) * len(list1):\n                if j > 1:\n                    for k in range(1, j + 1):\n                        result.append(list1[:j] + list1[i:])\n                        if len(result) == len(list1) * len(list1):\n                            break\n                else:\n                    result.append(list1[:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list as input and returns a list of all possible combinations of its elements.\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # initialize an empty list to store the combinations\n    combinations = []\n\n    # loop through each element in the input list\n    for i in range(len(list1)):\n\n        # initialize an empty list to store the remaining elements\n        remaining = list1[i:]\n\n        # loop through each element in the remaining list\n        for j in range(1, len(remaining)+1):\n\n            # add the combination to the output list\n            combinations.append(remaining[:j])\n\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            subset = list1[j:j+i]\n            result.append(subset)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    '''\n    This function will find all possible combinations of the elements of a given list.\n\n    Parameters:\n    lst (list): The list from which the combinations will be generated.\n\n    Returns:\n    list: A list of all possible combinations of the elements of the input list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            list2.append(list1[i:j])\n    return list2"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    # Sort the list to ensure that we get all possible combinations\n    sorted_list = sorted(list1)\n    # Initialize an empty list to store the combinations\n    result = []\n    # Initialize an index variable for the current combination\n    index = 0\n    # Loop through the sorted list, adding elements to the result list\n    while index < len(sorted_list):\n        # Add the current element to the result list\n        result.append(sorted_list[index])\n        # Loop through the remaining elements, excluding the current element\n        for j in range(index+1, len(sorted_list)):\n            # Add the next element to the current combination\n            result[-1] += sorted_list[j]\n        # Increment the index variable for the next iteration\n        index += 1\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Find the length of the list\n    n = len(list1)\n    # Create a list to store the combinations\n    comb_list = []\n    # Create a function to generate all possible combinations recursively\n    def find_combinations(start, comb):\n        # If all elements have been used, add the combination to the list and return\n        if start == n:\n            comb_list.append(comb)\n            return\n        # Add the current element to the combination\n        comb.append(list1[start])\n        # Recursively generate all combinations starting from the next element\n        find_combinations(start+1, comb)\n        # Remove the current element from the combination\n        comb.pop()\n    # Call the function to generate all possible combinations\n    find_combinations(0, [])\n    # Return the list of combinations\n    return comb_list"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # initialize variables to keep track of the maximum subarray and its starting index\n    max_product = arr[0]\n    max_product_start = 0\n    current_product = 1\n\n    # loop through the array and calculate the product of the current subarray\n    for i in range(1, len(arr)):\n        current_product *= arr[i]\n\n        # if the current product is negative, reset it to 1\n        if current_product < 0:\n            current_product = 1\n\n        # if the current product is greater than the maximum product seen so far, update the max_product and max_product_start\n        if current_product > max_product:\n            max_product = current_product\n            max_product_start = i - max_product + 1\n\n    # return the maximum product subarray and its starting index\n    return max_product, max_product_start"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            curr_product = 1\n        else:\n            curr_product *= arr[i]\n        max_product = max(max_product, curr_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    start = 0\n\n    for end in range(len(arr)):\n        if current_product < 0:\n            current_product = 1\n            start = end\n        current_product *= arr[end]\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(len(arr)):\n        current_product = max(arr[i], current_product*arr[i])\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # initialize the maximum product subarray and the current subarray's product\n    max_product = arr[0]\n    current_product = arr[0]\n    # loop through the array\n    for num in arr:\n        # update the maximum product subarray if the current product is greater than the maximum\n        if current_product * num > max_product:\n            max_product = current_product * num\n        # update the current product\n        current_product = max(0, current_product * num)\n    # return the maximum product subarray\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Given an array of integers, find the maximum product subarray.\n\n    :param arr: An array of integers.\n    :return: An integer representing the maximum product subarray.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = dict.values()\n    return all(x == values[0] for x in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[k] for k in dict.keys()]\n    return all(value == values[0] for value in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        value = dict.values()\n        value_set = set(value)\n        if len(value_set) == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if len(set(value))!= 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    elif len(values) > 1 and values == values[0:n]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = set(dict.values())\n    if len(all_values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    for i in range(len(values)):\n        if values[i]!= values[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = []\n    for i in dict:\n        values.append(dict[i])\n\n    if len(values) == 1:\n        return True\n\n    for i in range(len(values)):\n        if values[i]!= values[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Loop through the dictionary and find the number of occurrences of each value\n    value_counts = {}\n    for value in dict.values():\n        if value in value_counts:\n            value_counts[value] += 1\n        else:\n            value_counts[value] = 1\n\n    # Check if all values are the same in the dictionary\n    if len(value_counts) == 1:\n        return True\n    elif len(value_counts) == n:\n        for value, count in value_counts.items():\n            if count > 1:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= '' and v!= []}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    return {k:v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # create a new dictionary\n    new_dict = {}\n    # loop through each key in the original dictionary\n    for key in dict1:\n        # if the value for the key is not an empty string or list, add the key-value pair to the new dictionary\n        if isinstance(dict1[key], (str, list)) and dict1[key]:\n            new_dict[key] = dict1[key]\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    This function takes a dictionary as input and returns a new dictionary with all the empty items dropped.\n\n    Parameters:\n    dict1 (dict): A dictionary containing some elements.\n\n    Returns:\n    (dict): A new dictionary with all the empty items dropped.\n\n    Example:\n    >>> my_dict = {'a': 1, 'b': '', 'c': 3, 'd': ''}\n    >>> drop_empty(my_dict)\n    {'a': 1, 'c': 3}\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    \n    for i in range(1, n):\n        temp = arr[i]\n        if arr[i] > max_product:\n            max_product = arr[i]\n        elif arr[i] < min_product:\n            min_product = arr[i]\n            \n        if max_product > min_product:\n            temp = max_product\n        else:\n            temp = min_product\n            \n        max_product = max(max_product * arr[i], temp * arr[i])\n        min_product = min(min_product * arr[i], temp * arr[i])\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # Create a 2D array to store the maximum product of increasing subsequences ending at each index\n    max_products = [[0] * n for _ in range(n)]\n\n    # Initialize the first row of the 2D array with the individual elements of the array\n    for i in range(n):\n        max_products[0][i] = arr[i]\n\n    # Fill the rest of the rows of the 2D array using the maximum product of increasing subsequences ending at each index\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_products[i][j] = max(max_products[i][j], max_products[i-1][j]*arr[i])\n            else:\n                max_products[i][j] = max(max_products[i][j], max_products[i-1][j])\n\n    # Return the maximum product formed by multiplying numbers of an increasing subsequence\n    return max(max_products[-1])"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    # Traverse through the array\n    for i in range(1, n):\n        # Update max_ending_here and min_ending_here\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        # Update max_so_far\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, len(arr)):\n        current_product = arr[i]\n\n        if current_product > 0:\n            max_product = max(current_product, max_product * current_product)\n            min_product = min(current_product, min_product * current_product)\n        else:\n            max_product = max(current_product, min_product * current_product)\n            min_product = min(current_product, max_product * current_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = min(min_ending_here, arr[i])\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            max_ending_here = max(max_ending_here, arr[i])\n        else:\n            if arr[i] > max_so_far:\n                max_so_far = arr[i]\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    def find_increasing_subsequence(arr, i, j):\n        if i == j:\n            return [i]\n        if arr[i] < arr[j]:\n            return find_increasing_subsequence(arr, i+1, j)\n        else:\n            return find_increasing_subsequence(arr, i, j-1) + [i]\n\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            increasing_subsequence = find_increasing_subsequence(arr, i, j)\n            max_product = max(max_product, reduce(lambda x, y: x*y, arr[increasing_subsequence[0]:increasing_subsequence[-1]+1]))\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n        \n        for i in range(1, n):\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n            \n            max_so_far = max(max_so_far, max_ending_here)\n            \n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            current_product = max(arr[i], arr[i] * current_product)\n        else:\n            current_product = min(arr[i], arr[i] * current_product)\n\n        max_product = max(max_product, current_product)\n        min_product = min(min_product, current_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    def helper(arr, i, j):\n        if i == j:\n            return 1\n        if arr[i] < arr[j]:\n            return max(helper(arr, i + 1, j), helper(arr, i, j - 1))\n        else:\n            return max(helper(arr, i, j - 1), helper(arr, i + 1, j))\n\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product = helper(arr, 0, len(arr) - 1)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # Create a boolean array 'is_increasing' of size n to mark if the number at i is in the increasing subsequence\n    is_increasing = [True] * n\n    # Create a boolean array 'is_decreasing' of size n to mark if the number at i is in the decreasing subsequence\n    is_decreasing = [True] * n\n    # Initialize the maximum product to be the first element of the array\n    max_product = arr[0]\n    # Initialize the current product to be the first element of the array\n    current_product = arr[0]\n\n    # Iterate over the array from second to last\n    for i in range(1, n):\n        # If the current element is greater than the previous element, update the 'is_increasing' array\n        if arr[i] > arr[i-1]:\n            is_increasing[i] = True\n        # If the current element is less than the previous element, update the 'is_increasing' array\n        else:\n            is_increasing[i] = False\n        # If the current element is greater than the previous element, update the 'is_decreasing' array\n        if arr[i] < arr[i-1]:\n            is_decreasing[i] = True\n        # If the current element is less than the previous element, update the 'is_decreasing' array\n        else:\n            is_decreasing[i] = False\n        # Calculate the current product by multiplying the previous and current elements\n        current_product = arr[i-1] * arr[i]\n        # Update the maximum product if the current product is greater\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    # Find the length of the tuple\n    length = len(test_tup)\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through the tuple, adding each adjacent pair to the sum\n    for i in range(length-1):\n        sum += test_tup[i] + test_tup[i+1]\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum of the pairwise additions to zero\n    pairwise_sum = 0\n    # Iterate through the tuple\n    for i in range(len(test_tup)-1):\n        # Calculate the pairwise addition of the current element and the next element in the tuple\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    # Return the final sum of the pairwise additions\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    first_elem = test_tup[0]\n    second_elem = test_tup[1]\n    sum_of_neighboring_elements = first_elem + second_elem\n    \n    for i in range(2, len(test_tup)-1):\n        third_elem = test_tup[i]\n        fourth_elem = test_tup[i+1]\n        sum_of_neighboring_elements += third_elem + fourth_elem\n    \n    return sum_of_neighboring_elements"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    if length < 2:\n        return None\n    else:\n        if length % 2 == 0:\n            sum = (test_tup[0] + test_tup[1])\n            for i in range(2, length, 2):\n                sum += test_tup[i] + test_tup[i+1]\n            return sum\n        else:\n            sum = (test_tup[0] + test_tup[1])\n            for i in range(2, length, 2):\n                sum += test_tup[i]\n            return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    add_sum = 0\n    for i in range(1, len(test_tup)-1):\n        add_sum += test_tup[i]\n    \n    return add_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n < 2:\n        return \"The input tuple is too small to perform pairwise addition.\"\n\n    sum = 0\n    for i in range(n-1):\n        sum += test_tup[i] + test_tup[i+1]\n\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize variables to keep track of the sum of neighboring elements\n    sum1 = test_tup[0]\n    sum2 = test_tup[1]\n    \n    # Loop through each element of the tuple\n    for i in range(2, len(test_tup)-1):\n        # Add the current element and the previous element to get the sum of the neighboring elements\n        sum1 += test_tup[i]\n        sum2 += test_tup[i+1]\n    \n    # Return the sum of the two sums\n    return (sum1, sum2)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i:i+2] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a list to store the pairwise addition\n    pairwise_sum = []\n\n    # Loop through the tuple to find the pairwise sum\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array arr and an integer n as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr: \n        product = (product * i) % n \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    \"\"\"\n    This function takes in an array and a number as input and returns the product of their array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and an integer n as input and returns the product of the array multiplied \n    modulo n.\n    '''\n\n    product = 1\n\n    for i in arr:\n        product = (product * i) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two arguments: arr and n. It finds the product of the elements of arr \n    multiplied modulo n, and returns the result.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function finds the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    This function checks whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return False\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n            \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers and False otherwise.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False\n    \n    for i in range(len(l)-1): \n        if l[i+1] - l[i]!= 1: \n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return True\n    \n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set to store the unique elements from both lists\n    unique_set = set(test_list1 + test_list2)\n    # Initialize an empty list to store the intersection of elements\n    result = []\n    # Iterate through the unique set to find the common elements\n    for item in unique_set:\n        if all(item in x for x in test_list1) and all(item in x for x in test_list2):\n            result.append(item)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # check if input lists are of the same length\n    if len(test_list1)!= len(test_list2):\n        raise ValueError(\"The input lists must have the same length\")\n\n    # create a set to store the elements of the first list\n    first_set = set(test_list1)\n\n    # iterate over the second list and remove elements from the first set\n    for elem in test_list2:\n        first_set.discard(elem)\n\n    # convert the set back to a list and return it\n    return list(first_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a dictionary to store the count of each element in both lists\n    count1 = {}\n    count2 = {}\n\n    # Loop through each element in the first list and add to the count dictionary\n    for item in test_list1:\n        if item in count1:\n            count1[item] += 1\n        else:\n            count1[item] = 1\n\n    # Loop through each element in the second list and add to the count dictionary\n    for item in test_list2:\n        if item in count2:\n            count2[item] += 1\n        else:\n            count2[item] = 1\n\n    # Find the common elements in the count dictionaries and return as a list of tuples\n    common_elements = [(key, val) for key, val in count1.items() if key in count2 and val == count2[key]]\n\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    for item in test_list1:\n        if item in test_list2:\n            intersection.append(item)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    set_intersection = set1.intersection(set2)\n    return tuple(set_intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Loop through the first list and find the common elements\n    for element in test_list1:\n        if element in test_list2:\n            common_elements.add(element)\n\n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Define a dictionary to store the elements of test_list1 and test_list2\n    dict1 = {}\n    dict2 = {}\n\n    # Iterate through each element of test_list1 and add it to the dictionary with its index as the key\n    for index, element in enumerate(test_list1):\n        dict1[index] = element\n\n    # Iterate through each element of test_list2 and add it to the dictionary with its index as the key\n    for index, element in enumerate(test_list2):\n        dict2[index] = element\n\n    # Find the intersection of the two dictionaries\n    intersection = dict1.keys() & dict2.keys()\n\n    # Convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = []\n    for i in range(len(test_list1)):\n        if all(x in test_list2[j] for j in range(len(test_list2))):\n            result.append(test_list1[i])\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    for i in test_list1:\n        if i in test_list2 and i not in intersection:\n            intersection.append(i)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the tuple lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create an empty string to store the modified string\n    new_str = ''\n    # loop through each character in the input string\n    for char in str1:\n        # if the current character is the character to be replaced, replace it with the new character\n        if char == ch:\n            new_str += newch\n        # otherwise, add the current character to the new string\n        else:\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Initialize an empty string to store the modified string\n    new_str = \"\"\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is the specified character, replace it with the new character\n        if char == ch:\n            new_str += newch\n        # If the character is not the specified character, add it to the new string as is\n        else:\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Loop over all characters in the string\n    for i in range(len(str1)):\n        # If the current character is the search character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes in a dictionary as an argument and returns a sorted dictionary based on its values.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # Sort the Counter object by value\n    sorted_counter = counter.most_common()\n    # Create an empty dictionary to store the sorted values\n    sorted_dict = {}\n    # Loop through the sorted Counter object and add the key-value pairs to the new dictionary\n    for key, value in sorted_counter:\n        sorted_dict[key] = value\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sorts a dictionary by value using the Counter() function from the collections module.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    \n    # Sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    # count the frequency of each value in the dictionary\n    count_dict = Counter(dict1.values())\n\n    # sort the dictionary based on the values using sorted function\n    sorted_dict = dict(sorted(count_dict.items()))\n\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) < 2:\n        return 0\n    \n    # Find the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array `nums` as input and returns the sum of the largest and smallest values in the array.\n    \"\"\"\n    # Initialize variables to hold the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n\n    # Loop through each value in the array\n    for num in nums:\n        # Update the largest and smallest values in the array\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # Return the sum of the largest and smallest values in the array\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # find the largest and smallest values\n    largest = nums[0]\n    smallest = nums[-1]\n    \n    # calculate the sum of largest and smallest values\n    result = largest + smallest\n    \n    return result"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # find the sum of the largest and smallest values\n    sum_largest_smallest = nums[0] + nums[1]\n    \n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the maximum and minimum values in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    # calculate the sum of the maximum and minimum values\n    total_sum = max_num + min_num\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the sum of the maximum and minimum values\n    big_sum = max_val + min_val\n    \n    return big_sum"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if it is in lower case, False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is all lowercase or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', string.lower())"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # Remove all lowercase substrings from the string\n    for match in matches:\n        str1 = re.sub(r'\\b'+match+r'\\b', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for matching lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all non-overlapping matches of the pattern in the input string\n    matches = pattern.findall(str1)\n    # Remove all matches from the input string\n    str2 = re.sub(pattern, '', str1)\n    # Return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'(?i)\\b[a-z]+\\b'\n    # Use the re.sub() function to remove lowercase substrings from the string\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    # Use regular expressions to find all lowercase substrings\n    lowercase_substrings = re.findall(r'[a-z]+', str1)\n    # Remove all lowercase substrings from the original string\n    for substring in lowercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n\n    Parameters:\n    str1 (str): The input string\n\n    Returns:\n    str: The modified string with lowercase substrings removed\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Use the re.sub() function to replace all matches with an empty string\n    str2 = re.sub(pattern, '', str1)\n    # Return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    This function removes all lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', string)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    # Find all lowercase substrings in the given string using the pattern\n    matches = pattern.findall(str1)\n    # Remove all lowercase substrings from the given string\n    str1 = re.sub(r'\\b[a-z]+\\b', '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # split the string into a list of substrings\n    substrings = re.findall(r'[a-zA-Z]+', str1)\n\n    # loop through the list of substrings and remove lowercase substrings\n    for i in range(len(substrings)):\n        if substrings[i].lower() in substrings[i]:\n            substrings[i] = substrings[i].lower()\n            substrings[i] = re.sub(substrings[i], '', str1)\n\n    # join the list of substrings back into a string\n    result = ''.join(substrings)\n\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase = re.compile('[a-z]+')\n    return lowercase.sub('', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert n to a string and get its first character\n    first_char = str(n)[0]\n    # Convert the first character to an integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a Python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer number and returns the first digit of that number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Return the first character of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as an argument and returns the first digit of the number.\n    \"\"\"\n    # Convert the number to a string\n    num = str(n)\n    # Return the first digit of the string\n    return num[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to a string\n    n = str(n)\n    # find the first character of the string\n    first_char = n[0]\n    # convert the first character to an integer\n    first_int = int(first_char)\n    # return the first integer as the result\n    return first_int"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst): \n    '''\n    This function takes a list of integers and returns only the odd numbers in the list.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns only the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1,n+1)])\n\n    # sum of first n natural numbers\n    sum_of_natural_numbers = sum(range(1,n+1))\n\n    # difference between the two sums\n    difference = sum_of_cubes - sum_of_natural_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of natural numbers\n    sum_cubes = sum([i**3 for i in range(n+1)])\n    # sum of natural numbers\n    sum_natural = sum(range(1, n+1))\n    # difference between the two sums\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_numbers += i\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([x**3 for x in range(1, n+1)])\n    \n    # Find the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # Calculate the difference between the two sums\n    difference = sum_of_cubes - sum_of_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # finding the sum of cubes of the first n natural numbers\n    cubes_sum = sum(x**3 for x in range(1, n+1))\n    # finding the sum of the first n natural numbers\n    natural_sum = sum(range(1, n+1))\n    # finding the difference between the two sums\n    diff = cubes_sum - natural_sum\n    # printing the difference\n    print(diff)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    # Compute the sum of cubes of the first n natural numbers\n    sum_cubes = sum([num**3 for num in range(n+1)])\n\n    # Compute the sum of the first n natural numbers\n    sum_natural = sum(range(n+1))\n\n    # Return the difference between the two sums\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # finding difference\n    difference = sum_cubes - sum_natural\n\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n                if count == N:\n                    return True\n    return False"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes a list A containing N integers and returns the number of pairs whose xor value is odd.\n    '''\n    xor_value = 0\n    count = 0\n    \n    for i in range(N):\n        xor_value = xor_value ^ A[i]\n        \n    for i in range(N):\n        xor_value = xor_value ^ A[i]\n        if xor_value % 2!= 0:\n            count += 1\n            \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes a list A and an integer N as input, and returns the count of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    # initialize the count variable to 0\n    count = 0\n    # loop through all possible pairs\n    for i in range(N):\n        for j in range(i+1,N):\n            # calculate the xor value of the pair\n            xor = A[i] ^ A[j]\n            # if the xor value is odd, increment the count variable\n            if xor % 2 == 1:\n                count += 1\n    # return the final count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_count = 0\n    for i in range(N-1):\n        xor_count += (A[i] ^ A[i+1]) % 2\n    \n    return xor_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes two lists A and N and returns the count of odd pairs whose xor value is odd.\n\n    A and N are lists of integers, where A[i] represents the xor value of the ith element of the list.\n    N is the total number of elements in A.\n\n    The function uses a nested loop to iterate over all possible pairs of elements in A and N, and checks if their xor value is odd.\n    If so, it increments a counter variable.\n\n    The function returns the final count of odd pairs.\n    '''\n\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            xor = A[i] ^ A[j]\n            if xor%2!=0:\n                count += 1\n                if count>=N:\n                    return count\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_value = 0\n    count = 0\n\n    for i in range(N):\n        xor_value ^= A[i]\n        count += xor_value & 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(c.lower()) ^ 32) if c.isalpha() else c for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Create a new string to store the toggled case characters\n    toggled_string = ''\n    \n    # Loop through each character in the input string\n    for char in string:\n        # If the character is uppercase, convert it to lowercase\n        if char.isupper():\n            toggled_string += char.lower()\n        # If the character is lowercase, convert it to uppercase\n        elif char.islower():\n            toggled_string += char.upper()\n        # If the character is a special character, leave it unchanged\n        else:\n            toggled_string += char\n    \n    # Return the toggled case string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # loop through each character in the string\n    for i in range(len(string)):\n        # if the character is uppercase, convert to lowercase\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # if the character is lowercase, convert to uppercase\n        elif string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n    # return the modified string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to a list of characters\n    chars = list(string)\n    # iterate over each character in the list\n    for i in range(len(chars)):\n        # if the character is uppercase, convert it to lowercase\n        if chars[i].isupper():\n            chars[i] = chars[i].lower()\n        # if the character is lowercase, convert it to uppercase\n        else:\n            chars[i] = chars[i].upper()\n    # convert the list back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert both integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize the sum variable to 0\n    sum_diff = 0\n\n    # Iterate through each digit of the two integers\n    for i in range(max(len(n1_str), len(n2_str))):\n        # Get the current digit of the first integer\n        n1_digit = int(n1_str[i]) if i < len(n1_str) else 0\n\n        # Get the current digit of the second integer\n        n2_digit = int(n2_str[i]) if i < len(n2_str) else 0\n\n        # Calculate the difference between the two digits\n        diff = n1_digit - n2_digit\n\n        # Add the difference to the sum variable\n        sum_diff += diff\n\n    # Return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    count = 0\n    for i in range(10):\n        # calculate the per-digit difference\n        digit_diff = abs(n1 % 10 - n2 % 10)\n        # add the per-digit difference to the count\n        count += digit_diff\n        # shift n1 and n2 to the right by 1 place\n        n1 //= 10\n        n2 //= 10\n    return count"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    total_sum = 0\n    for i in range(len(n1)):\n        diff = abs(int(n1[i]) - int(n2[i]))\n        total_sum += diff\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize sum to 0\n    total_sum = 0\n    \n    # convert the two numbers to strings and convert them to lists\n    str_num1 = str(n1)\n    str_num2 = str(n2)\n    \n    # iterate over the digits in the two numbers\n    for i in range(len(str_num1)):\n        # subtract the digit at index i from the digit at index i in the other number\n        diff = int(str_num1[i]) - int(str_num2[i])\n        # add the absolute value of the difference to the sum\n        total_sum += abs(diff)\n    \n    # return the total sum\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Initialize variables\n    total_sum = 0\n    # Convert both integers to strings and loop through their digits\n    for i in str(n1):\n        total_sum += abs(ord(i) - ord(str(n2)[i]))\n    for i in str(n2):\n        total_sum += abs(ord(i) - ord(str(n1)[i]))\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Loop through each digit in the strings\n    for i in range(len(s1)):\n        # Convert the digit to an integer and subtract the corresponding digit in the other string\n        diff = int(s1[i]) - int(s2[i])\n        # Add the difference to the sum\n        sum += diff\n\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the input integers to lists of their digits\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n    \n    # Calculate the sum of the per-digit differences between the two lists\n    digit_diff_sum = sum([abs(d1 - d2) for d1, d2 in zip(n1_digits, n2_digits)])\n    \n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = 0\n    for i in range(10):\n        difference += abs(n1 // 10**(i) - n2 // 10**(i))\n    return difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Calculate the per-digit difference between the two integers\n    diff = abs(n1 - n2)\n\n    # Convert the difference to a string and split it into a list of digits\n    diff_str = str(diff)\n    diff_list = list(diff_str)\n\n    # Calculate the sum of the per-digit differences and return the result\n    return sum(int(digit) for digit in diff_list)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    # Convert both numbers to lists of digits\n    num1 = list(str(n1))\n    num2 = list(str(n2))\n    \n    # Initialize a variable to store the sum of differences\n    diff_sum = 0\n    \n    # Loop through each digit in both numbers\n    for i in range(len(num1)):\n        # Subtract the two digits and add the result to the difference sum\n        diff_sum += abs(int(num1[i]) - int(num2[i]))\n    \n    return diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    max_sub_array = []\n\n    # Loop through the list\n    for i in range(len(a)):\n\n        # Add the current element to the sum\n        current_sum += a[i]\n\n        # If the sum exceeds the maximum sum, update the maximum sum and the subarray\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sub_array = [a[i]]\n\n        # If the sum is the same as the maximum sum, add the current element to the subarray\n        elif current_sum == max_sum:\n            max_sub_array.append(a[i])\n\n        # If the sum is less than the maximum sum, update the current sum and the subarray\n        else:\n            current_sum = a[i]\n            max_sub_array = [a[i]]\n\n    # Return the maximum subarray sum\n    return max_sum, max_sub_array"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Returns the maximum sum of a subarray of a given length from the input list.\n    \"\"\"\n    if size <= 0:\n        return None\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(len(a)):\n        if i < size:\n            current_sum += a[i]\n        else:\n            current_sum = current_sum - a[i-size] + a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables to keep track of the current sum and its ending index\n    current_sum = 0\n    current_index = 0\n\n    # Initialize the maximum sum to the first element in the list\n    max_sum = a[0]\n\n    # Loop through the list and update the variables as needed\n    for i in range(1, len(a)):\n        # Check if the sum is greater than the current maximum sum\n        if current_sum + a[i] > max_sum:\n            # Update the maximum sum and the ending index\n            max_sum = current_sum + a[i]\n            current_index = i\n\n        # Update the current sum and the current index\n        current_sum += a[i]\n\n    # Return the maximum sum and the ending index\n    return max_sum, current_index"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    max_subarray = []\n\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n        elif i == size - 1:\n            max_subarray.append(a[i])\n\n    return max_sum, max_subarray"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum, start\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_so_far:\n            max_so_far = current_sum\n            max_ending_here = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_so_far"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Union of two tuples\n    union = test_tup1 + test_tup2\n\n    # Sort the union in ascending order\n    union.sort()\n\n    # Print the union\n    print(\"Union of tuples: \", end=\"\")\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    union_list.sort()\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples using the | operator\n    combined_tuple = test_tup1 | test_tup2\n\n    # Convert the combined tuple to a set and sort it\n    sorted_set = sorted(set(combined_tuple))\n\n    # Convert the sorted set back to a tuple and return it\n    return tuple(sorted_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # combine both tuples into a single tuple\n    combined_tup = test_tup1 + test_tup2\n    \n    # convert the combined tuple into a set to remove duplicates\n    unique_set = set(combined_tup)\n    \n    # convert the set back into a sorted list and output\n    sorted_list = sorted(list(unique_set))\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using set() to convert the tuples into sets to get their unique elements\n    unique_elements = set(test_tup1) | set(test_tup2)\n    \n    # Converting the set back into a tuple and sorting it\n    result_tuple = sorted(tuple(unique_elements))\n    \n    return result_tuple"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n\n    # Remove duplicates from the combined tuple\n    unique_tup = list(set(combined_tup))\n\n    # Sort the elements of the unique tuple in ascending order\n    unique_tup.sort()\n\n    # Return the sorted unique tuple\n    return unique_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    union_set = set(union)\n    sorted_union = sorted(union_set)\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the two tuples and sort them\n    union_list = sorted(set(test_tup1 + test_tup2))\n    # output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Union of the two tuples\n    union_tup = test_tup1 + test_tup2\n\n    # Sort the union tuple in ascending order\n    union_tup.sort()\n\n    # Output the union tuple\n    print(\"Union of the elements of the two tuples:\", end=\"\\n\\n\")\n    for item in union_tup:\n        print(item, end=\" \")"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples\n    combined_list = test_tup1 + test_tup2\n    \n    # Create a set from the combined list to remove duplicates\n    unique_list = list(set(combined_list))\n    \n    # Sort the unique list in ascending order\n    sorted_list = sorted(unique_list)\n    \n    # Output the sorted list\n    print(sorted_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    \n    for item in lst:\n        if isinstance(item, list):\n            current_length = Find_Max_Length(item)\n        else:\n            current_length += 1\n            \n        max_length = max(max_length, current_length)\n        \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0   # initialize maximum length variable to zero\n    for i in range(len(lst)):   # loop through each element in the list\n        current_length = 1   # initialize current length variable to one\n        for j in range(i+1, len(lst)):   # loop through each element in the remaining list starting from the current element\n            if lst[j] == lst[i]:   # check if the current element is equal to the next element\n                current_length += 1   # increment the current length if it is\n            else:   # if the current element is not equal to the next element\n                if current_length > max_length:   # check if the current length is greater than the maximum length\n                    max_length = current_length   # update the maximum length if it is\n                current_length = 1   # reset the current length to one if the next element is not equal to the current element\n    if current_length > max_length:   # check if the current length is greater than the maximum length\n        max_length = current_length   # update the maximum length if it is\n    return max_length   # return the maximum length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if j-i+1 > max_length:\n                max_length = j-i+1\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize an empty dictionary to store the lengths of sublists\n    sublist_lengths = {}\n\n    # loop through each element in the input list\n    for i in range(len(lst)):\n\n        # if the current element is not in the dictionary, add it with a length of 1\n        if lst[i] not in sublist_lengths:\n            sublist_lengths[lst[i]] = 1\n\n        # otherwise, increment the length of the current sublist by 1\n        else:\n            sublist_lengths[lst[i]] += 1\n\n    # initialize a variable to store the maximum length of any sublist\n    max_length = 0\n\n    # loop through each element in the dictionary and update the maximum length if the current sublist is longer\n    for i in sublist_lengths:\n        if sublist_lengths[i] > max_length:\n            max_length = sublist_lengths[i]\n\n    # return the maximum length of any sublist\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    for i in range(len(lst)):\n        if i == 0:\n            continue\n        if i == len(lst)-1:\n            temp = 1\n        else:\n            temp = Find_Max_Length(lst[:i+1])\n        max_length = max(max_length, temp)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            length = j - i + 1\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    curr_length = 1\n    \n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            curr_length += 1\n        else:\n            if curr_length > max_length:\n                max_length = curr_length\n            curr_length = 1\n            \n    if curr_length > max_length:\n        max_length = curr_length\n        \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            length = j-i+1\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j == len(lst) - 1:\n                max_len = max(max_len, j - i + 1)\n            else:\n                max_len = max(max_len, j - i + 1)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if i == 0:\n            max_len = 1\n        else:\n            for j in range(i):\n                if lst[i] == lst[j] and i - j > max_len:\n                    max_len = i - j\n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    # define a regular expression pattern to match quotation marks\n    pattern = r'(\".*?\"|\\'.*?\\'|\\[.*?\\]|\\(.*?\\)|\\{.*?\\}|\\.{1,2}|[^\\s]*[^\\s\"\\',\\[\\]\\(\\),{}.\\]])'\n    # use the re.findall() function to find all non-empty matches of the pattern in the text\n    values = re.findall(pattern, text)\n    # return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<!\\\\)\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function will extract values between quotation marks from a string.\n    '''\n    pattern = r'\\\"(.*?)\\\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]+)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    Args:\n        text: A string containing values between quotation marks.\n\n    Returns:\n        A list of extracted values.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n): \n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    # initialize a variable to store the count of pairs\n    count = 0\n    \n    # loop through all possible pairs of elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # check if the elements at the current indices are unequal\n            if arr[i]!= arr[j]:\n                # if they are, increment the count of pairs\n                count += 1\n    \n    # return the final count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += arr[i] + arr[j] - arr[i+j]\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers `arr` and a positive integer `n` as input, and returns the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Create a set to store the elements of `arr`\n    unique_elements = set(arr)\n\n    # Initialize the count to zero\n    count = 0\n\n    # Iterate over all possible pairs of elements in `arr`\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Check if the pair (arr[i], arr[j]) is in `unique_elements`\n            if (arr[i], arr[j]) in unique_elements:\n                # Increment the count by 1\n                count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n): \n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0 \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1 \n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n    # Initialize a variable to store the count of pairs\n    count = 0\n\n    # Traverse the dictionary and check if both elements are different\n    for key in freq:\n        if freq[key] > 1:\n            count += freq[key] * (freq[key]-1) // 2\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Convert the string to a list of characters\n    chars = list(word)\n    # Return the list of characters\n    return chars"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    \"\"\"\n    This function splits a given string into characters.\n\n    Args:\n    word (str): A string to split into characters.\n\n    Returns:\n    list: A list of characters in the given string.\n\n    \"\"\"\n    # Convert the string to a list of characters\n    characters = list(word)\n\n    # Return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word): \n    \"\"\"\n    This function takes a string as input and splits it into characters.\n    \"\"\"\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    # Convert the string to a list of characters\n    word_list = list(word)\n    \n    # Split the list into characters and join them back into a string\n    result = ''.join(word_list)\n    \n    return result"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize sum variable\n    sum = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        \n        # Add the digit to the sum variable\n        sum += digit\n        \n        # Remove the last digit from the number\n        n = n // 10\n        \n    # Return the sum of all digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the digits of n\n    while n > 0:\n        # Get the last digit of n\n        digit = n % 10\n        \n        # Add the last digit to the sum\n        sum += digit\n        \n        # Remove the last digit from n\n        n //= 10\n        \n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Sum up the digits\n    total = sum(digits)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize sum to 0\n    total = 0\n    # loop through each digit of n\n    while n > 0:\n        # extract the last digit\n        digit = n % 10\n        # add the digit to the total\n        total += digit\n        # remove the last digit from n\n        n = n // 10\n    # return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum to zero\n    sum_ = 0\n    # Loop through the digits of the number, starting from the least significant\n    while n > 0:\n        # Get the last digit of the number and add it to the sum\n        last_digit = n % 10\n        sum_ += last_digit\n        # Remove the last digit from the number\n        n //= 10\n    # Return the sum\n    return sum_"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order,\n    and False otherwise.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist using the built-in sort() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    # Flatten the list of lists into a single list\n    flattened = [num for sublist in nums for num in sublist]\n    # Use a set to remove duplicates and return a new list\n    return list(set(flattened))"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates\n    unique_nums = set(sum(nums, []))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of lists.\n\n    Args:\n    nums: List of lists of numbers.\n\n    Returns:\n    List of lists of unique numbers.\n    \"\"\"\n    # Use a set to remove duplicates from each list\n    unique_nums = [list(set(sublist)) for sublist in nums]\n\n    # Flatten the list of lists to get a single list of unique numbers\n    unique_nums = [num for sublist in unique_nums for num in sublist]\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Initialize an empty set to store unique numbers\n    unique_nums = set()\n    \n    # Iterate over each list in the input list of lists\n    for lst in nums:\n        # Iterate over each number in the list\n        for num in lst:\n            # Add the number to the unique_nums set only if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n    \n    # Convert the unique_nums set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] not in unique_nums:\n                unique_nums.append(nums[i][j])\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and returns a list with all the duplicate numbers removed.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = []\n\n    # Filter out duplicates from the list\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    # Convert the list to a set to remove duplicate values\n    unique_set = set(list_data)\n\n    # Initialize the product to 1\n    product = 1\n\n    # Loop through the unique set and multiply each element with the product\n    for num in unique_set:\n        product *= num\n\n    # Return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    '''\n    unique_numbers = set(list_data)  # create a set of unique numbers\n    product = 1  # initialize the product to 1\n    \n    for num in unique_numbers:  # loop through the unique numbers\n        product *= num  # multiply the product by the current number\n    \n    return product  # return the final product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_set = set(list_data)\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a dictionary to store the unique numbers and their count\n    unique_dict = {}\n\n    # iterate through the list\n    for num in list_data:\n        # if the number is not already in the dictionary, add it and set its count to 1\n        if num not in unique_dict:\n            unique_dict[num] = 1\n        # if the number is already in the dictionary, increment its count by 1\n        else:\n            unique_dict[num] += 1\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_dict:\n        product *= unique_dict[num]\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    unique_numbers = set(list_data)\n    product = 1\n\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Formula for surface area of a cylinder: A = \u03c0r\u00b2h\n    return 2 * 3.14 * r**2 * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of a cylinder\n    # using the formula A = \u03c0r^2 + 2\u03c0rh\n    A = 2*3.14*r**2 + 2*3.14*r*h\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2 + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h + 2 * pi * r**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r ** 2 + 2 * 3.14 * r * h + 3 * 3.14 * h ** 2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder using the formula:\n    # S = 2 * pi * r * h\n    S = 2 * math.pi * r * h\n    \n    # return the surface area of the cylinder\n    return S"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    surface_area = 2*3.14159*r**2 + 2*3.14159*r*h + 2*3.14159*h**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (2*3.14159)*(r**2)+(2*3.14159)*r*h+(2*3.14159)*h**2\n    return area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False \n    for i in range(len(A)): \n        if A[i] in B: \n            return True \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    This function checks whether a list A is a sublist of list B or not.\n    \n    :param A: A list of integers\n    :param B: Another list of integers\n    \n    :return: True if A is a sublist of B, False otherwise\n    \"\"\"\n\n    # checking if A is a sublist of B\n    if len(A) > len(B):\n        return False\n\n    # initializing the variables for A and B\n    i = 0\n    j = 0\n\n    # iterating through the A list and checking if each element is present in B\n    while i < len(A):\n        if A[i] == B[j]:\n            j += 1\n        i += 1\n\n    # returning the result\n    return True if j == len(B) else False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if B[j] == A[i]:\n            i += 1\n            if i == len(A):\n                return True\n        j += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A==[] or B==[]:\n        return True\n    if len(A)<len(B):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)]==B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n\n    # Check if B is a sublist of A\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(B):\n        if i < len(A) and B[j] == A[i]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n            \n    return i == len(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A: \n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if A.sort() == B.sort():\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not A: # check if A is empty\n        return True\n    elif B[0] in A: # check if the first element of B is present in A\n        return is_Sub_Array(A[A.index(B[0])+1:], B[1:])\n    else: # if not, recursively check for the sublist in the rest of A\n        return is_Sub_Array(A, B[1:])"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        n=abs(n)\n    factorial=1\n    for i in range(1,n+1):\n        factorial*=i\n    return str(factorial%10)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the input number to string and reverse it\n    n_str = str(n)[::-1]\n    # Initialize the result variable to 0\n    result = 0\n    # Iterate through the digits in the reversed number\n    for digit in n_str:\n        # Convert the digit to integer and add it to the result\n        result += int(digit)\n    # Return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer as input and returns the last digit of its factorial.\n    '''\n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Extract the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n //= 10\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #initialize variables\n    factorial = 1\n    last_digit = 0\n    \n    #calculate factorial\n    for i in range(1, n+1):\n        factorial *= i\n        \n    #extract last digit from factorial\n    while factorial > 0:\n        last_digit = factorial % 10\n        factorial //= 10\n        \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize the variable to store the last digit in the factorial\n    last_digit = 0\n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # calculate the factorial of the current number\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        # find the last digit in the factorial and add it to the variable\n        last_digit += int(str(fact)[-1])\n    # return the last digit in the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    # find the last digit in the factorial\n    last_digit = int(str(factorial(n))[::-1][-1])\n    \n    return last_digit\n\ndef factorial(n):\n    # calculate the factorial of a given number\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert the given number to a string\n    n = str(n)\n\n    # Initialize a variable to store the last digit of factorial\n    last_digit = 0\n\n    # Iterate through each digit of the factorial and add it to the last_digit variable\n    for digit in n:\n        last_digit += int(digit)\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to a string\n    num = str(n)\n\n    # get the last digit of the number\n    last_digit = int(num[-1])\n\n    # calculate the factorial of the number\n    factorial = 1\n    for i in range(1, last_digit+1):\n        factorial *= i\n\n    # return the last digit of the factorial\n    return factorial"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Find the length of the shortest list\n    shortest_list = min(len(list1), len(list2), len(list3))\n\n    # Create a new list to hold the interleaved elements\n    result = []\n\n    # Loop through the shortest list and add elements to the result list\n    for i in range(shortest_list):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    # If there are any remaining elements in the shortest list, add them to the end of the result list\n    result.extend(list1[shortest_list:])\n    result.extend(list2[shortest_list:])\n    result.extend(list3[shortest_list:])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return \"Lists must have the same length.\"\n    # Create an empty list to store the interleaved list\n    interleaved_list = []\n    # Iterate through each list and append the corresponding element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize the result list\n    result = []\n    # loop through each element in each list\n    for i in range(min(len(list1), len(list2), len(list3))):\n        # add the i-th element from each list to the result list\n        result.append(list1[i] if i < len(list1) else None)\n        result.append(list2[i] if i < len(list2) else None)\n        result.append(list3[i] if i < len(list3) else None)\n    # return the final result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # iterate through each element in the three lists\n    for i in range(len(list1)):\n        # add the first element from each list to the interleaved list\n        interleaved_list.append(list1[i])\n        # add the second element from each list to the interleaved list\n        interleaved_list.append(list2[i])\n        # add the third element from each list to the interleaved list\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Iterate through each list, starting from the first element\n    for i in range(len(list1)):\n        # Append the first element of each list to the interleaved list\n        interleaved_list.append(list1[i])\n        # Append the second element of each list to the interleaved list\n        interleaved_list.append(list2[i])\n        # Append the third element of each list to the interleaved list\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    # Loop through the tuples and compare their elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.add(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set of elements in both tuples to find the common elements\n    common_elements = set(test_tup1) & set(test_tup2)\n    \n    # Convert the set to a list and remove the common elements\n    dissimilar_elements = [elem for elem in test_tup1 if elem not in common_elements and elem not in test_tup2]\n    \n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # initialize an empty list to store the dissimilar elements\n    dissimilar = []\n    \n    # loop through the tuples and check if any elements are different\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar.append(elem)\n    \n    # return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # convert the tuples to lists\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n    \n    # create an empty list to hold the dissimilar elements\n    dissimilar = []\n    \n    # loop over the elements of the first tuple\n    for i in range(len(tup1_list)):\n        # if the corresponding element in the second tuple is different, add it to the dissimilar list\n        if tup1_list[i]!= tup2_list[i]:\n            dissimilar.append(tup1_list[i])\n    \n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate over the elements of the first tuple\n    for element in test_tup1:\n        # Check if the element is in the second tuple\n        if element not in test_tup2:\n            # If it's not, append it to the dissimilar_list\n            dissimilar_list.append(element)\n\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for item in test_tuple:\n        if not isinstance(item, tuple):\n            if even_fnc(item):\n                return True\n    return False\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            new_tuple.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    even_list = []\n    for item in test_tuple:\n        if even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        else:\n            result.append(even_fnc(item))\n    return result\n\n\ndef even_mult(x):\n    '''\n    This is a function to check if a number is even or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x):\n        if x % 2 == 0:\n            return True\n        else:\n            return False\n\n    def remove_uneven(elem):\n        if isinstance(elem, tuple):\n            return tuple(remove_uneven(x) for x in elem if not is_even(x))\n        elif isinstance(elem, list):\n            return [remove_uneven(x) for x in elem if not is_even(x)]\n        else:\n            return elem\n\n    result = remove_uneven(test_tuple)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        if even_fnc(test_tuple[i]):\n            result.append(test_tuple[i])\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        for i, j in enumerate(test_tuple):\n            if isinstance(j, tuple):\n                test_tuple[i] = even_ele(j, even_fnc)\n            elif not even_fnc(j):\n                test_tuple = test_tuple[:i] + test_tuple[i+1:]\n        return test_tuple\n    else:\n        return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(x) for x in test_tuple if isinstance(x, tuple)]\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.append(even_fnc(i))\n        else:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def remove_uneven(lst):\n        return [x for x in lst if even_fnc(x)]\n\n    nested_lst = []\n    for item in test_tuple:\n        if isinstance(item, list):\n            nested_lst.append(remove_uneven(item))\n        else:\n            nested_lst.append(item)\n\n    return [x for sublist in nested_lst for x in sublist]\n\n\ndef is_even(num):\n    return num % 2 == 0\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)/2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    surface_area = 2 * (b * s) + 6 * b + 6 * s\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b * s) + (b * s) + (b * s)\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) + (s * s) + (b * b)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes the base edge of the square pyramid and its height as input and returns the surface area of the pyramid.\n    '''\n    area = 0.5 * b * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the height of the pyramid\n    h = s/2\n    \n    # Calculate the area of the base and height\n    base_area = b**2\n    height_area = h**2\n    \n    # Add the areas of the base and height and return the result\n    return base_area + height_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the surface area of the square pyramid using Heron's formula\n    h = 0.5 * b * s # height of the pyramid\n    area = 0.5 * b * b * s + 0.5 * b * b * h + 0.5 * b * b * h # surface area of each of the 6 faces of the pyramid\n    # add up the surface areas of all the 6 faces of the pyramid\n    total_area = area[0] + area[1] + area[2] + area[3] + area[4] + area[5]\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 2*b*s + 2*s*s + 2*b*b\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of the pyramid using Heron's formula\n    area = (b * s) / 2\n\n    # Return the surface area of the pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * b + s * s\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1.keys() == dict1.values():\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('Dictionary is empty')\n    else:\n        print('Dictionary is not empty')"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    elif n % 2 == 0:\n        return catalan_number(n//2) * (2*n - 1) // (n + 1)\n    else:\n        return catalan_number(n//2) * (2*n - 1) // (n - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    catalan_list = [1]\n    for i in range(1, n+1):\n        catalan_list.append((4*i-1) // (2*i-1) * catalan_list[i-1] + (4*i-3) // (2*i-1) * catalan_list[i-2])\n    return catalan_list[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    catalan_numbers = [1]\n    for i in range(1, n+1):\n        catalan_numbers.append(2*catalan_numbers[i-1])\n    return catalan_numbers[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using the formula:\n\n    C(n) = (2n-1)C(n-1) - nC(n-2)\n    \n    where n is the given positive integer.\n    \"\"\"\n    \n    # base cases\n    if n == 0 or n == 1:\n        return 1\n    \n    # recursive case\n    else:\n        return ((2*n-1)*catalan_number(n-1) - catalan_number(n-2))/n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n\n    # Initialize the first two rows of the Catalan triangle\n    catalan = [[1], [1, 1]]\n\n    # Calculate the remaining rows of the Catalan triangle\n    for i in range(2, n+1):\n        row = [1]\n        for j in range(i):\n            row.append(catalan[i-1][j] + catalan[i-1][j+1])\n        row.append(1)\n        catalan.append(row)\n\n    # Return the nth row of the Catalan triangle\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [0, 1]\n    for i in range(2, num + 1):\n        catalan.append(4 * catalan[i-1] - catalan[i-2])\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if n < 0:\n        print(\"Please enter a positive integer.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        c = 0\n        for i in range(1, n+1):\n            c += (2*i-1)**n\n        c *= (1/factorial(n))**2\n        return c\n\ndef factorial(n):\n    '''\n    This function returns the factorial of a given number n.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all adverbs ending with ly\n    adverbs = re.findall(r'\\b[a-z]+ly\\b', text, re.IGNORECASE)\n    \n    # Initialize an empty dictionary to store the positions of the adverbs\n    positions = {}\n    \n    # Iterate over the adverbs and store their positions in the dictionary\n    for i, adverb in enumerate(adverbs):\n        positions[adverb] = i\n    \n    # Return the dictionary of adverb positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'(\\w+ly)', text, re.IGNORECASE)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w*[ly]\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n    \"\"\"\n    pattern = r'\\bly\\b'  # find all words ending with \"ly\"\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n    if matches:\n        print(\"Adverbs ending with \\\"ly\\\":\")\n        for i, match in enumerate(matches):\n            print(f\"{i+1}. {match}\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern for identifying adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Create a list of tuples containing the positions of the adverbs and their lengths\n    adverb_list = []\n    # Iterate over the matches and append the positions and lengths to the adverb_list\n    for match in matches:\n        start = text[:match.start()].count(' ') + 1\n        end = text[:match.end()].rfind(' ')\n        adverb_list.append((start, end - start + 1))\n    # Sort the list of adverbs based on their starting position\n    adverb_list.sort(key=lambda x: x[0])\n    # Return the adverb_list\n    return adverb_list"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(ly|sly|kindly|hella|gently|harshly|quietly|so|badly|awfully|terribly|totally)\\b'\n    # Use the re.search() function to search for the pattern in the given text\n    match = re.search(pattern, text)\n    # If a match is found, return a list of positions where the adverb was found\n    if match:\n        return [match.start(), match.end()]\n    else:\n        # If no match is found, return an empty list\n        return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b([a-zA-Z]+ly)\\b', text)\n    return adverbs\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(find_adverbs(text))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w+\\s*(ly)\\b', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the adverb ending with ly and its positions in the string.\n    '''\n\n    # Define the regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[aeiou][^aeiou]*ly\\b'\n\n    # Use the re.finditer() function to find all occurrences of the pattern in the input string\n    matches = re.finditer(pattern, text)\n\n    # Create an empty list to store the adverbs and their positions\n    adverbs = []\n\n    # Loop through each match and add the adverb and its position to the adverbs list\n    for match in matches:\n        adverb = match.group()\n        start = match.start()\n        end = match.end()\n        adverbs.append((adverb, start, end))\n\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # Use regular expression search to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize empty list to store positions of adverbs\n    positions = []\n\n    # Loop through all matches and add their position to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n\n    # Return a tuple containing the positions and the adverbs found\n    return positions, matches"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        else:\n            if item < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, item)\n\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    :param items: a list of items with a price attribute for each item\n    :param n: the number of most expensive items to find\n    :return: a list of the n most expensive items\n    \"\"\"\n    # Create a max-heap of size n to store the n most expensive items\n    max_heap = []\n    for item in items:\n        heapq.heappush(max_heap, (-item.price, item))\n\n        # If the max-heap size exceeds n, pop the least expensive item\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n\n    # Convert the max-heap back into a list of items\n    result = []\n    for price, item in max_heap:\n        result.append(item)\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n and returns the n most expensive items.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Finds the n most expensive items in a given dataset.\n\n    Args:\n        items (list): A list of items to be sorted.\n        n (int): The number of items to be returned.\n\n    Returns:\n        list: A list of the n most expensive items.\n    \"\"\"\n    # Sort the items in descending order of their values\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Return the n most expensive items\n    return [item for item in sorted_items[:n]]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of items and an integer n, returns a list of the n most expensive items in the dataset.\n\n    Args:\n    items (list): A list of items to be sorted and ranked.\n    n (int): The number of items to return.\n\n    Returns:\n    list: A list of the n most expensive items in the dataset.\n    \"\"\"\n    heap = []\n\n    # Sort the items in decreasing order\n    for item in items:\n        heapq.heappush(heap, item)\n\n    # Remove and return the n most expensive items from the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Returns the n most expensive items in the given dataset.\n    \"\"\"\n    # Create a min-heap of size n\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # Return the n most expensive items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        items (list): A list of items in the dataset.\n        n (int): The number of items to find.\n\n    Returns:\n        list: A list of the n most expensive items in the dataset.\n    \"\"\"\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        # Add the item to the heap if it's greater than the current smallest item\n        if not heap or item < heap[0]:\n            heapq.heappush(heap, item)\n        # Otherwise, update the smallest item in the heap\n        else:\n            heapq.heappushpop(heap, item)\n        # If we have found the n most expensive items, break out of the loop\n        if len(heap) == n:\n            break\n    # Return the n most expensive items from the heap\n    return [heap[0] for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap with the n largest elements\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the dataset based on the value of each item\n    sorted_items = sorted(items, key=lambda x: x['value'])\n\n    # Create a min-heap of size n to store the top n items\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, sorted_items[i])\n\n    # Pop and return the items from the heap one by one until the heap is empty\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item < heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n\n    return heap[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at nth element\n    first_half = l[:n]\n    second_half = l[n:]\n    # Add the first part to the end of the second half\n    new_list = first_half + second_half\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    \n    elif n == len(l):\n        return l[:1]\n    \n    else:\n        split_at = n\n        part1 = l[:split_at]\n        part2 = l[split_at:]\n        return part1 + part2 + [part1[-1]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Index out of range\")\n        return []\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        l = second_part + first_part\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.insert(n, l.pop(0))\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Error: nth element is greater than the length of the list.\"\n    elif n == 0:\n        return [l[0]]\n    else:\n        return l[:n] + [l[n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element and add the first part to the end\n    l.insert(n, l.pop(0))"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[0]] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_list = []\n    for i in range(len(l)):\n        if i < n:\n            split_list.append(l[i])\n        else:\n            break\n    for i in range(n):\n        split_list.append(l[i])\n    return split_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Get the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function finds the difference between the largest and smallest values in a given list.\n    \"\"\"\n    # Find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the difference between the largest and smallest values\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Calculate the difference between the largest and smallest value in the list\n    diff = nums[-1] - nums[0]\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) < 2:\n        return \"The given list must have at least 2 elements.\"\n    \n    # find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # calculate the difference between the largest and smallest values\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Find the difference between largest and smallest values\n    return abs(nums[-1] - nums[0])"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize the largest and smallest values as the first element of the list\n    largest = nums[0]\n    smallest = nums[0]\n    # loop through the list to find the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    # return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    \n    smallest = nums[0]\n    largest = nums[0]\n    \n    for num in nums[1:]:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    \n    return largest - smallest"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        if square == int(square) ** 2:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a variable to store the sum of perfect squares\n    perfect_sum = 0\n    \n    # Loop through all integers between a and b\n    for i in range(a, b+1):\n        # Check if the integer is a perfect square\n        if int(i*i) == i*i:\n            # If it is, add it to the sum\n            perfect_sum += i*i\n    \n    # Return the sum of perfect squares\n    return perfect_sum"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        square = i*i\n        squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares between a and b\n    perfect_squares_list = []\n    # iterate through a range of integers between a and b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i*i == a or i*i == b:\n            # if it is, add it to the list\n            perfect_squares_list.append(i)\n    # return the list of perfect squares between a and b\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_square_list = []\n    for i in range(a, b+1):\n        if i*i == i:\n            perfect_square_list.append(i*i)\n    return perfect_square_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num ** 0.5 ** 2 == num:\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(int(a)+1, b+1):\n        for j in range(int(i/2)+1):\n            if i ** j == i:\n                squares.append(i ** j)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Use a loop to find the perfect squares between a and b\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            perfect_squares.append(i**2)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n\n    if a == 0:\n        return [(b, 1)]\n\n    squares = []\n    square = 1\n    diff = b - a\n    while square <= diff:\n        squares.append((square, 1))\n        square += square\n        diff -= square\n\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the point.\n    theta (float): The angle (in radians) of the point.\n\n    Returns:\n    (float, float): The rectangular coordinates (x, y) of the point.\n    \"\"\"\n    # Convert polar coordinates to rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return (x_rect, y_rect)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n        r (float): Radius of the circle\n        theta (float): Angle of the axis (in radians)\n\n    Returns:\n        tuple: (x, y) where x and y are the rectangular coordinates.\n    '''\n\n    # Convert angle to radians\n    theta = theta * (cmath.pi / 180)\n\n    # Calculate x and y coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x.real, x.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to rectangular coordinates\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    return r*cmath.cos(theta), r*cmath.sin(theta)\n\nx = 3\ny = 4\nr, theta = polar_rect(x, y)\nprint(\"Polar coordinates: x={}, y={}\".format(x, y))\nprint(\"Rectangular coordinates: r={}, theta={}\".format(r.real, theta.real))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list is empty or not\n    if len(newList) == 0:\n        return None\n    \n    # If the list has only one element, return the list unchanged\n    elif len(newList) == 1:\n        return newList\n    \n    # If the list has more than one element, swap the first and last elements\n    else:\n        # Get the last element of the list\n        last_element = newList[-1]\n        \n        # Remove the last element from the list\n        newList.pop()\n        \n        # Insert the last element at the beginning of the list\n        newList.insert(0, last_element)\n        \n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the input list is valid\n    if len(newList) < 2:\n        print(\"Error: List should have at least 2 elements\")\n        return\n    \n    # Swap the first and last elements of the list\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #Checking if the list has at least 2 elements\n    if len(newList) >= 2:\n        #Swapping the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        #Printing the updated list\n        print(newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list should have at least two elements.\"\n\n    # Interchange the first and last elements\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # checking if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list must have at least two elements.\")\n        return\n    \n    # swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # printing the updated list\n    print(\"Updated List:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the input list is valid\n    if len(newList) < 2:\n        print(\"Error: List must have at least two elements\")\n        return\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    product = 1\n    for i in range(k, n+1):\n        product *= i\n    return sum([product/(i*(i-1)) for i in range(1, k+1)])"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n//2:\n        k = n-k\n    result = 1\n    for i in range(1,k+1):\n        result *= (n-i+1)\n        result //= i\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Calculate binomial coefficient recursively\n    def binomial_helper(n, k): \n        if k == 0 or k == n: \n            return 1 \n        else: \n            return binomial_helper(n-1, k-1) * n / k\n\n    # Find sum of product of consecutive binomial co-efficients\n    def binomial_sum(n): \n        sum = 0 \n        for i in range(n+1): \n            sum += binomial_helper(n, i)\n        return sum\n\n    return binomial_sum(k) - binomial_sum(n-k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(1, k+1):\n        result *= n - i + 1\n        result //= i\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum_product = 0\n    for i in range(1, n + 1):\n        sum_product += i * binomial_Coeff(n - 1, k - 1)\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if n == 0 or k == 0:\n        return 0\n\n    if n == 1 or k == 1:\n        return 1\n\n    return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    if n == k or n == 0:\n        return 1\n    coeff = binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n    return coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum and the variable for the sum of products\n    sum_product = 0\n    product = 1\n\n    # Calculate the sum of products\n    for i in range(1,k+1):\n        product *= (n-i+1)\n        sum_product += product\n\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: \n        return 0\n    elif k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i <= k:\n            sum += (n-i+1) * (k-i+1) / (i+1)\n    return sum"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r\"^0*(\\d+\\.\\d+\\.\\d+\\.\\d+)\")\n    match = pattern.match(ip)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function removes leading zeroes from an IP address.\n    '''\n\n    # Regular expression pattern to match IPv4 addresses\n    pattern = r'^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$'\n\n    # Check if the input is in the correct format\n    if not re.match(pattern, ip):\n        return \"Invalid IP address format\"\n\n    # Split the input into parts\n    parts = ip.split('.')\n\n    # Remove leading zeroes from each part\n    parts = [part.lstrip('0') for part in parts]\n\n    # Join the parts back into an IP address\n    ip = '.'.join(parts)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def removezero_ip(ip):\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+(\\.\\d+){3}$', r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        return re.sub(r'^0+\\.', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regular expressions to remove leading zeroes from the ip address\n    pattern = re.compile(r'^\\d+(\\.\\d+)*$')\n    if pattern.match(ip):\n        return re.sub(r'^\\d+(\\.\\d+)*', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # replace all zeroes with single digit ones\n    ip = re.sub(r'(\\d)0', r'\\1', ip)\n    # remove all leading zeros\n    ip = re.sub(r'(\\d)0+', r'\\1', ip)\n    # remove any remaining zeroes\n    ip = re.sub(r'0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regular expression to match and replace zeroes from ip address\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = r'\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b'\n    ip_regex = re.compile(ip_pattern)\n    result = ip_regex.sub('', ip)\n    return result"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(lst):\n    '''\n    Find the difference between the first even and first odd number in a given list.\n    '''\n    first_even = None\n    first_odd = None\n    for i in lst:\n        if i % 2 == 0:\n            if first_even is None:\n                first_even = i\n            else:\n                first_even -= i\n        else:\n            if first_odd is None:\n                first_odd = i\n            else:\n                first_odd -= i\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even = list1[0]\n    odd = list1[1]\n    result = even - odd\n    return result"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd number in a given list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The difference of the first even and first odd number in the list.\n\n    Example:\n        >>> diff_even_odd([1, 2, 3, 4, 5])\n        4\n    \"\"\"\n\n    # Find the first even number\n    even_index = next((i for i, x in enumerate(lst) if x % 2 == 0), None)\n    if even_index is None:\n        return None\n\n    # Find the first odd number\n    odd_index = next((i for i, x in enumerate(lst[even_index:]) if x % 2 == 1), None)\n    if odd_index is None:\n        return None\n\n    # Return the difference of the two indices\n    return lst[even_index] - lst[odd_index]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd numbers in the list.\n    '''\n    even = 0\n    odd = 0\n    for i in lst:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = None\n    odd_index = None\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if even_index is None:\n                even_index = i\n            elif even_index < i:\n                even_index = i\n        elif list1[i] % 2 == 1:\n            if odd_index is None:\n                odd_index = i\n            elif odd_index < i:\n                odd_index = i\n    if even_index is not None and odd_index is not None:\n        return abs(list1[even_index] - list1[odd_index])\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n\n    # initialize two variables to store the even and odd numbers\n    even_num = None\n    odd_num = None\n\n    # loop through the list and find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - num\n\n    # find the difference between the even and odd numbers\n    diff = even_num - odd_num\n\n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even number in the list\n    even_index = next(i for i, x in enumerate(list1) if x % 2 == 0)\n    even_num = list1[even_index]\n    \n    # Find the first odd number in the list\n    odd_index = next(i for i, x in enumerate(list1) if x % 2!= 0)\n    odd_num = list1[odd_index]\n    \n    # Calculate the difference between the even and odd numbers\n    diff = even_num - odd_num\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = 0\n    odd_index = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_index += 1\n            if even_index == 1:\n                break\n        else:\n            odd_index += 1\n            if odd_index == 1:\n                break\n    return list1[even_index] - list1[odd_index]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    else:\n        even = list1[0]\n        odd = list1[1]\n        if even % 2 == 0:\n            return abs(even - odd)\n        else:\n            return abs(odd - even)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            elif even_num > num:\n                even_num = num\n        else:\n            if odd_num is None:\n                odd_num = num\n            elif odd_num < num:\n                odd_num = num\n    if even_num is None:\n        even_num = 0\n    if odd_num is None:\n        odd_num = 0\n    return abs(even_num - odd_num)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert both binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for number of swaps and swapped bits\n    swaps = 0\n    bits = 0\n\n    # Iterate through each bit of the binary number\n    for i in range(len(str1)):\n        # Check if the bits are different\n        if num1 & (1 << i)!= num2 & (1 << i):\n            # If they are, increment the number of swaps and the number of swapped bits\n            swaps += 1\n            bits += i - bits\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert input strings to binary\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize variables to store current position and minimum number of swaps\n    pos1 = 0\n    pos2 = 0\n    min_swaps = float('inf')\n\n    # iterate through both strings and swap characters if the current position in num1 is less than the current position in num2\n    while pos1 < len(str1) and pos2 < len(str2):\n        if num1[pos1] < num2[pos2]:\n            # swap characters at positions pos1 and pos2\n            str1 = str1[:pos1] + str2[pos1:pos2] + str1[pos1+1:]\n            str2 = str2[:pos2] + str1[pos2:pos1] + str2[pos2+1:]\n\n            # update variables to reflect new positions and count number of swaps\n            pos1 += 1\n            pos2 += 1\n            min_swaps = min(min_swaps, pos1 - pos2)\n        elif num1[pos1] > num2[pos2]:\n            pos1 += 1\n        else:\n            pos2 += 1\n\n    # if there are any extra characters in num1, add them to the end of str2\n    while pos1 < len(str1):\n        str2 += str1[pos1]\n        pos1 += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    # initialize variables\n    i = 0\n    j = 0\n    \n    # iterate through both strings\n    while i < len(str1) and j < len(str2):\n        # if characters don't match, swap the characters and increment swap count\n        if str1[i]!= str2[j]:\n            str1 = str1[:i] + str2[j] + str1[i+1:]\n            str2 = str2[:j] + str1[i] + str2[j+1:]\n            i = 0\n            j = 0\n        # if characters match, increment both indices\n        else:\n            i += 1\n            j += 1\n            \n    # get length of smaller string\n    if len(str1) < len(str2):\n        str1_length = len(str1)\n    else:\n        str1_length = len(str2)\n        \n    # initialize swap count\n    swap_count = 0\n    \n    # iterate through the smaller string and decrement indices\n    while i < str1_length:\n        swap_count += 1\n        i += 1\n    \n    # return swap count\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # convert both strings to lists of 0s and 1s\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # compare the two lists and count the number of swaps required\n    count = 0\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0]*n for _ in range(n+1)]\n    \n    # Base case\n    for i in range(1, n+1):\n        dp[i][i] = 0\n        \n    # Compute dp table\n    for length in range(2, n+1):\n        for i in range(1, n-length+1):\n            j = i+length-1\n            if str1[i] == '1' and str1[j] == '1':\n                dp[i][j] = dp[i+1][j-1] + 1\n            else:\n                dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n    \n    # Return minimum number of swaps required to convert str1 to str2\n    return dp[0][n-1]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as strings and returns the minimum number of swaps required to convert one binary number to the other.\n    \"\"\"\n\n    # Convert the binary strings to their respective integer representations\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Convert the integer numbers to binary strings\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n\n    # Initialize variables to store the number of swaps required\n    swaps = 0\n    i = 0\n\n    # Iterate over the binary strings from right to left\n    while i < len(bin1) or i < len(bin2):\n\n        # If the characters at the current positions are not equal, increment the swaps count and move the pointers to the next positions\n        if bin1[i]!= bin2[i]:\n            swaps += 1\n            i += 1\n            i += 1\n        # If the characters at the current positions are equal, move the pointers to the next positions\n        else:\n            i += 1\n            i += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Check if both strings are of equal length\n    if len(str1)!= len(str2):\n        return \"Error: Both strings must be of equal length.\"\n\n    # Initialize variables for swaps and swapped values\n    swaps = 0\n    swapped_values = []\n\n    # Loop through the first string\n    for i in range(len(str1)):\n        # Check if the characters match\n        if str1[i]!= str2[i]:\n            # If not, swap the values and increment the swap count\n            temp = str1[i]\n            str1[i] = str2[i]\n            str2[i] = temp\n            swaps += 1\n            swapped_values.append(str1[i])\n\n    # Check if the two strings are equal after swapping\n    if str1 == str2:\n        return swaps\n    else:\n        return \"Error: The two strings are not equal after swapping.\""
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2):\n\n    # Convert both strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # Iterate through each bit of the binary number and check if the corresponding bits of the two numbers are the same\n    for i in range(len(str1)):\n        if (num1 >> i) & 1 == (num2 >> i) & 1:\n            continue\n        else:\n            # If the bits are different, update the minimum number of swaps\n            min_swaps = min(min_swaps, i)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n = len(str1)\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            str1[i], str2[i] = str2[i], str1[i]\n            swaps += 1\n            # print(str1, str2)\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    # Convert strings to binary numbers\n    bin1 = int(str1, 2)\n    bin2 = int(str2, 2)\n\n    # Count number of swaps required to convert binary numbers\n    count = 0\n    while bin1!= bin2:\n        if bin1 > bin2:\n            bin1 = bin1 ^ (bin1 & -bin1)  # find first set bit\n            count += 1\n        else:\n            bin2 = bin2 ^ (bin2 & -bin2)\n            count += 1\n\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        # calculate the size of each tuple element in bytes\n        element_size = sys.getsizeof(t)\n        total_size += element_size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size of the tuple in bytes.\n    '''\n    size = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to a bytes object\n    bytes_obj = bytes(tuple_list)\n\n    # Get the size of the bytes object\n    size = sys.getsizeof(bytes_obj)\n\n    # Return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        for j in i:\n            total_size += sys.getsizeof(j)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n\nif __name__ == \"__main__\":\n    tuple_list = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    size = tuple_size(tuple_list)\n    print(\"The size in bytes of the tuple is:\", size)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tuple in tuple_list:\n        total_size += sys.getsizeof(tuple)\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    kth = None\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if kth is None or kth == arr1[i]:\n                kth = arr1[i]\n                k -= 1\n                if k == 0:\n                    return kth\n            i += 1\n            j += 1\n    return kth"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize variables to store the index of the smallest element of each array\n    i = j = 0\n    \n    # Compare the first element of each array and keep track of the index with the smallest element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # Found a matching element, so move on to the next element of each array\n            i += 1\n            j += 1\n    \n    # If the remaining elements of the smaller array are less than k,\n    # return the element at the remaining index of the array\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i == len(arr1):\n        return arr2[j-1]\n    else:\n        return arr1[i-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    while i < len(arr1):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result\n\n\ndef find_kth(arr1, arr2, k):\n    sorted_arr1 = merge_sort(arr1)\n    sorted_arr2 = merge_sort(arr2)\n\n    return sorted_arr1[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = k = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            arr1[i], arr1[k] = arr1[k], arr1[i]\n            i += 1\n            k += 1\n        else:\n            arr2[j], arr2[k] = arr2[k], arr2[j]\n            j += 1\n            k += 1\n    while i < len(arr1):\n        arr1[i], arr1[k] = arr1[k], arr1[i]\n        i += 1\n        k += 1\n    while j < len(arr2):\n        arr2[j], arr2[k] = arr2[k], arr2[j]\n        j += 1\n        k += 1\n    return arr1[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    # Find the total number of elements in both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    total = n1 + n2\n\n    # If k is greater than the total number of elements, return None\n    if k > total:\n        return None\n\n    # Create a dictionary to store the count of each element in both arrays\n    count_dict = {}\n    for i in range(n1):\n        count_dict[arr1[i]] = count_dict.get(arr1[i], 0) + 1\n    for i in range(n2):\n        count_dict[arr2[i]] = count_dict.get(arr2[i], 0) + 1\n\n    # Initialize two pointers to the start of each array\n    i = 0\n    j = 0\n\n    # Traverse the count_dict and update the pointers accordingly\n    while True:\n        # If both pointers have reached the end of the arrays, return the current element\n        if i == n1 and j == n2:\n            return count_dict[k]\n\n        # If i is not None and count_dict[arr1[i]] > 0, increment i and decrement count_dict[arr1[i]]\n        if i < n1 and count_dict[arr1[i]] > 0:\n            count_dict[arr1[i]] -= 1\n            i += 1\n        # If j is not None and count_dict[arr2[j]] > 0, increment j and decrement count_dict[arr2[j]]\n        elif j < n2 and count_dict[arr2[j]] > 0:\n            count_dict[arr2[j]] -= 1\n            j += 1\n\n        # If k is not None and count_dict[k] > 0, decrement k and decrement count_dict[k]\n        if k!= None and count_dict[k] > 0:\n            count_dict[k] -= 1"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    num_str = str(number)\n    sum_of_squares = 0\n    temp = number\n    while temp!= 0:\n        digit = temp % 10\n        sum_of_squares += digit ** 3\n        temp //= 10\n    return sum_of_squares == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    sum_of_square = 0\n\n    for digit in num_str:\n        power = len(num_str)\n        power_digit = int(digit) ** power\n        sum_of_square += power_digit\n\n    return number == sum_of_square"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Converting the number to a string\n    number_str = str(number)\n\n    # Calculating the sum of the squares of the digits of the number\n    sum_of_squares = sum([int(digit)**len(number_str) for digit in number_str])\n\n    # Comparing the sum of the squares of the digits with the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong_number(number):\n    '''\n    This function takes a number as input and returns True if it is an Armstrong number, else False.\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n    '''\n    digits = list(str(number))\n    total = 0\n    for digit in digits:\n        total += int(digit)**len(digits)\n    return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is an Armstrong number or not.\n    \"\"\"\n    # Converting the number to a string to remove any spaces or non-numeric characters\n    number_str = str(number)\n    \n    # Initializing a variable to store the sum of the cube of each digit in the number\n    sum_of_cubes = 0\n    \n    # Looping through each digit in the number\n    for digit in number_str:\n        # Converting the digit to an integer and cubes it to get the cube of the digit\n        cube = int(digit) ** 3\n        \n        # Adding the cube of each digit to the sum_of_cubes variable\n        sum_of_cubes += cube\n        \n    # Checking whether the sum of the cube of each digit is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Returns True if the given number is an Armstrong number or False otherwise.\n    \"\"\"\n    num = int(num)\n    if num < 10:\n        return False\n    temp = num\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return num == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n\n    # Helper function to check if a number is armstrong or not\n    def is_armstrong(n):\n        num = n\n        # Convert the number to a string\n        str_num = str(n)\n        # Calculate the sum of the digits raised to the power of the length of the string\n        sum = sum(int(d) ** len(str_num) for d in str_num)\n        # If the sum is equal to the original number, it is an armstrong number\n        return sum == num\n\n    # Check if the given number is an integer\n    if isinstance(number, int):\n        # Check if the given number is greater than 0\n        if number > 0:\n            # Call the helper function to check if the number is armstrong\n            return is_armstrong(number)\n        else:\n            # If the number is less than or equal to 0, it is not an armstrong number\n            return False\n    else:\n        # If the given number is not an integer, it is not an armstrong number\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        sum = 0\n        temp_num = number\n        while temp_num > 0:\n            digit = temp_num % 10\n            sum += digit ** 3\n            temp_num //= 10\n        return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    num_list = []\n    while number > 0:\n        num_list.append(number % 10)\n        number //= 10\n    sum_of_squares = sum(x ** 3 for x in num_list)\n    return sum_of_squares == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    Check whether a number is armstrong or not.\n    \"\"\"\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return n == sum\n\nnum = int(input(\"Enter a number: \"))\n\nif is_armstrong_number(num):\n    print(f\"{num} is an Armstrong number.\")\nelse:\n    print(f\"{num} is not an Armstrong number.\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count variables to 0\n    total_sum = 0\n    count = 0\n    # loop through the numbers and calculate sum and count\n    for i in range(1, number+1):\n        total_sum += i\n        count += 1\n    # calculate average and return the result as a tuple\n    average = total_sum / count\n    return (total_sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    \n    average = sum / number\n    print(\"Sum of first\", number, \"natural numbers is:\", sum)\n    print(\"Average of first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    print(\"Sum of first\", number, \"natural numbers is\", sum)\n    print(\"Average of first\", number, \"natural numbers is\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    print(\"Sum:\", sum)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    \n    for i in range(number):\n        sum += i\n        count += 1\n        \n    average = sum / count\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count to zero\n    total = 0\n    count = 0\n    # loop n times\n    for i in range(1, n+1):\n        # add i to sum and increment count\n        total += i\n        count += 1\n    # calculate average and return as tuple\n    average = total / count\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer n and returns True if n is even, False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(\"The number\", n, \"is even.\")\n    else:\n        print(\"The number\", n, \"is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n) :\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        print(n,\"is Even\")\n    else :\n        print(n,\"is Odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if the number is even, otherwise False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # loop through the dictionary to find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If there is no repeated character, then it returns \"No repeated character found\".\n    \"\"\"\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return \"No repeated character found\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # iterate through the dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == str1.count(char):\n            return char\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n\n    return 'No repeated character found'\n"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 2:\n            return char\n    \n    return \"No repeated character found\""
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\n\ndef is_lucid(n):\n    \"\"\"\n    Write a helper function to check if a given number is a lucid number or not.\n    \"\"\"\n    if n == 1:\n        return True\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input(\"Enter a positive integer: \"))\n    lucid_numbers = get_ludic(n)\n    print(\"All lucid numbers smaller than or equal to\", n, \"are:\", lucid_numbers)"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Check if a number is a lucid number.\n    '''\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = 1\n    while lucid <= n:\n        if is_lucid(lucid):\n            yield lucid\n        lucid += 1\n\ndef is_lucid(n):\n    \"\"\"\n    Check if a given integer is a lucid number.\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # initialize an empty list to store lucid numbers\n    lucid_nums = []\n    # iterate from 1 to n\n    for num in range(1, n+1):\n        # check if num is a lucid number\n        lucid = True\n        for i in range(2, int(num**0.5)+1):\n            # check if num is divisible by i\n            if num % i == 0:\n                lucid = False\n                break\n        # if num is a lucid number, add it to lucid_nums\n        if lucid:\n            lucid_nums.append(num)\n    # return the lucid_nums list\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(n+1):\n        if i == 1:\n            lucid_numbers.append(1)\n        elif i == 2:\n            lucid_numbers.append(2)\n        elif i % 2 == 0:\n            j = 3\n            while j <= i/2:\n                if i % j == 0:\n                    break\n                j += 2\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers\n\nprint(get_ludic(10))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    \"\"\"\n    Write a function to check if a given integer is a lucid number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    if n <= 0:\n        return []\n    else:\n        return [n] + get_ludic(n-1)"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        if i > n:\n            break\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            j = 1\n            while j <= n:\n                if j % 2 == 0:\n                    k = 1\n                    while k <= n:\n                        if k % 2 == 0:\n                            l = 1\n                            while l <= n:\n                                if l % 2 == 0:\n                                    m = 1\n                                    while m <= n:\n                                        if m % 2 == 0:\n                                            n = n - m\n                                            m = m + 1\n                                        else:\n                                            m = m + 2\n                                    l = l + 1\n                                else:\n                                    l = l + 2\n                            k = k + 1\n                        else:\n                            k = k + 2\n                    j = j + 1\n                else:\n                    j = j + 1\n            i = i + 1\n        else:\n            i = i + 1\n    return ludic_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid.append(i)\n    return lucid"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse the order of the words\n    words.reverse()\n    # Join the words back together into a string\n    s =''.join(words)\n    # Return the reversed string\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    \n    for word in words:\n        reversed_words.append(word[::-1])\n    \n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    words.reverse()\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words using the split() method\n    words = s.split()\n    # Reverse the order of the words using the reverse() method\n    words.reverse()\n    # Join the words back into a string using the join() method\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word and join them back into a string\n    result =''.join([word[::-1] for word in words])\n    # Return the reversed string\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number or not.\n    \"\"\"\n\n    # check if the given number is less than 2\n    if num < 2:\n        return False\n\n    # check if the given number is equal to 2\n    elif num == 2:\n        return True\n\n    # check if the given number is divisible by 2\n    elif num % 2 == 0:\n        return False\n\n    # check all odd numbers from 3 to the square root of the given number\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the given number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the given number is divisible by 2\n    if num == 2:\n        return True\n\n    # Check if the given number is divisible by any number between 3 and the square root of the given number\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    A function to check if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compile the regex pattern\n    compiled_pattern = re.compile(pattern)\n    \n    # Find all matches\n    matches = compiled_pattern.findall(text)\n    \n    # Iterate over the matches and store them in a list\n    literal_matches = []\n    for match in matches:\n        literal_matches.append(match)\n    \n    # Return the list of matches\n    return literal_matches"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text)\n    if not result:\n        return None, None, None\n    else:\n        start_index = result[0].start()\n        end_index = result[-1].end()\n        return result[0].group(), start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None\n\ntext = \"This is a test string with some literals: 123, 456, 789.\"\npattern = r'(\\d+),\\s*(\\d+),\\s*(\\d+)'\nresult = find_literals(text, pattern)\nprint(result)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use the re.search() method to find all occurrences of the pattern in the text\n    match_obj = re.search(pattern, text)\n\n    # If there are no matches, return None\n    if match_obj is None:\n        return None\n\n    # Extract the substrings from the match object using the start() and end() methods\n    match_str = match_obj.group()\n    start_index = match_obj.start()\n    end_index = match_obj.end()\n\n    # Return the matching substring, start index and end index\n    return match_str, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0][0], matches[0][1], len(text)\n    else:\n        return None\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\npattern = r'\\b\\w+\\b'\nstart, end, length = find_literals(text, pattern)\n\nif start is not None:\n    print(\"Match:\", text[start:end])\n    print(\"Start index:\", start)\n    print(\"End index:\", end)\n    print(\"Length:\", length)\nelse:\n    print(\"No match found.\")"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            bell_num = (2*i-1) * ((2*i-1)/2)\n            print(bell_num, end=\" \")"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #define the initial value of bell number\n    b = 0\n    #loop from 1 to n\n    for i in range(1,n+1):\n        #if i is even, multiply it by 4\n        if i % 2 == 0:\n            b += 4*(i**2-1)\n        else:\n            #if i is odd, add 1\n            b += 1\n    #return the nth bell number\n    return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n <= 0: \n        return \"Enter a positive integer.\" \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 2 \n    else: \n        return (2*n**2) - (2*n) + 1 "
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return (2**(n-1) + 1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the k'th element from the given list.\n\n    :param list1: A list of elements.\n    :param k: The index of the element to be removed.\n    :return: A list with all elements except the k'th element.\n    \"\"\"\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L\n    # Remove the k'th element from the list\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = L-1\n    for i in range(len(list1)):\n        if i == k:\n            list1.pop(i)\n        elif i < k:\n            list1[i], list1[k] = list1[k], list1[i]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    # Initialize the length of the list\n    n = len(list1)\n\n    # Initialize the list to store the new elements\n    new_list = []\n\n    # Iterate through the list\n    for i in range(n):\n\n        # If the current index is not equal to L-1, add the element to the new list\n        if i!= L-1:\n            new_list.append(list1[i])\n\n        # If the current index is equal to L-1, add the element to the new list and skip L-1 elements\n        else:\n            new_list.append(list1[i])\n            L = 0\n\n    # Return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the kth element from the list and return the modified list.\n    \"\"\"\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L <= 0:\n        return list1\n    else:\n        return remove_kth_element(list1[1:], L-1) + [list1[0]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the input is a list of lists\n    if not all(isinstance(row, list) for row in test_list):\n        raise ValueError('Input must be a list of lists')\n    \n    # Check if the input list has at least N columns\n    if len(test_list[0]) < N:\n        raise ValueError('Input list must have at least {} columns'.format(N))\n    \n    # Initialize the result variable to None\n    result = None\n    \n    # Iterate over the rows of the matrix\n    for row in test_list:\n        # Check if the current row has N columns\n        if len(row)!= N:\n            raise ValueError('Each row must have exactly {} columns'.format(N))\n        \n        # Check if the current row has then'th column\n        if N-1 == row.index(max(row)):\n            # If so, update the result variable to the maximum of the current row and the result variable\n            result = max(row) if result is None else max(row, result)\n    \n    # Return the result variable\n    return result"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    \n    # Calculate the length of the list of lists\n    num_rows = len(test_list)\n    num_cols = len(test_list[0])\n    \n    # Check if the N is valid\n    if N > num_cols:\n        return None\n    \n    # Initialize the maximum value to be returned\n    max_val = float('-inf')\n    \n    # Loop through the rows of the matrix\n    for row in test_list:\n        \n        # Check if the current row has N columns\n        if len(row)!= num_cols:\n            continue\n        \n        # Check if the current column is the nth column\n        if N == 1:\n            val = row[0]\n        elif N == 2:\n            val = row[1]\n        elif N == 3:\n            val = row[2]\n        elif N == 4:\n            val = row[3]\n        elif N == 5:\n            val = row[4]\n        elif N == 6:\n            val = row[5]\n        elif N == 7:\n            val = row[6]\n        elif N == 8:\n            val = row[7]\n        elif N == 9:\n            val = row[8]\n        elif N == 10:\n            val = row[9]\n        else:\n            continue\n        \n        # Update the maximum value\n        if val > max_val:\n            max_val = val\n    \n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    \n    # Find the number of columns in the matrix\n    n = len(test_list[0])\n    \n    # Initialize max_value to the first element in the nth column\n    max_value = test_list[0][N-1]\n    \n    # Loop through each row of the matrix and update max_value if the nth column element is greater\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    \n    # Return the max_value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize max_val with the first element of the first row of the matrix\n    max_val = test_list[0][0]\n\n    # Loop through the matrix and find the max of then'th column\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Get the length of the longest row in the matrix\n    max_row_length = len(test_list[0])\n\n    # Initialize an empty list to store the max values of each column\n    max_values = []\n\n    # Iterate through the columns of the matrix\n    for i in range(max_row_length):\n        max_value = float('-inf')\n\n        # Iterate through the rows of the matrix\n        for j in range(len(test_list)):\n            # Check if the value at the current row and column is greater than the current max value\n            if test_list[j][i] > max_value:\n                max_value = test_list[j][i]\n\n        # Append the current max value to the list of max values\n        max_values.append(max_value)\n\n    # Return the list of max values of each column\n    return max_values"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(max(test_list[i][j] for j in range(len(test_list[0])) if j!= N))\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Define the number of rows and columns in the matrix\n    rows = len(test_list)\n    cols = len(test_list[0])\n\n    # Check if the n is valid\n    if N > cols or N < 1:\n        print(\"Invalid input. n should be between 1 and the number of columns in the matrix.\")\n        return None\n\n    # Initialize an empty list to store the max values of then'th column for each row\n    max_list = []\n\n    # Loop through each row and find the max value of then'th column\n    for i in range(rows):\n        max_value = max(test_list[i][j] for j in range(cols) if j!= N-1)\n        max_list.append(max_value)\n\n    # Return the max list\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list[0])\n    max_value = 0\n    for i in range(n):\n        if test_list[0][i] > max_value:\n            max_value = test_list[0][i]\n        if i >= N:\n            max_value = 0\n        if max_value == 0:\n            break\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    This function takes in a matrix (represented as a list of lists) and a value N\n    and returns the maximum value of the Nth column of the matrix.\n\n    Args:\n        matrix (list of lists): A list of lists representing the matrix.\n        N (int): The column number (starting from 0) for which the maximum value is to be found.\n\n    Returns:\n        int: The maximum value of the Nth column of the matrix.\n    \"\"\"\n    # Initialize a variable to store the maximum value\n    max_val = matrix[0][N]\n\n    # Loop through each row of the matrix\n    for row in matrix:\n        # If the current element is greater than the current maximum value, update the maximum value\n        if row[N] > max_val:\n            max_val = row[N]\n\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(0, len(lst), 2):\n        merged_lst.append([lst[i][0], lst[i+1][0]])\n        merged_lst.append([lst[i][1], lst[i+1][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        first = sublist[0]\n        second = sublist[1]\n        merged = [first, second]\n        result.append(merged)\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []  \n    for sublist in lst:  \n        merged_list.append([sublist[0], sublist[1]])  \n    return merged_list  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    result = []\n\n    for i in range(0, len(lst), 2):  \n        temp = [lst[i][0], lst[i+1][0]]\n        result.append(temp)\n\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    \"\"\"\n    Merges two lists of lists, each containing two elements.\n\n    :param lst: A list of lists, where each sublist contains two elements.\n    :return: A list of two lists, where the first sublist contains the first element of each sublist and the second one contains the second.\n    \"\"\"\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append([sublist[0], sublist[1]])\n    return new_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    result = []  \n    for sublist in lst:  \n        if len(sublist) == 2:  \n            result.append([sublist[0], sublist[1]])  \n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            for j in range(len(test_list[i])):\n                cum_sum += test_list[i][j]\n        else:\n            cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize variables\n    cum_sum = 0\n    \n    # loop through the list of tuples\n    for tup in test_list:\n        # extract the values from the tuple\n        value = tup[0]\n        \n        # add the value to the cumulative sum\n        cum_sum += value\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to keep track of the cumulative sum\n    cumulative_sum = 0\n    \n    # loop through the tuple list\n    for num in test_list:\n        # add the current number to the cumulative sum\n        cumulative_sum += num\n    \n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            cumsum += sum(test_list[i])\n        elif isinstance(test_list[i], list):\n            cumsum += cummulative_sum(test_list[i])\n        else:\n            pass\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    cumsum = 0\n    for num in test_list:\n        cumsum += num\n\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            cum_sum += sum(test_list[i])\n        else:\n            cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num_tuple in nums:\n        sum_values = sum(num_tuple)\n        average = sum_values / len(num_tuple)\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # convert the tuple of tuples to a list of lists\n    nums = [list(num_tuple) for num_tuple in nums]\n    # calculate the average value for each tuple\n    averages = []\n    for num_list in nums:\n        total = sum(num_list)\n        average = total / len(num_list)\n        averages.append(average)\n    # convert the list of averages back to a tuple of tuples and return it\n    return tuple(tuple(averages) for averages in averages)"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        averages.append(total/len(tup))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the averages\n    avg_list = []\n    # loop through each tuple in the input tuple of tuples\n    for t in nums:\n        # calculate the sum of all values in the tuple\n        total = sum(t)\n        # calculate the average by dividing the sum by the number of values in the tuple\n        avg = total / len(t)\n        # append the average to the average list\n        avg_list.append(avg)\n    # return the average list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples as input and returns a list of average values for each tuple.\n    '''\n    # Convert the input tuple to a list of tuples\n    tup_list = list(nums)\n    # Initialize an empty list to store the average values\n    avg_list = []\n    # Loop through each tuple in the list\n    for tup in tup_list:\n        # Calculate the sum of the tuple elements\n        sum = sum(tup)\n        # Calculate the number of elements in the tuple\n        n = len(tup)\n        # Calculate the average value\n        avg = sum / n\n        # Add the average value to the list of average values\n        avg_list.append(avg)\n    # Return the list of average values\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        averages.append(sum(i)/len(i))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n\n    # Iterate over each tuple in the input tuple\n    for t in nums:\n        # Calculate the average of the tuple using the sum() and len() functions\n        avg = sum(t) / len(t)\n        # Add the average to the list of averages\n        averages.append(avg)\n\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for i in range(len(nums)):\n        avg = sum(nums[i]) / len(nums[i])\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        average = total / len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num in nums:\n        if len(num) > 0:\n            total = sum(num)\n            avg = total/len(num)\n            average_list.append(avg)\n        else:\n            average_list.append(0)\n    return average_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same length\")\n        return\n    \n    # Perform the element wise modulo operation\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n        \n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length!\")\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    # Initialize the result tuple\n    result_tup = ()\n    # Iterate over the elements of the two input tuples\n    for i in range(len(test_tup1)):\n        # Compute the modulo of the corresponding elements\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same length.\")\n    \n    # Perform element wise modulo\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += ((test_tup1[i] % test_tup2[i]),)\n    \n    return modulo_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    rows = d\n    cols = steps\n\n    # Check if the point is reachable from origin\n    if rows == 0 and cols == 0:\n        return 0\n\n    # Check if the point is reachable from origin\n    if rows == 0 and cols!= 0:\n        return 1\n\n    # Check if the point is reachable from origin\n    if rows!= 0 and cols == 0:\n        return 2\n\n    # Calculate the number of jumps required\n    jumps = 0\n    while rows > 0 and cols > 0:\n        if rows == d and cols == 1:\n            jumps += 1\n        elif rows == d and cols == 2:\n            jumps += 2\n        elif rows == d - 1 and cols == 1:\n            jumps += 1\n        elif rows == d - 1 and cols == 2:\n            jumps += 2\n        else:\n            if rows == d - 1:\n                rows = d - 1\n            else:\n                rows -= 1\n            cols -= 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    current_position = (0, 0)\n    steps_taken = 1\n    steps_left = steps\n    while steps_left > 0:\n        # check if the current position is the target point\n        if current_position == (d, 0):\n            return jumps + 1\n        # check if the current position is valid\n        if current_position[0] >= d:\n            steps_taken += 1\n            current_position = (current_position[0] - 1, current_position[1])\n            jumps += 1\n            steps_left -= 1\n        elif current_position[0] < 0:\n            steps_taken += 1\n            current_position = (current_position[0] + 1, current_position[1])\n            jumps += 1\n            steps_left -= 1\n        else:\n            steps_taken += 1\n            current_position = (current_position[0], current_position[1] - 1)\n            jumps += 1\n            steps_left -= 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    pos = 0\n    end_pos = d\n    \n    # Check if the end_pos is reachable or not\n    while end_pos >= 0 and pos <= steps:\n        # Update position\n        if end_pos >= pos:\n            end_pos -= 1\n        else:\n            pos += 1\n            \n        # Update jumps\n        jumps += 1\n        \n    # Check if the end_pos is reachable or not\n    while end_pos >= 0 and pos <= steps:\n        # Update position\n        if end_pos >= pos:\n            end_pos -= 1\n        else:\n            pos += 1\n            \n        # Update jumps\n        jumps += 1\n        \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps < d:\n        return -1\n    else:\n        # Initialize the number of jumps to be made for the first step\n        jumps = 1\n        \n        # Initialize the number of steps left\n        left_steps = steps - d\n        \n        # Initialize the index of the step to be taken\n        step_index = 1\n        \n        # Initialize the minimum number of jumps required\n        min_jumps = jumps\n        \n        # Loop while there are remaining steps left to be taken\n        while left_steps > 0:\n            \n            # Calculate the number of jumps required for the current step\n            jumps += 1\n            \n            # Update the remaining steps left and the index of the next step\n            left_steps -= 1\n            step_index += 1\n            \n            # Update the minimum number of jumps required if necessary\n            if jumps < min_jumps:\n                min_jumps = jumps\n        \n        # Return the minimum number of jumps required\n        return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    # initialize variables\n    current_x, current_y = 0, 0\n    jump_count = 0\n    last_x = 0\n    last_y = 0\n    # iterate through steps\n    for i in range(steps):\n        # move in x direction\n        if current_x + d <= steps - 1:\n            current_x += d\n            last_x = current_x\n        else:\n            current_x = steps - 1\n            last_x = current_x\n        # move in y direction\n        if current_y == 0:\n            current_y += 1\n            last_y = current_y\n        else:\n            current_y -= 1\n            last_y = current_y\n        # check if the point is at (d, 0)\n        if current_x == d and current_y == 0:\n            # check if the last point was at (0, 0)\n            if last_x == 0 and last_y == 0:\n                # return the number of jumps\n                return jump_count + 1\n            else:\n                # reset the position and count jumps\n                current_x = 0\n                current_y = 0\n                jump_count = 0\n    # point not found, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Check if the given length is less than or equal to 0 or greater than the number of steps\n    if steps <= 0 or steps > len(steps):\n        return -1\n\n    # Initialize the variables for the number of jumps required\n    jumps = 0\n    current_pos = 0\n\n    # Loop through the list of steps\n    while current_pos < len(steps):\n        if steps[current_pos] >= d:\n            current_pos += d - 1\n        else:\n            current_pos += 1\n\n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    dp = [[float('inf')] * (d+1) for _ in range(steps+1)]\n    for i in range(steps+1):\n        dp[i][0] = 0\n    for j in range(1, d+1):\n        dp[0][j] = 1\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-steps] + 1)\n    return dp[-1][0]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jump = 1 # number of jumps required\n    current = 0 # current position in 2d plane\n    end = d # point of interest (0, d)\n    \n    while current < end:\n        # check if current position is greater than or equal to end\n        if current >= end:\n            # add 1 to number of jumps required\n            jump += 1\n            # move to end of jump\n            current = end\n        else:\n            # move to the next position\n            current += 1\n    \n    return jump"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    current_pos = 0\n    jump_count = 0\n\n    # Iterate over steps\n    for i in range(steps):\n\n        # Calculate next position\n        next_pos = current_pos + d\n\n        # If next position is greater than or equal to 0 and less than number of rows in the grid, jump\n        if next_pos >= 0 and next_pos < len(grid):\n            jump_count += 1\n            current_pos = next_pos\n\n    # Return the number of jumps required\n    return jump_count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Check for the edge cases when steps is 0 or d is 0\n    if steps == 0 or d == 0:\n        return 0\n    \n    # Calculate the number of steps required to reach the origin\n    num_steps_origin = abs(d)\n    \n    # Calculate the number of steps required to reach the desired point\n    num_steps_desired = abs(d) - (d // abs(d))\n    \n    # Check if the desired number of steps is less than the number of steps required to reach the origin\n    if num_steps_desired < num_steps_origin:\n        return num_steps_desired\n    \n    # Check if the number of steps required to reach the origin is less than the number of steps required to reach the desired point\n    if num_steps_origin < num_steps_desired:\n        return num_steps_origin\n    \n    # Calculate the number of jumps required to reach the desired point\n    num_jumps_desired = num_steps_desired // steps\n    num_jumps_origin = num_steps_origin // steps\n    \n    # Check if the number of jumps required to reach the origin is less than the number of jumps required to reach the desired point\n    if num_jumps_origin < num_jumps_desired:\n        return num_jumps_origin\n    \n    # Return the minimum number of jumps required\n    return min(num_jumps_origin, num_jumps_desired)"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Lists have different lengths!\")\n        return\n\n    # Initialize a new list to store the result\n    result = []\n\n    # Divide each pair of elements of the lists\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as inputs and returns a new list where the elements are divided \n    between the corresponding elements of the two input lists.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as arguments and returns the result of dividing the first list with the second list element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Cannot divide by zero.\")\n            return\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: division by zero not allowed\")\n        else:\n            result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = re.findall(r'\\d+', test_str) # find all numbers in the string\n    if len(numbers) > 0:\n        for num in numbers:\n            test_str = test_str.replace(num, '') # remove all occurrences of numbers from the string\n        return test_str + numbers[0] # add the first number back at the end\n    else:\n        return test_str # if there are no numbers in the string, return the original string unchanged"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    return ''.join(nums) + test_str[test_str.find(nums[-1])+1:]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables for counting numbers and moving them to the end of the string\n    count = 0\n    move_count = 0\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, increment the count and move_count variables\n        if char.isdigit():\n            count += 1\n            move_count = max(move_count, count)\n        # if the character is not a number, set the count and move_count variables to zero\n        else:\n            count = 0\n            move_count = 0\n        # if the move_count is greater than 0, move the number to the end of the string\n        if move_count > 0:\n            # loop through each index from 0 to move_count-1 and swap characters at that index with the number character\n            for i in range(move_count):\n                test_str = test_str[:i] + char + test_str[i+1:]\n    # return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    alphabets = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n        elif char.isalpha():\n            alphabets.append(char)\n    return ''.join(alphabets + numbers)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    result = ''\n    num_found = False\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number\n        if char.isdigit():\n            # If the number has already been found\n            if num_found:\n                # Append the number to the result string\n                result += char\n            else:\n                # Set the flag to True\n                num_found = True\n        else:\n            # If the number has not been found\n            if num_found:\n                # Append the character to the result string\n                result += char\n    \n    # Return the result string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_regex = re.compile(r'\\d+')\n    num_list = num_regex.findall(test_str)\n    result_str = ''.join([char for char in test_str if char not in num_list])\n    result_str += ''.join(num_list)\n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    num_str_list = list(num_str)\n    num_str_list.sort(reverse=True)\n    num_str = ''.join(num_str_list)\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Split the given string into a list of characters\n    chars = list(test_str)\n    \n    # Initialize a flag to keep track of whether a number was found\n    num_found = False\n    \n    # Iterate over the characters\n    for i in range(len(chars)):\n        # If the character is a number, move it to the end of the list\n        if chars[i].isdigit():\n            num_found = True\n            chars.remove(chars[i])\n            chars.append(chars[i])\n            \n    # Return the modified string\n    return ''.join(chars)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize two empty lists to store the numbers and non-numbers in the string\n    num_list = []\n    non_num_list = []\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, add it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # If the character is not a number, add it to the non_num_list\n        else:\n            non_num_list.append(char)\n\n    # Join the two lists into a single string and return it\n    return ''.join(num_list) + ''.join(non_num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Define a variable to store the number of digits in the input string\n    count = 0\n    for char in test_str:\n        if char.isdigit():\n            count += 1\n    \n    # Define a variable to store the length of the input string\n    length = len(test_str)\n    \n    # Loop through the string and move all the digits to the end of the string\n    for i in range(length-1, -1, -1):\n        if test_str[i].isdigit():\n            # Move the digit to the end of the string\n            test_str = test_str[:i] + test_str[i+1:]\n    \n    # Return the modified string\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    largest_size = 1\n    \n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            largest_size += 1\n        else:\n            largest_size = 1\n    \n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [[1] * n for _ in range(n)]\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i][j] = dp[i - 1][j] + 1\n                if dp[i][j] > dp[i - 1][j]:\n                    dp[i][j] = dp[i - 1][j]\n\n    max_size = max(dp[n - 1])\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Create a set to store the divisors of each number\n    num_divisors = {num: [num % i for i in range(1, num+1) if num % i == 0] for num in a}\n\n    # Sort the numbers by their size of their largest divisor\n    sorted_nums = sorted(num_divisors, key=lambda x: -len(num_divisors[x]))\n\n    # Initialize the result with the size of the first number\n    result = len(sorted_nums[0])\n\n    # Iterate over the remaining numbers and find the largest subset that satisfies the condition\n    for num in sorted_nums[1:]:\n        if all(num % i == 0 for i in range(1, num+1) if num % i == 0):\n            result = max(result, len(num))\n\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    res = 1\n    max_size = 1\n    for i in range(n):\n        count = 1\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                count += 1\n            else:\n                break\n        if count > max_size:\n            max_size = count\n            res = count\n        elif count == max_size:\n            res = min(res, count)\n    return res"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables\n    start = 0\n    end = 1\n    count = 1\n    max_count = 1\n\n    # loop through the list\n    while end < len(a):\n        # check if the current number is divisible by the current subset\n        if a[end] % a[start] == 0:\n            count += 1\n        else:\n            # if the subset size is greater than the previous largest subset, update variables\n            if count > max_count:\n                start = end - count + 1\n                max_count = count\n\n            # reset the count to 1\n            count = 1\n\n        end += 1\n\n    # check if the last subset is divisible\n    if count > max_count:\n        start = end - count + 1\n        max_count = count\n\n    # return the largest subset size\n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)+1):\n            if a[i] % a[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Find the maximum value in the list\n    max_num = max(a)\n    \n    # Initialize a set to store the divisors of the maximum number\n    divisors = set()\n    \n    # Iterate through the list and check if each number is divisible by the maximum number\n    for num in a:\n        if num % max_num == 0:\n            divisors.add(max_num)\n            \n    # Find the size of the largest subset\n    largest_subset_size = len(divisors)\n    \n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    a.sort()\n\n    # Create a set to store the current subset size\n    subset_size = set()\n    for i in range(n):\n        # For each element in the list, check if it can be added to the current subset\n        for j in range(i+1, n):\n            # If it can, add its size to the subset size set\n            if a[i] % a[j] == 0:\n                subset_size.add(i-j+1)\n\n    # Find the largest subset size\n    largest = max(subset_size)\n\n    return largest\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the input list in non-decreasing order\n    a.sort()\n\n    # Initialize the variables\n    max_size = 0\n    current_size = 1\n    divisor = a[0]\n\n    # Iterate through the list\n    for i in range(1, len(a)):\n        if a[i] % divisor == 0:\n            current_size += 1\n        else:\n            divisor = a[i]\n            current_size = 1\n\n        if current_size > max_size:\n            max_size = current_size\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def find_divisible_pairs(arr):\n        pairs = []\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] % arr[j] == 0 and arr[j] % arr[i] == 0:\n                    pairs.append((arr[i], arr[j]))\n        return pairs\n\n    def find_max_subset(arr, pairs):\n        max_size = 0\n        subset = []\n        for pair in pairs:\n            if all(x % pair[0] == 0 and x % pair[1] == 0 for x in subset + [pair[0], pair[1]]):\n                max_size = max(max_size, len(subset) + 1)\n            if max_size == 0:\n                break\n            subset.append(pair[0])\n        return max_size\n\n    divisible_pairs = find_divisible_pairs(a)\n    max_subset_size = find_max_subset(a, divisible_pairs)\n    return max_subset_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # merge the two lists into a single list\n    merged_list = arr1 + arr2\n\n    # sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # find the median based on the length of the list\n    if len(sorted_list) % 2 == 0:\n        # even length list, median is the average of the two middle elements\n        mid1 = n // 2\n        mid2 = mid1 - 1\n        median = (sorted_list[mid1] + sorted_list[mid2]) / 2\n    else:\n        # odd length list, median is the middle element\n        mid = len(sorted_list) // 2\n        median = sorted_list[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both lists must be of same size.\")\n\n    mid = n // 2\n    arr1_sum = 0\n    arr2_sum = 0\n    for i in range(n):\n        arr1_sum += arr1[i]\n        arr2_sum += arr2[i]\n\n    if n % 2 == 0:\n        median = (arr1_sum - arr2_sum) / 2\n    else:\n        median = (arr1_sum - arr2_sum) / 2 + arr1[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # concatenate the two sorted lists\n    combined_list = arr1 + arr2\n    \n    # sort the combined list\n    combined_list.sort()\n    \n    # find the middle index of the combined list\n    middle_index = n // 2\n    \n    # if the combined list has an odd number of elements, \n    # return the element at the middle index\n    if n % 2 == 1:\n        return combined_list[middle_index]\n    \n    # if the combined list has an even number of elements, \n    # return the average of the elements at the two middle indices\n    else:\n        return (combined_list[middle_index-1] + combined_list[middle_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Concatenate both lists to one\n    combined_list = arr1 + arr2\n    \n    # Sort the combined list\n    combined_list.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        # If n is even, take the average of the two middle elements\n        median = (combined_list[n//2-1] + combined_list[n//2]) / 2\n    else:\n        # If n is odd, take the middle element\n        median = combined_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Sort the input lists\n    arr1.sort()\n    arr2.sort()\n\n    # Find the indices of the middle element of each list\n    mid1 = n // 2\n    mid2 = n // 2 + n % 2\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (arr1[mid1] + arr2[mid2-1]) / 2.0\n    else:\n        median = arr1[mid1]\n\n    # Return the median\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists\n    merged = arr1 + arr2\n    merged.sort()\n    \n    # find the median\n    mid = n // 2\n    if n % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2\n    else:\n        return merged[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1.sort()\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr1[mid - 1] + arr1[mid]) / 2\n    else:\n        return arr1[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    # concatenate the two sorted lists\n    arr = arr1 + arr2\n    arr.sort()\n\n    # find the median\n    median = arr[n]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes three parameters - arr1, arr2 and n, which are the sorted lists to find the median of.\n    It then uses the quickselect algorithm to find the median.\n    '''\n    \n    # Create two pointers, one at the beginning of each list\n    i = 0\n    j = 0\n    \n    # Initialize variables to keep track of the index of the median and the size of the median\n    k = n // 2\n    median_index = n // 2\n    median_size = 0\n    \n    # While we haven't found the median yet\n    while median_size < k:\n        \n        # Calculate the median of the two lists using the median of three technique\n        if (i + j) % 2 == 0:\n            median = (arr1[i] + arr2[j]) / 2\n        else:\n            median = arr1[i]\n        \n        # If the median is less than the kth element, move the j pointer to the right\n        if median < kth_element(arr2, median_index):\n            j += 1\n        elif median > kth_element(arr1, median_index):\n            i += 1\n        else:\n            median_size += 1\n            \n        # If the median is greater than the kth element, move the i pointer to the right\n        if median > kth_element(arr2, median_index):\n            i += 1\n        elif median < kth_element(arr1, median_index):\n            j += 1\n        else:\n            median_size += 1\n            \n    # Return the median index\n    return median_index"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Sort both arrays\n    arr1.sort()\n    arr2.sort()\n\n    # Find the median index\n    median_index = n // 2\n\n    # If the length of the array is odd, return the middle element\n    if n % 2 == 1:\n        return arr1[median_index]\n\n    # If the length of the array is even, return the average of the middle two elements\n    return (arr1[median_index - 1] + arr1[median_index]) / 2"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function takes a list of numbers and an integer `n` as input and returns a list of the `n`-th powers of each number in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string contains only uppercase letters.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Check if all characters are uppercase\n    for char in string:\n        if char not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            return False\n    # If all characters are uppercase, return True\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to check whether a given string is uppercase or not.\n    \"\"\"\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # get the length of the list\n    length = len(newList)\n    \n    # check if the list has at least two elements\n    if length < 2:\n        return newList\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # check if the input is a list\n    if not isinstance(newList, list):\n        print(\"The input is not a list.\")\n        return\n\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list has less than two elements.\")\n        return\n\n    # interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # check if the list is empty\n    if len(newList) == 0:\n        return newList\n\n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # check if the list has at least two elements\n    if length >= 2:\n        # swap the first and last element of the list\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n    else:\n        # print an error message if the list has less than two elements\n        print(\"Error: The list has less than two elements!\")\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Take the length of the list\n    length = len(newList)\n\n    # Check if the list has less than 2 elements\n    if length < 2:\n        return newList\n\n    # Swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return []\n    \n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList\n    \n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # recursively call the function on the new list\n    return swap_List(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Set the first element as the last element\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1: \n        # Swap the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Using Heron's formula to find the area of a triangle\n    area = (3 * r ** 2) / 4\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 2 * r\n    b = r\n    c = r\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the smallest diameter of the largest triangle that can be inscribed in a semicircle\n    a = r * math.tan(math.pi / 6)\n    # Find the area of the largest triangle inscribed in the semicircle\n    area = 2 * math.pi * r * math.sin(math.pi / 6)\n    # Find the area of the smallest triangle that can be inscribed in the remaining area\n    a_remaining = math.sqrt(r * r - area * area / 4)\n    # Find the area of the largest triangle that can be inscribed in the remaining area\n    area_largest = 2 * math.pi * a_remaining * math.sin(math.pi / 6)\n    # Find the area of the smallest triangle that can be inscribed in the remaining area\n    a_largest = math.sqrt(a_remaining * a_remaining - area_largest * area_largest / 4)\n    # Return the area of the largest triangle\n    return area_largest"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # use Heron's formula to find the area of the largest triangle that can be inscribed in a semicircle with radius r\n    s = (3 * r**2) / (4 * math.tan(math.pi/3))\n    area = math.sqrt(s * (s - r) * (s - 2*r))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Define the formula for the area of a triangle with sides of length a and b\n    # and base c:\n    # area = 0.5 * b * c\n    \n    # Define the formula for the area of a semicircle with radius r and center (0,0):\n    # area = pi * r^2\n    \n    # Find the semi-perimeter (half the perimeter)\n    s = 2 * r\n    \n    # Find the area of the smallest triangle that can be inscribed in the semicircle\n    a = s / 2\n    b = s * math.sqrt(3) / 4\n    c = s / 2\n    \n    area = 0.5 * b * c\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    import math\n\n    # Calculate semi-circle area\n    area = math.pi * (r ** 2)\n\n    # Calculate area of triangle using Heron's formula\n    s = (3 * r ** 2) ** 0.5\n    area_of_triangle = (s * (s - r) * (s - r) * (s - r)) ** 0.5\n\n    # Find the area of the largest triangle that can be inscribed in the semi-circle\n    largest_triangle_area = area - area_of_triangle\n\n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Find the semi-circle radius\n    semi_circle_r = 2 * r\n    # Find the area of a right triangle with the given semi-circle radius\n    right_triangle_area = (3 * r**2) / 4\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    largest_triangle_area = (right_triangle_area * semi_circle_r) / (2 * (semi_circle_r - r))\n    \n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a Python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # find the area of a right triangle with sides of length r\n    area = 0.5 * r * r\n    print(\"The area of a right triangle with sides of length r is:\", area)\n\n    # find the area of a triangle with sides of length sqrt(2)r\n    area = 0.5 * r * r\n    area += 0.5 * (r * r)\n    area = area ** 0.5\n    print(\"The area of a triangle with sides of length sqrt(2)r is:\", area)\n\n    # find the area of a triangle with sides of length sqrt(3)r\n    area = 1/3 * r * r * r\n    print(\"The area of a triangle with sides of length sqrt(3)r is:\", area)\n\n    # find the area of a triangle with sides of length 2r\n    area = 1/2 * r * r * r\n    print(\"The area of a triangle with sides of length 2r is:\", area)\n\n    # find the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = max(area, 0.5 * r * r)\n    print(\"The area of the largest triangle that can be inscribed in a semicircle with radius r is:\", area)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = math.sqrt(r**2 - math.sqrt(2))\n    b = r - a\n    c = math.sqrt(2)\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    semicircle_perimeter = 2 * math.pi * r\n    \n    # Calculate the area of a triangle with sides of length 1\n    triangle_area = math.sqrt(3) / 4\n    \n    # Calculate the area of the largest possible triangle that can be inscribed in the semicircle\n    largest_triangle_area = math.sqrt(3) / 4 * semicircle_perimeter / 2\n    \n    # Return the largest possible triangle area\n    return largest_triangle_area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i] == i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A list of natural numbers that is sorted in ascending order.\n        start (int): The starting index of the search range. Defaults to 0.\n        end (int): The ending index of the search range. Defaults to None, which means all elements in the array will be searched.\n\n    Returns:\n        int: The smallest missing number from the sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n    array (list): A sorted list of natural numbers.\n    start (int): The starting index of the search range.\n    end (int): The ending index of the search range.\n\n    Returns:\n    int: The smallest missing number in the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] - i!= 0:\n            return i\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # check if the array is sorted\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i] > array[i+1]:\n            return array[i+1]\n    return array[end]+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] < mid:\n            start = mid + 1\n        elif array[mid] > mid:\n            end = mid - 1\n        else:\n            return mid\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    This function takes a sorted list of natural numbers and returns the smallest missing number in the list.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i + 1 not in array and i not in array:\n            return i + 1\n\n    return end + 1 + start"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list: \n        if num % 2 == 0: \n            even_nums.append(num) \n    return even_nums "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0: \n        adj.append((x-1,y))\n    if x < n-1: \n        adj.append((x+1,y))\n    if y > 0: \n        adj.append((x,y-1))\n    if y < m-1: \n        adj.append((x,y+1))\n    for i in range(len(sub)): \n        adj.append(sub[i])\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        sub.append((x-1, y))\n    if x < len(grid)-1:\n        sub.append((x+1, y))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < len(grid[0])-1:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    if x - 1 >= 0 and y - 1 >= 0:\n        adjacent.append((x - 1, y - 1))\n    if x - 1 >= 0:\n        adjacent.append((x - 1, y))\n    if x - 1 >= 0 and y + 1 < 10:\n        adjacent.append((x - 1, y + 1))\n    if x + 1 < 10 and y - 1 >= 0:\n        adjacent.append((x + 1, y - 1))\n    if x + 1 < 10:\n        adjacent.append((x + 1, y))\n    if x + 1 < 10 and y + 1 < 10:\n        adjacent.append((x + 1, y + 1))\n    if y - 1 >= 0:\n        adjacent.append((x, y - 1))\n    if y + 1 < 10:\n        adjacent.append((x, y + 1))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0 and y > 0:\n        adj.append((x-1, y-1))\n    if x > 0:\n        adj.append((x-1, y))\n    if x > 0 and y < 3:\n        adj.append((x-1, y+1))\n    if x < 3 and y > 0:\n        adj.append((x+1, y-1))\n    if x < 3:\n        adj.append((x+1, y))\n    if x < 3 and y < 3:\n        adj.append((x+1, y+1))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 3:\n        adj.append((x, y+1))\n    if len(sub) > 0:\n        for s in sub:\n            if (x-s[0], y-s[1]) not in adj:\n                adj.append((x-s[0], y-s[1]))\n            if (x+s[0], y+s[1]) not in adj:\n                adj.append((x+s[0], y+s[1]))\n            if (x-s[1], y+s[0]) not in adj:\n                adj.append((x-s[1], y+s[0]))\n            if (x+s[1], y-s[0]) not in adj:\n                adj.append((x+s[1], y-s[0]))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i, j = ele\n    if i == 0 or j == 0:\n        return sub\n    else:\n        sub.append((i-1, j))\n        sub.append((i+1, j))\n        sub.append((i, j-1))\n        sub.append((i, j+1))\n        return adjac((i-1, j), sub)"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a tuple as input and returns a list of tuples containing the adjacent coordinates.\n    '''\n    x, y = ele\n    sub.append((x, y))\n    if y > 0:\n        sub.append((x, y-1))\n    if x > 0:\n        sub.append((x-1, y))\n    if x < (len(grid)-1):\n        sub.append((x+1, y))\n    if y < (len(grid[0])-1):\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=None):\n    '''\n    This function takes a coordinate tuple as input and returns a list of all its adjacent coordinates.\n    \n    :param ele: coordinate tuple\n    :type ele: tuple\n    :param sub: sublist to append adjacent coordinates to (default: None)\n    :type sub: list\n    :return: list of adjacent coordinates\n    :rtype: list\n    '''\n    if sub is None:\n        sub = []\n    x, y = ele\n    adj = []\n    # iterate over all possible adjacent coordinates\n    for dx in range(-1, 2):\n        for dy in range(-1, 2):\n            # if adjacent coordinate is within range, add it to the sublist and its coordinates\n            if 0 <= x+dx < len(ele[0]) and 0 <= y+dy < len(ele[1]):\n                sub.append((x+dx, y+dy))\n                adj.append((x+dx, y+dy))\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x+1, y))\n    sub.append((x-1, y))\n    sub.append((x, y+1))\n    sub.append((x, y-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent = []\n    for i in range(-1,2):\n        for j in range(-1,2):\n            if i!=0 or j!=0:\n                x, y = ele[0]+i, ele[1]+j\n                if x>=0 and x<10 and y>=0 and y<10:\n                    adjacent.append((x,y))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    \n    # get all the adjacent x coordinates\n    adj_x = [x+1, x-1]\n    # get all the adjacent y coordinates\n    adj_y = [y+1, y-1]\n    \n    # return the adjacent coordinates as a list\n    return adj_x + adj_y + sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces =''\n    underscore = '_'\n    text = text.replace(spaces, underscore)\n    text = text.replace(underscore, spaces)\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    return text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Split the string into words\n    words = text.split()\n\n    # Replace spaces with underscores\n    new_words = [word.replace(\" \", \"_\") for word in words]\n\n    # Join the words with underscores\n    new_text = \" \".join(new_words)\n\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    space_to_underscore = str.maketrans(\" \", \"_\")\n    underscore_to_space = str.maketrans(\"_\", \" \")\n    \n    # Replace spaces with underscores\n    text = text.translate(space_to_underscore)\n    \n    # Replace underscores with spaces\n    text = text.translate(underscore_to_space)\n    \n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    space_re = r'\\s+' # regular expression for finding multiple whitespace characters\n    underscore_re = r'_+' # regular expression for finding multiple underscore characters\n    text = text.replace(space_re, '_').replace(underscore_re,'')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace all whitespaces with underscores\n    text = text.replace(' ', '_')\n    # replace all underscores with whitespaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for char in text:\n        if char =='':\n            text = text.replace(' ', '_')\n        elif char == '_':\n            text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace underscores with spaces\n    text = text.replace('_','')\n    \n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n            zero_index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize two pointers to the start of the list and the end of the list\n    i = 0\n    j = len(num_list) - 1\n\n    # iterate through the list until the pointers meet\n    while i < j:\n        # if the element at the current index is zero, swap it with the element at the other index\n        if num_list[i] == 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n        # move the pointers to the next index\n        i += 1\n        j -= 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # Loop through the list and move all zeroes to the end\n    for i in range(len(num_list) - 1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n\n    # Loop through the list and move all zeroes to the end\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_indices = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_indices.append(i)\n\n    for i in range(len(num_list)-1, -1, -1):\n        if i in zero_indices:\n            num_list.pop(i)\n        else:\n            break\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers and moves all the zeroes to the end of the list.\n    \"\"\"\n    # Create a copy of the list\n    new_list = num_list.copy()\n    # Initialize two pointers for the two halves of the list\n    i, j = 0, len(new_list) - 1\n    # Iterate through the list from both ends\n    while i <= j:\n        # Check if the current element is zero\n        if new_list[i] == 0:\n            # Move it to the end of the list\n            new_list[i], new_list[j] = new_list[j], new_list[i]\n            # Decrement the value of j since we have moved it one position to the right\n            j -= 1\n        # Increment the value of i since we have moved it one position to the left\n        i += 1\n    # Return the modified list\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n\n    Args:\n        arr (list): A list of integers.\n        n (int): The length of the list.\n\n    Returns:\n        int: The sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            sum ^= arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and a number n as inputs and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    # XOR operation\n    xor = 0\n\n    # loop through each pair of elements\n    for i in range(n):\n        for j in range(i+1,n):\n            # calculate the xor of the current pair of elements\n            xor = xor ^ arr[i] ^ arr[j]\n\n    # return the sum of xor of all pairs of elements\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    This function takes a list of integers and its length n as input and returns the sum of xor of all pairs of numbers in the list.\n\n    Parameters:\n    arr (list): list of integers\n    n (int): length of the list\n\n    Returns:\n    int: sum of xor of all pairs of numbers in the list\n    \"\"\"\n\n    # XOR of all the numbers in the list\n    xor_sum = sum([x^y for x,y in zip(arr,arr[1:])])\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize variables to store the sum and xor of pairs\n    xor_sum = 0\n    xor_value = 0\n\n    # iterate through the list of numbers and calculate the xor of pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_value = arr[i] ^ arr[j]\n            xor_sum += xor_value\n\n    # return the sum of xor of pairs\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n\n    :param arr: list of integers\n    :param n: length of the list\n\n    :return: sum of xor of all pairs of numbers in the given list\n    \"\"\"\n\n    # XOR operation to find the sum of xor of all pairs of numbers in the given list\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a max heap\n    max_heap = [heapq.nlargest(1, iterable)]\n    # Remove the largest element from the heap and add it to the sorted list\n    for _ in range(len(iterable) - 1):\n        max_heap.append(heapq.nlargest(1, max_heap[-1]))\n        max_heap.pop(0)\n    return max_heap[0]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap using a min heap\n    heap = hq.heapify(iterable)\n    # Extract items from the heap in sorted order\n    sorted_items = []\n    while heap:\n        sorted_items.append(hq.heappop(heap))\n    # Return the sorted items\n    return sorted_items"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    for i in range(n//2-1, -1, -1):\n        hq.heapify(iterable, i, n)\n\n    for i in range(n-1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        hq.heapify(iterable, 0, i)\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the iterable into a list\n    arr = list(iterable)\n\n    # Build a max heap from the array\n    hq.heapify(arr)\n\n    # Sort the array using heap sort\n    for i in range(len(arr)-1, 0, -1):\n        hq.heapreplace(arr, arr[i])\n\n    # Convert the sorted array back to an iterable and return it\n    return arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a list of tuples, where each tuple contains a value and its index in the list\n    values_and_indices = [(value, index) for index, value in enumerate(iterable)]\n    # Build a max-heap from the list of tuples\n    hq.heapify(values_and_indices)\n    # Extract the maximum value and its index from the heap, and append it to a new list\n    sorted_list = []\n    while values_and_indices:\n        value, index = hq.heappop(values_and_indices)\n        sorted_list.append(value)\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    n = len(iterable)\n    # Build max heap\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n    # Extract elements from heap one by one\n    for i in range(n - 1, 0, -1):\n        # Move current root to end\n        hq.heapify(iterable, 0, i)\n        # Extract maximum element\n        iterable[0], iterable[i] = iterable[i], iterable[0]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list(iterable)\n    for i in range(len(heap) // 2 - 1, -1, -1):\n        hq.heapify(heap, i, len(heap))\n    for i in range(len(heap) - 1, 0, -1):\n        hq.heapreplace(heap, heap[i])\n        heap[0], heap[i] = heap[i], heap[0]\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Converting the list to a heap\n    hq.heapify(iterable)\n\n    # Sorting the heap using heapsort function from heapq module\n    hq.heapsort(iterable)\n\n    # Printing the sorted list\n    print(\"Sorted List:\", iterable)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount: \n        return True\n    elif actual_cost > sale_amount: \n        return False\n    else: \n        print(\"Invalid input. Actual cost cannot be equal to sale amount\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount == actual_cost:\n        return True\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    if profit < 0 or loss < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount >= actual_cost:\n        print(\"Sale amount is greater than or equal to the actual cost\")\n        return True\n    else:\n        print(\"Sale amount is less than the actual cost\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments: actual_cost and sale_amount. \n    It checks whether the given amount has no profit and no loss, \n    i.e., whether the actual cost is greater than or equal to the sale amount.\n    If yes, the function returns True, otherwise False.\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost <= sale_amount:\n        print(\"The amount has no profit and no loss\")\n        return True\n    else:\n        print(\"The amount does not have no profit and no loss\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost == sale_amount:\n        return True\n    elif sale_amount > actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return noprofit_noloss(sale_amount, actual_cost)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= 0 or sale_amount <= 0:\n        return False\n    \n    if actual_cost >= sale_amount:\n        return True\n    \n    profit = sale_amount - actual_cost\n    \n    if profit <= 0:\n        return True\n    \n    return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_in_mph = v * 1.60934\n    wind_speed_in_m_per_s = wind_speed_in_mph * 0.44704\n    \n    # calculating the wind chill temperature\n    wind_chill_temp = 25.0 * math.log10(wind_speed_in_m_per_s) + 32.0\n    \n    # calculating the temperature difference\n    temp_diff = (wind_chill_temp - t)\n    \n    # calculating the temperature difference in Fahrenheit\n    temp_diff_in_fahrenheit = temp_diff * 1.8 + 32.0\n    \n    # calculating the wind chill index\n    wind_chill_index = round(temp_diff_in_fahrenheit / 10.0)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    :param v: float, wind velocity in km/h\n    :param t: float, temperature in celsius\n    :return: int, wind chill index rounded to the next integer\n    \"\"\"\n    # convert wind speed to m/s\n    v_mps = v * 1.609344\n\n    # calculate the dew point temperature\n    dew_point = math.fsum([26.75, 0.0065, t - 32, 17.625, 0.004])\n\n    # calculate the wind chill index\n    wc = 35.74 + 0.6215 * v_mps - 35.75 * math.exp((17.625 - dew_point) / 17.625) + 0.4275 * math.exp((243.04 - dew_point) / 17.625)\n\n    # round the wind chill index to the nearest integer\n    wc_int = math.ceil(wc)\n\n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index using the given formula.\n    '''\n    a = 13.12 + 0.6215 * t - 11.37 * math.pow(t, 2) + 0.3965 * math.pow(t, 3)\n    b = -0.1461 * v + 2.37 * math.pow(v, 2) - 0.1262 * math.pow(v, 3) + 0.0012 * math.pow(v, 4)\n    c = 8.314 * math.exp(17.625 * t / (237.3 + t))\n    d = a * c / (b + c)\n    wind_chill_index = round(d)\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    v (float): The wind velocity in km/h.\n    t (float): The temperature in celsius.\n\n    Returns:\n    int: The wind chill index rounded to the next integer.\n\n    \"\"\"\n    k = 1.3\n    c = 0.6219718\n    return round(k * (math.exp((17.27 * t) / (t + 237.3)) - math.exp((17.27 * t) / (t + 237.3))**2))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (t - 273.15)*(1/0.6219718) + 35.74\n    chill = math.floor(chill)\n    return chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    tc = t + 273.15\n    r = 287.05\n    k = 0.621971694918\n    a = 1.75006\n    b = 0.00686907\n\n    if v <= 10:\n        w = 13.12 + 0.6215 * v + 11.37 * math.log(v) - 0.3965 * t\n        w = max(w, 0)\n        w = min(w, 100)\n        w = round(w)\n    else:\n        w = 13.12 + 0.6215 * 10 + 11.37 * math.log(10) - 0.3965 * tc\n        w = max(w, 0)\n        w = min(w, 100)\n        w = round(w)\n\n    return w"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_degree_c = (v * 1.609344) / 2.237\n    temp_degree_c = t - 273.15\n    wind_speed_degree_f = (wind_speed_degree_c * 1.8) + 32\n    temp_degree_f = (temp_degree_c * 1.8) + 32\n    \n    if wind_speed_degree_f > 96:\n        return math.ceil(96)\n    elif wind_speed_degree_f <= 0:\n        return math.ceil(0)\n    else:\n        if temp_degree_f >= 80:\n            return math.ceil(wind_speed_degree_f * (13.12 + (0.6215 * temp_degree_f) + (11.37 * (temp_degree_f ** 2)) - (0.3965 * (temp_degree_f ** 2)) ** 2))\n        else:\n            return math.ceil(wind_speed_degree_f * (13.12 + (0.6215 * temp_degree_f) + (11.37 * (temp_degree_f ** 2)) - (0.3965 * (temp_degree_f ** 2)) ** 2))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    T = t + 273.15 # Convert celsius to kelvin\n    # Calculating the speed of sound at 0C\n    c = 343.3 + 0.611*T # In kelvin\n    # Calculate the speed of sound at the temperature\n    c_t = c + 0.0065*T - 35.75*math.pow(t,2) + 0.00122*T*math.pow(v,2) - 0.00000866*T*math.pow(v,3) + 0.0000001267*math.pow(T,2)*math.pow(v,2) - 0.00000000017*math.pow(T,3)*math.pow(v,2) + 0.0000000000025*math.pow(T,2)*math.pow(v,3)\n    # Calculate the heat index\n    hi = 0.5*c_t + 8.314*(273.15 - T)\n    # Calculate the wind chill index\n    wci = hi - 273.15\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Calculate the wind chill index using the formula\n    wc = math.floor(13.12 + 0.6215*t - 11.37*math.log(v) + 0.3965*t*math.log(v))\n    \n    # Round the result to the nearest integer\n    wc_rounded = int(math.ceil(wc))\n    \n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Formula: -459.67 + 35.75 * T + 0.6215 * T**2 - 11.37 * T**3 + 0.3965 * T**4\n    # Round to the nearest integer\n    return round(-459.67 + 35.75 * t + 0.6215 * t**2 - 11.37 * t**3 + 0.3965 * t**4)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_lengths = []\n    for name in sample_names:\n        if not name.startswith(name[0].upper()):\n            name_lengths.append(len(name))\n    return sum(name_lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # remove lowercase names from the list\n    lowercase_names = [name for name in sample_names if name[0].isupper()]\n    # sum the lengths of the remaining names\n    total_length = sum([len(name) for name in lowercase_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Remove names that start with a lowercase letter\n    sample_names = [name for name in sample_names if not name.startswith(name[0].upper())]\n\n    # Calculate the sum of the lengths of the remaining names\n    sum_length = sum([len(name) for name in sample_names])\n\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    count = 0\n    for name in sample_names:\n        if not name[0].islower():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].islower() == False:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_parenthesis(items):\n    pattern = re.compile(r'\\((.*?)\\)')\n    result = re.sub(pattern, r'\\1', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    # remove the parenthesis\n    pattern = r'\\((.*?)\\)'\n    items = re.sub(pattern, r'\\1', items)\n    # remove what is inbetween them\n    items = re.sub(r'\\(.*?\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_parenthesis(items):\n    # Remove all occurrences of parenthesis and what's between them\n    pattern = re.compile(r'\\([^()]*\\)')\n    items = pattern.sub('', items)\n    # Remove any leading or trailing whitespace\n    items = items.strip()\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    result = re.sub(pattern, r'\\1', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)') # regex pattern to match parenthesis\n    result = pattern.sub('', items) # substitute the parenthesis with an empty string\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)') # regex pattern to match parenthesis\n    return pattern.sub('', items) # replace matched pattern with an empty string"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*?\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^\\)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = r'\\([^)]*\\)'\n    new_string = re.sub(regex, '', items)\n    return new_string"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n+1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize a variable to store the sum of squares of odd numbers from 1 to n\n    sum_of_squares = 0\n\n    # Loop through all odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # Calculate the square of the current odd number and add it to the sum of squares\n        sum_of_squares += i*i\n\n    # Return the sum of squares divided by 4\n    return sum_of_squares / 4"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4 * is_nonagonal(n-1) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n % 2 == 0:\n        return 0\n    else:\n        return (1 + 4*n + 2*n**2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = 1\n    while i <= n:\n        j += i\n        i += 1\n    return j"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # first check if n is positive integer\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # initialize variable for sum of nonagonal numbers\n    sum_nonagonal = 0\n\n    # loop through the numbers from 1 to n-1\n    for i in range(1, n):\n        # if i is even, add i^2 to sum_nonagonal\n        if i % 2 == 0:\n            sum_nonagonal += i**2\n\n    # return sum_nonagonal\n    return sum_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = n - 1\n    while i < j:\n        if i == 1 or j == n-1:\n            return False\n        if i % 2 == 0:\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j += 1\n    return True\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # base case: n=0 or n=1, so n^2 is the nth nonagonal number\n    if n == 0 or n == 1:\n        return n * (n + 1)\n    # recursive case: n^2 is the (n-1)th nonagonal number plus the (n-2)th nonagonal number\n    else:\n        return is_nonagonal(n - 1) + is_nonagonal(n - 2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    c = a + b\n\n    for i in range(1, n):\n        d = a + b\n        a = b\n        b = c\n        c = d\n\n    return c\n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The {}th nonagonal number is: {}\".format(n, is_nonagonal(n)))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Define the number of sides\n    sides = n * (n + 1) // 2\n    # Define the center of the polygon\n    center = sides // 2\n    # Define the first side of the polygon\n    first_side = (n * (n + 1)) // 2\n    # Define the increment of the sides\n    side_increment = (2 * (n + 1)) // 2\n    # Define the increment of the angle\n    angle_increment = 2 * sides // (n * (n + 1))\n    # Initialize the result to 0\n    result = 0\n    # Loop through the polygon\n    for i in range(n):\n        # Compute the coordinates of the i-th side\n        x = i + 1\n        y = center + (i * side_increment)\n        # Compute the angle of the i-th side\n        angle = angle_increment * (i + 1)\n        # Compute the length of the i-th side\n        side = center - y\n        # Compute the x and y coordinates of the intersection point of the i-th side with the x-axis\n        intersection_x = side * math.sin(angle) + x\n        intersection_y = side * math.cos(angle) + y\n        # Check if the intersection point is within the polygon\n        if intersection_x >= first_side and intersection_x <= sides:\n            result += 1\n    return result"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<!\\w)z(?!\\w)' # Lookbehind to ensure the word does not start with 'z', and lookahead to ensure the word does not end with 'z'.\n    return bool(re.search(pattern, text)) # Check if there is a match using the regex pattern."
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_pattern = r'\\b\\w+\\b' # match any word character\n    word_match = re.findall(word_pattern, text)\n    for word in word_match:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z' except at the start and end of a word.\n    \"\"\"\n    pattern = r'(?<![a-zA-Z])[zZ](?![a-zA-Z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_pattern = r'\\b\\w+z\\w+\\b'\n    return bool(re.search(word_pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    z_pattern = r'(?<!\\w)z(?!\\w)'\n    return re.findall(z_pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Replace all non-letter characters with whitespace\n    pattern = r'[^a-zA-Z\\s]'\n    text = re.sub(pattern,'', text)\n\n    # Split the text into words and count the number of 'z' in the middle of each word\n    words = text.split()\n    num_z = 0\n    for i in range(len(words)):\n        if i == 0 or i == len(words) - 1:\n            # If the word is at the start or end of the string, check if it contains 'z'\n            if 'z' in words[i]:\n                num_z += 1\n        else:\n            # If the word is not at the start or end of the string, check if it contains 'z'\n            if 'z' in words[i] and 'z' in words[i-1] and 'z' in words[i+1]:\n                num_z += 1\n\n    # Check if the number of 'z' in the middle of each word is odd\n    if num_z % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b[a-zA-Z]+\\b', text)\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)(z)(?!\\w)'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?:z|[^z])\\w*\\b'\n    matches = re.findall(pattern, text)\n    return len(matches)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Reverse the array from index 0 to k-1\n    input[:k] = input[:k][::-1]\n    \n    # Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n    \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # create an empty list to store the reversed part of the array\n    reversed_array = []\n    # loop through the input array from index 0 to k-1\n    for i in range(k):\n        # append the input array element at index i to the reversed_array\n        reversed_array.append(input[i])\n    # loop through the input array from index k to the end of the array\n    for i in range(k, len(input)):\n        # append the input array element at index i to the reversed_array\n        reversed_array.append(input[i])\n    # return the reversed_array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Reverse the array from start to k-1\n    input[:k] = input[:k][::-1]\n    \n    # Reverse the array from k to end\n    input[k:] = input[k:][::-1]\n    \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k >= n:\n        return input\n\n    temp = []\n    for i in range(k, n):\n        temp.append(input[i])\n\n    for i in range(k-1, -1, -1):\n        input[i] = temp[i-k]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Reverse the first k elements of the array\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # Reverse the remaining elements of the array\n    for i in range(k, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Finding the length of the array\n    n = len(input)\n    \n    # Reversing the array from the last k elements to the end\n    input[0:k] = input[0:k][::-1]\n    \n    # Reversing the array from the beginning to the last k-1 elements\n    input[k-1:0:-1] = input[k-1:0:-1][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k):\n        input[i], input[-i-1] = input[-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements of the array\n    for i in range(k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n\n    # Reverse the remaining elements of the array\n    for i in range(k, len(input)):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from index 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # reverse all the elements except the first k elements\n    for i in range(k, n): \n        input[i], input[i-k] = input[i-k], input[i] \n    # reverse the first k elements\n    for i in range(k): \n        input[i], input[k-1-i] = input[k-1-i], input[i] \n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Concatenate the tuple and the dictionary\n    test_dict_tup = tuple(test_dict.items())\n    # Concatenate the tuple and the dictionary\n    test_tup_dict = tuple(test_tup + test_dict_tup)\n    # Return the concatenated tuple\n    return test_tup_dict"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Update the tuple with the dictionary\n    test_tup += (test_dict,)\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + tuple(test_dict.values())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Combine the two dictionaries into one\n    combined_dict = {**test_dict, **test_tup[1]}\n    # Convert the combined dictionary into a tuple\n    new_tup = (test_tup[0], combined_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    max_avg = 0\n    total_cost = 0\n    num_cells = 0\n\n    # Iterate through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n\n            # Skip visited cells and cells that are not part of the path\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                if cost[i][j] > cost[i][j-1]:\n                    continue\n            if j == 0:\n                if cost[i][j] > cost[i-1][j]:\n                    continue\n\n            # Calculate the cost of this cell and update the total cost and num_cells\n            cost_cell = cost[i][j] + min(cost[i-1][j], cost[i][j-1])\n            total_cost += cost_cell\n            num_cells += 2\n\n            # Update the maximum average if necessary\n            if cost_cell > max_avg:\n                max_avg = cost_cell\n\n    # Return the maximum average\n    return max_avg / num_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Initialize variables for storing the maximum path and its average\n    max_path = []\n    max_avg = float('-inf')\n    # For each cell in the cost matrix\n    for i in range(n):\n        for j in range(n):\n            # If the cell is empty, move to the next cell\n            if cost[i][j] == float('-inf'):\n                continue\n            # Calculate the average of the previous path and the current cell\n            avg = (sum(cost[k][j] for k in range(i+1)) + sum(cost[i][l] for l in range(j+1, n)) - sum(cost[k][l] for k in range(i+1) for l in range(j+1, n))) / (n*(n-1)//2)\n            # Update the maximum path and its average if the average is greater than the current maximum\n            if avg > max_avg:\n                max_avg = avg\n                max_path = [i, j]\n                # Recursively find the maximum path with the current cell as the last cell\n                max_avg = maxAverageOfPath(cost[:i] + [[float('-inf')]] + cost[i+1:])\n            # If the average is equal to the current maximum, add the current cell to the path and continue to the next cell\n            else:\n                max_path.append(i)\n    return max_avg, max_path[::-1]"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n    max_avg = 0\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n        max_avg = max(max_avg, cost[i][i])\n    for k in range(1, N):\n        for i in range(N-k):\n            j = i + k\n            dp[i][j] = max(dp[i+1][j], dp[i][j-1]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg / (N**2 - 1)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1]) + cost[i][j]\n            elif j == 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i][j], dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            if i == N-1 and j == N-1:\n                max_avg = max(max_avg, dp[i][j])\n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    max_avg = 0\n    \n    # Fill the first row and column of dp\n    for i in range(n):\n        dp[0][i] = dp[i][0] = cost[0][i]\n        max_avg = max(max_avg, cost[0][i])\n    \n    # Fill the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            if cost[i][j] > cost[i-1][j]:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n                max_avg = max(max_avg, dp[i][j])\n            else:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n                max_avg = max(max_avg, dp[i][j])\n    \n    # Return the maximum average\n    return max_avg / (n*n)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    # Initialize variables\n    N = len(cost)\n    max_avg = float('-inf')\n    paths = set()\n\n    # Generate all possible paths\n    for i in range(N):\n        for j in range(N):\n            if (i == 0 or j == 0) and cost[i][j] > 0:\n                paths.add((i, j))\n\n    # Calculate the maximum average over all paths\n    for path in paths:\n        total_cost = 0\n        visited_cells = 1\n        i, j = path\n        while i < N - 1:\n            total_cost += cost[i][j]\n            i += 1\n            j += 1\n            visited_cells += 1\n        while i < N:\n            total_cost += cost[i][j]\n            i += 1\n            visited_cells += 1\n        while j < N - 1:\n            total_cost += cost[i][j]\n            j += 1\n            visited_cells += 1\n        while j < N:\n            total_cost += cost[i][j]\n            j += 1\n            visited_cells += 1\n        avg_cost = total_cost / visited_cells\n        if avg_cost > max_avg:\n            max_avg = avg_cost\n\n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Find the maximum sum of paths\n    max_sum = float('-inf')\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i == 0 and j == 0:\n                continue\n            if i == 0 and j < len(cost[0]) - 1:\n                max_sum = max(max_sum, cost[i][j] + maxAverageOfPath(cost[i+1:]))\n            elif i < len(cost) - 1 and j == 0:\n                max_sum = max(max_sum, cost[i][j] + maxAverageOfPath([row[j+1:] for row in cost[i+1:]]))\n            elif i < len(cost) - 1 and j < len(cost[0]) - 1:\n                max_sum = max(max_sum, cost[i][j] + max(maxAverageOfPath(cost[i+1:]), maxAverageOfPath([row[j+1:] for row in cost[i+1:]])))\n    return max_sum"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(i, j, current_path, current_cost, total_cost, visited):\n        if i == N-1 and j == N-1:\n            visited.append(True)\n            return total_cost/sum(visited)\n\n        if i < 0 or j < 0 or i >= N or j >= N:\n            return 0\n\n        if visited[i*N+j]:\n            return 0\n\n        visited[i*N+j] = True\n        total_cost += cost[i][j]\n        current_cost += cost[i][j]\n\n        if i < N-1:\n            current_path.append((i+1, j))\n            new_avg = dfs(i+1, j, current_path, current_cost, total_cost, visited)\n            current_path.pop()\n            total_cost -= cost[i][j]\n            current_cost -= cost[i][j]\n            if new_avg > avg:\n                avg = new_avg\n\n        if j < N-1:\n            current_path.append((i, j+1))\n            new_avg = dfs(i, j+1, current_path, current_cost, total_cost, visited)\n            current_path.pop()\n            total_cost -= cost[i][j]\n            current_cost -= cost[i][j]\n            if new_avg > avg:\n                avg = new_avg\n\n        return avg\n\n    N = len(cost)\n    visited = [False] * (N*N)\n    avg = 0\n\n    for i in range(N):\n        for j in range(N):\n            if not visited[i*N+j]:\n                current_path = [(i, j)]\n                current_cost = cost[i][j]\n                total_cost = cost[i][j]\n                avg = dfs(i, j, current_path, current_cost, total_cost, visited)\n\n    return avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False for j in range(N)] for i in range(N)]\n    dp = [[0 for j in range(N)] for i in range(N)]\n    \n    # BFS to find the maximum average\n    queue = []\n    queue.append((0, 0, 0))\n    while queue:\n        r, c, avg = queue.pop(0)\n        if r == N-1 and c == N-1:\n            dp[r][c] = avg\n            continue\n        visited[r][c] = True\n        \n        # Move right\n        if not visited[r+1][c]:\n            queue.append((r+1, c, dp[r][c] + cost[r+1][c]))\n        # Move down\n        if not visited[r][c+1]:\n            queue.append((r, c+1, dp[r][c] + cost[r][c+1]))\n    \n    # Find the maximum average\n    max_avg = max(dp[0][:])\n    for i in range(N):\n        max_avg = max(max_avg, dp[i][:])\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, N):\n        dp[i][0] = max(dp[i][0], dp[i-1][0] + cost[i][0])\n        dp[0][i] = max(dp[0][i], dp[0][i-1] + cost[0][i])\n    \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n            dp[i][j] = max(dp[i][j], dp[i-1][j] + cost[i][j] - cost[i-1][j-1])\n    \n    max_avg = float('-inf')\n    max_path = None\n    \n    for i in range(N):\n        for j in range(N):\n            path = []\n            curr = (i,j)\n            while curr!= (0,0):\n                path.append(curr)\n                curr = (curr[0]-1,curr[1]) if curr[0]-1>=0 else (0,curr[1])\n                curr = (curr[0],curr[1]-1) if curr[1]-1>=0 else (curr[0],0)\n            \n            avg = sum([cost[i][j] for i,j in path]) / len(path)\n            max_avg = max(max_avg, avg)\n    \n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the filtered students\n    filtered_students = []\n    \n    # Loop through all students in the dictionary\n    for name, data in students.items():\n        # Extract the height and weight from the tuple\n        height, weight = data\n        \n        # Check if the height and weight are greater than or equal to the minimum values\n        if height >= h and weight >= w:\n            # If yes, append the name to the filtered_students list\n            filtered_students.append(name)\n            \n    # Return the filtered students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    # Create an empty list to store the filtered students\n    filtered_students = []\n    \n    # Loop through all the students in the dictionary\n    for name, data in students.items():\n        # Extract the height and weight from the tuple\n        height, weight = data\n        \n        # Check if the height and weight are greater than or equal to the minimum\n        if height >= h and weight >= w:\n            # If both conditions are met, add the student to the filtered list\n            filtered_students.append(name)\n    \n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create an empty list to store the filtered students\n    filtered_students = []\n\n    # iterate over the students dictionary and add those that have height and weight above the minimum to the filtered_students list\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students.append(name)\n\n    # return the filtered_students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    same_indices = []\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_same_pair(nums1, nums2):\n    # Create an empty dictionary to store the counts of elements in each list\n    count_dict = {}\n    \n    # Iterate over the lists and count the occurrences of each element\n    for num in nums1:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Iterate over the lists again and count the occurrences of each element\n    for num in nums2:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Iterate over the keys in the dictionary and count the occurrences of the same element\n    same_count = 0\n    for key in count_dict:\n        if count_dict[key] == count_dict[nums2[key]]:\n            same_count += 1\n    \n    return same_count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        digit = base % 10\n        result += digit\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum_of_digits = 0\n    base_str = str(base)\n\n    # Convert the base to an integer\n    base_int = int(base_str)\n\n    # Calculate the sum of all digits of the base to the specified power\n    for digit in base_str:\n        digit_int = int(digit)\n        sum_of_digits += digit_int ** power\n\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    sum_digits = 0\n    for digit in base_str:\n        sum_digits += int(digit)\n    return sum_digits ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(base) % 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and split it into a list of digits\n    digits = list(str(base))\n\n    # Calculate the sum of all digits raised to the power of the power\n    result = sum([int(digit) ** power for digit in digits])\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through each digit of the base\n    for digit in str(base):\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit) ** power\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        total += base % 10\n        base = base // 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        # Get the last digit of the base\n        digit = base % 10\n        base_sum += digit\n        # Remove the last digit of the base\n        base //= 10\n        # Decrement the power\n        power -= 1\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_str = str(base)\n    for i in range(power):\n        sum += int(base_str[-1])\n        base_str = base_str[:-1]\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        digit = base % 10\n        sum += digit\n        base //= 10\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"([^\"]*)\"' # a string literal representing a regular expression pattern for matching quotation marks\n    matches = re.findall(pattern, text1) # find all occurrences of the pattern in the text1 string\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # extract quotation marks from the string\n    quotation_marks = re.findall(r'\"([^\"]+)\"', text)\n\n    # iterate over the list of quotation marks\n    for quotation in quotation_marks:\n        # remove any whitespace in the quotation\n        quotation = quotation.strip()\n        # print the quotation without the quotes\n        print(quotation)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # create a pattern for finding quotation marks\n    pattern = re.compile(r'\"(.*?)\"')\n    # find all matches of the pattern in the text\n    matches = pattern.findall(text1)\n    # return the values of the matches\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\").*?(?=\")'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    \n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'(?<=\")(.*?)(?=\")'\n\n    # Use the pattern to find all occurrences of quotation marks in the given text\n    matches = re.finditer(pattern, text1)\n\n    # Initialize an empty list to store the extracted values\n    values = []\n\n    # Loop through all matches and append their values to the values list\n    for match in matches:\n        values.append(match.group(1))\n\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and extracts values between quotation marks \" \"\n    '''\n    quotation = re.search(r'\"([^\"]*)\"', text1)\n    if quotation:\n        return quotation.group(1)\n    else:\n        return None"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # get the length of the input tuple\n    N = len(test_tup)\n    # initialize an empty tuple of the same length\n    result_tup = ()\n    # loop through the input tuple\n    for i in range(N-1):\n        # add the current element of the input tuple to the result tuple\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)-1):\n        new_tup = new_tup + (test_tup[i] * test_tup[i+1],)\n    new_tup = new_tup + (test_tup[-1] * test_tup[0],)\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize an empty list to store the multiplied values\n    multiplied_values = []\n    # loop through the input tuple\n    for i in range(len(test_tup)-1):\n        # multiply the current value and the next value and append the result to the list\n        multiplied_values.append(test_tup[i] * test_tup[i+1])\n    # append the last value to the list\n    multiplied_values.append(test_tup[-1])\n    # return the resulting list\n    return tuple(multiplied_values)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Initialize an empty list to store the result\n    result_list = []\n    \n    # Loop over each element of the input tuple\n    for i in range(len(test_tup)-1):\n        # Calculate the product of the current element and the next element\n        result = test_tup[i] * test_tup[i+1]\n        # Append the result to the result list\n        result_list.append(result)\n    \n    # Convert the result list to a tuple and return it\n    return tuple(result_list)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(new_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple([test_tup[i]*test_tup[i+1] for i in range(N-1)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result = [0] * N\n    for i in range(N):\n        result[i] = test_tup[i] * test_tup[i+N]\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result = [None] * N\n    for i in range(N):\n        result[i] = test_tup[i] * test_tup[i+1]\n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # iterate through both lists simultaneously\n    for i in range(len(lst1)):\n        # add the corresponding elements from the two lists and append the result to the result list\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Using the itertools groupby function to group the numbers into consecutive duplicates\n    groups = groupby(nums)\n    # Looping through each group of consecutive duplicates\n    for key, group in groups:\n        # Checking if the consecutive duplicates are consecutive\n        if len(list(group)) > 1:\n            # Removing the consecutive duplicates from the original list\n            nums = [num for num in nums if num!= key]\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Define an empty dictionary to store the count of consecutive duplicates\n    consecutive_dict = {}\n\n    # Iterate over the input list\n    for num in nums:\n        # If the current number is the same as the previous number, add 1 to its count in the dictionary\n        if num in consecutive_dict:\n            consecutive_dict[num] += 1\n        # If the current number is not the same as the previous number, add it to the dictionary with count 1\n        else:\n            consecutive_dict[num] = 1\n\n    # Create an empty list to store the unique numbers\n    unique_nums = []\n\n    # Iterate over the consecutive dictionary and add each number to the unique list if it has a count of 1\n    for key, value in consecutive_dict.items():\n        if value == 1:\n            unique_nums.append(key)\n\n    # Return the unique list\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    def is_consecutive(iterable):\n        '''\n        Returns True if all elements in the iterable are consecutive.\n        '''\n        return all(iterable[i] == iterable[i + 1] for i in range(len(iterable) - 1))\n\n    # Filter out consecutive duplicates from the original list\n    consecutive_nums = [x for x in nums if is_consecutive(x)]\n\n    # Return the filtered list\n    return consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Using groupby() function to group the consecutive duplicates of the list\n    grouped_nums = groupby(enumerate(nums), lambda x: x[0] - x[1])\n\n    # Creating a list to store the non-consecutive duplicates\n    non_consecutive_duplicates = []\n\n    # Iterating over the grouped_nums to check if the consecutive duplicates are to be removed\n    for key, group in grouped_nums:\n        # If the group is empty, it means there were consecutive duplicates\n        if not group:\n            non_consecutive_duplicates.extend(key)\n\n    # Removing the consecutive duplicates from the original list\n    for i in non_consecutive_duplicates:\n        nums.pop(i)\n\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for _, group in groupby(nums) if len(list(group)) == 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_list = list(nums)\n    result = []\n    for item in groupby(nums_list):\n        if len(list(item)) == 1:\n            result.append(item)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = (1/2)*r*r*h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r ** 2) # area = pi * r^2\n    lateral_surface_area = 2 * area * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius r and height h of a cone as inputs and returns the lateral surface area of the cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone\n    # SA = 1/2 * r^2 * h\n    # Using math.pi constant\n    #SA = 0.5 * r**2 * h\n    SA = 0.5 * r**2 * h\n\n    # Return the lateral surface area\n    return SA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to find the lateral surface area of a cone\n    lateral_surface_area = (math.pi * r ** 2) * (h / 3)\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi * r * (r + h)\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * h\n    print(\"Lateral surface area of the cone is:\", lateral_area)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # convert the height to meters\n    h = h/1000\n    \n    # calculate the lateral surface area of the cone using Heron's formula\n    s = 2 * r * h\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone.\n    :param r: radius of the cone\n    :param h: height of the cone\n    :return: the lateral surface area of the cone\n    \"\"\"\n    # calculate the semi-perimeter of the cone\n    s = 2 * math.pi * r\n\n    # calculate the lateral surface area using the formula\n    area = math.pi * r**2 * h / s\n\n    return area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text) # remove non-alphanumeric characters\n    text = re.sub(r'\\s+', ':', text) # replace spaces with colons\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]+')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # use a regular expression to replace all occurrences of any of the special characters\n    pattern = r'[,.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[,.]', ':', text)\n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match any of the three characters\n    pattern = r'[\\s,\\.]'\n    # Replace all occurrences of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n\n    :param text: The input string to be processed.\n    :return: The modified string.\n    \"\"\"\n    return re.sub(r'[^\\w\\s]', '', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s|,|\\.')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'\\s|,|\\.'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_char = r'[^\\w\\s]+'  # matches any character that is not a word character or whitespace\n    text = re.sub(special_char, '', text)  # replaces special characters with an empty string\n    text = text.replace(',', ':')  # replaces commas with colons\n    text = text.replace('.', ':')  # replaces dots with colons\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize left and right pointers\n    left, right = 0, len(A) - 1\n\n    # Initialize the first occurrence index as -1\n    first_occurrence_index = -1\n\n    # Loop until left pointer is less than or equal to right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = left + (right - left) // 2\n\n        # If the middle element is equal to x\n        if A[mid] == x:\n            # Check if the next element is equal to x as well\n            if mid == len(A) - 1 or A[mid + 1]!= x:\n                first_occurrence_index = mid\n                break\n            else:\n                # If the next element is equal to x, continue searching from the next element\n                left = mid + 1\n        # If the middle element is less than x\n        elif A[mid] < x:\n            left = mid + 1\n        # If the middle element is greater than x\n        else:\n            right = mid - 1\n\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if left > len(A) - 1 or A[left]!= x:\n        return -1\n    else:\n        return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Check if the array is empty or not\n    if len(A) == 0:\n        return -1\n    # Initialize the index to -1\n    index = -1\n    # Check if the first element is equal to the x\n    if A[0] == x:\n        index = 0\n    # Loop through the array\n    for i in range(1, len(A)):\n        # If the current element is equal to the x\n        if A[i] == x:\n            # If the index is -1, set it to the current index\n            if index == -1:\n                index = i\n            # If the index is already greater than -1, check if the current index is smaller\n            elif i < index:\n                index = i\n    # If the index is still -1, return -1\n    if index == -1:\n        return -1\n    # Otherwise, return the index\n    else:\n        return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n    A (list): A sorted list of integers.\n    x (int): An integer to be searched for in the list A.\n\n    Returns:\n    int: The index of the first occurrence of x in A, or -1 if x is not found in A.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            count = 1\n            while count < len(A) and A[mid] == x:\n                count += 1\n                mid += 1\n            return mid - count\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    first = 0\n    last = len(A) - 1\n    \n    while first <= last:\n        mid = (first + last) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                last = mid - 1\n        elif A[mid] > x:\n            last = mid - 1\n        else:\n            first = mid + 1\n            \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A (list): A sorted array.\n        x (int): A number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of x in A, or -1 if x is not found in A.\n\n    Example:\n        A = [1, 2, 3, 3, 3, 4, 5]\n        x = 3\n        Output: 1\n    \"\"\"\n    index = -1\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return index"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1] * arr[i], arr[i])\n\n    # calculate the sum of products of all possible sublists\n    subarray_products = 1\n    for i in range(n):\n        subarray_products *= dp[i]\n\n    return subarray_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Calculate the product of the first element of the list\n    prod = 1\n\n    # Initialize the sum of products of sublists as 0\n    sum_of_products = 0\n\n    # Traverse through all elements of the list\n    for i in range(1, len(arr)):\n        # Update the product of the current element\n        prod *= arr[i]\n\n        # Calculate the sum of products of sublists by multiplying the product of the current element with the product of the list up to the current element\n        sum_of_products += prod\n\n        # Calculate the sum of products of sublists by subtracting the product of the current element from the product of the list up to the current element\n        sum_of_products -= prod * arr[i-1]\n\n    # Return the sum of products of sublists\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize result to 0\n    result = 0\n\n    # Iterate through all sublists of length n\n    for i in range(n):\n        # Find the sum of all elements in the sublist\n        sublist_sum = sum(arr[i:i+n])\n\n        # Multiply all elements by i to get the result\n        sublist_prod = 1\n        for j in range(n):\n            sublist_prod *= arr[i+j]\n\n        # Add the result to the final result\n        result += sublist_prod * sublist_sum\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] * arr[i - 1], dp[i - 2] + arr[i - 2])\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # initialize sum and product variables to 0\n    sum_of_subarrays = 0\n    product_of_subarrays = 1\n\n    # loop through each sublist\n    for i in range(1, n):\n        # update sum of subarrays\n        sum_of_subarrays += arr[i]\n        # update product of subarrays\n        product_of_subarrays *= arr[i]\n        # subtract sum from product\n        product_of_subarrays -= sum_of_subarrays\n\n    # multiply the final product by -1 to get the sum of products\n    return -product_of_subarrays"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    if n == 2:\n        return arr[0]*arr[1]\n\n    # Calculate products of subarrays of size 2\n    products = [arr[i]*arr[i+1] for i in range(n-1)]\n\n    # Initialize two pointers, start and end, to calculate the sum of products of subarrays of size 3\n    start = 0\n    end = 2\n    sum_of_products = 0\n\n    while end < n:\n        # Calculate the product of the current subarray and the subarray to its right\n        product = arr[start]*arr[end]\n\n        # Calculate the sum of products of subarrays of size 2 that are in the current subarray\n        sum_of_products += sum(products[:end+1])\n\n        # Update pointers\n        start += 1\n        end += 1\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize two variables to store the maximum subarray size and maximum product\n    max_subarray_size = 0\n    max_product = 0\n    # Loop through each element in the list\n    for i in range(n):\n        # Initialize a variable to store the current subarray size and initialize its sum to zero\n        current_subarray_size = 1\n        current_subarray_sum = 0\n        # Loop through each element in the list starting from i+1\n        for j in range(i+1, n):\n            # Check if the current subarray size is greater than the maximum subarray size so far\n            if current_subarray_size > max_subarray_size:\n                # If it is, update the maximum subarray size and reset the current subarray size and sum to zero\n                max_subarray_size = current_subarray_size\n                current_subarray_size = 1\n                current_subarray_sum = arr[j]\n            else:\n                # If not, add the current element to the current subarray sum\n                current_subarray_sum += arr[j]\n            # Check if the current product is greater than the maximum product so far\n            if current_subarray_size * current_subarray_sum > max_product:\n                # If it is, update the maximum product\n                max_product = current_subarray_size * current_subarray_sum\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Create a function that generates all possible sublists of the given list\n    def generate_sublists(lst):\n        result = []\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)+1):\n                result.append(lst[i:j])\n        return result\n    \n    # Generate all possible sublists\n    sublists = generate_sublists(arr)\n    \n    # Calculate the sum of products of each sublist\n    sublist_prod_sum = 0\n    for sublist in sublists:\n        sublist_prod_sum += 1\n        for i in range(1, len(sublist)):\n            sublist_prod_sum *= sublist[i]\n        sublist_prod_sum //= sublist[0]\n    \n    return sublist_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n\n    # Create a list of all possible sublists of arr\n    sublists = [arr[i:] for i in range(n+1)]\n\n    # Initialize sum of products of sublists to zero\n    sublist_prod_sum = 0\n\n    # Iterate over all possible sublists of arr\n    for sublist in sublists:\n        # Calculate the product of all elements in sublist\n        sublist_prod = 1\n        for elem in sublist:\n            sublist_prod *= elem\n        # Add product of sublist to sum of products of sublists\n        sublist_prod_sum += sublist_prod\n\n    # Return sum of products of sublists\n    return sublist_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    max_sum = float('-inf')\n    for i in range(n):\n        left = i\n        right = n\n        while left < right:\n            prod = 1\n            for j in range(left, right + 1):\n                prod *= arr[j - 1]\n            sum_of_products = prefix_sum[right + 1] - prefix_sum[left]\n            if sum_of_products > max_sum:\n                max_sum = sum_of_products\n            if sum_of_products < 0:\n                break\n            left += 1\n            right -= 1\n    return max_sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize variables\n    first_bit_toggled = False\n    last_bit_toggled = False\n    middle_bit_toggled = False\n    \n    # toggle middle bit\n    for i in range(1, len(bin(n)) - 2):\n        if first_bit_toggled and last_bit_toggled and middle_bit_toggled:\n            break\n        if (n & (1 << i)):\n            n ^= (1 << i)\n        else:\n            n |= (1 << i)\n            \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # bitmask for the first and last bits\n    bitmask = 0b11111111111111111111111111111111111111111111111111111111111111\n    # XOR the bitmask with the input number to get the middle bits\n    middle_bits = n ^ bitmask\n    # shift the middle bits to the left by 1\n    middle_bits = middle_bits << 1\n    # OR the middle bits with the input number to get the final result\n    return n | middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    first_bit = n & 1\n    last_bit = n >> 31\n    toggled_bits = first_bit ^ last_bit\n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    first_bit = (n & 1) # first bit is the LSB (Least Significant Bit)\n    last_bit = (n & 1) << 31 # last bit is the MSB (Most Significant Bit)\n    toggled_bit = (last_bit ^ 1) # toggled bit is the XOR of the last bit and 1 (to set or unset the MSB)\n    return n ^ (first_bit | last_bit | toggled_bit) # XOR first, last, and toggled bits to toggle the middle bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n\n    # Initialize the first and last bits as 0\n    first_bit = 0\n    last_bit = 0\n\n    # Iterate through the number of bits starting from the second bit (index 1)\n    for i in range(1, num_bits-1):\n        # Check if the current bit is 0\n        if n & (1 << i):\n            # Toggle the bit to 1\n            n ^= (1 << i)\n        else:\n            # Keep the bit as it is\n            pass\n\n    # Set the first and last bits to 0\n    n &= ~(1 << first_bit)\n    n &= ~(1 << last_bit)\n\n    # Return the number with the first and last bits set to 0\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ ((n & 0x55555555) << 1)\n    n = n ^ ((n & 0xAAAAAAAA) >> 1)\n    n = n ^ ((n & 0x33333333) << 2)\n    n = n ^ ((n & 0xCCCCCCCC) >> 2)\n    n = n ^ ((n & 0x0F0F0F0F) << 4)\n    n = n ^ ((n & 0xF0F0F0F0) >> 4)\n    n = n ^ ((n & 0x00FF00FF) << 8)\n    n = n ^ ((n & 0xFF00FF00) >> 8)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Mask for first and last bits\n    mask1 = 1 << 0\n    mask2 = 1 << 31\n\n    # Mask for middle bits\n    mask3 = (1 << 31) - 1 ^ mask1 ^ mask2\n\n    # XOR with mask1 and mask2 to toggle the first and last bits\n    n = n ^ mask1 ^ mask2\n\n    # XOR with mask3 to toggle the middle bits\n    n = n ^ mask3\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1\n    last_bit = n & (2**32 - 1)\n    n = n ^ first_bit ^ last_bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the first and the last bit of the number\n    first_bit = n & 1\n    last_bit = n >> 31\n    \n    # Toggle the first and the last bit and the middle bit\n    toggled_bit = ~(first_bit ^ last_bit)\n    middle_bit = n ^ toggled_bit\n    \n    # Combine the middle bit, the toggled bit and the first and the last bit\n    result = middle_bit ^ toggled_bit ^ n\n    \n    # Add the toggled bits to the result\n    result = result ^ toggled_bit\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # Set all bits except the first and last bit to 1\n    n = (n & 0b11111110) | 0b00000001\n\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x - 1)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return index + 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        index = len(a)\n    elif index > 0 and a[index] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x-1)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    # Use the bisect module to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    \n    # If the value is already in the list, return the index of the element\n    if a[index] == x:\n        return index\n    \n    # If the value is less than the first element, return 0\n    elif x < a[0]:\n        return 0\n    \n    # Otherwise, return the index of the previous element\n    else:\n        return index-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    result = pattern.match(string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string)) "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. \n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (1/n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nprint(geometric_sum(5))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # check if n is odd\n    if n % 2 == 1:\n        return \"n should be even\"\n    \n    # find the number of digits in n\n    count = 0\n    temp = n\n    while temp > 0:\n        temp //= 10\n        count += 1\n    \n    # calculate the smallest triangular number with n digits\n    smallest = int((10**count - 1) // 9)\n    \n    # find the index of smallest triangular number with n digits\n    for i in range(1, smallest+1):\n        # check if the triangular number has n digits\n        if len(str(i)) == n:\n            return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    # Initialize variables\n    minTriangular = 1\n    index = 1\n\n    # Calculate minimum triangular number with n digits\n    while len(str(minTriangular)) < n:\n        minTriangular += index\n        index += 1\n\n    # Return the index of the smallest triangular number with n digits\n    return math.log10(minTriangular) + 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # Initialize variables\n    triangular_number = 0\n    index = 1\n    count = 1\n\n    # Check if n is less than or equal to 1\n    if n <= 1:\n        return -1\n\n    # Loop until triangular_number has n digits\n    while len(str(triangular_number)) < n:\n        # Calculate next triangular number\n        triangular_number = int(math.sqrt(count)) * int(math.sqrt(count)) + 1\n\n        # Check if next triangular number is less than or equal to the next triangular number\n        while triangular_number <= triangular_number + index:\n            # Update index if triangular_number is less than or equal to the next triangular number\n            if triangular_number <= triangular_number + index:\n                index += 1\n            # Calculate next triangular number\n            triangular_number = int(math.sqrt(count)) * int(math.sqrt(count)) + 1\n\n        # Increment count by 1\n        count += 1\n\n    # Return index of smallest triangular number with n digits\n    return index - n + 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # The smallest triangular number with n digits is \n    # 10^(n-1) * (10^(n-1) + 1) / 2\n    # Since 10^(n-1) < 10^n, we can use this formula to calculate it\n    return int(math.log10(10) * n - math.log10(10) - 1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Define the function to find the smallest triangular number with n digits\n    def find_smallest_triangular(n):\n        triangular_num = 0\n        digit = 1\n        for i in range(n):\n            triangular_num += digit * 10 ** i\n            digit += 1\n        return triangular_num\n\n    # Find the smallest triangular number with n digits\n    smallest_triangular = find_smallest_triangular(n)\n\n    # Find the index of the smallest triangular number\n    for i in range(1, smallest_triangular + 1):\n        triangular_num = i\n        for j in range(1, n):\n            triangular_num *= 10\n            triangular_num += i % 10\n        if triangular_num == smallest_triangular:\n            return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the smallest triangular number to be 1\n    smallest = 1\n    \n    # Loop through the triangular numbers up to n\n    for i in range(2, n+1):\n        # Calculate the next triangular number\n        next_num = smallest + i\n        \n        # If the next triangular number is smaller than the current smallest triangular number, update the smallest triangular number\n        if next_num < smallest:\n            smallest = next_num\n            \n    # Return the index of the smallest triangular number\n    return smallest-1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function calculates the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Initialize variables\n    i = 1\n    triangular_num = 1\n    \n    # Calculate the triangular number for each digit\n    while len(str(triangular_num)) < n:\n        triangular_num = i*i\n        i += 1\n    \n    # Return the index of the smallest triangular number\n    return i-2"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    '''\n\n    # Maximum value of n is 9\n    if n > 9:\n        return -1\n\n    # Taking n-1 digits of prime numbers as input\n    prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\n    # Taking the n-1 digits of 10^9 + 1\n    num = 1\n    for i in range(n-1):\n        num = num * 10 + 1\n    \n    # Starting with 2, finding the smallest triangular number with n digits\n    i = 1\n    triangular = 2\n    \n    # Looping till the number of digits is equal to n\n    while len(str(triangular)) < n:\n        # Finding the index of the smallest prime number greater than triangular\n        index = 0\n        for j in range(len(prime_list)):\n            if prime_list[j] > triangular:\n                break\n            if prime_list[j] > triangular % prime_list[j]:\n                index = j\n        # Updating the value of triangular with the value of the smallest prime number greater than triangular\n        if index!= 0:\n            triangular += prime_list[index-1]\n        else:\n            triangular += 1\n        \n        i += 1\n    \n    # Returning the index of the smallest triangular number with n digits\n    return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Define a function to check if a number is triangular or not\n    def is_triangular(num):\n        \"\"\"\n        This function checks if a number is triangular or not.\n        \"\"\"\n        if num < 0:\n            return False\n        for i in range(int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Check if the input is valid or not\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # Initialize the smallest triangular number with n digits to the smallest possible number\n    min_triangular = 10**n\n\n    # Iterate through all numbers between 1 and n-1 and check if they are triangular numbers with n digits\n    for i in range(1, n):\n        triangular = i * (i+1)\n        if is_triangular(triangular) and triangular < min_triangular:\n            min_triangular = triangular\n\n    # Return the index of the smallest triangular number with n digits\n    return min_triangular - 1\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_triangular(n):\n    \"\"\"\n    Returns True if n is a triangular number, else False.\n    \"\"\"\n    return (int(str(n)**(1/2)) + 1)**2 == n\n\ndef find_Index(n):\n    \"\"\"\n    Returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    if is_triangular(10**n):\n        return 0\n    for i in range(1, int(10**n)):\n        if is_triangular(i):\n            return i\n    return -1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # initialize an empty dictionary\n    result_dict = {}\n    \n    # iterate over the tuple elements and insert them into the dictionary as key-value pairs\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    \n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict_data = {}\n    for i in range(0, len(test_tup)-1, 2):\n        dict_data[test_tup[i]] = test_tup[i+1]\n    return dict_data"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    dict_obj = {}\n\n    # Use a for loop to iterate through the tuple\n    for i in range(len(test_tup) - 1):\n        # Get the current and next elements of the tuple\n        curr_elem = test_tup[i]\n        next_elem = test_tup[i+1]\n        # Add the key-value pair to the dictionary\n        dict_obj[curr_elem] = next_elem\n\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        test_tup: A tuple of adjacent elements.\n\n    Returns:\n        A dictionary where keys are the first element of each tuple, and values are the second element.\n\n    Example:\n        >>> tuple_to_dict([(1, 2), (3, 4), (5, 6)])\n        {1: 2, 3: 4, 5: 6}\n    \"\"\"\n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        key_value_dict[key] = value\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            key = test_tup[i]\n            value = test_tup[i+1]\n            result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    if len(test_tup) % 2!= 0:\n        return None\n    else:\n        result = {}\n        for i in range(0, len(test_tup), 2):\n            result[test_tup[i]] = test_tup[i+1]\n        return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    my_dict = {}\n    # Loop through the tuple and add adjacent elements as keys\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    result_dict = {}\n    # iterate over the tuple elements using enumerate function\n    for i, item in enumerate(test_tup):\n        # add the current item as a key and the next item as a value to the result dictionary\n        result_dict[item] = test_tup[i+1]\n    # return the result dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to list\n    s_list = list(s)\n    # Check if all the characters are same\n    if s_list[0] == s_list[1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list\n    s = list(s)\n    # Check if the length of the list is one\n    if len(s) == 1:\n        return True\n    # Compare the first character of the list with the rest of the list\n    else:\n        for i in range(len(s)):\n            if s[i]!= s[0]:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # convert string to list\n    lst = list(s)\n    # check if all characters in the list are same\n    if len(lst) > 1 and lst[0] == lst[1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as an input and returns True if all the characters in the string are same, False otherwise.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0]!= s[1]:\n        return False\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for key, value in count.items():\n        if value!= 1:\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function will check whether all the characters in a given string are the same or not.\n    '''\n    first_char = s[0] # first character of the string\n    for i in range(len(s)): # iterate through the string\n        if s[i]!= first_char: # if any character is not the same as the first character, return False\n            return False\n    return True # if all the characters are same, return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    # use pythagorean theorem to calculate the length of each side\n    base = side**0.5\n    altitude = 0.5*side\n    hypotenuse = math.sqrt(3)*side\n    \n    # calculate the area using the formula for the area of a trapezoid\n    area = 0.5*base*altitude + altitude*hypotenuse + base*hypotenuse\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    s = (side * (side + math.sqrt(3))) / 4\n    return math.sqrt(s) ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to calculate the area of a tetrahedron.\n    \"\"\"\n\n    # calculate the semi-perimeter of the tetrahedron\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** (1 / 2)\n\n    # calculate the area using Heron's formula\n    area = math.sqrt(s * (s - side) * (s - side) * (s - side))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side * side * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Use Heron's formula to calculate the area of the tetrahedron\n    s = (side * math.sqrt(3)) / 2\n    area = math.sqrt(s * (s-side) * (s-side) * (s-side) * (s-side))\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) / 4\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2) ** (1/2)\n    return 6 * side * s"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the area of the tetrahedron using Heron's formula\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.5\n    area = (1 / 6) * s * (s - side) * (s - side) * (s - side)\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.append(list.pop(0)) * (m - 1)\n    for i in range(m):\n        list.insert(0, list.pop(-1))\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # calculate the number of rotations needed to make list circular\n    rotations = m % n\n    # rotate the list by rotations\n    for i in range(rotations):\n        temp = list[0]\n        for j in range(n-1):\n            list[j] = list[j+1]\n        list[n-1] = temp\n    # return the rotated list\n    return list[rotations:]\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[-m:] = list[:-m]\n    list[:m] = list[-n:]\n    list[:m] = list[-m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    # check if the list is empty or only has one item\n    if n == 0 or n == 1:\n        return list\n    # rotate the list by m\n    for i in range(m % n):\n        temp = list[0]\n        for j in range(n - 1):\n            list[j] = list[j + 1]\n        list[n - 1] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, n):\n    '''\n    Rotate a given list by n items to the right direction.\n    '''\n    lst.rotate(-n)\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list and an integer m as input and returns the rotated list.\n    \"\"\"\n    n = len(lst)\n    m = m % n  # To ensure that m is not greater than the length of the list.\n    return lst[n - m:] + lst[:n - m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # calculate the number of rotations to perform\n    rotations = m % n\n    # initialize the new list with the last n items\n    new_list = list[-n:]\n    # copy the first m items to the new list\n    for i in range(n - rotations):\n        new_list.insert(0, list[i])\n    # replace the original list with the rotated list\n    list[:] = new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list by n items to the right direction.\n    \"\"\"\n    n = n % len(lst)\n    lst[n:], lst[:n] = lst[:n], lst[n:]\n    return lst"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(elem is None for elem in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for i in test_tup:\n        if i is None:\n            none_count += 1\n    if none_count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    digits = [int(digit) for digit in str(startnum)]\n    filtered_nums = [num for num in range(startnum, endnum+1) if all(digit in str(num) for digit in digits)]\n    return filtered_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digits = [int(digit) for digit in str(startnum)]\n    all_divisible_numbers = []\n    for num in range(startnum, endnum + 1):\n        current_digits = [int(digit) for digit in str(num)]\n        if all(digit in current_digits for digit in digits):\n            all_divisible_numbers.append(num)\n    return all_divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num):\n        return all(d in str(num) for d in str(num))\n\n    return filter(is_divisible_by_digit, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible = lambda n: all(d in str(n) for d in str(n)) and n % 10 == 0\n    return list(filter(divisible, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    return filter(lambda x: all(int(digit) % digit == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % int(d) == 0 for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    # Use a lambda function to find the set of digits within the range\n    digits_in_range = set(str(num) for num in range(startnum, endnum + 1))\n    \n    # Use a lambda function to check if a number is divisible by every digit within the range\n    is_divisible = lambda num: all(num % digit == 0 for digit in digits_in_range)\n    \n    # Use filter to find all numbers within the range that are divisible by every digit within the range\n    divisible_numbers = filter(is_divisible, range(startnum, endnum + 1))\n    \n    # Use list comprehension to convert the filter object to a list\n    divisible_numbers_list = list(divisible_numbers)\n    \n    return divisible_numbers_list"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        return all(num % 10 == digit for digit in str(num))\n\n    return list(filter(is_divisible, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a lambda function to check if a number is divisible by a specific digit\n    check_divisible = lambda x, digit: x % digit == 0\n    \n    # Loop through all numbers within the given range\n    for num in range(startnum, endnum+1):\n        # Find the digits of the number\n        digits = [int(digit) for digit in str(num)]\n        \n        # Check if the number is divisible by all digits\n        if all(check_divisible(num, digit) for digit in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def check_divisible_by_digits(num):\n        for digit in str(num):\n            if int(digit) % num!= 0:\n                return False\n        return True\n\n    return list(filter(lambda x: check_divisible_by_digits(x), range(startnum, endnum + 1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle of a sector as input and returns the area of the sector.\n    If the angle is greater than 360 degrees, then the function returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        # Calculate the area of a sector using the formula A = \u03c0r\u00b2 * sin(a/360)\n        area = math.pi * (r**2) * math.sin(a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    This function takes the radius and angle of a sector as inputs and returns the area of the sector. \n    The function returns None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is within valid range\n    if a > 360:\n        return None\n    \n    # Find the area of the sector using Heron's formula\n    s = (2*r*math.sin(math.radians(a/2)))\n    area = (math.sqrt(3)*r**2/4)*s\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is less than 360 degrees\n    if a > 360:\n        return None\n\n    # Find the radius of the circle in which the sector lies\n    circle_radius = r * math.sin(math.radians(a))\n\n    # Calculate the area of the sector\n    area = math.pi * circle_radius * circle_radius\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    \n    # Formula for area of a sector\n    area = math.pi * (r**2) * (a/360)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * (a/360) ** 2"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    area = r * r * math.sin(math.radians(a))\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * a / 360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    This function calculates the length of the longest common subsequence (LCS) for three given strings. \n    The function returns the LCS as a list of tuples, where each tuple contains the corresponding characters \n    in the three input strings.\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # create a table to store the lengths of LCS for all prefixes of X, Y and Z\n    table = [[[0]*(o+1) for j in range(m+1)] for i in range(n+1)]\n    \n    # fill the table in bottom-up manner\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, o+1):\n                if X[j-1] == Y[i-1] and Y[i-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n    \n    # print the table to verify the calculation\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(o+1):\n                print(table[i][j][k], end=' ')\n            print()\n    \n    # backtrack through the table and extract LCS as a list of tuples\n    lcs = []\n    i, j, k = n, m, o\n    while i > 0 and j > 0 and k > 0:\n        if X[j-1] == Y[i-1] and Y[i-1] == Z[k-1]:\n            lcs.append((X[j-1], Y[i-1], Z[k-1]))\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] == table[i][j-1][k]:\n            i -= 1\n        else:\n            j -= 1\n    \n    # reverse the list to get the correct order of characters\n    lcs.reverse()\n    \n    # return the LCS as a list of tuples\n    return lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Initialize the length of the longest common subsequence\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a 2D table to store the length of the longest common subsequences\n    LCS = [[0] * (o+1) for i in range(m+1)]\n    \n    # Fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[i][j] = LCS[i-1][j-1] + 1\n                else:\n                    LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1], LCS[i-1][k-1])\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Traverse the table to construct the result string\n    i = m\n    j = n\n    k = o\n    while LCS[i][j] > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            result += X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i-1][j] > LCS[i][j-1]:\n            i -= 1\n        elif LCS[i][j-1] > LCS[i-1][k-1]:\n            j -= 1\n        else:\n            k -= 1\n            \n    return result[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[0 for j in range(o + 1)] for i in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        elif L[i][j - 1][k] == L[i - 1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Step 1: Create a 2D table to store the length of the longest common subsequence for all possible substrings of X, Y and Z.\n    len_table = [[0 for j in range(len(Y) + 1)] for i in range(len(X) + 1)]\n\n    # Step 2: Fill the table using dynamic programming.\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                len_table[i][j] = len_table[i - 1][j - 1] + 1\n            else:\n                len_table[i][j] = max(len_table[i - 1][j], len_table[i][j - 1])\n\n    # Step 3: Backtrack the path to get the longest common subsequence.\n    i, j = len(X), len(Y)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif len_table[i - 1][j] > len_table[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Function to find length of the longest common suffix of two strings\n    def lcs_length(s1, s2):\n        m = len(s1)\n        n = len(s2)\n        dp = [[0 for j in range(n+1)] for i in range(m+1)]\n        for i in range(m):\n            for j in range(n):\n                if s1[i] == s2[j]:\n                    dp[i+1][j+1] = dp[i][j] + 1\n                else:\n                    dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1])\n        return dp[m][n]\n    \n    # Find the length of the longest common suffix of all three strings\n    LCS_length = max(lcs_length(X, Y), lcs_length(X, Z), lcs_length(Y, Z))\n    \n    # Function to find the longest common suffix of two strings\n    def lcs(s1, s2):\n        m = len(s1)\n        n = len(s2)\n        dp = [[0 for j in range(n+1)] for i in range(m+1)]\n        for i in range(m):\n            for j in range(n):\n                if s1[i] == s2[j]:\n                    dp[i+1][j+1] = dp[i][j] + 1\n                else:\n                    dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1])\n        lcs_seq = []\n        i = m\n        j = n\n        while i > 0 and j > 0:\n            if s1[i-1] == s2[j-1]:\n                lcs_seq.append(s1[i-1])\n                i -= 1\n                j -= 1\n            elif dp[i][j-1] > dp[i-1][j]:\n                i -= 1\n            else:\n                j -= 1\n        return ''.join(reversed(lcs_seq))\n    \n    # Find the longest common suffix of all three strings\n    LCS = lcs(X, Y)\n    if len(LCS) < LCS_length:\n        LCS = lcs(X, Z)\n        if len(LCS) < LCS_length:\n            LCS = lcs(Y, Z)\n    \n    return LCS[:LCS_length]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # create a table to store the length of longest common subsequence of three strings\n    dp = [[0] * (p + 1) for _ in range(n + 1)]\n\n    # fill the table in bottom up manner\n    for i in range(n + 1):\n        for j in range(m + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and Z[k - 1] == Y[j - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                elif X[i - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j][k - 1]\n                elif Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i][j - 1][k - 1]\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k])\n\n    # find the length of LCS\n    L = dp[n][m][p]\n\n    # construct the LCS\n    LCS = []\n    i, j, k = n, m, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Z[k - 1] == Y[j - 1]:\n            LCS.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i - 1] == Z[k - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # reverse the LCS to obtain the original order of the three strings\n    LCS.reverse()\n\n    return LCS, L"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Create a 3D table to store LCS lengths \n    table = [[[0 for j in range(len(X)+1)] for i in range(len(Y)+1)] for k in range(len(Z)+1)] \n\n    # Fill the table in bottom-up manner \n    for i in range(len(Y)+1): \n        for j in range(len(X)+1): \n            for k in range(len(Z)+1): \n                if i == 0 or j == 0 or k == 0: # base cases \n                    table[i][j][k] = 0 \n                elif X[j-1] == Y[i-1] and X[j-1] == Z[k-1]: # if current characters match, then add 1 to LCS length \n                    table[i][j][k] = table[i-1][j-1][k-1] + 1 \n                else: # if not, then take the maximum of two options \n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1]) \n\n    # Return the LCS length \n    return table[len(Y)][len(X)][len(Z)] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Find lengths of X, Y and Z\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 3D table to store lengths of longest common subsequence of X[0..m-1], Y[0..n-1], and Z[0..p-1]\n    L = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # Fill the 3D table in bottom up manner.\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Backtrack to get the actual LCS\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i][j][k-1] == L[i][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the LCS and return it\n    lcs.reverse()\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # creating a 3D table to store lengths of longest common suffix for all prefixes of X, Y and Z\n    # (i,j,k) = (i,j,k) is the index of a cell in the table\n    dp = [[[0] * (o + 1) for _ in range(m + 1)] for _ in range(n + 1)]\n\n    # filling the table using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    # backtrack to get the longest common suffix\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i - 1][j][k] == dp[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    dp = [[[0] * (o+1) for j in range(m+1)] for i in range(n+1)]\n\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    lcs_length = dp[n][m][o]\n    lcs = []\n    i = n\n    j = m\n    k = o\n    while lcs_length > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n            lcs_length -= 1\n        elif dp[i-1][j][k] == dp[i][j-1][k]:\n            i -= 1\n            lcs_length -= 1\n        else:\n            j -= 1\n            lcs_length -= 1\n\n    return \"\".join(reversed(lcs))\n\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nZ = \"CDARCB\"\n\nprint(lcs_of_three(X, Y, Z))"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<![a-z])[A-Z]|(?<=\\W)[A-Z](?=\\W)')\n    words = pattern.split(str1)\n    words_capitalized = [word.capitalize() if word.islower() else word for word in words]\n    return''.join(words_capitalized)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Define the pattern to match capitalized words followed by a space\n    pattern = r'(?<![a-z])([A-Z][a-z]+|[A-Z])(?![a-z])'\n\n    # Use the pattern to match words in the string\n    words = re.findall(pattern, str1)\n\n    # Capitalize the first letter of each matched word and join them with spaces\n    result =''.join([word.capitalize() for word in words])\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # define a regular expression pattern to match any word starting with capital letter\n    pattern = re.compile(r'\\b\\w')\n\n    # use the pattern to find all the words in the input string\n    words = pattern.findall(str1)\n\n    # join the words with spaces and capitalize the first letter of each word\n    result =''.join([word.capitalize() for word in words])\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # find all the capital words in the string\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', string)\n    # replace the words with spaces before capitalizing the first letter of each word\n    for i in range(len(words)):\n        words[i] = words[i][0].upper() + re.sub(r'(?<!\\w)(\\w)', r' \\1', words[i][1:])\n    # join the capitalized words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    words = re.findall(pattern, string)\n    capitalized_words = [word.capitalize() for word in words]\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match capital letters\n    capital_pattern = re.compile(r'[A-Z][a-z]*')\n\n    # Split the input string into words\n    words = str1.split()\n\n    # Loop through each word and capitalize the first letter if necessary\n    capitalized_words = []\n    for word in words:\n        match = capital_pattern.match(word)\n        if match:\n            # Capitalize the first letter of the word and append it to the capitalized_words list\n            capitalized_words.append(match.group(0).capitalize())\n        else:\n            # Append the original word to the capitalized_words list\n            capitalized_words.append(word)\n\n    # Join the capitalized words back into a string\n    capitalized_str =''.join(capitalized_words)\n\n    return capitalized_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub('([A-Z])', r' \\1', str1)\n    return str1.strip()\n"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string by spaces and capitalize the first letter of each word\n    words = re.findall(r'\\b\\w+\\b', str1)\n    new_words = []\n    for word in words:\n        first_letter = word[0].upper()\n        rest_of_word = word[1:].lower()\n        new_words.append(first_letter + rest_of_word)\n    # Join the words with spaces between them\n    return''.join(new_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    pattern = re.compile(r'(?<![a-z])[A-Z](?=[a-z])')\n    return pattern.sub(r' \\1', str1)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to numeric values\n    nums = [float(num) for num in nums_str]\n    # Sort the numeric values\n    nums.sort()\n    # Convert sorted numeric values back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n\n    # Convert all the strings to float values\n    nums_float = [float(num) for num in nums_str]\n\n    # Sort the float values in ascending order\n    nums_float.sort()\n\n    # Convert the sorted float values back to strings and return them\n    return [str(num) for num in nums_float]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    num_list = []\n    for num_str in nums_str:\n        try:\n            num_list.append(float(num_str))\n        except ValueError:\n            pass\n    num_list.sort()\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings in the list to numeric values\n    nums = [int(n) for n in nums_str]\n    # Sort the numeric values\n    nums.sort()\n    # Convert the sorted numeric values back to strings\n    sorted_nums_str = [str(n) for n in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert strings to numeric values\n    nums = [float(num) for num in nums_str]\n    \n    # Sort the list numerically\n    nums.sort()\n    \n    # Convert back to strings\n    sorted_nums = [str(num) for num in nums]\n    \n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a list of strings of numbers numerically.\n\n    Args:\n        nums_str (list): A list of strings of numbers.\n\n    Returns:\n        list: The sorted list of strings of numbers.\n\n    Examples:\n        >>> sort_numeric_strings(['1', '5', '3', '2', '8', '6'])\n        ['1', '2', '3', '5', '6', '8']\n    \"\"\"\n    # Use sorted() to sort the list of strings\n    sorted_nums_str = sorted(nums_str)\n\n    # Convert each string to a float and sort them numerically\n    sorted_nums = sorted([float(num_str) for num_str in sorted_nums_str])\n\n    # Convert the sorted list back to a list of strings\n    sorted_nums_str = [str(num) for num in sorted_nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Create a list of numbers from the given list of strings\n    nums = [int(n) for n in nums_str]\n    \n    # Sort the numbers in ascending order\n    nums.sort()\n    \n    # Create a list of strings from the sorted numbers\n    sorted_nums_str = [str(num) for num in nums]\n    \n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x.replace(',', '')))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for elem in test_list:\n        for elem2 in test_tup:\n            if elem2 not in elem:\n                elem.append(elem2)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Iterate through each element in the list\n    for i in range(len(test_list)):\n        # Check if the current element is a tuple\n        if isinstance(test_list[i], tuple):\n            # Check if the current tuple is equal to the given tuple\n            if test_list[i] == test_tup:\n                # If the current tuple is equal to the given tuple, add it to the list\n                test_list[i] += (test_tup,)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Append the tuple elements to the list\n    test_list.extend(test_tup)\n    # Return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    print(\"The updated list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Concatenate the two tuples\n    combined_tup = test_list + test_tup\n    \n    # Return the concatenated tuple\n    return combined_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    test_list.extend(test_tup)\n    print(\"After adding tuple:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the current node is less than its children.\n    if i > 0 and arr[i] < arr[parent(i)]:\n        return False\n    # Recursively check the children.\n    for j in range(2*i + 1, 2*i + 3):\n        if j < len(arr) and arr[i] < arr[j]:\n            return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the array has at least one element.\n    if len(arr) < 1:\n        return True\n    # Check the root element.\n    if not check_min_heap_helper(arr, 0):\n        return False\n    # Recursively check the remaining elements.\n    for i in range(1, len(arr)):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i, min_heap=True):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n\n    Args:\n    arr: A list of integers representing the array to be checked.\n    i: The index of the current element being checked.\n    min_heap (optional): A boolean value indicating whether to check for min heap or max heap.\n\n    Returns:\n    A boolean value indicating whether the given array represents a min heap or not.\n    '''\n    # Base case: If i is out of range, the array is not a valid min heap\n    if i < 0:\n        return False\n\n    # Base case: If i is equal to zero, the current element is the root of the heap\n    if i == 0:\n        return True\n\n    # If the current element is smaller than the parent element, it is not a valid min heap\n    if arr[i] < arr[i//2]:\n        return False\n\n    # Recursively check the left child of the current element\n    if min_heap:\n        return check_min_heap_helper(arr, i//2, min_heap)\n    else:\n        return check_min_heap_helper(arr, i//2, min_heap)\n\n\ndef is_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n\n    Args:\n    arr: A list of integers representing the array to be checked.\n\n    Returns:\n    A boolean value indicating whether the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1, min_heap=True)\n\n\ndef main():\n    arr = [64, 34, 25, 12, 22, 11, 90]\n    print(is_min_heap(arr))  # Output: True\n\n    arr = [64, 34, 25, 12, 22, 11, 10]\n    print(is_min_heap(arr))  # Output: False\n\n    arr = [10, 20, 30, 40, 50, 60]\n    print(is_min_heap(arr))  # Output: False\n\n    arr = [10, 20, 30, 40, 50, 60, 70, 80]\n    print(is_min_heap(arr))  # Output: False\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    \n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, left) or check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return False\n    else:\n        return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n    if arr[i] <= arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i == 0:\n        return True\n    \n    if arr[i] < arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # base case\n    if i >= len(arr) // 2:\n        return True\n    \n    # check if left child is smaller\n    if arr[i] > arr[2*i+1]:\n        return False\n    \n    # check if right child is smaller\n    if arr[i] > arr[2*i+2]:\n        return False\n    \n    # check if parent is smaller\n    if arr[i] > arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # base case\n    if len(arr) <= 1:\n        return True\n    \n    # check if root is smaller than its children\n    if arr[0] > arr[1] and arr[0] > arr[2]:\n        return False\n    \n    # check for rest of the array\n    return check_min_heap_helper(arr, 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    It takes an array as input and returns True if the array is a min heap,\n    else it returns False.\n    '''\n\n    # First, we check if the array has an even length\n    if len(arr) % 2 == 0:\n        return False\n\n    # Then, we check if the array has a valid heap property\n    i = len(arr) // 2 - 1\n    while i >= 0:\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        i -= 1\n\n    # If the array passes the above two checks, it is a min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    if i == 0:\n        return True\n    \n    if arr[i] > arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    if n == 0:\n        return True\n    else:\n        return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # initialize the sequence with the first 10 jacobsthal numbers\n    jacobsthal_seq = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171]\n\n    # loop through the sequence and calculate the nth number\n    for i in range(10, n+1):\n        # use the formula for the nth jacobsthal number to calculate the next number in the sequence\n        next_jac = (jacobsthal_seq[i-1]*(2*jacobsthal_seq[i-2] + 1)) % 1000000\n        jacobsthal_seq.append(next_jac)\n\n    # return the nth number in the sequence\n    return jacobsthal_seq[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n/2) * 2 + 1\n    else:\n        return 3 * jacobsthal_num(n/2) + 2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num((n//2)+1)\n    else:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    # Initialize variables\n    a = 0\n    b = 1\n    c = 1\n\n    # Initialize the jacobsthal number\n    j = 0\n\n    # Iterate until the jacobsthal number is equal to n\n    while j < n:\n        # Update the jacobsthal number\n        j += 1\n\n        # Calculate the next term of the sequence\n        d = a + b + c\n\n        # Update the variables\n        a = b\n        b = c\n        c = d\n\n        # Add the jacobsthal number to the result\n        if j == n:\n            result = c\n\n    return result"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(n-1):\n            c = a + b\n            a = b\n            b = c\n        return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 0\n        d = 1\n        jacobsthal = 1\n        for i in range(2, n+1):\n            c = a + b\n            d = c + d\n            jacobsthal = d\n        return jacobsthal\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the first two numbers \n    num1 = 0 \n    num2 = 1 \n\n    # Iterate till n \n    for i in range(2, n+1): \n\n        # Find the next number \n        next_num = (num1 + num2) % 10 \n\n        # Update the numbers \n        num1 = num2 \n        num2 = next_num \n\n    return num2 "
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # initialize variables\n    a = 0\n    b = 1\n\n    # find the nth jacobsthal number\n    for i in range(n):\n        a, b = b, (a + b)\n\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    j = 0\n    i = 1\n    while i < n:\n        j = j + 1\n        i = i + 2\n    return j"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize minimum and maximum keys to be the first key of the first element of each tuple\n    minimum_key = test_list[0][0]\n    maximum_key = test_list[0][0]\n\n    # Iterate over the rest of the list\n    for i in range(1, len(test_list)):\n        # If the key of the current tuple is smaller than the current minimum key, update the minimum key\n        if test_list[i][0] < minimum_key:\n            minimum_key = test_list[i][0]\n\n        # If the key of the current tuple is greater than the current maximum key, update the maximum key\n        if test_list[i][0] > maximum_key:\n            maximum_key = test_list[i][0]\n\n        # If the number of occurrences of the current key is less than k, increment k\n        if test_list[i][0] == minimum_key and len([x for x in test_list[:i] if x[0] == minimum_key]) < K:\n            K += 1\n\n        # If the number of occurrences of the current key is equal to k, return the minimum key\n        if test_list[i][0] == minimum_key and len([x for x in test_list[:i] if x[0] == minimum_key]) == K:\n            return minimum_key\n\n    # If we have iterated over the entire list and k is still less than the minimum number of occurrences, return None\n    if K < len(test_list):\n        return None\n\n    # If we have iterated over the entire list and k is equal to the minimum number of occurrences, return the minimum key\n    return minimum_key"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n    Parameters:\n    test_list - a list of tuples, each tuple contains two elements, first element is a number and second element is a string\n    K - an integer, the number of records required to be returned\n\n    Returns:\n    a list of tuples, each tuple contains two elements, first element is a number and second element is a string. The list contains the minimum K records from the given list of tuples.\n\n    Time Complexity: O(n*K) - The time complexity of this algorithm is O(n*K), where n is the length of the input list and K is the value of K. This is because we are iterating through each element of the input list and for each element we are checking for the minimum K records.\n\n    Space Complexity: O(K) - The space complexity of this algorithm is O(K), because we are using an auxiliary array of size K to store the minimum K records.\n\n    Example:\n    test_list = [(3, 'a'), (2, 'b'), (5, 'c'), (1, 'd'), (4, 'e')]\n    K = 3\n    print(min_k(test_list, K)) # Output: [(3, 'a'), (4, 'e')]\n    '''\n\n    # Sort the list in ascending order based on the first element of each tuple\n    sorted_list = sorted(test_list)\n\n    # Initialize an empty list to store the minimum K records\n    min_records = []\n\n    # Traverse through the sorted list\n    for i in range(len(sorted_list) - K + 1):\n        # Add each tuple in the sorted list to the min_records list\n        min_records.append(sorted_list[i])\n\n    return min_records\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n    # Loop through the list and count the frequency of each element\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    # Find the minimum frequency of k elements in the dictionary\n    min_freq = min(freq.values())\n    # Create an empty list to store the minimum k records\n    min_list = []\n    # Loop through the dictionary and append the keys that have minimum frequency of k\n    for key in freq:\n        if freq[key] == min_freq:\n            min_list.append(key)\n    # Return the minimum k records\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1]) # sort by second element (sort by value)\n    min_dict = {}\n    for i in range(K):\n        min_dict[test_list[i]] = i+1 # assign index to each record\n    return min_dict"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    min_list = []\n    # Iterate over the test list and find the minimum k records\n    for item in test_list:\n        if len(min_list) < K:\n            min_list.append(item)\n        else:\n            if item < min_list[0]:\n                min_list.pop(0)\n                min_list.append(item)\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        return \"Invalid input\"\n    test_list.sort(key=lambda x:x[1], reverse=True)\n    min_vals = [x for x in test_list[:K]]\n    return min_vals"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    # Initialize min_list with None for each element of test_list\n    min_list = [None] * len(test_list)\n    # Initialize minimum value of k\n    min_value = float('inf')\n\n    # Traverse through the list of tuples and update min_list and min_value\n    for i in range(len(test_list)):\n        if min_list[i] is None:\n            min_list[i] = test_list[i]\n        elif test_list[i] < min_list[i]:\n            min_list[i] = test_list[i]\n\n        if min_value > min_list[i]:\n            min_value = min_list[i]\n\n    # Return the minimum value of k\n    return min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    min_k_records = []\n    for test_tuple in test_list:\n        if len(min_k_records) < K:\n            min_k_records.append(test_tuple)\n        else:\n            min_k_records.remove(min(min_k_records, key=lambda x: x[0]))\n            min_k_records.append(test_tuple)\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[0])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    min_heap = []\n    for i in range(n):\n        if len(min_heap) < K:\n            heapq.heappush(min_heap, test_list[i])\n        elif test_list[i][0] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, test_list[i])\n    return min_heap[0]"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Find the common elements in l1, l2, l3\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_list = []\n    # Loop through each index in l1 and l2\n    for i in range(len(l1)):\n        # Check if the element at this index is present in l1 and l2\n        if l1[i] in l2 and l2[i] in l1:\n            # If the element is present in both lists, check if it's also present in l3\n            if l1[i] in l3 and l3[i] in l1:\n                common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l2[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty dictionary to store the common elements\n    common = {}\n    \n    # Loop through each index of the three lists\n    for i in range(len(l1)):\n        # If the element at that index is in both lists, add it to the dictionary\n        if l1[i] in l2 and l2[i] in l3:\n            common[l1[i]] = True\n            \n    # Return the dictionary as a list of common elements\n    return list(common.keys())"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_indices = set()\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_indices.add(i)\n    return list(common_indices)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Loop through each index in l1, l2, and l3\n    for i in range(len(l1)):\n        # Check if the current index is common to all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If it is, add the element to the common_elements list\n            common_elements.append(l1[i])\n\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = min(numbers)\n    second_smallest = min(numbers, key=lambda x: x if x!= smallest else None)\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list must have at least two numbers\"\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        for i in range(len(numbers)-2):\n            if numbers[i] > numbers[i+1] and numbers[i] < numbers[i+2]:\n                return numbers[i]\n            elif numbers[i] < numbers[i+1] and numbers[i] > numbers[i+2]:\n                return numbers[i+1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = second_smallest = float('inf')\n        for number in numbers:\n            if number < smallest:\n                second_smallest = smallest\n                smallest = number\n            elif number < second_smallest and number!= smallest:\n                second_smallest = number\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    sorted_numbers = sorted(numbers)\n    second_smallest_number = sorted_numbers[1]\n    return second_smallest_number"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        smallest = second_smallest(numbers[1:])\n        second_smallest = min(numbers[0], smallest)\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        The second smallest number in the list.\n\n    \"\"\"\n    # sort the list in ascending order\n    numbers.sort()\n\n    # if there are less than 2 numbers, return None\n    if len(numbers) < 2:\n        return None\n\n    # otherwise, return the second number (the one after the second smallest)\n    return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+a'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\1*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(f\"The text '{text}' matches the pattern '{pattern}'.\")\n    else:\n        print(f\"The text '{text}' doesn't match the pattern '{pattern}'.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = re.compile(r'ab*')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = r'a(?=[b]+)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b){0,}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b.*)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    # define the pattern to match\n    pattern = r'a(?=b*b)'\n\n    # search the text for the pattern and return the match object\n    match = re.search(pattern, text)\n\n    if match:\n        # return the matched text\n        return match.group()\n    else:\n        # if no match is found, return None\n        return None"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    # Helper function to swap two characters in a string\n    def swap_chars(s, i, j):\n        return s[:i] + s[j] + s[i:j] + s[i] + s[j+1:]\n\n    # Helper function to check if two strings are in reverse order\n    def is_reverse(s1, s2):\n        return s1 == s2[::-1]\n\n    # Helper function to count the pairs of reverse strings in a list of strings\n    def count_reverse_pairs_helper(strings, start, end, count):\n        if start >= end:\n            return count\n\n        # Check if the current substring is a reverse of the previous substring\n        for i in range(start, end):\n            if is_reverse(strings[i], strings[start]):\n                # Swap the characters and check if the substring is a reverse of the second substring\n                strings[i] = swap_chars(strings[i], i, start)\n                if is_reverse(strings[i], strings[start+1]):\n                    count += 1\n\n        # Recurse on the remaining substring\n        return count_reverse_pairs_helper(strings, start+1, end, count)\n\n    # Main function to count the pairs of reverse strings in a list of strings\n    def count_reverse_pairs_main(strings):\n        return count_reverse_pairs_helper(strings, 0, len(strings)-1, 0)\n\n    # Call the main function to count the pairs of reverse strings\n    return count_reverse_pairs_main(test_list)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                reverse_pairs += 1\n    return reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_list = []\n    for i in test_list:\n        reverse_list.append(i[::-1])\n    reverse_list = list(set(reverse_list)) # remove duplicates\n    count = 0\n    for i in range(len(reverse_list)):\n        for j in range(i+1, len(reverse_list)):\n            if reverse_list[i] < reverse_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Sort the given list of strings in descending order\n    test_list = sorted(test_list, key=len, reverse=True)\n\n    # Initialize two pointers i and j, where i starts at 0 and j starts at the last index of the list\n    i = 0\n    j = len(test_list) - 1\n\n    # Initialize two variables count and result, where count will store the number of reverse pairs and result will store the count\n    count = 0\n    result = 0\n\n    # Iterate over the list of strings\n    while i < j:\n\n        # Compare the lengths of the two strings at the current positions i and j\n        if len(test_list[i]) > len(test_list[j]):\n            count += 1\n            j -= 1\n        elif len(test_list[i]) < len(test_list[j]):\n            count += 1\n            i += 1\n        else:\n            # If the lengths are equal, compare the characters of the two strings at the current positions i and j\n            i += 1\n            j -= 1\n            result += 1\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n                i += 1\n                j -= 1\n\n    return result\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # To count reverse pairs, we need to sort the given list\n    test_list.sort()\n    \n    # Initialize count and two pointers for start and end of the sublist\n    count = 0\n    i = 0\n    j = len(test_list) - 1\n    \n    while i < j:\n        # If the two characters at the current indices are equal, move both pointers\n        if test_list[i] == test_list[j]:\n            i += 1\n            j -= 1\n        # If the first character of the sublist is smaller than the second character, move the left pointer to the right\n        elif test_list[i] > test_list[j]:\n            j -= 1\n        # If the second character of the sublist is smaller than the first character, move the right pointer to the left\n        else:\n            i += 1\n            count += j - i\n            \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary\n    counts = {}\n    \n    # Iterate over each item in the list\n    for item in list1:\n        # If the item is not a list, continue to the next iteration\n        if not isinstance(item, list):\n            continue\n        \n        # Convert the list to a tuple and add it to the counts dictionary\n        counts[tuple(item)] = counts.get(tuple(item), 0) + 1\n    \n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Convert all lists in the given list to tuples and count the number of occurrences of each tuple.\n    Returns a dictionary with the tuple as key and the number of occurrences as value.\n    \"\"\"\n    counts = {}\n    for item in lst:\n        if isinstance(item, list):\n            for subitem in item:\n                counts[tuple(subitem)] = counts.get(tuple(subitem), 0) + 1\n        else:\n            counts[item] = counts.get(item, 0) + 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each unique sublist\n    sublist_counts = {}\n\n    # Loop through each item in the list\n    for item in list1:\n        # Convert the item to a tuple and add it to the set of unique sublists\n        sublist = tuple(item)\n        if sublist in sublist_counts:\n            sublist_counts[sublist] += 1\n        else:\n            sublist_counts[sublist] = 1\n\n    # Return the dictionary of unique sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Dictionary to store unique sublists and their count\n    unique_dict = {}\n\n    # Loop through the list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it's in the dictionary\n        if tuple(sublist) in unique_dict:\n            # Increment the count of the tuple\n            unique_dict[tuple(sublist)] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            unique_dict[tuple(sublist)] = 1\n\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary\n    sublists = {}\n    \n    # Loop through each element in the original list\n    for element in list1:\n        # Check if the element is already a tuple\n        if isinstance(element, tuple):\n            # If it is, convert it to a string and check if it's already in the dictionary\n            if str(element) in sublists:\n                # If it is, increment its count\n                sublists[str(element)] += 1\n            else:\n                # If it's not, add it to the dictionary with a count of 1\n                sublists[str(element)] = 1\n        # If the element is not a tuple, convert it to a tuple and check if it's already in the dictionary\n        elif str(element) in sublists:\n            # If it is, increment its count\n            sublists[str(element)] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            sublists[str(element)] = 1\n            \n    # Return the dictionary of unique sublists and their counts\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the counts of unique sublists\n    unique_dict = {}\n    \n    # iterate over each list in the input list\n    for sublist in list1:\n        # convert the sublist to a tuple using tuple() function\n        sublist_tuple = tuple(sublist)\n        \n        # check if the tuple is already in the dictionary\n        if sublist_tuple in unique_dict:\n            # if it is, increment its count by 1\n            unique_dict[sublist_tuple] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            unique_dict[sublist_tuple] = 1\n    \n    # return the dictionary of unique sublists with their counts\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublist_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            if sublist not in unique_sublist_dict:\n                unique_sublist_dict[sublist] = 1\n            else:\n                unique_sublist_dict[sublist] += 1\n    return unique_sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    '''\n    This function counts the number of unique tuples in a list of lists.\n    '''\n    count = {}\n    for i in lst:\n        sublist = tuple(i)\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    \n    for sublist in list1:\n        if tuple(sublist) in count_dict:\n            count_dict[tuple(sublist)] += 1\n        else:\n            count_dict[tuple(sublist)] = 1\n    \n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary to store the count of unique sublists\n    unique_sublists = {}\n    # Iterate through the original list and convert each list to a tuple\n    for item in list1:\n        # Convert each list to a tuple\n        sublist_tuple = tuple(item)\n        # Check if the tuple already exists in the dictionary\n        if sublist_tuple in unique_sublists:\n            # If it does, increment its count by 1\n            unique_sublists[sublist_tuple] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            unique_sublists[sublist_tuple] = 1\n    # Return the final dictionary\n    return unique_sublists"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if str(float_num).endswith('.00'):\n            return True\n        elif '.' in str(float_num) and len(str(float_num).split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the string contains only digits and decimal point\n    if '.' not in num or not num.replace('.', '').isdigit():\n        return False\n\n    # Check if the string contains at most 2 decimal places\n    if num.count('.') > 1 or len(num) - num.index('.') - 1 > 2:\n        return False\n\n    # Check if the string represents a valid decimal number with a precision of 2\n    try:\n        decimal.Decimal(num)\n    except ValueError:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str):\n        return False\n    # Check if there are any non-numeric characters in the string\n    if not all(c.isdigit() or c in '.,' for c in num):\n        return False\n    # Check if the string is a valid decimal number with a precision of 2\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        if '.' in num:\n            num_list = num.split('.')\n            if len(num_list) == 2:\n                if len(num_list[0]) <= 2 and len(num_list[1]) <= 2:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    if '.' in num:\n        if len(num.split('.')[1]) == 2:\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    count = 0\n    for i in range(len(num)):\n        if num[i] == '.':\n            if count == 0:\n                count += 1\n            else:\n                return False\n        else:\n            count += 1\n    if count == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    decimal_part, whole_part = num.split('.')\n    if len(decimal_part) > 2:\n        return False\n    for digit in decimal_part:\n        if not digit.isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if abs(float_num - round(float_num, 2)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    decimal_places = 2\n    num_str = str(num)\n    if '.' in num_str and len(num_str.split('.')[1]) <= decimal_places:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    if num.count('.') > 1 or num.count('.') == 0 and num.count(',') > 1 or num.count(',') == 0:\n        return False\n\n    for digit in num.split('.')[0].split(','):\n        if len(digit) > 2:\n            return False\n        elif len(digit) == 2 and int(digit) > 99:\n            return False\n\n    if '.' in num:\n        for digit in num.split('.')[1].split(','):\n            if len(digit) > 2:\n                return False\n            elif len(digit) == 2 and int(digit) > 99:\n                return False\n\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_flag = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique_flag = False\n            break\n    return unique_flag"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    if len(count) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the list is empty or not\n    if not arr:\n        print(\"The list is empty.\")\n        return False\n\n    # Check for the presence of any duplicate elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                print(\"The list contains duplicate elements.\")\n                return False\n\n    # If no duplicates found, then it's unique\n    print(\"The list contains only one distinct element.\")\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return False\n    else:\n        unique_set = set(arr)\n        if len(unique_set) == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr) # convert the list to a set to remove duplicates\n    if len(unique_set) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Removing the duplicate elements from the list\n    arr = list(set(arr))\n\n    # Checking if the length of the list is equal to 1\n    if len(arr) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, False otherwise.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 0:\n        return False\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i-1]:\n                return False\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # check for 30 days in Feb\n    if monthnum3 == 2:\n        return True\n    # check for 30 days in Jan and Mar\n    elif monthnum3 in [1, 3]:\n        return True\n    # check for 31 days in April, June, September, November\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    # check for 30 days in April, June, September, November, January, March, May, July, August, October, December\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if monthnum3 == 2 and daynum < 31:\n                print(\"The month number contains 30 days.\")\n            else:\n                print(\"The month number does not contain 30 days.\")\n        else:\n            if monthnum3 == 2 and daynum < 30:\n                print(\"The month number contains 30 days.\")\n            else:\n                print(\"The month number does not contain 30 days.\")\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11 and daynum < 30:\n            print(\"The month number contains 30 days.\")\n        else:\n            print(\"The month number does not contain 30 days.\")\n    else:\n        if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12 and daynum < 31:\n            print(\"The month number contains 31 days.\")\n        else:\n            print(\"The month number does not contain 31 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return True\n        else:\n            return False\n    elif monthnum3 % 2!= 0:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(f\"{monthnum3} contains 30 days\")\n    else:\n        print(f\"{monthnum3} does not contain 30 days\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 % 3 == 0:\n        if monthnum3 in [4, 6, 9, 11]:\n            print(monthnum3, \"contains 30 days.\")\n        else:\n            print(monthnum3, \"does not contain 30 days.\")\n    else:\n        print(monthnum3, \"is not a multiple of 3.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 == 1:\n            return True\n        elif monthnum3 == 3:\n            return True\n        elif monthnum3 == 5:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 12:\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum = str(monthnum3) # converting the input to string to make it case-insensitive\n    \n    if monthnum.isdigit(): # checking if the input is a digit\n        monthnum = int(monthnum) # converting the string to integer to make it case-insensitive\n        if monthnum in [4, 6, 9, 11]: # checking for February\n            if monthnum3%2 == 0: # checking if the year is even or odd\n                return 29 # February has 29 days in leap years\n            else:\n                return 28 # February has 28 days in non-leap years\n        elif monthnum in [1, 3, 5, 7, 8, 10, 12]: # checking for April, June, August, October, December\n            return 30 # March, April, May, June, July, August, September, October, November, December have 30 days\n        else:\n            return 31 # January, February, March, April, May, June, July, August, September, October, November, December have 31 days\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    # To keep track of the minimum difference between two elements\n    min_diff = float('inf')\n\n    # To store the indices of the first and second elements\n    i = 0\n    j = 1\n\n    # Compare each pair of elements in the array\n    while j < n:\n        diff = arr[j] - arr[i]\n        # If the current difference is smaller than the minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n        # If the current difference is equal to the minimum difference, check if the next element is smaller\n        elif diff == min_diff and arr[j] < arr[j + 1]:\n            min_diff = arr[j + 1] - arr[i]\n        # Move to the next pair of elements\n        i += 1\n        j += 1\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    min_diff = float('inf')\n    min_elem = arr[0]\n    max_elem = arr[0]\n\n    for i in range(n):\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n        elif arr[i] > max_elem:\n            max_elem = arr[i]\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its length as input and returns the minimum difference between any two elements in the array.\n\n    Args:\n        arr (list): An array of integers.\n        n (int): The length of the array.\n\n    Returns:\n        int: The minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(1, n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = float('inf')\n\n    # Traverse through the array\n    for i in range(n - 1):\n        # Calculate the difference between adjacent elements\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n\n    # Initialize the previous element as infinity\n    prev_elem = float('inf')\n\n    # Iterate through the array from the second element to the last element\n    for i in range(1, n):\n        # Calculate the difference between the current element and the previous element\n        curr_diff = arr[i] - arr[i - 1]\n\n        # Check if the difference is less than the minimum difference\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n\n        # Update the previous element\n        prev_elem = arr[i]\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr) < 2:\n        return \"The array should contain at least two elements.\"\n    \n    arr.sort()  # sort the array in ascending order\n    min_diff = arr[1] - arr[0]  # calculate the minimum difference\n    \n    for i in range(1, n-1):\n        if arr[i+1] - arr[i] < min_diff:  # check if the difference between the i-th and (i+1)-th elements is smaller than the current minimum difference\n            min_diff = arr[i+1] - arr[i]\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    The minimum difference between any two elements in the array is calculated by using the concept of the minimum absolute difference algorithm.\n    This algorithm works by sorting the array in non-decreasing order and then iterating through the sorted array. \n    On each iteration, it calculates the absolute difference between the current element and the next element in the array. \n    The minimum difference between any two elements in the array is the minimum absolute difference found so far.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize minimum difference and minimum absolute difference\n    min_diff = arr[1] - arr[0]\n    min_abs_diff = abs(arr[1] - arr[0])\n\n    # Iterate through the sorted array\n    for i in range(1, n - 1):\n        # Calculate the absolute difference between the current element and the next element in the array\n        abs_diff = abs(arr[i] - arr[i + 1])\n\n        # Update minimum difference and minimum absolute difference if the absolute difference is smaller\n        if abs_diff < min_abs_diff:\n            min_diff = arr[i + 1] - arr[i]\n            min_abs_diff = abs_diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    # Sort the given array\n    arr.sort()\n\n    # Initialize two variables\n    min_diff = float('inf')\n    min_pair = None\n\n    # Iterate through the array and find the minimum difference and the corresponding pair\n    for i in range(n):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (arr[i], arr[i+1])\n\n    return min_diff, min_pair"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n\n    # Initialize min_diff and min_index to a large value\n    min_diff = float('inf')\n    min_index = 0\n\n    # Loop through the array\n    for i in range(n):\n        # Find the current element and the next element\n        current_elem = arr[i]\n        next_elem = arr[(i+1) % n]\n\n        # Calculate the difference between the current and next elements\n        diff = abs(current_elem - next_elem)\n\n        # If the difference is smaller than the current minimum, update min_diff and min_index\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    # Return the minimum difference and the index of the minimum difference\n    return min_diff, min_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return \"Array must have at least two elements\"\n\n    arr.sort()\n\n    diff = arr[1] - arr[0]\n    min_diff = diff\n\n    for i in range(1, n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    num = 0\n    for i in str:\n        if i.isdigit():\n            num += 1\n    return num"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function takes an integer n as input and returns True if n is a polite number and False otherwise.\n    A polite number is a positive integer such that the sum of its digits raised to the power of the number of digits is equal to the number itself.\n    For example, 21 is a polite number since 2 + 1 = 3 and 2^3 = 8. However, 10 is not a polite number since 1 + 0 = 1 and 1^2 = 1.\n    '''\n    digits_count = len(str(n))\n    sum_of_digits = sum([int(digit) ** digits_count for digit in str(n)])\n    return sum_of_digits == n\n\nif __name__ == '__main__': \n    n = int(input(\"Enter the value of n: \"))\n    print(\"Is n a polite number? \" + str(is_polite(n)))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Recursive function to find nth polite number\n    def nth_polite_recursive(n, current_polite, current_unpolite):\n        # Base case: if n is 1, return current polite number\n        if n == 1:\n            return current_polite\n        # Recursive case: find nth polite number by incrementing current polite number by 1 and decrementing current unpolite number by 1\n        else:\n            return nth_polite_recursive(n-1, current_polite+1, current_unpolite-1)\n    \n    # Calculate the first polite number\n    first_polite = nth_polite_recursive(1, 1, 0)\n    # Calculate the nth polite number using the formula: nth polite number = (n-1)th polite number - (n-1)th unpolite number\n    nth_polite = nth_polite_recursive(n, first_polite-1, 1)\n    \n    return nth_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_polite(n):\n    def sieve(limit):\n        primes = [True] * (limit + 1)\n        primes[0] = primes[1] = False\n        for i in range(2, int(math.sqrt(limit)) + 1):\n            if primes[i]:\n                for j in range(i * i, limit + 1, i):\n                    primes[j] = False\n        return primes\n\n    def nth_polite_number(primes, n):\n        index = 0\n        for i, is_prime in enumerate(primes):\n            if is_prime:\n                index += 1\n                if index == n:\n                    return i\n\n    limit = 100\n    while True:\n        primes = sieve(limit)\n        result = nth_polite_number(primes, n)\n        if result is not None:\n            return result\n        limit += 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    if n < 1:\n        return False\n\n    def nth_polite_num(i, count):\n        if count == 0:\n            return i\n        elif count % 2 == 0:\n            return nth_polite_num(i + 2, count // 2)\n        else:\n            return nth_polite_num(i - 1, (count - 1) // 2)\n\n    return nth_polite_num(1, n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = []\n    count = 1\n    for i in range(1, n+1):\n        current_number = count\n        if count % i == 0:\n            polite_numbers.append(current_number)\n        count += 1\n    return polite_numbers"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function finds the nth polite number.\n    \"\"\"\n    # Define the base and the exponent for the formula\n    base = 3\n    exponent = 4\n\n    # Calculate the nth polite number using the formula\n    nth_polite = base ** exponent\n\n    # Calculate the difference between the nth polite number and the nth natural number\n    difference = abs(nth_polite - n)\n\n    # Check if the difference is a multiple of 5\n    if difference % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(num):\n        count = 0\n        i = 2\n        while count < num:\n            if is_prime(i):\n                count += 1\n            i += 1\n        return i-1\n\n    def nth_polite(num):\n        return (10**(nth_prime(num-1)))*10**num\n\n    return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return 0\n\n    polite_count = 1\n    previous_polite = 1\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            if is_prime(i):\n                polite_count += 1\n                if polite_count == n:\n                    return i\n            else:\n                previous_polite = i\n            n /= i\n\n    if n > 1:\n        polite_count += 1\n        if polite_count == n:\n            return n\n\n    return previous_polite\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        Returns True if a number is prime, else False.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite(start, end, index):\n        \"\"\"\n        Returns the nth polite number between start and end, using index as a counter.\n        \"\"\"\n        if start > end:\n            return None\n        if start == end:\n            if is_prime(start):\n                return start\n            else:\n                return None\n        mid = (start + end) // 2\n        if is_prime(mid):\n            return mid\n        elif index == 0:\n            return mid + 1\n        else:\n            return nth_polite(start, mid, index - 1)\n\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return nth_polite(1, 999999999, n - 1)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth polite number. \n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        This function checks whether a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_armstrong(num):\n        \"\"\"\n        This function checks whether a number is an Armstrong number or not.\n        \"\"\"\n        power = 0\n        temp = num\n        while temp > 0:\n            power += 1\n            temp //= 10\n        return num == sum(int(digit)**power for digit in str(num))\n\n    def is_happy(num):\n        \"\"\"\n        This function checks whether a number is a happy number or not.\n        \"\"\"\n        temp = num\n        while temp!= 1 and temp!= 4:\n            temp = sum(int(digit)**2 for digit in str(temp))\n            temp %= 1000\n        return temp == 1 or temp == 4\n\n    polite_number = 0\n    i = 1\n    while i <= n:\n        if is_prime(i) and is_armstrong(i) and is_happy(i):\n            polite_number = i\n            break\n        i += 1\n    return polite_number"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i], l1[i+1]))\n    return l2"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        else:\n            l2.append((l1[i], l1[i+1]))\n    return l2"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst)-1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers `arr` and the target sum `sum` as input and returns the count of pairs \n    whose sum is equal to `sum`.\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and a sum as input and returns the number of pairs whose sum is equal to'sum'.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input and returns the number of pairs whose sum is equal to the target sum.\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements that are present in only one of the lists.\n    '''\n    # Create an empty list to store the result\n    diff_list = []\n    # Iterate through each element in the first list\n    for i in li1:\n        # Check if the element is present in both lists\n        if i in li2 and i not in diff_list:\n            # If yes, add it to the diff_list\n            diff_list.append(i)\n    # Return the diff_list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Returns a new list containing the elements of the first list that are not in the second list.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns their difference.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements that are in li1 but not in li2.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff_list.append(li1[i])\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_nums = [i for i in range(1, n*2, 2)]  # generate a list of odd natural numbers from 1 to n*2\n    fourth_powers = [num**4 for num in odd_nums]  # calculate fourth power of each odd number\n    return sum(fourth_powers)  # return the sum of fourth powers\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i*i*i\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    num = 1\n    \n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_of_powers += num ** 4\n            num += 1\n    \n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_nums = [i for i in range(1, 2 * n + 1, 2)]\n    sum_fourth_powers = sum(i**4 for i in odd_nums)\n    return sum_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    num = 3\n    while num <= n:\n        sum += num**4\n        num += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_fourth_powers = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            sum_fourth_powers += i ** 4\n    return sum_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_of_fourth_powers += 4**(i-1)\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n): \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # convert the expression to a queue\n    stack = deque()\n\n    # loop through each character in the expression\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n    # if the loop completes, the expression is balanced\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            if stack[-1]!= '(':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum() or char in '()':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return \"Not Balanced\"\n            top = stack.pop()\n            if top < i - 1:\n                return \"Not Balanced\"\n    return \"Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                j = stack.pop()\n                if j > i:\n                    return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n    \n    for c in exp:\n        if c in open_brackets:\n            stack.append(c)\n        elif c in close_brackets:\n            if not stack:\n                return \"Not balanced\"\n            if c == ')' and stack[-1] == '(':\n                stack.pop()\n            elif c == ']' and stack[-1] == '[':\n                stack.pop()\n            elif c == '}' and stack[-1] == '{':\n                stack.pop()\n            \n    return \"Balanced\" if not stack else \"Not balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. \n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    stack = deque()\n    \n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Stack to keep track of opening parenthesis\n    stack = deque()\n\n    # Traverse the expression from left to right\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            # Push opening parenthesis to stack\n            stack.append(i)\n        elif exp[i] == ')':\n            # If there are opening parenthesis in stack, pop one\n            if len(stack) == 0:\n                return False\n            j = stack.pop()\n            # If closing parenthesis is not at the same level as opening parenthesis, return False\n            if j >= i:\n                return False\n\n    # If there are any opening parenthesis in stack, then the expression is not balanced\n    return len(stack) == 0"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            test_str.pop(i)\n    return''.join(test_str)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words with length less than K\n    words_less_than_K = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is less than K\n        if len(word) < K:\n            # If yes, append the word to the list\n            words_less_than_K.append(word)\n    \n    # Join the words in the list with spaces and return the result\n    return''.join(words_less_than_K)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Create a list to store the new words\n    new_words = []\n\n    # Loop through each word and check its length\n    for word in words:\n        if len(word)!= K:\n            # If the word is not of length K, add it to the new list\n            new_words.append(word)\n\n    # Join the new list of words into a single string\n    new_str =''.join(new_words)\n\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # initialize a list to store the remaining words\n    result = []\n    # loop through the words and check if the length is not equal to K\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    # join the remaining words into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words with length K\n    result = []\n\n    # Loop through the words\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If the length is not K, append it to the result list\n            result.append(word)\n\n    # Join the words in the result list back into a string\n    result_str =''.join(result)\n\n    # Return the final result string\n    return result_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    # Initialize an empty list to store the words without k length\n    result = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is less than k\n        if len(word) < K:\n            # If the word is less than k length, append it to the result list\n            result.append(word)\n    # Return the result list as a string with spaces separating words\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the given string into a list of words\n    words = test_str.split()\n\n    # Initialize an empty list to store the non-K-length words\n    non_K_words = []\n\n    # Loop through the list of words\n    for word in words:\n\n        # If the length of the word is not equal to K, append it to the non-K-length list\n        if len(word)!= K:\n            non_K_words.append(word)\n\n    # Join the non-K-length words back into a string and return it\n    return \" \".join(non_K_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function takes in a string and a regular expression pattern.\n    The function returns a tuple containing the number of occurrences of the pattern in the string and the indices of the first occurrence of the pattern in the string.\n    \"\"\"\n    # Find all occurrences of the pattern in the string\n    matches = re.findall(pattern, text)\n\n    # Check if the pattern is found in the string\n    if not matches:\n        return None\n    \n    # Find the indices of the first occurrence of the pattern in the string\n    indices = [m.start() for m in matches]\n    \n    # Return a tuple containing the number of occurrences and the indices of the first occurrence\n    return len(matches), indices"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        match = re.search(pattern, text)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None\n    except:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        match = re.search(pattern,text)\n        if match:\n            return match.group(),match.start(),match.end()\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    count = 0\n    pos = 0\n    while True:\n        match = re.search(pattern, text, pos)\n        if not match:\n            break\n        count += 1\n        pos = match.start() + len(pattern)\n    return count, pos"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern,text)\n    if matches:\n        for match in matches:\n            return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    for matchNum, match in enumerate(matches, start=1):\n        match_str = match.group()\n        match_pos = match.start()\n        print(f\"Match {matchNum}: {match_str} at position {match_pos}\")\n        print(f\"Text: {text}\")\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    for match in matches:\n        return match[0], matches.index(match)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use re module to find all occurrences of pattern in text\n    occurrences = re.findall(pattern, text)\n    \n    # check if there are any occurrences\n    if not occurrences:\n        return None\n    \n    # find the position of each occurrence in the text\n    positions = []\n    for occurrence in occurrences:\n        positions.append(text.find(occurrence))\n    \n    # return the list of positions and the number of occurrences\n    return positions, len(occurrences)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if (i % 2 == 1):\n            if (nums[i] % 2!= 0):\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not any(nums[i] % 2 == 0 for j in range(i, len(nums), 2)):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1: # Check if i is odd\n            if nums[i] % 2 == 0: # Check if nums[i] is odd\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n        else:\n            if nums[i] % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # check if the index is even\n            continue # skip this iteration\n        else: # if the index is odd\n            odd_count = 0\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2!= 0: # check if the number at odd index is odd\n                    odd_count += 1\n            if odd_count == len(nums[i]): # if all odd numbers are present at odd index\n                print(\"True\") # return True\n            else:\n                print(\"False\") # return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    \n    for i in range(len(nums)):\n        if i % 2!= 0:  # if the current index is odd\n            if nums[i] % 2!= 0:  # if the number at the current index is odd\n                odd_count += 1  # increment the odd count\n    \n    if odd_count == len(nums):  # if all odd numbers were found in odd positions\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and i % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i % 2 == 0) and (nums[i] % 2!= 0):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if len(set(nums[i:i+2])) == 1:\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i+1] in vowels and test_str[i+2] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Create a dictionary to store the frequency of vowels\n    vowel_freq = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    # Iterate through the string and count the frequency of vowels\n    for char in test_str:\n        if char in vowel_freq:\n            vowel_freq[char] += 1\n    # Initialize the count of vowels\n    count = 0\n    # Iterate through the string and check if the current character is a vowel\n    for char in test_str:\n        if char in vowel_freq:\n            # Check if the character is the neighbor of the current vowel\n            if char == test_str[test_str.index(char) - 1] or char == test_str[test_str.index(char) + 1]:\n                count += 1\n    # Return the count of vowels with their frequency\n    return count, vowel_freq"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the array\n    unique_set = set(arr)\n    \n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    \n    # Loop through the unique elements of the array and add their values to the non-repeated sum\n    for num in unique_set:\n        non_repeated_sum += num\n        \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # use set comprehension to get the sum of non-repeated elements\n    non_repeated_sum = sum([elem for elem in arr if elem in unique_elements])\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    \"\"\"\n\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate through the set and add the elements to the sum\n    for element in unique_set:\n        sum += element\n\n    # Return the sum of non-repeated elements\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the unique elements\n    unique_set = set(arr)\n    \n    # Calculate the sum of unique elements\n    unique_sum = sum(unique_set)\n    \n    # Return the sum of unique and repeated elements\n    return unique_sum + sum(arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all the non-repeated elements in the list.\n    \"\"\"\n    # Create a dictionary to store the elements of the list and their count\n    count_dict = {}\n    for elem in arr:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    \n    # Initialize the sum variable to zero\n    sum_non_repeated = 0\n    \n    # Loop through the dictionary and add the non-repeated elements to the sum\n    for elem, count in count_dict.items():\n        if count == 1:\n            sum_non_repeated += elem\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n\n    # Remove duplicates from the list\n    unique_arr = list(set(arr))\n\n    # Initialize the sum variable\n    sum_of_unique = 0\n\n    # Iterate over the unique elements in the list and add their values to the sum_of_unique variable\n    for num in unique_arr:\n        sum_of_unique += num\n\n    # Return the sum of the unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to keep track of unique elements\n    unique_set = set()\n    # iterate over the input list and add each element to the set\n    for element in arr:\n        unique_set.add(element)\n    # initialize a variable to keep track of the sum of unique elements\n    sum_unique = 0\n    # iterate over the unique set and add each element to the sum\n    for element in unique_set:\n        sum_unique += element\n    # return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store the elements of the list\n    unique_elements = set(arr)\n    # sum of unique elements\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr)) # remove duplicates from the list\n    return sum(unique_arr)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list and returns a list of sublists where each sublist contains consecutive duplicates of the original list.\n\n    Args:\n        lst (list): The original list to pack consecutive duplicates from.\n\n    Returns:\n        list: A list of sublists where each sublist contains consecutive duplicates of the original list.\n    \"\"\"\n    return [list(g) for k, g in groupby(lst) if not k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack_duplicates(iterable):\n        return list(groupby(iterable, key=lambda x: x))\n\n    # Group the list elements by their indices\n    indexed_list = enumerate(list1)\n\n    # Pack the consecutive duplicates into sublists\n    packed_list = pack_duplicates(indexed_list)\n\n    # Extract the sublists from the packed list\n    result = [sublist for sublist, _ in packed_list]\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list of integers and returns a list of sublists where each sublist contains consecutive duplicates of the original list elements.\n    \"\"\"\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a list into sublists.\n\n    Args:\n    lst (list): List of elements.\n\n    Returns:\n    list: List of sublists.\n    \"\"\"\n\n    # Group the list by consecutive duplicates\n    grouped_lst = groupby(lst)\n\n    # Convert the grouped list into a list of sublists\n    sublists = [list(g) for k, g in grouped_lst]\n\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if len(list(group)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Using itertools.groupby() function to group the list elements based on their values\n    grouped_list = groupby(sorted(set(list1)))\n    # Using a list comprehension to create a sublist for each group of consecutive duplicates\n    packed_list = [list(group) for group in grouped_list]\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            grouped_list.append([key])\n        elif key == list1[1]:\n            grouped_list[-1].append(key)\n        else:\n            grouped_list.append([key])\n    return grouped_list"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the number of occurrences of each unique sublist\n    sublist_counts = {}\n\n    # iterate through the input list\n    for sublist in list1:\n        # convert each sublist to a tuple and add it to the dictionary with the number of occurrences as the value\n        sublist_counts[tuple(sublist)] = sublist_counts.get(tuple(sublist), 0) + 1\n\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the sublists and their occurrences\n    sublist_dict = {}\n    for i in range(len(list1)):\n        # check if the list at index i is a sublist of another list in list1\n        for j in range(len(list1)):\n            if i!= j:\n                if list(list1[i]) in list1[j]:\n                    # if so, add the tuple (i,j) to the dictionary if it doesn't already exist\n                    if (i,j) not in sublist_dict:\n                        sublist_dict[(i,j)] = 1\n                    else:\n                        sublist_dict[(i,j)] += 1\n                    # if the tuple already exists, increment its value by 1\n                    \n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create an empty dictionary to store the counts of each unique tuple\n    count_dict = {}\n    \n    # Loop through the list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple and add it to the dictionary if it doesn't already exist\n        if sublist not in count_dict:\n            count_dict[sublist] = 1\n        else:\n            count_dict[sublist] += 1\n            \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    # Loop through the list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple already exists in the dictionary\n        if sublist_tuple in count_dict:\n            # Increment the count of the tuple\n            count_dict[sublist_tuple] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        if sublist not in count_dict:\n            count_dict[sublist] = 1\n        else:\n            count_dict[sublist] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # create an empty dictionary\n    sublist_counts = {}\n\n    # iterate through each element in the list\n    for element in list1:\n        # check if the element is a list\n        if isinstance(element, list):\n            # convert the list to a tuple\n            element_tuple = tuple(element)\n\n            # check if the tuple is already in the dictionary\n            if element_tuple in sublist_counts:\n                # increment the count for the tuple\n                sublist_counts[element_tuple] += 1\n            else:\n                # add the tuple to the dictionary with a count of 1\n                sublist_counts[element_tuple] = 1\n\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublists:\n            sublists[sublist_tuple] = 1\n        else:\n            sublists[sublist_tuple] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_lists:\n            unique_lists[sublist_tuple] += 1\n        else:\n            unique_lists[sublist_tuple] = 1\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    for lst in list1:\n        if lst not in list_dict:\n            list_dict[lst] = 1\n        else:\n            list_dict[lst] += 1\n    return list_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                combinations_list.append((test_list[i], test_list[j], test_list[k]))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a list of tuples containing each combination of sums\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            combinations_list.append(tuple(sorted([test_list[k] for k in range(i, j)])))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    # Find all possible pairs of numbers from the given list\n    pairs = combinations(range(1, total_sum + 1), 2)\n    # Find all pairs of numbers whose sum is equal to the total sum\n    combinations_sum = []\n    for pair in pairs:\n        if pair[0] + pair[1] == total_sum:\n            combinations_sum.append((pair[0], pair[1]))\n    return combinations_sum"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Find the maximum sum from the list\n    max_sum = max(test_list)\n\n    # Iterate through all possible combinations of sums\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the sum is smaller than or equal to the maximum sum\n            if sum(test_list[i:j+1]) <= max_sum:\n                # Create a combination of sums as a tuple\n                combination = tuple(test_list[i:j+1])\n                # Print the combination\n                print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    def is_valid(combination):\n        \"\"\"\n        Check if the given combination contains only unique elements.\n        \"\"\"\n        return len(combination) == len(set(combination))\n\n    def combination_sum(combination, target):\n        \"\"\"\n        Check if the sum of the elements in the given combination is equal to the target.\n        \"\"\"\n        return sum(combination) == target\n\n    def all_combinations(lst, target):\n        \"\"\"\n        Generate all combinations of sums with the given target value.\n        \"\"\"\n        return combinations(lst, len(lst))\n\n    combinations_list = []\n\n    for combo in all_combinations(test_list, sum(test_list)):\n        if is_valid(combo):\n            if combination_sum(combo, sum(test_list)):\n                combinations_list.append(combo)\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    result = []\n    for i in range(1, n+1):\n        for j in combinations(range(n), i):\n            sublist = [test_list[k] for k in j]\n            if sum(sublist) == n*(n+1)//2:\n                result.append(tuple(sublist))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Initialize the sum list and result list\n    sum_list = []\n    result_list = []\n\n    # Iterate over the given list of tuples\n    for tup in test_list:\n        # Calculate the sum of the current tuple\n        current_sum = sum(tup)\n\n        # If the current sum is already in the sum list, add the current tuple to the result list\n        if current_sum in sum_list:\n            result_list.append(tup)\n\n        # Otherwise, add the current sum to the sum list\n        else:\n            sum_list.append(current_sum)\n\n    # Return the result list\n    return result_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    def find_combinations_helper(combination, current_sum, target_sum):\n        if current_sum == target_sum:\n            print(combination)\n            return\n        for num in test_list:\n            new_combination = combination + (num,)\n            find_combinations_helper(new_combination, current_sum + num, target_sum)\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            combination = (test_list[i], test_list[j])\n            target_sum = sum(test_list)\n            find_combinations_helper(combination, test_list[i] + test_list[j], target_sum)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # function to calculate sum of tuples in a tuple list\n    def tuple_sum(tup):\n        return sum(tup)\n\n    # function to find combinations of sums with tuples in the given tuple list\n    def find_combinations_of_sums(lst):\n        # sort the list in ascending order\n        lst.sort()\n        # iterate over all possible combinations of pairs of tuples\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                # check if the sum of the current pair of tuples is a valid sum in the list\n                if tuple_sum((lst[i], lst[j])) in lst:\n                    print(lst[i], lst[j])\n\n    # calling the function with the given tuple list\n    find_combinations_of_sums(test_list)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Find the combinations of sums with tuples in the given tuple list.\n\n    Args:\n    test_list: A list of tuples, each tuple contains a list of numbers.\n\n    Returns:\n    A list of tuples containing all the combinations of sums with tuples in the given tuple list.\n\n    '''\n\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    for m in range(l+1, len(test_list)):\n                        result.append((test_list[i], test_list[j], test_list[k], test_list[l], test_list[m]))\n\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    def helper(num):\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    divisors = helper(n)\n    count = len(divisors)\n\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors is even, otherwise, it returns False.\n    \"\"\"\n    # Finding the square root of n\n    sqrt_n = math.sqrt(n)\n    # Counting the number of divisors up to sqrt_n\n    count = 0\n    for i in range(1, int(sqrt_n)+1):\n        if n % i == 0:\n            count += 1\n    # Checking if the count is even or not\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    if n < 0:\n        return None\n    divisors = []\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors.append(i)\n    if n > 1:\n        divisors.append(n)\n    return divisors, len(divisors)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return False\n    elif n % 2 == 0 and count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 0\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if n // i == i:\n                count += 1\n        i += 1\n    if n > 2:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    sqrt_n = math.sqrt(n)\n    count = 0\n    for i in range(1, int(sqrt_n) + 1):\n        if n % i == 0:\n            count += 1\n            if count % 2!= 0:\n                return False\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    divisor = 2\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            count += 1\n        divisor += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    # Find all divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    \n    # Count the number of divisors\n    count = len(divisors)\n    \n    # Check if the count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return True\n    if n < 0:\n        n = -n\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    \n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum_odd += arr[j]\n            \n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n\n    for i in range(n):\n        if i == 0 or arr[i] % 2 == 0:\n            left = 0\n            right = i\n            while left < right:\n                subarray_sum = sum(arr[left:right+1])\n                if subarray_sum % 2 == 1:\n                    sum_odd += subarray_sum\n                left += 1\n                right -= 1\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum of odd length subarrays\n    sum = 0\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Check if the length of the subarray is odd\n        if len(arr[i:]) % 2!= 0:\n            # Find the sum of the odd length subarray\n            subarray_sum = sum(arr[i:])\n            # Add the subarray sum to the total sum\n            sum += subarray_sum\n    # Return the total sum of odd length subarrays\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    ans = 0\n    for i in range(1, n):\n        left = 0\n        right = i\n        while left < right:\n            if right - left + 1 % 2 == 1:\n                ans += arr[left] + arr[right]\n            left += 1\n            right -= 1\n    return ans"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum_arr = []\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:\n                temp_sum = 0\n                for k in range(i, j+1):\n                    temp_sum += arr[k]\n                sum_arr.append(temp_sum)\n    return sum_arr"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1:\n                sum += arr[j] - arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays in the array.\n    \"\"\"\n    # Initialize the sum of odd length subarrays to 0\n    total_sum = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is odd and its index is less than or equal to the remaining elements in the array\n        if arr[i] % 2!= 0 and i <= len(arr) - 1:\n            # Initialize a variable to store the sum of the current element and the next odd element\n            temp_sum = arr[i] + arr[i+1]\n            \n            # Check if the next odd element exists and is at least one element ahead of the current element\n            if i + 2 <= len(arr) - 1:\n                # Add the sum of the next two odd elements to the temporary sum\n                temp_sum += arr[i+2]\n            \n            # Add the temporary sum to the total sum\n            total_sum += temp_sum\n            \n    # Return the total sum of odd length subarrays\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    odd_sum = 0\n    temp = 0\n\n    for i in range(n):\n        temp += arr[i]\n        if i % 2 == 0:\n            odd_sum += temp\n            temp = 0\n\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    # Initialize sum to zero\n    sum = 0\n\n    # Loop through each subarray\n    for i in range(len(arr)):\n        # Check if the current subarray has odd length\n        if len(arr[i]) % 2 == 1:\n            # Add the current subarray to the sum\n            sum += arr[i][0]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    # Initialize a variable to store the sum of odd length subarrays\n    total_sum = 0\n    \n    # Iterate through the given array\n    for i in range(len(arr)):\n        # If the current index is odd, add the element at that index to the total sum\n        if i % 2!= 0:\n            total_sum += arr[i]\n            \n    return total_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_value\n    d = max_value - min_value\n    if max_value == min_value:\n        h = 0\n    else:\n        if max_value == r:\n            h = (g - b) / d + (g < b) * 6\n        elif max_value == g:\n            h = (b - r) / d + 2\n        elif max_value == b:\n            h = (r - g) / d + 4\n        h /= 6\n    if max_value == 0:\n        s = 0\n    else:\n        s = d / max_value\n    h, s, v = round(h * 360), round(s * 100), round(v * 100)\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    del_val = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / del_val\n        elif max_val == g:\n            h = 2 + (b - r) / del_val\n        else:\n            h = 4 + (r - g) / del_val\n        \n        h *= 60\n        if h < 0:\n            h += 360\n        \n        s = del_val / max_val\n    \n    v = max_val\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r/255, g/255, b/255 # Convert rgb values to 0-1 range\n    \n    # Convert rgb to hsv\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    \n    if max_rgb == min_rgb:\n        h = s = v = max_rgb\n    else:\n        d = max_rgb - min_rgb\n        s = max_rgb\n        \n        if max_rgb == r:\n            h = (g - b) / d\n        elif max_rgb == g:\n            h = 2 + (b - r) / d\n        else:\n            h = 4 + (r - g) / d\n        \n        h *= 60\n        if h < 0:\n            h += 360\n        \n        v = max_rgb\n        \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color model.\n\n    Parameters:\n    r (int): Red color component (0-255)\n    g (int): Green color component (0-255)\n    b (int): Blue color component (0-255)\n\n    Returns:\n    hsv (tuple): Tuple containing the hue, saturation and value components (0-360, 0-1, 0-1)\n    \"\"\"\n\n    # Convert RGB to float values between 0 and 1\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Get the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Get the delta value\n    delta = max_val - min_val\n\n    # Determine the hue\n    if max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    # Convert the hue to degrees\n    h *= 60\n    if h < 0:\n        h += 360\n\n    # Determine the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Determine the value\n    value = max_val\n\n    # Convert the values to tuples and return\n    return (int(h), int(saturation * 100), int(value * 100))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = ((g - b) / delta) % 6\n    elif max_val == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    h = round(h * 60)\n    \n    if h < 0:\n        h += 360\n    \n    s = 0\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n        \n    v = max_val\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes in RGB values and returns the corresponding HSV values.\n    '''\n    # Convert the RGB values to HSV values\n    hsv = [(r / 255.0, g / 255.0, b / 255.0)]\n    \n    # Convert the HSV values to HSL values\n    hsl = rgb_to_hsl(r, g, b)\n    hsv = rgb_to_hsv(hsl[0], hsl[1], hsl[2])\n    \n    return hsv\n\ndef rgb_to_hsl(r, g, b):\n    '''\n    This function takes in RGB values and returns the corresponding HSL values.\n    '''\n    # Find the maximum and minimum values of the RGB values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    delta = max_val - min_val\n    \n    # Calculate the Hue value\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = ((g - b) / delta) % 6\n    elif max_val == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    # Calculate the Saturation value\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    # Calculate the Lightness value\n    l = (max_val + min_val) / 2\n    \n    # Convert the Hue value from degrees to radians\n    h = h * 60\n    if h < 0:\n        h += 360\n    \n    return [h, s, l]\n\ndef rgb_to_hsv(h, s, v):\n    '''\n    This function takes in HSV values and returns the corresponding HSL values.\n    '''\n    # Convert the Hue value from degrees to radians\n    h = h * 360\n    if h < 0:\n        h += 360\n    \n    # Calculate the Lightness value\n    if s == 0:\n        l = v\n    else:\n        if v < 0.5:\n            l = v * (1 + s)\n        else:\n            l = v + s - v * s\n        \n        l = l / 2.0\n    \n    # Calculate the Saturation value\n    if l == 0 or l == 1:\n        s = 0\n    else:\n        s = l\n    \n    return [h, s, l]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_c\n    d = max_c - min_c\n\n    if max_c == min_c:\n        h = 0\n    elif max_c == r:\n        h = 60 * ((g - b) / d % 6)\n    elif max_c == g:\n        h = 60 * ((b - r) / d + 2)\n    elif max_c == b:\n        h = 60 * ((r - g) / d + 4)\n\n    if max_c == 0:\n        s = 0\n    else:\n        s = d / max_c\n\n    if max_c == v:\n        h = h / 60.0\n    elif max_c == r:\n        h = (h / 60.0) + 1.0\n    elif max_c == g:\n        h = (h / 60.0)\n    elif max_c == b:\n        h = (h / 60.0) - 1.0\n\n    return round(h, 2), round(s, 2), round(v, 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert rgb to r,g,b values between 0 and 255\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    \n    # Calculate min and max values for each channel\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    # Calculate delta value\n    delta = max_val - min_val\n    \n    # Calculate saturation and value for hsv color model\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta / max_val\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h *= 60\n        if h < 0:\n            h += 360\n    \n    # Convert h,s,v values to 0-1 range\n    h = h / 360\n    s = s / max_val\n    v = max_val\n    \n    # Return h,s,v values\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts an RGB color to HSV color model.\n    \"\"\"\n    # Get the maximum and minimum values in the RGB color space\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the sum of the values of the RGB color\n    sum_value = max_value + min_value\n\n    # Calculate the brightness of the RGB color\n    brightness = max_value / 255.0\n\n    # Calculate the saturation of the RGB color\n    if max_value == min_value:\n        saturation = 0.0\n    else:\n        if sum_value <= 1.0:\n            saturation = (max_value - min_value) / (max_value + min_value)\n        else:\n            saturation = 0.0\n\n    # Calculate the hue of the RGB color\n    if saturation == 0.0:\n        hue = 0.0\n    else:\n        if r == max_value:\n            hue_value = (g - b) / (max_value - min_value)\n        elif g == max_value:\n            hue_value = 2.0 + (b - r) / (max_value - min_value)\n        else:\n            hue_value = 4.0 + (r - g) / (max_value - min_value)\n\n        hue = hue_value / 6.0\n\n        if hue < 0.0:\n            hue += 1.0\n\n    # Convert the hue value from degrees to radians\n    hue = hue * 2.0 * math.pi\n\n    # Return the HSV values in a tuple\n    return (hue, saturation, brightness)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0\n    s = 0\n    v = max(r, g, b)\n    delta = v - min(r, g, b)\n\n    if delta == 0:\n        h = 0\n    elif r == v:\n        h = ((g - b) / delta) % 6\n    elif g == v:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = int(h * 60)\n    if h < 0:\n        h += 360\n\n    s = delta / v\n    if s == 0:\n        v = 0\n    else:\n        v = v / 255\n\n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num + 1\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count!= 0 and odd_count!= 0:\n        return list1[0] * list1[1]\n    else:\n        return None\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    if even_count > 0 and odd_count > 0:\n        return even_product * odd_product\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count == 1 and odd_count == 1:\n            product = num\n            break\n        \n        if even_count > 1 or odd_count > 1:\n            product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= min(even_count, odd_count)\n            even_count = 0\n            odd_count = 0\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    If there are no even or odd numbers in the list, the function will return None.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 or odd_count == 0:\n        return None\n    else:\n        return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd numbers.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product *= num\n            \n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    # Initialize an empty list to store the integers\n    integers = []\n    # Loop through each word in the list\n    for word in words:\n        # Try to convert the word to an integer\n        try:\n            # If the conversion is successful, add the integer to the list\n            integers.append(int(word))\n        # If the conversion fails, print an error message\n        except ValueError:\n            print(\"Error: {} is not a valid integer.\".format(word))\n    # Return the list of integers\n    return integers"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n\n    # Convert each string to an integer and append to a new list\n    int_list = [int(item.strip()) for item in str_list]\n\n    # Convert the list of integers into a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n\n    # Create an empty list to store the integer tuples\n    int_list = []\n\n    # Loop through the list of strings\n    for string in str_list:\n        # Check if the string is an integer\n        try:\n            # Convert the string to an integer\n            int_list.append(int(string))\n        except ValueError:\n            # If the string is not an integer, skip it\n            continue\n\n    # Return the integer tuple as a list\n    return int_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the tuple string to a list of strings\n    list_str = test_str.replace('(', '').replace(')', '').split(',')\n    # Convert the list of strings to a list of integers\n    list_int = [int(x.strip()) for x in list_str]\n    # Convert the list of integers to a tuple\n    tuple_int = tuple(list_int)\n    return tuple_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(int(i) for i in test_str.split(','))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\" \", \"\").split(\",\")\n    tuple_int = [int(i) for i in tuple_str]\n    return tuple_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define the string pattern to match the tuple\n    pattern = re.compile(r'\\((\\d+),(\\d+)\\)')\n    # Find all the tuples in the string\n    tuples = re.findall(pattern, test_str)\n    # Convert the tuples to integer tuples\n    return tuple([tuple(map(int, x.split(','))) for x in tuples])"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        int_tuple = tuple(int(s) for s in test_str.split(','))\n        return int_tuple\n    except ValueError:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = tuple(test_str.split(','))\n    return tuple([int(i) for i in test_tuple])"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(map(int, test_str.split(',')))\n    except ValueError:\n        return None"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): A sorted list of integers.\n    x (int): The value to be inserted.\n\n    Returns:\n    int: The index of the right insertion point for x.\n    \"\"\"\n    # Use bisect to find the index of the right insertion point\n    i = bisect.bisect_right(a, x)\n    # If x already exists in the list, return its index\n    if i < len(a) and a[i] == x:\n        return i\n    # Otherwise, return the index of the next element after x\n    else:\n        return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif index > 0 and a[index - 1] == x:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    if a[index] == x:\n        return index\n    if a[index] < x:\n        return bisect.bisect_left(a, x)\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # binary search for the left insertion point\n    left = bisect.bisect_left(a, x)\n\n    # if x is in the first half of the sorted list,\n    # we need to search for the right insertion point\n    if x == a[left]:\n        # binary search for the right insertion point\n        right = bisect.bisect_right(a, x)\n\n        # return the smallest index that is greater than or equal to the left insertion point\n        return min(left, right - 1)\n    else:\n        # return the left insertion point\n        return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Given a sorted list `a` and a value `x`, return the index `i` such that `a[i]` is the smallest\n    value greater than or equal to `x`, or the length of the list if there is no such value.\n\n    This function uses binary search to achieve an average time complexity of O(log n)\n    \"\"\"\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\ba\\bb{3}\\b'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return 'Match found'\n    else:\n        return 'No match found'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"Matches found:\", matches)\n    else:\n        print(\"No matches found.\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=[bb]{3})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{2}b{3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Concatenate the tuple and string\n    new_tuple = test_tuple + (test_str,)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_list = []\n    for element in test_list:\n        new_tuple_list.append(element + test_str)\n    return tuple(new_tuple_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str.split(',')) + (tuple(test_list),)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): A list of integers to be converted to a tuple.\n    test_str (string): A string of characters to be converted to a tuple.\n\n    Returns:\n    A tuple containing the elements of the input list and string.\n    \"\"\"\n    return (test_list + tuple(test_str))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_str +'' + str(x) for x in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str.split()) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Iterate through the list\n    for i in range(len(nums)):\n        # If the index is even\n        if i % 2 == 0:\n            # Iterate through the even index\n            for j in range(i+2, len(nums), 2):\n                # If the element at the current index is odd\n                if nums[j] % 2 == 1:\n                    return False\n\n    # If no even index was found with odd elements\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and i % 2 == 0:\n            even_count += 1\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # check if index is even\n            count = 0\n            for j in range(len(nums)):\n                if nums[i] == nums[j]: # check if current element is equal to the next element in the list\n                    count += 1\n            if count % 2 == 0: # check if the count is even\n                print(\"Index {} contains even numbers\".format(i))\n            else:\n                print(\"Index {} doesn't contain even numbers\".format(i))\n    else: # if loop is finished without breaking\n        print(\"The list contains no even numbers\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    even_indices = []\n    \n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_indices.append(i)\n    \n    for even_index in even_indices:\n        count = 0\n        for num in nums[even_index:]:\n            if num % 2 == 0:\n                count += 1\n            if count > 2:\n                return False\n        if count == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count > 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not any(nums[i] % 2 == 0 for j in range(i+1, len(nums), 2)):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and i % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n\n    # Using list comprehension to remove tuples from the given tuple\n    new_tup = [item for item in test_tup if not isinstance(item, tuple)]\n\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n\n    Args:\n    test_tup (tuple): A tuple containing nested tuples\n\n    Returns:\n    tuple: A new tuple without nested tuples\n    \"\"\"\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return tuple(flat_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = []\n    for tup in test_tup:\n        if not isinstance(tup, tuple):\n            result_tup.append(tup)\n    return result_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_list.append(item)\n        else:\n            new_list.extend(remove_nested(item))\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [element for element in test_tup if isinstance(element, (list, tuple))]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    def remove_nested_helper(cur_tup, result_list):\n        if isinstance(cur_tup, tuple):\n            for item in cur_tup:\n                remove_nested_helper(item, result_list)\n        else:\n            result_list.append(cur_tup)\n\n    result_list = []\n    remove_nested_helper(test_tup, result_list)\n    return result_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for tup in test_tup for x in tup]"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_lists(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two parameters, an array and an element to search for.\n    It returns the last position of the element in the array if it exists, otherwise it returns -1.\n    \"\"\"\n    i = 0\n    n = len(arr)\n    while i < n and arr[i] < x:\n        i += 1\n    if i == n:\n        return -1\n    for j in range(i, n):\n        if arr[j] == x:\n            return j\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Initialize variables\n    low = 0\n    high = len(arr) - 1\n\n    # Perform binary search to find the last position\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # Element not found\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in an array and a target element as input and returns the index of the last occurrence of the target element in the array. If the target element is not found in the array, it returns -1.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Finds the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): The sorted array.\n    x (any): The element to find.\n\n    Returns:\n    int: The last position of x in arr.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize variables to keep track of the position of the last element and the element itself\n    last_pos = -1\n    last_elem = None\n    \n    # Loop through the array to find the last element and its position\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_pos = i\n            last_elem = x\n    \n    # Return the last position and element\n    return last_pos, last_elem"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right=0,len(arr)-1\n    while left<=right:\n        mid=(left+right)//2\n        if arr[mid]==x:\n            while mid>0 and arr[mid-1]==x:\n                mid-=1\n            return mid\n        elif arr[mid]<x:\n            left=mid+1\n        else:\n            right=mid-1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two parameters:\n    - arr: the sorted array to search in\n    - x: the element to search for in the array\n    \"\"\"\n    # Initialize the last position to -1\n    last_position = -1\n\n    # Loop through the array starting from the second element (the first element is not considered)\n    for i in range(1, len(arr)):\n        # If the element at the current position is equal to the element we're searching for, update the last position\n        if arr[i] == x:\n            last_position = i\n\n    # Return the last position\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the index and count variables\n    index = -1\n    count = 0\n    \n    # Traverse the array\n    for i in range(len(arr)):\n        # Check if the current element is equal to the target element\n        if arr[i] == x:\n            # If it is, increment the count and update the index if necessary\n            count += 1\n            index = i\n            \n    # Return the last index of the target element\n    return index"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)[^\\w]*b(?=\\w)'\n    return re.findall(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.b$\"\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)[^b]*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_value = 0\n    for value in dict.values():\n        sum_value += value\n    return sum_value"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for key, value in dict.items():\n        sum_of_items += value\n    return sum_of_items"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n \n    odd_sum = 0 \n    for i in range(l, r+1): \n        if i % 2!= 0: \n            odd_sum += i \n    return odd_sum "
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum_of_odd = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum_of_odd += l\n        l += 1\n    return sum_of_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum_of_odds = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum_of_odds += l\n        l += 1\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_of_odds = 0\n    for i in range(2, n+1, 2):\n        sum_of_odds += i\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize a variable to store the sum\n    sum_value = 0\n    # loop through the range of natural numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the current number is odd\n        if i % 2!= 0:\n            # add the number to the sum_value\n            sum_value += i\n    # return the sum\n    return sum_value"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr:\n        return 0\n    \n    total = arr[0]\n    for i in range(1, len(arr)):\n        total += arr[i]\n    \n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_array(arr):\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d | n >> (32 - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary string\n    bin_str = bin(n)[2:]\n\n    # Pad the binary string with zeros until it reaches d bits long\n    if len(bin_str) < d:\n        bin_str = \"0\"*(d-len(bin_str)) + bin_str\n\n    # Reverse the order of the last d bits and the first d bits\n    rotated_bin_str = bin_str[-d:] + bin_str[:-d]\n\n    # Convert the binary string back to an integer\n    rotated_int = int(rotated_bin_str, 2)\n\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to shift\n    shift_amount = d % 32\n    # Calculate the number of bits to rotate\n    rotation_amount = 32 - shift_amount\n\n    # Calculate the mask for the leftmost bits\n    mask = (1 << shift_amount) - 1\n\n    # Calculate the mask for the rightmost bits\n    right_mask = (1 << rotation_amount) - 1\n\n    # Calculate the shifted value\n    shifted_value = n & mask\n\n    # Calculate the rotated value\n    rotated_value = (shifted_value >> shift_amount) | (n << rotation_amount)\n\n    # Return the rotated value\n    return rotated_value"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    \n    # split the 32-bit number into its individual bits\n    bits = [(n >> i) & 1 for i in range(32)]\n    \n    # rotate the bits left by d bits\n    rotated_bits = [bits[i] << d | bits[i+d] >> (32-d) for i in range(32-d)]\n    \n    # combine the rotated bits back into a 32-bit number\n    rotated_n = sum([rotated_bits[i] << i for i in range(32)])\n    \n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff # 32-bit mask\n    left_shift = d % 32 # determine number of bits to shift to the left\n    right_shift = 32 - left_shift # determine number of bits to shift to the right\n    result = (n << left_shift) | (n >> right_shift) & mask # rotate bits and mask\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    \"\"\"\n    # convert the number to binary representation\n    binary_n = bin(n)[2:]\n    # check if d is negative\n    if d < 0:\n        d = d % 32  # handle the case when d is negative\n        binary_n = '0' * d + binary_n[:d]  # left pad the binary string with zeros to make it d bits long\n    else:\n        d %= 32  # handle the case when d is positive\n        binary_n = binary_n[-d:] + '0' * d  # right pad the binary string with zeros to make it d bits long\n    # convert the binary string back to decimal\n    n = int(binary_n, 2)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff  # rotate left by d bits and mask to 32 bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Divide the number by 2 raised to the power of d\n    result = n >> d\n    # Shift the number to the left by d bits\n    result <<= 32 - d\n    # Add the original number to get the final result\n    result += n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the number to binary\n    binary = format(n, \"032b\")\n    # split the binary into two parts\n    binary1, binary2 = binary[:d], binary[d:]\n    # combine the two parts and convert back to decimal\n    result = int(binary1 + binary2, 2)\n    return result"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function removes all whitespaces from a given string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    # use regular expression to remove all whitespace characters\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if x == y:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if y == x:\n        count += 1\n    if x == z and y == z:\n        count += 1\n    if x == z and y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z and x == z:\n        count += 1\n    if y == z and x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(1, max(x, y, z) + 1):\n        if x == i:\n            count += 1\n        elif y == i:\n            count += 1\n        elif z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y:\n        count += 1\n    elif x == z:\n        count += 1\n    elif y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    # Check if all three numbers are equal\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x == z!= y:\n        count += 1\n    elif y == z!= x:\n        count += 1\n    elif x!= y!= z:\n        count += 1\n    # Return the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    # create a set of unique integers from the three input integers\n    nums = set([x, y, z])\n    # count the number of unique integers (i.e. the number of equal numbers)\n    count = len(nums)\n    # return the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    # Initialize a variable to count the number of equal numbers\n    count = 0\n\n    # Loop through each number from 1 to 3\n    for i in range(1, 4):\n\n        # If the number is equal to both x and y, increment the count variable\n        if i == x or i == y:\n            count += 1\n\n    # Return the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x+1):\n        if i == x:\n            count += 1\n            continue\n        for j in range(y+1):\n            if j == y:\n                count += 1\n                continue\n            if i+j == x+y:\n                count += 1\n                break\n        if count >= 2:\n            return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                return j-i\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i\n    return n-1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left = 0\n    right = n - 1\n    count = 0\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            count += (right - mid)\n            left = mid + 1\n        else:\n            right = mid\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    '''\n    This function counts the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    count = 0\n\n    # Traverse the array and check if any rotation is possible.\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            # If a rotation is found, increment the count.\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n                arr[i], arr[j] = arr[j], arr[i]\n                if count == n-1:\n                    return count\n            else:\n                return count\n                break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    # count the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(1, n):\n        if arr[i] < min_element:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[n-1-i]:\n            return i + 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    # Traverse the array and count the number of inversions\n    for i in range(n):\n        left = 0\n        right = i\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] < arr[right]:\n                left = mid + 1\n            else:\n                right = mid\n        count += right - i\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # check if array is already sorted or not\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n\n    # check if array has any rotations or not\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                return n-i-1\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0 or arr[i] < arr[i - 1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n\n    # Find the square root of the number using the math library\n    import math\n    sqrt_n = math.sqrt(n)\n\n    # Check if the square root is an integer\n    if sqrt_n == int(sqrt_n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks if the given number is a perfect square or not.\n    It uses the math library to check whether the square root of n is an integer or not.\n    \"\"\"\n\n    # import the math library\n    import math\n\n    # calculate the square root of n\n    sqrt_n = math.sqrt(n)\n\n    # check if the square root of n is an integer or not\n    if sqrt_n == int(sqrt_n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    i = 0\n    while i * i <= n:\n        if n % i == 0 and n // i == i:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    \n    square = 0\n    root = n // 2\n    \n    while square <= root:\n        if square * square == n:\n            return True\n        elif square * square < n:\n            square += 1\n        else:\n            square -= 1\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # first check if n is 0 or 1\n    if n == 0 or n == 1:\n        return True\n    \n    # check for perfect squares using trial division method\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    # if we reach here, then n is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    if n <= 0:\n        return False\n\n    sqrt_n = int(n ** 0.5) + 1\n\n    for i in range(sqrt_n):\n        if n - i * i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    sqrt_n = int(n**0.5) + 1\n    for i in range(sqrt_n, -1, -1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    It returns True if the number is a perfect square else False.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n\n    Parameters:\n    n (int): the number to be checked\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    # Using the Babylonian method\n    # To check if the number is a perfect square, we need to check if its square root is an integer\n    # Here's how it works:\n    # 1. Check if the square of the given number is an integer\n    # 2. Check if the square root of the square of the given number is an integer\n    # 3. If both of the above conditions are true, the number is a perfect square\n    # 4. If either of the above conditions is true, the number is not a perfect square\n\n    # Check if the square of the given number is an integer\n    square = int(n**0.5)\n    if n == square**2:\n        return True\n\n    # Check if the square root of the square of the given number is an integer\n    root_square = int(square**0.5)\n    if n == root_square**2:\n        return True\n\n    # If none of the above conditions are true, the number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n\n    # Base case\n    if n <= 1:\n        return True\n\n    # Initialize the square root of the number\n    sqrt_n = int(n ** 0.5) + 1\n\n    # Iterate from 1 to sqrt_n\n    for i in range(1, sqrt_n + 1):\n        # Check if n is divisible by i^2\n        if n % (i ** 2) == 0:\n            return True\n\n    # If we reach here, then n is not a perfect square\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of integers as input and returns True if the product of all the \n    integers is even, else returns False.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of numbers as input and returns True if the product of all numbers in the list is even,\n    and False otherwise.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"Product is even.\")\n    else:\n        print(\"Product is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes an array of integers as input and returns True if the product of all the numbers is even, False otherwise.\n    '''\n\n    product = 1\n\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to keep track of the current maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate over each list in the input list of lists\n    for i in range(len(lists)):\n        # Iterate over each element in the current list\n        for j in range(len(lists[i])):\n            # Add the current element to the current sum\n            current_sum += lists[i][j]\n            # If the current sum is greater than the maximum sum so far, update the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n                # Reset the current sum to the current element\n                current_sum = lists[i][j]\n\n    # Create a new list with only one element, which is the maximum sum of all sublists\n    result = [max_sum]\n\n    # Recursively find the maximum sum of the sublists that do not include the current element\n    for sublist in lists:\n        if sublist!= result:\n            sublist_sum = max_sum_list([sublist])\n            if sublist_sum > result[0]:\n                result = sublist_sum\n\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize max_sum and max_list to None\n    max_sum = None\n    max_list = None\n\n    # Loop through each list in the input list of lists\n    for lst in lists:\n        # Initialize current_sum to 0 and current_list to []\n        current_sum = 0\n        current_list = []\n\n        # Loop through each element in the list\n        for num in lst:\n            # Add the element to the current_sum and append it to the current_list\n            current_sum += num\n            current_list.append(num)\n\n        # Check if the current_sum is greater than max_sum so far\n        if current_sum > max_sum or (current_sum == max_sum and current_list > max_list):\n            # Update max_sum and max_list if current_sum is greater than max_sum\n            max_sum = current_sum\n            max_list = current_list\n\n    # Return the maximum sum list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j == 0:\n                max_sum = lists[i][j]\n                max_list = [lists[i][j]]\n            else:\n                new_sum = lists[i][j] + max_list[-1]\n                if new_sum > max_sum:\n                    max_sum = new_sum\n                    max_list = [lists[i][j]]\n                elif new_sum == max_sum:\n                    max_list.append(lists[i][j])\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lists:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Find the sum of all the elements in the input list\n    total_sum = sum(sum(sublist) for sublist in lists)\n    # Initialize the variable to store the maximum sum\n    max_sum = 0\n    # Loop through the input list of lists and find the maximum sum of any sublist\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    # Loop through the input list of lists again and find the sublist with the maximum sum\n    max_sublist = None\n    for sublist in lists:\n        if sum(sublist) == max_sum:\n            max_sublist = sublist\n            break\n    # Return the maximum sublist\n    return max_sublist"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = lst\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize the maximum sum to be negative infinity\n    max_sum = float('-inf')\n\n    # Loop through each list in the input list of lists\n    for lst in lists:\n\n        # Initialize the sum to be zero\n        current_sum = 0\n\n        # Loop through each element in the current list\n        for num in lst:\n\n            # Add the current element to the sum\n            current_sum += num\n\n            # Update the maximum sum if the sum is greater than the current maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n    # Return the list whose sum of elements is the maximum\n    return lst"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    uppercase_start = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n                uppercase_start = i\n        else:\n            uppercase_count = 0\n    return test_str[uppercase_start:uppercase_start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n        else:\n            uppercase_count = 0\n        if uppercase_count > max_run:\n            max_run = uppercase_count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables for maximum run length and current run length\n    max_run = 0\n    current_run = 0\n    \n    # Loop through the string and count the number of uppercase characters in each run\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            # If current run is greater than maximum, update maximum\n            if current_run > max_run:\n                max_run = current_run\n            # Reset current run to 0\n            current_run = 0\n    \n    # Check if the last run is greater than maximum\n    if current_run > max_run:\n        max_run = current_run\n    \n    # Return the maximum run length\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # initialize variables\n    max_run = 0\n    curr_run = 1\n\n    # iterate through string\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 1\n\n    # if last character is uppercase, update max_run\n    if test_str[-1].isupper():\n        max_run += 1\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 1\n    max_count = 1\n    max_start = 0\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = i\n        else:\n            count = 1\n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 1\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 1\n        if current_run > max_run:\n            max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    curr_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 1\n    if curr_run > max_run:\n        max_run = curr_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    run_length = 0\n    current_char = None\n\n    for char in test_str:\n        if char.isupper():\n            if current_char is None or char.lower()!= current_char.lower():\n                max_run = max(max_run, run_length)\n                run_length = 1\n                current_char = char\n            else:\n                run_length += 1\n        else:\n            max_run = max(max_run, run_length)\n            run_length = 0\n            current_char = None\n\n    max_run = max(max_run, run_length)\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    max_run = 0\n    max_start = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str) - 1:\n                max_run += 1\n            else:\n                j = i + 1\n                while j < len(test_str) and test_str[j].isupper():\n                    j += 1\n                max_run = j - i\n                if max_run > max_run_uppercase(test_str[i:j]):\n                    max_start = i\n                    max_run_uppercase(test_str[i:j])\n\n    return max_start, max_run_uppercase(test_str[max_start:max_start+max_run])"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    current_char = test_str[0]\n    \n    # Iterate over the string\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 1\n            current_char = test_str[i]\n            \n    # Check for the last run\n    if current_run > max_run:\n        max_run = current_run\n        \n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # loop through the list of numbers\n    for num in nums:\n        # check if the number is odd\n        if num % 2!= 0:\n            # if it is odd, return the number\n            return num\n    # if no odd numbers are found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # initialize variables to keep track of odd numbers and index\n    odd_count = 0\n    odd_index = -1\n    \n    # loop through the list of numbers\n    for i in range(len(nums)):\n        # check if the number is odd\n        if nums[i] % 2!= 0:\n            # if it is odd, increment odd_count and update odd_index if necessary\n            odd_count += 1\n            if odd_index == -1:\n                odd_index = i\n        # if the count reaches 1, return the first odd number\n        if odd_count == 1:\n            return nums[odd_index]\n    # if no odd numbers are found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list. If no odd number is found, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[K] == 0:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        for i in range(K):\n            if test_tup[i] not in test_tup[:K-i]:\n                return False\n    else:\n        for i in range(K):\n            if test_tup[i] not in test_tup[-K+i:]:\n                return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for item in test_tup:\n        if K in item:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Iterate through the tuples in test_tup and check if K is present\n    for tup in test_tup:\n        if K in tup:\n            return True\n    # If no K is found, return False\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_list, K):\n    '''\n    This function takes a list of tuples and a value K as input and returns True if the tuples contain the k, and False otherwise.\n    '''\n    for tup in test_list:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes in a tuple and a number K as input and returns True if the tuple contains K, False otherwise.\n    '''\n\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    for i in test_tup:\n        if i == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Check if the given tuples contain the k or not\n    for tup in test_tup:\n        if tup[0] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(len(test_tup)-K+1):\n        if test_tup[i:i+K] == K * (K-1) // 2:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same number of elements.\")\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples have different lengths.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            print(f\"{test_tup2[i]} is smaller than {test_tup1[i]}\")\n        else:\n            print(f\"{test_tup2[i]} is not smaller than {test_tup1[i]}\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                return False\n        return True"
    }
]