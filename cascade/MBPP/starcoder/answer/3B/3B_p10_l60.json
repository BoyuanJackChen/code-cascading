[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Find the shared elements between two lists.\n\n    Args:\n        test_tup1 (tuple): A tuple of lists or tuples.\n        test_tup2 (tuple): A tuple of lists or tuples.\n\n    Returns:\n        A list of shared elements between the two lists.\n    \"\"\"\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], list):\n            for j in range(len(test_tup2[i])):\n                if test_tup1[i][j] in test_tup2[i]:\n                    shared_elements.append(test_tup1[i][j])\n        else:\n            if test_tup1[i] in test_tup2:\n                shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create empty set to store the shared elements\n    shared_set = set()\n    # Iterate through each element in both lists\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_set.add(element)\n    # Convert the set to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem1 in test_tup1:\n        if elem1 in test_tup2:\n            shared_elements.append(elem1)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_set = set(test_tup1) & set(test_tup2)\n    return list(shared_set)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer input n and returns a boolean output whether n is not prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is a prime number\n    and False otherwise. A prime number is a positive integer greater than 1 that has no\n    positive integer divisors other than 1 and itself.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_not_prime(n):\n    '''\n    This function will check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the input list to a heap\n    heap = [(-num, i) for i, num in enumerate(nums)]\n    heapq.heapify(heap)\n\n    # Pop the largest n elements from the heap and return them as a list\n    return [heapq.heappop(heap)[1] for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n    return [hq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of size n\n    min_heap = hq.nsmallest(n,nums)\n    # Remove and return the smallest element\n    return hq.heappop(min_heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        raise ValueError(\"n should be less than or equal to the length of the list\")\n\n    heap = [(-num, idx) for idx, num in enumerate(nums)]\n    hq.heapify(heap)\n\n    return [-num for num, idx in heap[:n]]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, -num)\n        else:\n            if -num > max_heap[0]:\n                hq.heappop(max_heap)\n                hq.heappush(max_heap, -num)\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n\n    heap = hq.nsmallest(n, nums)\n    # Extract the elements from the heap and append them to a list\n    largest = [heapq.heappop(heap) for i in range(n)]\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a min heap\n    nums_heap = hq.nsmallest(n,nums)\n    # extract the largest n elements from the heap and return them in a list\n    return [heapq.heappop(nums_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    heap_list = []\n    for num in nums[:n]:\n        heapq.heappush(heap_list, num)\n    for num in nums[n:]:\n        heapq.heappop(heap_list)\n    return heap_list"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0:\n        x &= (x-1)\n    return x == 1\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    x &= -x # bitwise AND with -x to convert x into binary form\n    while x & 1 == 0: # while x is not a power of two, we remove the least significant bit and check if the result is still 0\n        x >>= 1\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    count = 0\n    while x!= 0:\n        x >>= 1\n        count += 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if x is a power of two and False otherwise.\n    '''\n\n    # Check if x is a power of 2 or not\n    while x & (x-1)!= 0:\n        x &= (x-1)\n\n    # Return True if x is a power of 2 and False otherwise\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    # Check if x is a power of 2\n    if x <= 0:\n        return False\n    while x % 2 == 0:\n        x //= 2\n\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = x ^ (x-1)\n    return diff == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the given number to binary format\n    binary_str = bin(x)[2:]\n    # If the length of binary_str is odd, then the number is not a power of 2\n    if len(binary_str) % 2 == 1:\n        return False\n    # Else, the number is a power of 2\n    else:\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1: \n        if x % 2 == 0: \n            x //= 2 \n        else: \n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = text.split()\n\n    # Define a pattern for words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Find all words that match the pattern\n    matches = re.findall(pattern, text)\n\n    # Return the matches as a list\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Splitting the string into words using space as delimiter\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Creating a list to store all words which are at least 4 characters long\n    long_words = []\n    # Looping through all words in the list\n    for word in words:\n        # Checking if the length of the word is at least 4\n        if len(word) >= 4:\n            # Appending the word to the list of long words\n            long_words.append(word)\n    # Returning the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    \n    # Use the `re.findall` function to find all matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # Return a list of all matches found\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b' # matches word(s) that are at least 4 characters long\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter out words with less than 4 characters\n    filtered_words = [word for word in words if len(word) >= 4]\n\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words in the string\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    # Return the filtered list of long words\n    return long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # initialize an empty list to store the squares of each element in the input list\n    squares = []\n\n    # loop through each element in the input list and append its square to the squares list\n    for num in nums:\n        squares.append(num**2)\n\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Find the length of the string\n    n = len(str)\n\n    # Initialize a boolean array to mark whether each character has been visited\n    visited = [False] * n\n\n    # Initialize the minimum number of rotations\n    min_rotations = n\n\n    # Check each possible rotation starting from the first character\n    for i in range(n):\n        # Find the next unvisited character in the string\n        j = i\n        while not visited[j]:\n            j += 1\n            if j == n:\n                j = 0\n        visited[j] = True\n\n        # If the characters have been rotated, update the minimum number of rotations\n        if str[i]!= str[j]:\n            min_rotations = min(min_rotations, i - j + 1)\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # calculate frequency of characters in the string\n    freq = [0]*26\n    for char in str:\n        freq[ord(char) - ord('a')] += 1\n    # find the frequency of even and odd characters in the string\n    even_freq = freq[::2]\n    odd_freq = freq[1::2]\n    # calculate the number of even and odd rotations required\n    even_rotations = 0\n    odd_rotations = 0\n    for freq in even_freq:\n        even_rotations += freq // 2\n    for freq in odd_freq:\n        odd_rotations += freq // 2\n    # find the minimum number of rotations required\n    min_rotations = min(even_rotations, odd_rotations)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the maximum frequency and its character\n    max_freq = max(freq.values())\n    max_char = [char for char in freq if freq[char] == max_freq][0]\n\n    # Create a list of tuples containing the character and its frequency\n    char_freq = [(char, freq[char]) for char in freq]\n\n    # Find the minimum number of rotations required by counting the number of times the maximum frequency appears\n    min_rotations = 0\n    for char, freq in char_freq:\n        if freq == max_freq:\n            min_rotations += 1\n        else:\n            break\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    # Initialize min_rotations as 0 \n    min_rotations = 0 \n    # Initialize prev_index as the last index of the string \n    prev_index = n - 1 \n    # Traverse the string from the first index to the last index \n    for i in range(n): \n        # Check if the current character is equal to the previous character \n        if str[i] == str[prev_index]: \n            # If the current character is equal to the previous character, increment min_rotations \n            min_rotations += 1 \n            # Move prev_index to the left by one index \n            prev_index -= 1 \n    # Check if the last character of the string is equal to the first character \n    if str[n-1] == str[0]: \n        # If the last character is equal to the first character, increment min_rotations \n        min_rotations += 1 \n    return min_rotations "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n // 2):\n        if str[i]!= str[(n - i - 1)]:\n            return i + 1\n    return n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    # Find the length of the input string\n    n = len(str)\n    # Initialize an empty list to store the lengths of all possible rotations\n    lengths = []\n    # Loop through all possible rotations\n    for i in range(n):\n        # Generate the rotation of the string\n        rot_str = str[i:] + str[:i]\n        # Append the length of the rotation to the list of lengths\n        lengths.append(len(rot_str))\n    # Find the minimum length in the list\n    min_len = min(lengths)\n    # Initialize a counter for the number of rotations\n    rotations = 0\n    # Loop through the list of lengths and count the number of rotations with length equal to min_len\n    for i in range(n):\n        if lengths[i] == min_len:\n            rotations += 1\n    # Return the number of rotations required\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(s):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n    \n    # sort the dictionary by the frequency of each character\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1])\n    \n    # initialize variables to keep track of the minimum number of rotations and the position of the least frequent character\n    min_rotations = 0\n    min_index = 0\n    \n    # loop through the sorted dictionary and update the minimum number of rotations and the position of the least frequent character\n    for i, (c, freq) in enumerate(sorted_freq):\n        min_rotations = min(min_rotations, i)\n        if i < min_index or (i == min_index and c < sorted_freq[min_index][0]):\n            min_index = i\n    \n    # return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # count the frequency of each character in the string\n    freq = {}\n    for c in str:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    \n    # find the maximum frequency and the corresponding character\n    max_freq = 0\n    max_char = None\n    for c in freq:\n        if freq[c] > max_freq:\n            max_freq = freq[c]\n            max_char = c\n    \n    # initialize variables to keep track of the minimum and maximum rotations\n    min_rotations = max_rotations = 0\n    \n    # loop through all possible rotations and keep track of the minimum and maximum rotations\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            # check if the current substring is equal to the maximum character\n            if str[i:j] == max_char * max_freq:\n                # if the current substring is greater than the minimum number of rotations found so far, update the minimum rotations\n                if j - i > max_rotations:\n                    max_rotations = j - i\n                # if the current substring is less than the maximum number of rotations found so far, update the maximum rotations\n                if i - j + 1 < min_rotations:\n                    min_rotations = i - j + 1\n    \n    # return the minimum and maximum rotations\n    return min_rotations, max_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                break\n            if j == len(str)-1:\n                count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    min_rotations = n\n    # iterate through all possible rotations of the string\n    for i in range(1, n):\n        # swap the i-th and n-th characters\n        temp = str[i]\n        str[i] = str[n-1]\n        str[n-1] = temp\n        # check if the rotated string is same as the original string\n        if str == str[::-1]:\n            # if yes, count the number of rotations\n            rotations = n - i\n            min_rotations = min(min_rotations, rotations)\n            # reset the string to its original state\n            str[i] = temp\n            str[n-1] = str[i]\n        else:\n            # if no, revert the swap\n            str[i] = temp\n            str[n-1] = str[i]\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # split the string into a list of characters\n    lst = list(s)\n    # find the index of the first occurrence of the character to remove\n    index = lst.index(ch)\n    # remove the character from the list at the given index\n    lst.pop(index)\n    # find the index of the last occurrence of the character to remove\n    last_index = lst.index(ch, index)\n    # remove the character from the list from the last index to the end\n    lst[last_index:] = []\n    # convert the list back into a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    s = s.replace(s[0],'')\n    s = s.replace(s[-1],'')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s[:s.find(ch)+1]+s[s.find(ch)+1:-1]+s[-1:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Using slicing to remove the first and last occurrence of the character ch\n    new_s = s[:1] + s[2:]\n    return new_s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    # remove first occurrence of character ch from string s\n    s = s.replace(ch,'')\n    # remove last occurrence of character ch from string s\n    s = s.replace(ch, '', 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence!= -1:\n        s = s[:first_occurrence] + s[first_occurrence+len(ch):]\n    if last_occurrence!= -1:\n        s = s[:last_occurrence] + s[last_occurrence+len(ch):]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 1:\n        return s[1:-1]\n    elif s.count(ch) == 2:\n        return s[:1] + s[2:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string.\n    '''\n    # initialize index variables for first and last occurrence of character\n    i = s.find(ch)\n    j = s.rfind(ch)\n    # if character is not found, return the original string\n    if i == -1 or j == -1 or i == j:\n        return s\n    # remove the first occurrence of character\n    s = s[:i] + s[i+len(ch):]\n    # remove the last occurrence of character\n    s = s[:j-len(ch)] + s[j:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Remove first occurrence of the character\n    if s.find(ch) == 0:\n        s = s[1:]\n    # Remove last occurrence of the character\n    if s.rfind(ch) == len(s) - 1:\n        s = s[:len(s) - 1]\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    # Sort the matrix by row sums in ascending order\n    sorted_M = sorted(M, key=lambda row: row_sums.index(sum(row)))\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the maximum sum of any row in the matrix\n    max_sum = max(sum(row) for row in M)\n    # Sort the matrix in ascending order according to the maximum sum of any row\n    return sorted(M, key=lambda x: sum(x))"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # find the maximum row sum and its index\n        max_row_sum = float('-inf')\n        max_row_index = -1\n        for j in range(n):\n            if M[i][j] > max_row_sum:\n                max_row_sum = M[i][j]\n                max_row_index = j\n        # swap the maximum row with the first row\n        M[i], M[max_row_index] = M[max_row_index], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # loop through each element of the current row\n        for j in range(i, len(M)):\n            # compare the current element with the next element of the same row\n            if M[i][j] > M[j][i]:\n                # swap the elements if the current element is greater than the next element\n                M[i][j], M[j][i] = M[j][i], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Create a copy of the matrix to avoid modifying the original\n    M = [[x for x in row] for row in M]\n    \n    # Sort each row in ascending order\n    for i in range(rows):\n        M[i].sort()\n    \n    # Sort the rows in ascending order of their sums\n    for i in range(rows):\n        for j in range(cols-1):\n            if M[i][j] > M[i][j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    \n    # Sort the columns in ascending order\n    for j in range(cols):\n        for i in range(rows-1):\n            if M[i][j] > M[i+1][j]:\n                M[i][j], M[i+1][j] = M[i+1][j], M[i][j]\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    n = len(M)\n\n    # create a list of lists to store the sorted matrix\n    sorted_M = [[0] * n for i in range(n)]\n\n    # loop through each row of the matrix\n    for i in range(n):\n        # loop through each column of the matrix\n        for j in range(n):\n            # calculate the sum of the current row and column\n            current_sum = sum(M[i][j:j+1])\n\n            # if the current row and column have not been sorted, or if the sum of the row is greater than the sum of the column,\n            # add the current row and column to the sorted matrix\n            if sorted_M[i][j] == 0 or current_sum > sorted_M[i][j]:\n                sorted_M[i][j] = current_sum\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        max_row = i\n        for j in range(i+1, n):\n            if M[j][0] > M[max_row][0]:\n                max_row = j\n        M[i], M[max_row] = M[max_row], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        # Find the maximum value in the i-th row\n        max_value = M[i][0]\n        for j in range(1, n):\n            max_value = max(max_value, M[i][j])\n        # Swap the maximum value with the first element of the i-th row\n        M[i][0], M[i][M.index(max_value)] = M[i][M.index(max_value)], M[i][0]\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h/3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    #Calculate the area of the triangular prism\n    A = 0.5 * l * b\n\n    #Calculate the volume of the triangular prism\n    V = A * h\n\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * l * b * h  # volume of the prism\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n\n    '''\n    Write a python function to find the volume of a triangular prism.\n\n    Parameters:\n    l - length of the base of the triangular prism\n    b - width of the base of the triangular prism\n    h - height of the triangular prism\n\n    Return:\n    float - volume of the triangular prism\n    '''\n\n    volume = l*b*h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) :  # define the function with three parameters l, b, and h\n\n    # calculate the volume of the prism\n    V = (l*b*h) / 3  # calculate the volume of the prism\n\n    # return the volume of the prism\n    return V  # return the volume of the prism"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the area of the triangular prism\n    area = 0.5 * l * b\n    # Calculate the volume of the triangular prism\n    volume = area * h\n    # Return the volume of the triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    V = l * b * h / 6\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'([a-z]+)_'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]*[_]?[a-z]*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = re.compile(r'[a-z]+_+')\n    return bool(pattern.match(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'(?<=[a-z])[A-Z]+(?=[a-z])|(?<=[A-Z])[a-z]+(?=[A-Z])')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z_]*[a-z][a-z_]*$'\n    result = re.match(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'\\b[a-z]+_+\\b'\n    pattern = re.compile(regex)\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]*)(?=.*(_))(?=.*[a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = []\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            list_string.append(chr(i))\n    return list_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # remove characters that are present in the second string\n    for char in string:\n        if char in string:\n            string = string.replace(char, '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return ''.join(char for char in string if char not in string.upper())"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string\n    str2 = input(\"Enter the second string: \")\n    res = \"\"\n    for i in range(NO_OF_CHARS):\n        if i not in str2:\n            res += chr(i)\n    return res"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_list = []\n    for char in string:\n        if char not in char_list:\n            char_list.append(char)\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    remove_chars = set(string)\n    new_string = \"\"\n    for char in string:\n        if char not in remove_chars:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string, remove_chars):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Create a set of characters to remove from the first string\n    remove_set = set(remove_chars)\n    \n    # Remove the characters from the first string using a list comprehension\n    new_string = [char for char in string if char not in remove_set]\n    \n    return ''.join(new_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = list(string)\n    list_of_chars.remove('x')\n    list_of_chars.remove('y')\n    list_of_chars.remove('z')\n    list_of_chars.remove('0')\n    list_of_chars.remove('1')\n    list_of_chars.remove('2')\n    list_of_chars.remove('3')\n    list_of_chars.remove('4')\n    list_of_chars.remove('5')\n    list_of_chars.remove('6')\n    list_of_chars.remove('7')\n    list_of_chars.remove('8')\n    list_of_chars.remove('9')\n    list_of_chars.remove('A')\n    list_of_chars.remove('B')\n    list_of_chars.remove('C')\n    list_of_chars.remove('D')\n    list_of_chars.remove('E')\n    list_of_chars.remove('F')\n    list_of_chars.remove('G')\n    list_of_chars.remove('H')\n    list_of_chars.remove('I')\n    list_of_chars.remove('J')\n    list_of_chars.remove('K')\n    list_of_chars.remove('L')\n    list_of_chars.remove('M')\n    list_of_chars.remove('N')\n    list_of_chars.remove('O')\n    list_of_chars.remove('P')\n    list_of_chars.remove('Q')\n    list_of_chars.remove('R')\n    list_of_chars.remove('S')\n    list_of_chars.remove('T')\n    list_of_chars.remove('U')\n    list_of_chars.remove('V')\n    list_of_chars.remove('W')\n    list_of_chars.remove('X')\n    list_of_chars.remove('Y')\n    list_of_chars.remove('Z')\n    list_of_chars.remove(' ')\n    list_of_chars.remove(',')\n    list_of_chars.remove('.')\n    list_of_chars.remove('?')\n    list_of_chars.remove('!')\n    list_of_chars.remove(';')\n    list_of_chars.remove(':')\n    list_of_chars.remove('-')\n    list_of_chars.remove('(')\n    list_of_chars.remove(')')\n    list_of_chars.remove('[')\n    list_of_chars.remove(']')\n    list_of_chars.remove('{')\n    list_of_chars.remove('}')\n    list_of_chars.remove('\\\"')\n    list_of_chars.remove(\"'\")\n    list_of_chars.remove('/')\n    list_of_chars.remove('\\\\')\n    list_of_chars.remove('*')\n    list_of_chars.remove('$')\n    list_of_chars.remove('@')\n    list_of_chars.remove('^')\n    list_of_chars.remove('&')\n    list_of_chars.remove('`')\n    list_of_chars.remove('~')\n    list_of_chars.remove('\\'')\n    list_of_chars.remove('+')\n    list_of_chars.remove('=')\n    list_of_chars.remove(' ')\n    return ''.join(list_of_chars)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list of the first string\n    string_list = list(string)\n    # Create a list of the second string\n    char_list = list(string)\n    # Create an empty list to store the characters to be removed\n    remove_list = []\n    # Loop through the characters of the second string\n    for char in char_list:\n        # Check if the character is present in the first string\n        if char in string_list:\n            # If it is, add it to the list of characters to be removed\n            remove_list.append(char)\n    # Loop through the characters of the first string and remove the characters in the remove_list\n    for i in range(len(string_list)):\n        if string_list[i] in remove_list:\n            string_list.pop(i)\n            remove_list.remove(string_list[i])\n    # Convert the list to a string and return it\n    return ''.join(string_list)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes an array of integers as input and returns True if there is any duplicate element in the array.\n    If there is no duplicate element, it returns False.\n    \"\"\"\n    nums_set = set(arraynums)\n    if len(nums_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the list to a set to remove duplicate elements\n    arraynums = set(arraynums)\n\n    # Check if the length of the set is equal to the length of the original list\n    if len(arraynums) == len(arraynums):\n        # If the length is equal, there are no duplicate elements\n        return False\n    else:\n        # If the length is not equal, there are duplicate elements\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the index of each number\n    index_dict = {}\n    \n    # loop through each number in the array\n    for i in range(len(arraynums)):\n        # check if the number is already in the dictionary\n        if arraynums[i] in index_dict:\n            # if it is, return True since there is a duplicate number\n            return True\n        else:\n            # if it's not, add it to the dictionary and continue\n            index_dict[arraynums[i]] = i\n            \n    # if we get to the end of the loop without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # creating a dictionary to store the unique elements in the array\n    unique_dict = {}\n    # iterating over the array and adding the elements to the dictionary\n    for num in arraynums:\n        unique_dict[num] = True\n    # checking if any element is present in the dictionary more than once\n    for key in unique_dict:\n        if unique_dict[key] == True:\n            return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements in the array\n    unique_set = set(arraynums)\n    # Check if the length of the unique set is equal to the length of the original array\n    if len(unique_set) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store the unique elements of the array\n    unique_set = set(arraynums)\n\n    # check if the length of the set is less than or equal to the length of the array\n    if len(unique_set) <= len(arraynums):\n        # if the length is less than or equal to the array, there are no duplicate elements\n        return False\n    else:\n        # if the length is greater than the array, there is at least one duplicate element\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create an empty dictionary to store the indices of each element in the array\n    indices = {}\n\n    # iterate through the array and store the index in the dictionary for each element\n    for i, num in enumerate(arraynums):\n        if num in indices:\n            # if the element already exists in the dictionary, return True as there can be only one duplicate element in the array\n            return True\n        indices[num] = i\n\n    # if the loop completes without returning True, there are no duplicate elements in the array\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_elements = set()\n    # Iterate through each element in the array\n    for element in arraynums:\n        # If the element is already in the set, return True\n        if element in unique_elements:\n            return True\n        # Otherwise, add the element to the set\n        unique_elements.add(element)\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # Check if the number is divisible by 15\n    if x % 15 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x == 1: \n        return True\n    elif x % 3 == 0 and x!= 3:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'Not a Woodall'\n    else:\n        return 'A Woodall'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # check if the number is divisible by 7\n    if x % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2 or x == 3 or x == 4:\n        return True\n    elif x == 5:\n        return True\n    elif x % 2 == 0:\n        return is_woodall(x // 2)\n    else:\n        return is_woodall(3 * x + 1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 1000:\n        return 'Woodall'\n    else:\n        return 'Not Woodall'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0:\n        return True\n    elif x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n\n    return num == reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num < 2 * rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num = num // 10\n    if num < 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = str(num)[::-1]\n    reversed_num = int(reversed_num)\n    if num < reversed_num + 1:\n        print(num, \"is one less than twice its reverse!\")\n    else:\n        print(num, \"is not one less than twice its reverse!\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num //= 10\n    return rev_num == 2 * num\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num = str(num)\n    # Convert the string to a list of digits\n    digits = list(map(int, num))\n    # Reverse the list of digits\n    digits.reverse()\n    # Convert the list of digits back to a string\n    reversed_num = \"\".join(map(str, digits))\n    # Check if the reversed number is one less than twice the original number\n    if int(reversed_num) < 2*int(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Reverse the given number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n\n    # Check if the reversed number is one less than twice the original number\n    if rev_num > 2 * num:\n        print(f\"The given number {num} is one less than twice its reverse.\")\n    else:\n        print(f\"The given number {num} is not one less than twice its reverse.\")\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Reverse the number\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n    # Check if the reverse is one less than twice the original number\n    return reverse_num == num + 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    rev_num_str = num_str[::-1]\n    return int(num_str) + int(rev_num_str) == 2*int(num)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the maximum number that can be formed with those digits.\n    '''\n\n    # Initialize the maximum number to be 0\n    max_num = 0\n\n    # Traverse through the list of digits\n    for digit in arr:\n\n        # Convert the digit from a string to an integer\n        digit = int(digit)\n\n        # If the digit is 9, add 1 to the maximum number\n        if digit == 9:\n            max_num += 1\n\n        # If the digit is 0, do nothing as 0 cannot be formed with any digit except 0 itself\n        elif digit == 0:\n            pass\n\n        # If the digit is greater than 0, multiply the maximum number by 10 and add the digit\n        else:\n            max_num = max_num * 10 + digit\n\n    # Return the maximum number formed with the digits in the list\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in arr:\n        temp = i\n        while temp > 0:\n            max_num = max(max_num, temp % 10)\n            temp //= 10\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum number and the number of digits\n    max_num = 0\n    num_digits = 0\n\n    # Traverse through the sorted array and check if each digit can form a maximum number\n    for digit in arr:\n        max_num += digit * (10 ** num_digits)\n        num_digits += 1\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed by those digits.\n    The function uses a dynamic programming approach to solve the problem.\n    '''\n\n    # Initialize the maximum number as 0\n    max_num = 0\n\n    # Iterate through the list of digits\n    for num in arr:\n        # Initialize the current digit as 1\n        current_digit = 1\n\n        # Calculate the maximum number that can be formed with the previous digit and the current digit\n        max_num = max(max_num, current_digit * num)\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_num = 0\n\n    for i in range(1, 10**n):\n        num = i\n        for j in range(n):\n            num = num * 10 + arr[j]\n        if num > max_num:\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    # Sort the input array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize a variable to store the maximum number\n    max_num = 0\n\n    # Loop through the sorted array\n    for num in arr : \n        # Check if the current number is greater than the maximum number\n        if num > max_num : \n            # If it is, update the maximum number\n            max_num = num\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # function to check if a number can be formed with the given digits\n    def can_form_num(num, digits):\n        for digit in digits:\n            if num % digit!= 0:\n                return False\n        return True\n\n    # function to find the largest number that can be formed with the given digits\n    def find_largest_num(digits):\n        max_num = 0\n        for num in range(1, 10):\n            if can_form_num(num, digits):\n                if num > max_num:\n                    max_num = num\n        return max_num\n\n    # find the largest number that can be formed with the given digits\n    max_num = find_largest_num(arr)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    '''\n    \n    # sort the list of digits in ascending order\n    arr.sort()\n    \n    # initialize the largest number to be the first element of the list\n    max_num = arr[0]\n    \n    # iterate over the rest of the elements of the list\n    for i in range(1, len(arr)):\n        \n        # calculate the current number by adding the previous number and the current digit\n        current_num = max_num + arr[i]\n        \n        # update the largest number if the current number is greater\n        if current_num > max_num:\n            max_num = current_num\n            \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Convert the list of digits to a string and sort it in reverse order\n    digits = ''.join(sorted(str(arr), reverse=True))\n    \n    # Initialize a variable to store the maximum number formed\n    max_num = 0\n    \n    # Loop through each digit in the string\n    for digit in digits:\n        # Calculate the power of 10 corresponding to the digit\n        power = int(digit) * 10 ** (len(digits) - digits.index(digit))\n        \n        # Update the maximum number if the current number is greater\n        if max_num < power:\n            max_num = power\n    \n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    return ((x > 0 and y < 0) or (x < 0 and y > 0))"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y>=0:\n        return \"The two numbers have the same sign.\"\n    else:\n        return \"The two numbers have opposite signs.\"\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    # Check if the two integers are equal\n    if x == y:\n        print(x, \"and\", y, \"are equal\")\n        return\n    \n    # Find the sign of x and y\n    x_sign = 1 if x > 0 else -1\n    y_sign = 1 if y > 0 else -1\n    \n    # Check if the sign of x and y are opposite\n    if x_sign == -y_sign:\n        print(x, \"and\", y, \"have opposite signs\")\n    else:\n        print(x, \"and\", y, \"have the same sign\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x < 0)!= (y < 0)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and checks whether they have opposite signs or not.\n    \"\"\"\n\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x < 0 and y >= 0:\n        return True\n    elif x >= 0 and y < 0:\n        return True\n    else:\n        return \"Both numbers are equal.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x * y >= 0:\n        return \"The given integers have the same sign.\"\n    else:\n        return \"The given integers have opposite signs.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    # check if both numbers have opposite signs\n    if ((x < 0 and y < 0) or (x > 0 and y > 0)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0 or x<0 and y<0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3**0.5)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        octagonal_num = (i*i*i + 1)\n        if octagonal_num == n:\n            return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    octagonal = 0\n    num_rows = 1\n    for i in range(1, n+1):\n        row = i * (2*num_rows - 1) // 2\n        octagonal += row\n        num_rows += 1\n    return octagonal\n\nn = int(input(\"Enter a number for the nth octagonal number: \"))\nprint(is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    while i <= n:\n        if 8 * i**2 == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 0\n    else:\n        return n * 2 - 1\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    for i in range(n):\n        octagonal_numbers.append(is_octagonal(i))\n    return octagonal_numbers"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * n**2 - 6 * n + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Initialize variables\n    a, b = 1, 1\n    octagonal_num = 0\n\n    # Calculate the nth octagonal number\n    for i in range(1, n + 1):\n        octagonal_num += (a * b)\n        a += 1\n        b += 1\n\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    while c <= n:\n        if c == 1 or c == n:\n            print(c)\n        else:\n            print(a, b)\n            a, b = b, (a + b) + c\n            c = 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(1, int(n/2)+1):\n        if n - i*i == i**2:\n            return True\n    return False\n\ndef octagonal_number(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    return is_octagonal(n) + is_octagonal(n-1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    while b <= n:\n        if b**2 + c**2 == d**2:\n            return b\n        a = b\n        b = 2*a - b\n        c = b\n        d = 2*c - d\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[sum_of_digits(i)] += 1\n\n    total_count = 0\n    for count in digit_count.values():\n        total_count += count\n\n    return total_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the number of substrings with the given sum\n    substring_count = defaultdict(int)\n    \n    # loop through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # compute the sum of digits in the substring\n            substring_sum = sum(int(c) for c in s[i:j])\n            # add the substring to the dictionary with the corresponding count\n            substring_count[substring_sum] += 1\n    \n    # return the total count of substrings\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub_str = s[i:j]\n            if sum(map(int, sub_str)) == len(sub_str):\n                count_dict[sub_str] += 1\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the frequency of digits\n    freq = defaultdict(int)\n    for char in s:\n        freq[int(char)] += 1\n\n    # Initialize a variable to count the number of substrings\n    count = 0\n\n    # Loop through each substring and check if the sum of digits is equal to its length\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(map(int, s[i:j])) == j-i:\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    substrings_count = defaultdict(int)\n\n    # Iterate over the characters of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Check if the sum of digits of the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                # Increment the count for this substring\n                substrings_count[s[i:j]] += 1\n\n    return substrings_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # convert the input string to a list of integers\n    s = list(map(int, s))\n\n    # count the number of digits in the input string\n    n = len(s)\n    count = defaultdict(int)\n\n    # loop through the digits of the input string\n    for i in range(n):\n        # compute the sum of the digits\n        digit_sum = sum(s[i:i+n])\n\n        # count the number of substrings with the current digit sum\n        count[digit_sum] += 1\n\n    # return the total count of substrings\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    count = 0\n    digit_map = defaultdict(int)\n\n    # Count the frequency of digits in the string\n    for char in s:\n        if char.isdigit():\n            digit_map[int(char)] += 1\n\n    # Iterate through all possible substrings of the string\n    for i in range(length):\n        for j in range(i, length):\n            substring = s[i:j+1]\n            sum_of_digits = sum(int(digit) for digit in substring if digit.isdigit())\n            if sum_of_digits == length:\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with sum of digits equal to their length\n    substring_count = defaultdict(int)\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Create a substring with the current character at the start and the rest of the string at the end\n        substring = s[i:]\n\n        # Calculate the sum of digits in the substring\n        substring_sum = sum(int(digit) for digit in substring)\n\n        # If the substring has a sum of digits equal to its length, increment its count in the dictionary\n        if substring_sum == len(substring):\n            substring_count[substring] += 1\n\n    # Return the dictionary of substring counts\n    return substring_count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        raise ValueError(\"Input list is empty.\")\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = xs[0]\n        for num in xs[1:]:\n            if num < smallest:\n                smallest = num\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize a variable to store the smallest number\n    smallest = None\n    # loop through each element in the list\n    for x in xs:\n        # check if the current element is less than the smallest found so far\n        if smallest is None or x < smallest:\n            # if it is, update the smallest variable to the current element\n            smallest = x\n    # return the smallest number found\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    # initialize smallest number to be the first element of the list\n    smallest = xs[0]\n    # loop through the rest of the list\n    for x in xs[1:]:\n        # if current element is smaller than the smallest number, update smallest number\n        if x < smallest:\n            smallest = x\n    # return the smallest number found\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the tuple list in ascending order\n    test_list.sort()\n\n    # Initialize variables\n    max_diff = 0\n    min_val = test_list[0]\n\n    # Iterate through the sorted list\n    for i in range(1, len(test_list)):\n        # Update the minimum value and max difference\n        if test_list[i] < min_val:\n            min_val = test_list[i]\n        elif test_list[i] - min_val > max_diff:\n            max_diff = test_list[i] - min_val\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i][1] - test_list[j][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][1]-test_list[j][1], test_list[j][1]-test_list[i][1])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to hold the maximum difference and the sum of the pair differences\n    max_diff = float('-inf')\n    total_diff = 0\n    \n    # Loop through each pair of numbers in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the current pair of numbers\n            diff = test_list[j] - test_list[i]\n            \n            # Update the maximum difference if the current difference is greater\n            if diff > max_diff:\n                max_diff = diff\n            \n            # Add the current difference to the total sum of differences\n            total_diff += diff\n    \n    # Return the maximum difference and the total sum of differences\n    return max_diff, total_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            max_diff = max(max_diff,diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if not test_list:\n        return None\n\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize max_diff as 0\n    max_diff = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)-1):\n        # Calculate the difference between adjacent tuples\n        diff = abs(test_list[i][0] - test_list[i+1][0])\n\n        # Update max_diff if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the final value of max_diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples in ascending order of the second value\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function sorts a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        '''\n        Recursive function to flatten a list.\n        '''\n        result = []\n        for item in data_list:\n            if type(item) == list:\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    total_sum = sum(flattened_list)\n    return total_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element and sum the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    \n    for element in data_list:\n        if isinstance(element, list):\n            flattened_list.extend(recursive_list_sum(element))\n        else:\n            flattened_list.append(element)\n    \n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: empty list\n    if not data_list:\n        return 0\n    # Recursive case: add first element and sum all the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flatten_list = []\n        for item in data_list:\n            flatten_list.extend(recursive_list_sum(item))\n        return flatten_list\n    else:\n        return [data_list]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        if isinstance(data_list, list):\n            flattened_list = []\n            for item in data_list:\n                flattened_list.extend(flatten(item))\n            return flattened_list\n        else:\n            return [data_list]\n\n    flattened_list = flatten(data_list)\n    sum_of_flattened_list = sum(flattened_list)\n    return sum_of_flattened_list\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        '''\n        Helper function to flatten a list recursively.\n        '''\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list)!= list:\n        return data_list\n    else:\n        total = 0\n        for item in data_list:\n            if type(item) == list:\n                total += recursive_list_sum(item)\n            else:\n                total += item\n        return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        if isinstance(data_list, list):\n            for item in data_list:\n                flatten(item)\n        else:\n            result.append(data_list)\n    result = []\n    flatten(data_list)\n    return sum(result)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(elem) for elem in data_list)\n    else:\n        return data_list"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in it.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    This function takes in a list of integers as input and returns the number of positive integers in the list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(2, n + 1):\n        count += n // i\n    return count\n\nn = 6\nprint(bell_number(n))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize variables\n    ways = 0\n    factors = [2, 3, 5]\n\n    # Loop through the numbers from 2 to n\n    for i in range(2, n+1):\n        # If the number is divisible by any of the factors\n        if i % 2 == 0 and i % 3 == 0 and i % 5 == 0:\n            # Increment the ways variable\n            ways += 1\n        elif i % 2 == 0 and i % 3 == 0:\n            # If the number is divisible by both 2 and 3, increment the ways variable\n            ways += 1\n        elif i % 2 == 0 and i % 5 == 0:\n            # If the number is divisible by both 2 and 5, increment the ways variable\n            ways += 1\n        elif i % 3 == 0 and i % 5 == 0:\n            # If the number is divisible by both 3 and 5, increment the ways variable\n            ways += 1\n        else:\n            # If the number is not divisible by any of the factors, continue to the next number\n            continue\n\n    # Return the number of ways\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize variables\n    count = 1\n    limit = 100\n    # loop through the limit\n    for i in range(1, limit + 1):\n        # check if the current number is a bell number\n        if i * i == 2 * i:\n            # check if the bell number is within the range\n            if i >= n:\n                # increment the count\n                count += 1\n    # return the count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition the set of Bell numbers as 1\n    ways = 1\n\n    # Iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition the set of Bell numbers such that B_i is present\n        ways *= (n-i+1) // i\n    \n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return (4 * (n + 1)) ** 2 // (2 * n + 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    # Function to find the number of ways to partition a set of Bell numbers\n    def partition(n, k, dp):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        elif k == 1:\n            return 1\n        elif n == k:\n            return 1\n        else:\n            if dp[n][k] == -1:\n                ways = partition(n - 1, k - 1, dp) + partition(n - 1, k, dp)\n                dp[n][k] = ways\n            return dp[n][k]\n\n    # Initialize the dp array\n    dp = [[-1] * (n + 1) for _ in range(n + 1)]\n\n    # Calculate the number of ways to partition the set of Bell numbers\n    ways = partition(n, n, dp)\n\n    return ways\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize the list of ways to partition Bell numbers\n    ways = []\n    # loop through each value of n\n    for i in range(1, n+1):\n        # initialize the count of ways to partition the current value of n\n        count = 0\n        # loop through each value of i\n        for j in range(i):\n            # add the number of ways to partition the current value of i when j is taken out\n            count += (i-j)//j\n        # add the count of ways to partition the current value of n to the list of ways\n        ways.append(count)\n    # return the list of ways\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    return factorial(n-1) / factorial(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 14\n\n    a, b = 1, 1\n    for i in range(5, n + 1):\n        a, b = b, a + b\n\n    return b"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    # Check if the first element is smaller than the last element\n    if A[0] < A[-1]:\n        return False\n    \n    # Check if the array is monotonic in terms of decreasing order\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n == 1:\n        return True\n    \n    # Check if all the elements are the same\n    if A[0] == A[1]:\n        return False\n    \n    # Check if the elements are increasing or decreasing\n    if A[0] <= A[1]:\n        for i in range(1, n-1):\n            if A[i] >= A[i+1]:\n                return False\n    else:\n        for i in range(1, n-1):\n            if A[i] <= A[i+1]:\n                return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and returns True if it is monotonic (either monotonically increasing or decreasing) and False otherwise.\n    A monotonic array is one in which the elements are either all increasing or all decreasing.\n    '''\n    if len(A) <= 1:\n        return True\n    elif A[0] == A[-1]:\n        return is_Monotonic(A[1:-1])\n    elif A[0] < A[-1]:\n        return all(A[i] < A[i+1] for i in range(len(A)-1))\n    else:\n        return all(A[i] > A[i+1] for i in range(len(A)-1))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array has at least 3 elements\n    if len(A) < 3:\n        return True\n    \n    # Check if the array is monotonic increasing\n    for i in range(len(A)-1):\n        if A[i] >= A[i+1]:\n            return False\n    \n    # Check if the array is monotonic decreasing\n    for i in range(len(A)-1):\n        if A[i] <= A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: # if the length of the array is less than or equal to 1, then it is already a monotonic array\n        return True\n    \n    if A[0] < A[1]: # if the first element is less than the second element, then it is a decreasing array\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n        return True\n    \n    if A[0] > A[1]: # if the first element is greater than the second element, then it is an increasing array\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    \n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    if A[0] == A[1]:\n        return is_Monotonic(A[1:])\n    if A[0] < A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1]:\n                return False\n            elif A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1]:\n                return False\n            elif A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True \n\n    if A[0] == A[-1]: \n        return is_Monotonic(A[1:-1]) \n\n    if A[0] < A[-1]: \n        return is_Monotonic(A[1:]) and A[0] <= A[1] \n    else: \n        return is_Monotonic(A[:-1]) and A[-1] <= A[-2] "
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    if any(A[i] < 0 for i in range(len(A))):\n        return False\n    if len(set(A))!= len(A):\n        return False\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    elif A[0] < A[1]: \n        for i in range(1, len(A)): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n    else: \n        for i in range(1, len(A)): \n            if A[i] >= A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n\n    # Check if the sublist is empty\n    if len(s) == 0:\n        return True\n    \n    # Initialize the index of the first element of the list\n    i = 0\n    \n    # Initialize the index of the first element of the sublist\n    j = 0\n    \n    # Loop through the list\n    while i < len(l) and j < len(s):\n        # If the current element of the list is equal to the current element of the sublist, increment both indices\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        # If the current element of the list is not equal to the current element of the sublist, move the sublist index to the right\n        else:\n            j = 0\n    \n    # If the entire sublist has been found, return True\n    if j == len(s):\n        return True\n    \n    # If the loop has not terminated and the sublist is not empty, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return False\n    if not s:\n        return True\n    if l[0] == s[0]:\n        if is_sublist(l[1:], s[1:]):\n            return True\n        else:\n            return is_sublist(l[1:], s)\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return False\n\n    for i in range(len(l)):\n        if l[i] in s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(s in x for x in l)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    This function checks whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    \n    if not l:\n        return False\n    \n    if l[0] == s[0]:\n        if is_sublist(l[1:], s[1:]):\n            return True\n    \n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuples_length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= tuples_length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # initialize a boolean variable to keep track of whether all tuples have equal length or not\n    flag = True\n    \n    # loop through each tuple in the list of tuples\n    for tuple1 in Input:\n        \n        # if the length of the tuple is different from the length of the first tuple, set the flag to False and break the loop\n        if len(tuple1)!= len(Input[0]):\n            flag = False\n            break\n            \n    # return the flag value\n    return flag"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # iterate through the input list of tuples\n    for tup in Input:\n        # check if the length of each tuple is equal to the length of the first tuple\n        if len(tup)!= len(Input[0]):\n            # return False if any tuple has a different length\n            return False\n    # if we get here, all tuples have the same length\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Create an empty set to store the lengths of tuples in the list\n    set_of_lengths = set()\n    # Loop through the list of tuples\n    for tup in Input:\n        # Append the length of each tuple to the set of lengths\n        set_of_lengths.add(len(tup))\n        # Check if the set of lengths has a size of 1\n        if len(set_of_lengths) == 1:\n            # If it has a size of 1, then all the tuples have equal length\n            return True\n        # If the set of lengths has a size of more than 1, then some tuples have different lengths\n        else:\n            return False\n    # If the loop completes without finding a tuple with equal length, then the function will return False\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Define an empty list to store the lengths of tuples in the input list\n    length_list = []\n\n    # Loop through the input list and add the length of each tuple to the length_list\n    for tup in Input:\n        length_list.append(len(tup))\n\n    # If all the tuples have the same length, return True\n    if all(length == length_list[0] for length in length_list):\n        return True\n\n    # If not, return False\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = n // gap\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    n = len(nums)\n    sorted_flag = False\n\n    while not sorted_flag:\n        sorted_flag = True\n\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                swap(nums, i, i+1)\n                sorted_flag = False\n\n        if sorted_flag:\n            break\n\n        n -= 1\n\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                swap(nums, i, i+1)\n                sorted_flag = False\n\n        if sorted_flag:\n            break\n\n        n -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    gap = len(nums) // 2\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap, len(nums)):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = min(gap * 2, n)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # define parameters\n    min_num = min(nums)\n    max_num = max(nums)\n    gap = max_num - min_num\n    swapped = True\n\n    # run comb sort algorithm\n    while swapped:\n        swapped = False\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                # swap the elements\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        gap = (gap + 1) // 2\n\n        if gap == 1:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    count = 0\n    \n    while gap > 1 or swapped:\n        if swapped:\n            swapped = False\n            count += 1\n            for i in range(n-count):\n                if nums[i] > nums[i+gap]:\n                    nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                    swapped = True\n        \n        gap = int(gap/1.3)\n        \n        if gap == 0:\n            gap = 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    This function sorts a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n    nums (list): A list of integers to be sorted.\n\n    Returns:\n    The sorted list.\n    '''\n\n    # define the swap function\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # define the comparison function\n    def compare(nums, i, j):\n        return nums[i] > nums[j]\n\n    # define the main loop function\n    def main_loop(nums, start, end):\n        # perform the next iteration\n        if end - start <= 1:\n            return end\n\n        # determine the middle index\n        mid = (start + end) // 2\n\n        # determine the pivot index\n        pivot = mid\n\n        # swap the pivot with the first element\n        swap(nums, pivot, start)\n\n        # determine the left and right indices\n        left, right = start + 1, end\n\n        # perform a binary search for the pivot element\n        while left <= right:\n            pivot_value = nums[pivot]\n            left_value = nums[left]\n            right_value = nums[right]\n\n            if compare(nums, left, pivot) and compare(nums, pivot, right):\n                swap(nums, left, pivot)\n                pivot = left\n                left += 1\n            elif compare(nums, left, pivot) and compare(nums, right, pivot):\n                swap(nums, pivot, right)\n                right -= 1\n            else:\n                swap(nums, left, right)\n                left += 1\n                right -= 1\n\n        # swap the pivot with the middle index\n        swap(nums, pivot, start)\n\n        # recursively call the main loop with the new indices\n        if left < mid:\n            main_loop(nums, start, left)\n        else:\n            main_loop(nums, right, end)\n\n    # call the main loop with the initial indices\n    main_loop(nums, 0, len(nums) - 1)\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    step = n\n    while swapped:\n        swapped = False\n        for i in range(step):\n            if nums[i] > nums[i + step]:\n                nums[i], nums[i + step] = nums[i + step], nums[i]\n                swapped = True\n        step = max(step - 1, 1)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Initialize the gap and swapped variables\n    gap = len(nums)\n    swapped = True\n\n    # Sort the first n elements using Comb Sort algorithm\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is less than 4 or greater than 24\n    if n < 4 or n > 24:\n        return \"Number out of range\"\n\n    # Calculate the difference of two squares\n    diff_square = int(n**0.5)**2 + int(n**0.5)**2\n    # Check if the difference of two squares is equal to the given number\n    if diff_square == n:\n        return \"The number can be represented as the difference of two squares\"\n    else:\n        return \"The number cannot be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    if n < 0:\n        return \"The given number is negative.\"\n    \n    # Check if the given number can be represented as the sum of squares\n    i = 0\n    while i * i <= n:\n        j = n - i * i\n        if j * j == n:\n            return \"The given number can be represented as the difference of two squares.\"\n        i += 1\n    \n    # Check if the given number can be represented as the difference of two squares\n    i = 0\n    while i * i <= n:\n        j = n - i * i\n        if j * j == i * i + j * j:\n            return \"The given number can be represented as the difference of two squares.\"\n        i += 1\n    \n    return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            if n//i == i:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the given number is a square number\n    if n**0.5 == int(n**0.5):\n        # check if the difference of the square of the number and half of the square of the number is the same as the original number\n        if n == int(n**0.5**2) + int(n**0.5*0.5**2):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number is even\n    if n % 2 == 0:\n        return \"The given number cannot be represented as the difference of two squares.\"\n\n    # Check if the given number is a perfect square\n    sqrt_n = int(n**0.5)\n    if sqrt_n**2 == n:\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Initialize the variables\n    result = False\n    square = 0\n    root = 0\n    # Calculate the square root of the given number\n    while square ** 2 < n:\n        square += 1\n    square -= 1\n    while square ** 2 <= n:\n        root = square\n        while n - root ** 2 >= 0:\n            root += 1\n        if root == square:\n            result = True\n            break\n        square -= 1\n    return result"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 2:\n        return True\n    if n * n == 2 * n * n:\n        return True\n    if n * n * n == 3 * n * n * n:\n        return True\n    if n * n * n * n == 4 * n * n * n * n:\n        return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Calculate the square of n\n    square = n**2\n\n    # Check if the square is a power of 2\n    if square == 2**int(log2(square)):\n        # Calculate the difference between square and the square of its binary representation\n        difference = (square - 2**(int(log2(square))-1))**2\n        # Check if difference is a square\n        if difference == square:\n            return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Taking the square root of the given number\n    sqrt_n = int(n ** 0.5)\n    \n    # Check whether the square root can be represented as the difference of two squares\n    for i in range(2, sqrt_n+1):\n        if i*i <= n and n%i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is a positive integer\n    if n < 0:\n        print(\"The given number must be a positive integer.\")\n        return\n    \n    # Calculate the square of the given number\n    square = n ** 2\n    \n    # Calculate the difference between the square and the square of its square\n    difference = square ** 2 - n\n    \n    # Check if the difference is equal to the given number\n    if difference == n:\n        print(\"The number can be represented as the difference of two squares.\")\n    else:\n        print(\"The number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)-1):\n        if colors[i] == patterns[i]:\n            continue\n        elif colors[i] == patterns[i+1]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    n = len(colors)\n    pattern_count = 0\n    start_index = 0\n    end_index = 0\n    \n    # Loop through the colors array\n    for i in range(n):\n        # If the current color matches the current pattern, increment pattern count and update start/end indexes\n        if colors[i] == patterns[pattern_count]:\n            pattern_count += 1\n            start_index = i\n            end_index = i + pattern_count\n        \n        # If the pattern count has reached the end of the patterns array, the color sequence is the same as the pattern sequence\n        if pattern_count == len(patterns):\n            return True\n    \n    # If the loop completes without finding a pattern match, the color sequence is not the same as the pattern sequence\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize a variable to keep track of the current pattern\n    pattern = 0\n\n    # Loop through each color in the colors array\n    for color in colors:\n\n        # Check if the current color matches the pattern at the current index\n        if color == patterns[pattern]:\n\n            # If the current color matches the pattern, increment the pattern index\n            pattern += 1\n\n        # If the pattern has reached the end, return True\n        if pattern == len(patterns):\n            return True\n\n    # If the loop completes without finding a match, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize variables to keep track of current color and pattern\n    current_color = None\n    current_pattern = None\n    \n    # Iterate through each color and pattern pair in the colors and patterns arrays\n    for i in range(len(colors)):\n        # If the current color is not None and matches the color in the color array\n        if current_color is not None and colors[i] == current_color:\n            # If the current pattern is not None and matches the pattern in the pattern array\n            if current_pattern is not None and patterns[i] == current_pattern:\n                # If we reach the end of the loop without finding a mismatch, return True\n                if i == len(colors) - 1:\n                    return True\n        else:\n            # If the current color is None or does not match the color in the color array, set the current color to the new color\n            current_color = colors[i]\n            # If the current pattern is None or does not match the pattern in the pattern array, set the current pattern to the new pattern\n            current_pattern = patterns[i]\n    \n    # If we reach the end of the loop without finding a mismatch, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    n = len(colors)\n\n    for i in range(n-1):\n        if colors[i]!= colors[i+1]:\n            for j in range(n-1):\n                if patterns[j]!= patterns[j+1]:\n                    if colors[i] == patterns[j] or colors[i+1] == patterns[j+1]:\n                        return False\n                    else:\n                        return True\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n    seen_colors = set()\n    for color, pattern in zip(colors, patterns):\n        if color in seen_colors:\n            return False\n        seen_colors.add(color)\n        if pattern not in seen_colors:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(elem % K == 0 for elem in test_list[i] + test_list[j]):\n                tuples.append(tuple(test_list[i] + test_list[j]))\n    return tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n    test_list (list): A list of tuples.\n    K (int): An integer value that determines the number of elements in each tuple.\n\n    Returns:\n    list: A list of tuples that have all elements divisible by k from the given list of tuples.\n\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if the tuple has all elements divisible by k\n        if all(num % K == 0 for num in tup):\n            # If it does, add it to the result list\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each tuple in the given list of tuples\n    for i in range(len(test_list)):\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in test_list[i]):\n            # If all elements in the tuple are divisible by K, add the tuple to the result list\n            result.append(test_list[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible_count = sum(1 for element in tup if element % K == 0)\n        if divisible_count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a value K, and returns a list of tuples which have all elements divisible by K from the given list.\n    \"\"\"\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create a list to store the numbers from 0 to K-1\n    num_list = [i for i in range(K)]\n    # loop through the list of tuples\n    for tup in test_list:\n        # create a list to store the elements of the tuple\n        tuple_list = []\n        # loop through the elements of the tuple\n        for elem in tup:\n            # check if the element is in the num_list\n            if elem in num_list:\n                # remove the element from the num_list\n                num_list.remove(elem)\n            # add the element to the tuple_list\n            tuple_list.append(elem)\n        # check if all the elements are divisible by K\n        if all(elem % K == 0 for elem in tuple_list):\n            # return the tuple\n            return tup"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tuple in test_list:\n        if all(num % K == 0 for num in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    This function checks whether a given number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is divisible by 11,\n    otherwise it returns False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if it is divisible by 11 and False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number n and returns True if it is divisible by 11 and False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number n as input and returns True if it is divisible by 11, and False otherwise.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is an even word.\")\n        else:\n            print(word, \"is an odd word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    if len(word) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Split the string into a list of words\n    words = s.split()\n\n    # Iterate through each word in the list\n    for word in words:\n        # Check if the length of the word is odd or even\n        if len(word) % 2!= 0:\n            print(f\"'{word}' is an odd length.\")\n        else:\n            print(f\"'{word}' is an even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    if len(word) > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word, \"is an odd length\")\n        else:\n            print(word, \"is an even length\")\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # check if the word is longer than 1 character\n    if len(s) > 1:\n        # check if the first character of the word is a vowel\n        if s[0] in ['a', 'e', 'i', 'o', 'u']:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    # split the string into words\n    words = s.split()\n    \n    # iterate through each word in the list\n    for word in words:\n        \n        # check if the length of the word is odd\n        if len(word) % 2!= 0:\n            \n            # if the length is odd, return True\n            return True\n    \n    # if the loop completes without finding an odd word, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word)%2!=0:\n            print(word + \" is odd length\")\n        else:\n            print(word + \" is even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # Splitting the string into words\n    for word in words: # Iterating over each word in the list\n        if len(word) % 2 == 1: # Checking if the length of the word is odd\n            return True # If it is, return True\n    return False # If none of the words are odd, return False\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        while not is_prime(num):\n            num += 1\n        return num\n\n    def generate_tetrahedral_numbers(n):\n        tetrahedral_numbers = []\n        for i in range(n):\n            tetrahedral_numbers.append(next_prime(i + 1))\n        return tetrahedral_numbers\n\n    tetrahedral_numbers = generate_tetrahedral_numbers(n)\n    return tetrahedral_numbers[n-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * n * (n - 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a, b, c, d = 1, 1, 1, 1\n    for i in range(1, n+1):\n        a, b, c, d = d, a+b, c+d, d+b\n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Helper function to generate the tetrahedral numbers\n    def generate_tetrahedral_numbers(n):\n        # Initialize variables\n        tetrahedral_numbers = []\n        a = 1\n        b = 1\n        c = 4\n\n        # Loop n times to generate the nth tetrahedral number\n        for i in range(n):\n            # Calculate the next tetrahedral number\n            tetrahedral_number = a + b + c\n            a = b\n            b = c\n            c = tetrahedral_number\n\n            # Add the tetrahedral number to the list\n            tetrahedral_numbers.append(tetrahedral_number)\n\n        # Return the list of tetrahedral numbers\n        return tetrahedral_numbers\n\n    # Call the helper function to generate the tetrahedral numbers\n    tetrahedral_numbers = generate_tetrahedral_numbers(n)\n\n    # Return the nth tetrahedral number\n    return tetrahedral_numbers[n-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(-1)**(n-1)+1)//6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initializing variables\n    x, y, z = 1, 1, 1\n    \n    # Iterating until n is reached\n    for i in range(n):\n        # Calculating the next term\n        next_term = (x + y + z) * 4\n        \n        # Updating the values of x, y, and z\n        x, y, z = next_term, x + y + z, 0\n    \n    # Returning the final value of x\n    return x"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Define the formula\n    numerator = (n + 1) * (3 * n - 1)\n    denominator = 2 * n\n\n    # Calculate the tetrahedral number\n    tetrahedral = numerator / denominator\n\n    # Return the tetrahedral number\n    return tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables\n    A = 1\n    B = 5\n    C = 10\n    D = 15\n\n    # Compute the nth tetrahedral number\n    if n == 1:\n        return A\n    elif n == 2:\n        return B\n    else:\n        # Initialize variables\n        result = 0\n        numerator = 0\n        denominator = 1\n\n        # Compute the numerator and denominator\n        for i in range(1, n + 1):\n            numerator += i * (A + B + C + D)\n            denominator += i\n\n        # Compute the nth tetrahedral number\n        result = numerator / denominator\n\n        # Return the nth tetrahedral number\n        return result"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tet_num = 4*n*n*n\n    return tet_num\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def phi(n):\n        '''\n        Compute the nth golden ratio.\n        '''\n        return (1 + 5 ** 0.5) / 2\n\n    def tetrahedral_helper(n):\n        '''\n        Compute the nth tetrahedral number using the golden ratio method.\n        '''\n        return (4 * (phi(n) - 1)) / (3 * n - 1)\n\n    return tetrahedral_helper(n)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    vol = (4/3)*pi*r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # calculate the surface area of the sphere\n    surface_area = (4/3) * math.pi * r**3\n    \n    # calculate the volume of the sphere\n    volume = (4/3) * math.pi * r**3 * (r/3)\n    \n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Calculate the volume of a sphere with radius r using the formula: V = 4/3 * pi * r^3\n    V = 4/3 * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume\n\nr = float(input(\"Enter the radius of the sphere: \"))\nvolume = volume_sphere(r)\nprint(\"The volume of the sphere is: \", volume)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r and returns the volume of a sphere with that radius.\n    '''\n    # formula for the volume of a sphere\n    vol = (4/3) * math.pi * (r**3)\n    return vol"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    # Initialize an empty string to store the character\n    char = \"\"\n    # Iterate through each character in the given string\n    for char in strr:\n        # Convert the character to its ASCII value and add it to the character string\n        char_ASCII = ord(char)\n        char = chr((char_ASCII + 1) % 26)\n    # Return the final character string\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in strr:\n        result += ord(i)\n    return chr((result % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ASCII = 0\n    for i in range(len(strr)):\n        sum_ASCII += ord(strr[i])\n    return chr((sum_ASCII % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # Initialize the variable to store the sum of ASCII values of characters of the string\n    sum_of_ascii = 0\n    # Loop through all the characters of the string and add their ASCII values to the sum variable\n    for char in strr:\n        sum_of_ascii += ord(char)\n    # Return the character made by adding the ASCII value of all the characters of the string modulo 26\n    return chr((sum_of_ascii % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize the variable to store the sum of ASCII values of characters\n    sum = 0\n    \n    # Iterate through all characters of the string\n    for char in strr:\n        # Get the ASCII value of the current character\n        ascii_val = ord(char)\n        \n        # Add the ASCII value of the current character to the sum\n        sum += ascii_val\n        \n    # Calculate the remainder of the sum divided by 26\n    remainder = sum % 26\n    \n    # If the remainder is 0, it means the sum of all characters is divisible by 26\n    # So, the character made is the sum of all characters\n    if remainder == 0:\n        return sum\n    \n    # If the remainder is not 0, it means the sum of all characters is not divisible by 26\n    # So, the character made is the ASCII value of the last character in the string plus the remainder\n    else:\n        return chr((sum + 26 - remainder) % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n\n    return chr((sum % 26) + 65)\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ASCII = 0\n    for char in strr:\n        sum_ASCII += ord(char)\n    return chr(((sum_ASCII % 26) + 65))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize a variable to store the result character\n    char = \"\"\n\n    # Iterate through each character in the string\n    for i in strr:\n        # Get the ASCII value of the character\n        ascii_val = ord(i)\n\n        # Add the ASCII value modulo 26 to the result character\n        char += chr((ascii_val + ord('A') - 1) % 26 + ord('A'))\n\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr(sum_ascii % 26 + ord('A'))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]\n\nprint(sequence(10))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2**n) - 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        print(a, end=\" \")\n        c = a + b\n        a = b\n        b = c"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 2\n    elif n == 6:\n        return 1\n    elif n == 7:\n        return 2\n    elif n == 8:\n        return 1\n    elif n == 9:\n        return 2\n    elif n == 10:\n        return 1\n    elif n == 11:\n        return 2\n    elif n == 12:\n        return 1\n    elif n == 13:\n        return 2\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 2\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 2\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 2\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 2\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 2\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 2\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 2\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 2\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 2\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 2\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 2\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 2\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 2\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 2\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 2\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 2\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 2\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 2\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 2\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 2\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 2\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 2\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 2\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 2\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 2\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 2\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 2\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 2\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 2\n    elif n == 72:\n        return 1\n    elif n == 73:\n        return 2\n    elif n == 74:\n        return 1\n    elif n == 75:\n        return 2\n    elif n == 76:\n        return 1\n    elif n == 77:\n        return 2\n    elif n == 78:\n        return 1\n    elif n == 79:\n        return 2\n    elif n == 80:\n        return 1\n    elif n == 81:\n        return 2\n    elif n == 82:\n        return 1\n    elif n == 83:"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 0\n    for i in range(n):\n        b = a + b\n        a = b - a\n    return b\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth number in the newman conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 0, 0]\n    for i in range(3, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(2, n+1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [1, 1]\n    for i in range(2, n):\n        b = []\n        for j in range(len(a)):\n            if j == 0:\n                b.append(a[j] + a[j+1])\n            elif j == len(a)-1:\n                b.append(a[j] + a[j-1])\n            else:\n                b.append(a[j] + a[j-1] + a[j+1])\n        a = b\n    return a[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    area = 4 * math.pi * r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = (4/3) * pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4 * math.pi * r**2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # Use the formula for the surface area of a sphere\n    surface_area = 4*math.pi*r**2\n\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*r**2 # surface area of a sphere\n    return area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 8\n    for i in range(1, n+1):\n        print(str(b) +'' + str(a), end=' ')\n        c = a + b\n        a = b\n        b = c\n\nn = int(input(\"Enter the value of n: \"))\ncentered_hexagonal_number(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Define the formula for centered hexagonal number\n    formula = (5*n*n*n - 6*n*n + 11*n) // 3\n    return formula"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    left_boundary = 1\n    right_boundary = 6 * n\n    hexagonal_number = 0\n\n    while left_boundary <= right_boundary:\n        mid_boundary = left_boundary + (right_boundary - left_boundary) // 2\n        if mid_boundary % 6 == 0:\n            hexagonal_number = mid_boundary\n            break\n        elif mid_boundary % 6 > 0 and mid_boundary % 6 < 3:\n            left_boundary = mid_boundary + 1\n        else:\n            right_boundary = mid_boundary - 1\n\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Find the number of rows and columns in the centered hexagonal matrix\n    rows = 2 * n - 1\n    cols = n * (3 * n - 1) // 2\n    \n    # Initialize the matrix with zeros\n    matrix = [[0] * cols for _ in range(rows)]\n    \n    # Fill the matrix with the centered hexagonal numbers\n    for i in range(rows):\n        for j in range(cols):\n            # Calculate the row and column indices for the current number\n            row = i - n + 1\n            col = j\n            \n            # If the number is centered on a row, fill it with 1's\n            if row == n:\n                matrix[i][j] = 1\n                \n            # If the number is centered on a column, fill it with 1's\n            elif col == cols - n:\n                matrix[i][j] = 1\n                \n            # If the number is on the main diagonal, fill it with the number itself\n            elif i == j == n - 1:\n                matrix[i][j] = n\n                \n            # If the number is on the second diagonal, fill it with the number plus 1\n            elif i + j == rows * cols - n - 1:\n                matrix[i][j] = n + 1\n    \n    # Return the matrix\n    return matrix"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # First centered hexagonal number is 0.5\n    hexagonal = 0.5\n    # Initialize counter variable\n    count = 1\n    # Loop through numbers until n is reached\n    while count <= n:\n        # Add centered hexagonal number to list\n        hexagonal_list.append(hexagonal)\n        # Update centered hexagonal number\n        hexagonal += 1.5\n        # Increment counter\n        count += 1\n    # Return centered hexagonal number list\n    return hexagonal_list"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return centered_hexagonal_number(n - 1) + centered_hexagonal_number(n - 2) + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # base case\n    if n == 1:\n        return 1\n    \n    # formula for centered hexagonal number\n    a = 1\n    b = 1\n    centered_hexagonal = (a * b) // 2\n    \n    # recursively find centered hexagonal number for n-1\n    centered_hexagonal_n_1 = centered_hexagonal_number(n-1)\n    \n    # return centered hexagonal number for n\n    return centered_hexagonal + centered_hexagonal_n_1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    The centered hexagonal number is the sum of the positive integers k and l such that the hexagon\n    centered at the origin (0,0) has sides of length 2k and 2l.\n\n    Args:\n        n (int): the index of the centered hexagonal number to find.\n\n    Returns:\n        int: the nth centered hexagonal number.\n    \"\"\"\n    k, l = 1, 1\n    while True:\n        k += 1\n        l += 1\n        if n >= k + l:\n            n -= k + l\n        else:\n            return k * 2 - l"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        i = 2\n        j = 2\n        hex_num = 1\n        while i <= n:\n            hex_num = (2 * i - 1) // 3 + 1\n            hex_num += (j - 1) // 2\n            i += 1\n            j += 1\n        return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function finds the nth centered hexagonal number.\n\n    Parameters:\n    n: int\n        The value of n.\n\n    Returns:\n    int\n        The nth centered hexagonal number.\n    '''\n    # Calculate the number of rows and columns for the centered hexagonal number\n    rows = n\n    cols = n - 1 if n % 2 == 0 else n - 2\n\n    # Initialize the first row of the centered hexagonal number\n    row = 1\n\n    # Initialize the variable to store the centered hexagonal number\n    hexagonal_number = 0\n\n    # Iterate through the first row of the centered hexagonal number\n    for i in range(1, cols + 1):\n        # If the row is odd, add i*i to the centered hexagonal number\n        if row % 2 == 1:\n            hexagonal_number += i*i\n\n        # Increment the row by 1\n        row += 1\n\n    # Return the centered hexagonal number\n    return hexagonal_number"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n    # Loop through the dictionaries and add their keys and values to the merged dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a new dictionary that contains all the \n    key-value pairs from the three input dictionaries.\n    '''\n    # Define an empty dictionary to store the merged key-value pairs\n    merged_dict = {}\n    \n    # Iterate through each key-value pair in the three input dictionaries\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function merges three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine all dictionaries into a single dictionary\n    merged_dict = dict(dict1.items() + dict2.items() + dict3.items())\n    # Convert the combined dictionary to a defaultdict so that all keys are unique\n    merged_dict = ct.defaultdict(list, merged_dict)\n    # Return the final dictionary\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(list)\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\nclass CustomDict(ct.MutableMapping):\n    def __init__(self, *args, **kwargs):\n        self._map = ct.defaultdict(dict)\n        for arg in args:\n            self._map[arg] = {}\n        for key, value in kwargs.items():\n            self._map[key] = value\n\n    def __getitem__(self, key):\n        return self._map[key]\n\n    def __setitem__(self, key, value):\n        self._map[key] = value\n\n    def __delitem__(self, key):\n        del self._map[key]\n\n    def __iter__(self):\n        return iter(self._map)\n\n    def __len__(self):\n        return len(self._map)\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = CustomDict()\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n    # Loop through the list and update the frequency count for each element\n    for elem in list1:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    # Return the dictionary of frequency count\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list of elements and returns a dictionary with the frequency of each element.\n    \"\"\"\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if element in freq:\n            freq[element] += 1\n        # If the element is not in the dictionary, add it as a key and set its frequency to 1\n        else:\n            freq[element] = 1\n\n    # Return the dictionary with the frequency of each element in the list\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    # Iterate through the list\n    for item in list1:\n        # Check if the element is already present in the dictionary\n        if item in freq:\n            # Increment the count of that element by 1\n            freq[item] += 1\n        else:\n            # If the element is not present, add it to the dictionary with a count of 1\n            freq[item] = 1\n    # Return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for item in list1:\n        freq[item] += 1\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    else:\n        diff = abs(N-2)\n        if diff < abs(N-3):\n            return 2\n        else:\n            return 3"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(1, N):\n        if i < smallest:\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for num in range(N, -1, -1):\n        if num < closest or closest is None:\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        if N-1 == N or N+1 == N:\n            return N\n        else:\n            n = (N+N-1)//2\n    return N"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = list(map(int, input(\"Enter the list of numbers separated by space: \").split()))\n    n = nums[0]\n    closest = n\n    for i in range(1, len(nums)):\n        if nums[i] > n:\n            closest = nums[i]\n        elif abs(nums[i] - n) < abs(closest - n):\n            closest = nums[i]\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = abs(N - 1)\n    closest = N - 1\n\n    for i in range(2, N + 1):\n        diff = abs(N - i)\n\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N == 1:\n        return 0\n    \n    smallest = 1\n    for i in range(2, N+1):\n        diff = i - smallest\n        if diff < 0:\n            smallest = i\n    \n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Store the list of numbers in a set\n    num_set = set(range(1, N+1))\n    # Initialize the smallest number\n    smallest = float('inf')\n    # Iterate through the numbers in the set\n    for num in num_set:\n        # Calculate the absolute difference between num and N\n        diff = abs(num - N)\n        # Update the smallest number if the current number is smaller\n        if diff < smallest:\n            smallest = diff\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    smallest = float('inf')\n    closest = float('inf')\n    \n    # Iterate through the range of numbers from 1 to n\n    for i in range(1, N+1):\n        # If i is smaller than smallest, update smallest and closest\n        if i < smallest:\n            smallest = i\n            closest = smallest\n            \n        # If i is closer to the target than closest, update closest\n        elif abs(i - N) < abs(i - closest):\n            closest = i\n            \n    # Return the closest smaller number than n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N == 0:\n        return -1\n    elif N % 2 == 0:\n        return closest_num(N/2) + 1\n    else:\n        return closest_num((N-1)/2) - 1"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j]!='':\n                if len(list1[i][j:]) > longest:\n                    longest = len(list1[i][j:])\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list.\n\n    Args:\n        list1 (list): a list of strings\n\n    Returns:\n        int: the length of the longest word in the list\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    # Initialize variables to store the length of the longest word and the length of the current word\n    longest = 0\n    current = 0\n\n    # Loop through each word in the list\n    for word in list1:\n        # Update the length of the current word if it's longer than the longest so far\n        if len(word) > current:\n            current = len(word)\n        # Update the length of the longest word if the current word is longer than the longest so far\n        if current > longest:\n            longest = current\n\n    # Return the length of the longest word\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize a variable to store the length of the longest word\n    longest_word_length = 0\n    \n    # Loop through each word in the list\n    for word in list1:\n        # Check if the length of the current word is greater than the current longest word length\n        if len(word) > longest_word_length:\n            # Update the longest word length to the length of the current word\n            longest_word_length = len(word)\n    \n    # Return the longest word length\n    return longest_word_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(lst):\n    \"\"\"\n    Find the length of the longest word in a list of strings.\n\n    :param lst: a list of strings\n    :return: the length of the longest word in the list\n    \"\"\"\n    max_length = 0\n    for word in lst:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1 in sub_str"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n\n    Args:\n    str1 (str): the main string to search for the substring in\n    sub_str (str): the substring to search for in str1\n\n    Returns:\n    bool: True if sub_str is present as a substring in str1, False otherwise.\n    \"\"\"\n    if sub_str not in str1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str_list, sub_str):\n    for s in str_list:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n\n    Args:\n    str1 (str): The string to be searched.\n    sub_str (str): The substring to be searched for.\n\n    Returns:\n    bool: True if the substring is present in str1, False otherwise.\n    \"\"\"\n\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the list of strings to a set to remove duplicates\n    unique_strings = set(str1)\n\n    # Loop through each string in the list\n    for string in unique_strings:\n        # Check if the substring is present in the string\n        if sub_str in string:\n            return True\n\n    # If the substring is not present in any string in the list, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return is_undulating(n-1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n%2 == 0: # if n is even\n        if n%4 == 0: # if n is divisible by 4\n            return True\n        else:\n            return False\n    else: # if n is odd\n        if n%3 == 0: # if n is divisible by 3\n            return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1 or n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_undulating(n-2)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    elif n > 1:\n        return is_undulating(n - 2)\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # convert the number to a string to check if it has any digits \n    if str(n).isdigit(): \n        # if the number has any digits, check if the sum of the digits is equal to the original number\n        digits = sum(int(digit) for digit in str(n))\n        if digits == n: \n            return True\n        else: \n            return False\n    else: \n        # if the number does not have any digits, it is not undulating\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    if n % 2 == 0:\n        print(n, \"is a even number.\")\n        return True\n    else:\n        print(n, \"is an odd number.\")\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check for even values\n    if n % 2 == 0:\n        return True\n\n    # Check for odd values\n    elif n % 2 == 1:\n        # Initialize variables\n        count = 0\n        temp = n\n\n        # Count the number of odd numbers in the given number\n        while temp > 0:\n            if temp % 2!= 0:\n                count += 1\n            temp //= 2\n\n        # Check if the number is undulating or not\n        if count % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 4 == 0:\n        return True\n    elif n % 10 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples by the second element of each tuple (the second element is the second value)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use the itemgetter function from the operator module to extract the second value\n    # from each tuple and return the index of the tuple with the smallest second value\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Use a lambda function to extract the second value from each tuple\n    second_values = [lambda x: x[1] for x in test_list]\n\n    # Use the index of the minimum value as the index of the minimum second value\n    minimum_index = min(range(len(second_values)), key=second_values.__getitem__)\n\n    # Return the first value of the minimum tuple\n    return test_list[minimum_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n\n    Example:\n\n    >>> test_list = [(1, 5), (3, 2), (4, 1), (2, 3)]\n    >>> index_minimum(test_list)\n    2\n    \"\"\"\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list of tuples based on the second element of each tuple using the itemgetter function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first element of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lengths = []\n    for sublist in lst:\n        lengths.append(len(sublist))\n    return min(lengths)"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # initialize variable to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist) # update if new length is smaller\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000000000000\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # initialize minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])  \n    for i in range(len(lst)):  \n        if len(lst[i]) < min_len:  \n            min_len = len(lst[i])  \n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        i = 2\n        count = 1\n        while i <= n:\n            if n % i == 0:\n                count += 1\n            i += 1\n        return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    if n < 2:\n        return 0\n    count = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    This function returns the number of divisors of a given integer n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    i = 2\n    count = 0\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n            i = 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for elem in list1:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # loop through each element in the list\n    for element in list1:\n        # if the element is not in the dictionary, add it with a frequency of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        # if the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[element] += 1\n    # return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Use a for loop to iterate over each element in the list\n    for elem in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # If the element is not in the dictionary yet, add it with a frequency of 1\n        else:\n            freq_dict[elem] = 1\n    # Return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for elem in lst:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        for j in i:\n            if j in freq_dict:\n                freq_dict[j] += 1\n            else:\n                freq_dict[j] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through each element in the list\n    for elem in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # If the element is not in the dictionary, add it as a key with a frequency of 1\n        else:\n            freq_dict[elem] = 1\n    # Return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flat_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in frequency:\n                    frequency[subitem] += 1\n                else:\n                    frequency[subitem] = 1\n        else:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total * num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Initialize an empty string to store the binary equivalent of the number\n    binary = \"\"\n    \n    # While the number is greater than 0\n    while n > 0:\n        # Take the remainder of the division of the number by 2\n        remainder = n % 2\n        \n        # Convert the remainder to a string and append it to the binary string\n        binary = str(remainder) + binary\n        \n        # Divide the number by 2 and remove the last digit\n        n //= 2\n        \n    # Return the binary string with no leading zeros\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    # Convert decimal number to binary string\n    binary_str = bin(n)[2:]\n    \n    # Remove leading zeros from binary string\n    binary_str = binary_str.lstrip('0')\n    \n    # Return binary string\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize the result string\n    result = \"\"\n    # loop through each digit of the number and append it to the result string\n    while n > 0:\n        result = str(n % 2) + result\n        n //= 2\n    # return the result string with no leading zeros\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = \"\"\n    while n > 0:\n        binary_string = str(n % 2) + binary_string\n        n //= 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal to binary using recursion\n    def helper(num):\n        if num == 0:\n            return \"\"\n        else:\n            return str(num % 2) + helper(num // 2)\n    # Convert binary to decimal using recursion\n    def decimal_to_binary_helper(num):\n        if num == \"\":\n            return 0\n        else:\n            return decimal_to_binary_helper(num[1:]) + int(num[0]) * 2\n    # Call the helper functions and return the result\n    return helper(decimal_to_binary_helper(str(n)))"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        remainder = n % 2\n        n //= 2\n        binary_str = str(remainder) + binary_str\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    # Convert decimal to binary recursively\n    if n == 0: \n        return \"\" \n    else: \n        remainder = n % 2 \n        result = decimal_to_binary(n // 2) \n        return remainder + result "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0: \n        return \"0\" \n    else: \n        binary = decimal_to_binary(n//2) + str(n%2) \n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Check if the input is a negative number\n    if n < 0:\n        # Convert the negative number to its two's complement binary representation\n        n = ~n + 1\n        # Add a prefix of \"-\" to the resulting binary number\n        binary = \"-\" + bin(n)[2:]\n    else:\n        binary = bin(n)[2:]\n    # Remove any leading zeros from the binary number\n    binary = binary.lstrip(\"0\")\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize variables\n    smallest_palindrome = num\n    is_smallest_palindrome = True\n    is_next_smallest_palindrome = False\n    \n    # Check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num\n    else:\n        # Check for a palindrome starting with num+1\n        for i in range(num+1, sys.maxsize):\n            if str(i) == str(i)[::-1]:\n                is_next_smallest_palindrome = True\n                if i > smallest_palindrome:\n                    smallest_palindrome = i\n        if is_next_smallest_palindrome:\n            return smallest_palindrome\n        else:\n            # Check for a palindrome starting with num-1\n            for i in range(num-1, -1, -1):\n                if str(i) == str(i)[::-1]:\n                    is_smallest_palindrome = True\n                    if i < smallest_palindrome:\n                        smallest_palindrome = i\n            if is_smallest_palindrome:\n                return smallest_palindrome\n            else:\n                # Check for a palindrome starting with num+1\n                for i in range(num+1, sys.maxsize):\n                    if str(i) == str(i)[::-1]:\n                        is_next_smallest_palindrome = True\n                        if i > smallest_palindrome:\n                            smallest_palindrome = i\n                if is_next_smallest_palindrome:\n                    return smallest_palindrome\n                else:\n                    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Reverse the number and convert it to a string\n    reversed_num = str(num)[::-1]\n    # Check if the reversed number is divisible by 10\n    if int(reversed_num) % 10 == 0:\n        # If it is, add 1 to it and check if it is divisible by 10\n        reversed_num = str(int(reversed_num) + 1)\n        while int(reversed_num) % 10 == 0:\n            reversed_num = str(int(reversed_num) + 1)\n        return int(reversed_num)\n    else:\n        # If it is not divisible by 10, add 9 to it and check if it is divisible by 10\n        reversed_num = str(int(reversed_num) + 9)\n        while int(reversed_num) % 10 == 0:\n            reversed_num = str(int(reversed_num) + 9)\n        return int(reversed_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        return num\n    else:\n        num += 1\n        while not is_palindrome(num):\n            num += 1\n        return num\n\ndef main():\n    num = int(sys.argv[1])\n    result = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", result)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    num_str = str(num)\n    min_str = sys.maxsize\n    for i in range(len(num_str)):\n        temp_str = num_str[:i] + num_str[i+1:]\n        if int(temp_str) < min_str:\n            min_str = temp_str\n    return int(min_str)\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    next_num = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", next_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    def is_palindrome(n):\n        \"\"\"\n        Check if a number is a palindrome.\n        \"\"\"\n        return str(n) == str(n)[::-1]\n    \n    def is_valid_palindrome(n):\n        \"\"\"\n        Check if a number is a valid palindrome.\n        \"\"\"\n        return is_palindrome(n) and n > 10\n    \n    def next_valid_palindrome(n):\n        \"\"\"\n        Find the next smallest palindrome starting from a number that is a valid palindrome.\n        \"\"\"\n        while True:\n            n += 1\n            if is_valid_palindrome(n):\n                return n\n    \n    def is_palindrome_sequence(n):\n        \"\"\"\n        Check if a number is a palindrome sequence.\n        \"\"\"\n        sequence = []\n        count = 1\n        num = n\n        while True:\n            if is_valid_palindrome(num):\n                sequence.append(num)\n                count += 1\n                num = next_valid_palindrome(num)\n            else:\n                break\n        return sequence\n    \n    def next_smallest_palindrome_sequence(num):\n        \"\"\"\n        Find the next smallest palindrome sequence.\n        \"\"\"\n        palindrome_sequence = is_palindrome_sequence(num)\n        if palindrome_sequence:\n            return palindrome_sequence[-1] + 1\n        else:\n            return num\n    \n    # Test the function\n    print(next_smallest_palindrome(12321))  # Output: 133121\n    print(next_smallest_palindrome(12345))  # Output: 12345\n    print(next_smallest_palindrome(123456))  # Output: 133321\n    print(next_smallest_palindrome(1000000))  # Output: 1111111"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        return num\n\n    num_str = str(num)\n    for i in range(999, 100, -1):\n        if is_palindrome(i) and is_palindrome(num - i):\n            return i\n\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is palindrome or not.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    This function takes an integer as input and returns the next smallest palindrome of that number.\n    '''\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num\n\n    # Check if the number is negative\n    if num < 0:\n        num = -num\n\n    # Find the largest palindrome less than or equal to the original number\n    i = num\n    while i >= 10:\n        i -= 10\n    j = i\n    while j < 10:\n        j += 10\n\n    # Find the largest palindrome that is less than the original number and odd in length\n    for k in range(i+1, j-1):\n        if is_palindrome(k) and (k-i+1) % 2 == 1:\n            return k\n\n    # If no palindrome is found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Function to check if a number is a palindrome.\n    '''\n    # Convert the number to a string and reverse it\n    str_num = str(num)[::-1]\n    # Compare the original string with the reversed string\n    if str_num == str(num):\n        return True\n    else:\n        return False\n\ndef next_smallest_palindrome(num):\n    '''\n    Function to find the next smallest palindrome of a specified integer.\n    '''\n    # Check if the number is a palindrome\n    if is_palindrome(num):\n        # Increment the number by 1 and return it\n        return num+1\n    else:\n        # Find the longest palindromic substring in the number\n        start = 0\n        end = len(str(num))-1\n        while start < end:\n            # Calculate the middle index of the substring\n            mid = (start+end)//2\n            # Check if the substring is a palindrome\n            if is_palindrome(int(str(num)[start:mid+1]+str(num)[mid:end+1])):\n                # Update the start and end indices\n                start = mid\n                end = mid\n            else:\n                # Update the end index\n                end = mid-1\n        # Increment the start index by 1 and return the number at that index\n        return int(str(num)[start:end+1])+1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # If the number is a palindrome, return the next integer\n    if is_palindrome(num):\n        return num+1\n    \n    # If the number is not a palindrome, find the smallest odd integer greater than the number\n    smallest_odd_greater_than_num = num + 2\n    while not is_palindrome(smallest_odd_greater_than_num):\n        smallest_odd_greater_than_num += 2\n    \n    # Return the next smallest odd integer greater than the number\n    return smallest_odd_greater_than_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the input number to a string and remove all non-digit characters\n    snum = ''.join(filter(str.isdigit, str(num)))\n\n    # Convert the string to an integer and calculate its remainder when divided by 10\n    remainder = int(snum) % 10\n\n    # If the remainder is 9, subtract 10 from the integer and append a 9 to the string\n    if remainder == 9:\n        snum = str(int(snum) - 10) + '9'\n        remainder = int(snum) % 10\n\n    # If the remainder is 0, append a 1 to the string and increment the integer by 1\n    elif remainder == 0:\n        snum = str(int(snum) + 1)\n        remainder = int(snum) % 10\n\n    # If the remainder is not 9 or 0, append a 1 to the string and decrement the integer by 1\n    else:\n        snum = str(int(snum) - 1)\n        remainder = int(snum) % 10\n\n    # Add a 0 to the string and convert it to an integer\n    snum = str(int(snum) * 10) + '0'\n\n    # Calculate the next smallest palindrome as the remainder of the input number divided by 10\n    next_num = int(str(int(snum) // 10))\n\n    return next_num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if the array is empty\n    if len(arr) == 0:\n        return None\n    \n    # check if the k is within the range of the array\n    if k < 1 or k > len(arr):\n        return None\n    \n    # iterate through the array and return the kth element\n    for i in range(len(arr)):\n        if k == 1:\n            return arr[i]\n        else:\n            k -= 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        for i in range(len(arr)):\n            if i == k-1:\n                return arr[i]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty or k is out of bounds\n    if not arr or k < 1 or k > len(arr):\n        return None\n    \n    # Initialize two pointers, left and right, to the first and last indices of the array\n    left = 1\n    right = len(arr)\n    \n    # Iterate until the kth element is found\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # If the kth element is found, return its value\n        if k == mid:\n            return arr[k-1]\n        \n        # If the kth element is greater than the mid value, search in the left half\n        elif k > mid:\n            left = mid + 1\n            \n        # If the kth element is less than the mid value, search in the right half\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError(\"k is greater than the length of the array\")\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k <= 0 or k > n:\n        print(\"Invalid input.\")\n    else:\n        for i in range(k-1):\n            if arr[i] == arr[i+1]:\n                print(\"Invalid input.\")\n                break\n        else:\n            print(arr[k-1])"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Invalid input\"\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = n\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid-1] < arr[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return arr[left-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title() for word in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    capitalize_next = True\n    for char in word:\n        if char.isupper():\n            if capitalize_next:\n                result += char.lower()\n                capitalize_next = False\n            else:\n                result += char\n        else:\n            if capitalize_next:\n                result += char.upper()\n                capitalize_next = False\n            else:\n                result += char.lower()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    parts = word.split('_')\n    result = ''\n    for part in parts:\n        if part.isupper():\n            result += part\n        else:\n            result += part.capitalize()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_word = \"\"\n    for char in word:\n        if char.isupper():\n            if len(camel_word) > 0:\n                camel_word += \"_\"\n            camel_word += char.lower()\n        else:\n            camel_word += char\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        else:\n            camel_case += char.upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_word = \"\"\n    for char in word:\n        if char.isupper():\n            camel_word += char\n        else:\n            camel_word += \"_\" + char.lower()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i > 0 and char.isupper():\n            camel_case += \"_\"\n        camel_case += char.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            if word[i].isupper():\n                camel_case += '_' + word[i].lower()\n            else:\n                camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row and column of the triangle to 1\n    triangle = [[1 for i in range(n+1)] for j in range(m+1)]\n    # Fill the first row and column of the triangle with the given values\n    for i in range(n):\n        triangle[i][0] = i+1\n    for j in range(m):\n        triangle[0][j] = j+1\n    # Fill the remaining elements of the triangle using the recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            triangle[i][j] = triangle[i-1][j] + triangle[i][j-1]\n    # Return the value in the bottom-right corner of the triangle\n    return triangle[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    This function returns the Eulerian number a(n, m) where n and m are positive integers.\n    \"\"\"\n    # Initialize the Eulerian number to 0\n    a = 0\n\n    # Initialize a counter variable to 1\n    count = 1\n\n    # Initialize the prime factorization of n\n    prime_factors = prime_factorization(n)\n\n    # Loop through the prime factors of n\n    for p in prime_factors:\n        # Calculate the number of times p appears in n\n        count = count * (m // p)\n\n    # Calculate the Eulerian number a(n, m)\n    a = count // 2\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    # Initialize the first row with 1\n    row = [1]\n    # Initialize the first column with 0\n    col = [0]\n    # Initialize the first diagonal element with 1\n    diag = 1\n    # Initialize the result as 0\n    result = 0\n    # Loop through the remaining elements\n    for i in range(2, n+1):\n        # Create a new row with zeros\n        new_row = [0] * m\n        # Fill the row with the appropriate values\n        for j in range(m):\n            if j == i-1:\n                new_row[j] = 1\n            else:\n                new_row[j] = row[j] + col[j-i]\n        # Fill the col and diag arrays with the appropriate values\n        col = new_row\n        diag = diag + 1\n        # Check if the diag element is positive\n        if diag > 0:\n            # Multiply the result by the diag element\n            result = result * diag\n            # Divide the diag element by 2\n            diag = diag // 2\n        # Move to the next row\n        row = new_row\n    # Return the final result\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Euler's theorem states that a(n, m) = n! / (m! * (n-m)!)\n    a = 1\n    for i in range(1, n+1):\n        a *= i\n    for j in range(1, m+1):\n        a /= j\n    for k in range(1, n-m+1):\n        a *= (k+1)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return (n - 1) * eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    if n == 0 and m == 0: \n        return 0\n    elif n == 0: \n        return 2\n    elif m == 0: \n        return 2\n\n    return eulerian_num(n-1, m-1) + n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the Eulerian number to 1\n    a = 1\n\n    # Loop through the first n rows of the triangle\n    for i in range(n):\n        # Loop through the first m-i rows of the triangle\n        for j in range(m-i):\n            # Calculate the value of the Eulerian number\n            a *= (i+1)\n            a /= (j+1)\n\n    # Return the final Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # create a list of lists to store the edges of the graph\n    adj_list = [[0 for j in range(m)] for i in range(n)]\n\n    # add edges to the graph\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                adj_list[i][j] = 1\n            elif i == 0 and j == 1:\n                adj_list[i][j] = 2\n            elif i == 1 and j == 1:\n                adj_list[i][j] = 3\n            elif i == 2 and j == 0:\n                adj_list[i][j] = 4\n            elif i == 2 and j == 1:\n                adj_list[i][j] = 5\n            elif i == 2 and j == 2:\n                adj_list[i][j] = 6\n\n    # create a dictionary to store the degrees of each vertex\n    degrees = {}\n    for i in range(n):\n        for j in range(m):\n            if adj_list[i][j]!= 0:\n                if adj_list[i][j] not in degrees:\n                    degrees[adj_list[i][j]] = 1\n                else:\n                    degrees[adj_list[i][j]] += 1\n\n    # calculate the Eulerian number using the bipartite graph theorem\n    eulerian_num = sum(degree * (degree - 1) for degree in degrees.values()) / 2\n\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Generate a list of squares\n    squares = [i*i for i in range(1, n+1)]\n    # Calculate the sum of squares\n    sum_squares = sum(squares)\n    # Calculate the product of squares\n    product_squares = n*m\n    # Calculate the difference between the sum of squares and the product of squares\n    eulerian_sum = product_squares - sum_squares\n    return eulerian_sum"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the number of paths that can be made from a cell (i, j) to the next cell (i+1, j)\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i][j-1] + dp[i-1][j]\n    \n    # Find the number of paths that end at the last cell\n    num_paths = 0\n    for i in range(1, n+1):\n        num_paths += dp[i][m]\n    \n    # Calculate the Eulerian number\n    a = num_paths - dp[1][1]\n    \n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist of the input list\n    for sublist in input_list:\n\n        # Convert the sublist to a tuple of strings\n        sublist_tuple = tuple(sublist)\n\n        # Sort the tuple using the sorted() function\n        sorted_sublist = sorted(sublist_tuple)\n\n        # Convert the sorted tuple back to a list\n        sorted_sublist_list = list(sorted_sublist)\n\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist_list\n\n    # Return the sorted input list\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = str(input_list[i][j])  # convert each element to string\n    for sublist in input_list:\n        sublist.sort()  # sort the sublist\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = []\n    for item in test_list:\n        new_list.append(item)\n    test_tup = test_tup + tuple(new_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_tup = tuple(test_tup + test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert list to tuple\n    test_tup = tuple(test_list)\n\n    # Append list to tuple\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Using the + operator to concatenate two lists\n    new_list = test_list + test_tup\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + test_list\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Check if the input lists and tuples are of the same length\n    if len(test_list)!= len(test_tup):\n        return \"The lists and tuples must be of the same length.\"\n    \n    # Create a new tuple and append the given list to the tuple\n    new_tup = test_tup + (test_list,)\n    \n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # If test_list is not a list, convert it to a list\n    if not isinstance(test_list, list):\n        test_list = [test_list]\n    # If test_tup is not a tuple, convert it to a tuple\n    if not isinstance(test_tup, tuple):\n        test_tup = (test_tup,)\n    # Append test_list to test_tup\n    test_tup += test_list\n    # Return the updated test_tup\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create an empty list to store the merged sorted list\n    merged_list = []\n\n    # Use heapq module to merge the three lists\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    # Iterate through the three lists and add elements to the merged list\n    while num1 and num2 and num3:\n        if -heapq.heappop(num1) > -heapq.heappop(num2):\n            heapq.heappush(merged_list, -heapq.heappop(num1))\n        else:\n            heapq.heappush(merged_list, -heapq.heappop(num2))\n\n    # Add any remaining elements from the other lists to the merged list\n    if num1:\n        while num1:\n            heapq.heappush(merged_list, -heapq.heappop(num1))\n    if num2:\n        while num2:\n            heapq.heappush(merged_list, -heapq.heappop(num2))\n    if num3:\n        while num3:\n            heapq.heappush(merged_list, -heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # convert all lists to lists of tuples\n    list1 = [(x, 1) for x in num1]\n    list2 = [(x, 2) for x in num2]\n    list3 = [(x, 3) for x in num3]\n    \n    # merge the three lists\n    merged_list = heapq.merge(list1, list2, list3)\n    \n    # extract the elements of the merged list and create a new list\n    sorted_list = []\n    for item in merged_list:\n        sorted_list.append(item[0])\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as input and returns a single sorted list.\n    '''\n    heap1 = [num for num in num1]\n    heap2 = [num for num in num2]\n    heap3 = [num for num in num3]\n\n    heapq.heapify(heap1)\n    heapq.heapify(heap2)\n    heapq.heapify(heap3)\n\n    result = []\n\n    while heap1 and heap2 and heap3:\n        if heapq.heappop(heap1) < heapq.heappop(heap2):\n            result.append(heapq.heappop(heap1))\n        elif heapq.heappop(heap1) > heapq.heappop(heap2):\n            result.append(heapq.heappop(heap2))\n        else:\n            result.append(heapq.heappop(heap1))\n            result.append(heapq.heappop(heap2))\n            heapq.heappop(heap3)\n\n    result += heapq.heappop(heap1)\n    result += heapq.heappop(heap2)\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    result = []\n    i = j = k = 0\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            result.append(num2[j])\n            j += 1\n        else:\n            result.append(num3[k])\n            k += 1\n    \n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            result.append(num1[i])\n            i += 1\n        else:\n            result.append(num2[j])\n            j += 1\n    \n    while i < len(num1) and j < len(num2):\n        if num1[i] < num3[j]:\n            result.append(num1[i])\n            i += 1\n        else:\n            result.append(num3[j])\n            j += 1\n    \n    while i < len(num1) and j < len(num2):\n        if num2[j] < num3[i]:\n            result.append(num2[j])\n            j += 1\n        else:\n            result.append(num3[i])\n            i += 1\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            result.append(num2[j])\n            j += 1\n        else:\n            result.append(num3[k])\n            k += 1\n    \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i = j = k = 0\n    \n    # merge num1, num2 and num3 into result in non-decreasing order\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            result.append(num2[j])\n            j += 1\n        else:\n            result.append(num3[k])\n            k += 1\n            \n    # add any remaining elements from num1, num2 or num3 to result\n    result += num1[i:]\n    result += num2[j:]\n    result += num3[k:]\n    \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Initialize a new list to store the merged sorted list\n    merged_list = []\n    # Initialize two heaps (min-heap and max-heap) to store the sorted lists\n    min_heap1 = []\n    max_heap1 = []\n    min_heap2 = []\n    max_heap2 = []\n    # Iterate through each list and push each element into the corresponding heap\n    for i in range(len(num1)):\n        heapq.heappush(min_heap1, num1[i])\n    for i in range(len(num2)):\n        heapq.heappush(max_heap1, num2[i])\n    for i in range(len(num3)):\n        heapq.heappush(min_heap2, num3[i])\n    for i in range(len(num3)):\n        heapq.heappush(max_heap2, num3[i])\n    # Iterate through the min and max heaps and push each element into the merged list\n    while min_heap1 and max_heap1 and min_heap2 and max_heap2:\n        if heapq.heappop(min_heap1) < heapq.heappop(max_heap1):\n            merged_list.append(heapq.heappop(min_heap1))\n            heapq.heappush(max_heap1, heapq.heappop(min_heap1))\n        else:\n            merged_list.append(heapq.heappop(max_heap1))\n            heapq.heappush(min_heap1, heapq.heappop(max_heap1))\n    # Iterate through the remaining elements in the min heaps and push them into the merged list\n    while min_heap1:\n        merged_list.append(heapq.heappop(min_heap1))\n    while max_heap1:\n        merged_list.append(heapq.heappop(max_heap1))\n    # Iterate through the remaining elements in the max heaps and push them into the merged list\n    while min_heap2:\n        merged_list.append(heapq.heappop(min_heap2))\n    while max_heap2:\n        merged_list.append(heapq.heappop(max_heap2))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n\n    # Create a min heap with the combined list\n    heap = heapq.heapify(combined_list)\n\n    # Create a new list to store the sorted output\n    sorted_list = []\n\n    # Pop the smallest element from the heap and append it to the sorted_list\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # merge num1 and num2 into a single list\n    merged = sorted(num1 + num2)\n    # merge merged list and num3 into a single sorted list\n    return sorted(merged + num3)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    :param num1: List of integers sorted in ascending order.\n    :param num2: List of integers sorted in ascending order.\n    :param num3: List of integers sorted in ascending order.\n    :return: List of integers sorted in ascending order.\n    \"\"\"\n    num = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            num.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            num.append(num2[j])\n            j += 1\n        else:\n            num.append(num3[k])\n            k += 1\n\n    while i < len(num1):\n        num.append(num1[i])\n        i += 1\n\n    while j < len(num2):\n        num.append(num2[j])\n        j += 1\n\n    while k < len(num3):\n        num.append(num3[k])\n        k += 1\n\n    return num"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    binary_list = [int(i) for i in s]\n    # Calculate the number of times the string needs to be rotated\n    rotations = n % len(binary_list)\n    # Rotate the list of integers\n    rotated_list = binary_list[-rotations:] + binary_list[:-rotations]\n    # Count the number of odd numbers in the rotated list\n    odd_count = sum(1 for i in rotated_list if i % 2!= 0)\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of odd values that can be obtained by rotating a binary string s n times.\n    \"\"\"\n    # Initialize count to zero\n    count = 0\n    # Convert the binary string s to a list of digits\n    binary_s = list(bin(int(s))[2:])\n    # Loop through the list of digits n times\n    for i in range(n):\n        # Copy the list of digits to a new list\n        new_digits = binary_s.copy()\n        # Loop through the list of digits and append the next digit to the beginning of the list\n        for j in range(len(binary_s) - 1, -1, -1):\n            new_digits.insert(0, binary_s[j])\n        # Set the list of digits to the new list\n        binary_s = new_digits.copy()\n        # Check if there are any odd digits in the new list\n        if any(int(digit) % 2!= 0 for digit in binary_s):\n            count += 1\n    # Return the final count of odd values\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n): \n    # Initialize an empty list to store the result\n    result = []\n    # Initialize a variable to keep track of the count of odd values\n    count = 0\n    # Initialize a variable to keep track of the number of rotations\n    rotations = 0\n    # Loop until the number of rotations exceeds the given number\n    while rotations < n:\n        # Loop through each character in the binary string\n        for char in s:\n            # Check if the character is odd\n            if char == '1':\n                # If it is, increment the count\n                count += 1\n            # If the character is even, add it to the result and rotate the binary string\n            else:\n                result.append('0')\n                s = s[1:] + '0'\n                # If the number of rotations exceeds the given number, break out of the loop\n                if rotations == n-1:\n                    break\n        # If the number of rotations is less than the given number, rotate the binary string\n        rotations += 1\n    # Return the count of odd values\n    return count, result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    This function takes two parameters, a binary string s and an integer n. The binary string s is the string of zeros and ones that we want to rotate. The integer n is the number of times we want to rotate the string. The function returns the number of odd numbers in the rotated string.\n\n    The function uses two variables, count and sum, to keep track of the number of odd numbers and the sum of odd numbers, respectively. We start by initializing count to 0 and sum to 0.\n\n    Then, we loop through each character in the binary string s. For each character, we add 1 to count if it is odd, and we add the value of the character to sum if it is odd.\n\n    Once we have looped through all the characters in the binary string, we divide sum by 2 to get the average of odd numbers in the rotated string.\n\n    Finally, we return the value of count.\n\n    Note that we assume that the binary string s contains no leading zeros or ones. If s starts with a zero or one, we need to remove it before we can rotate it.\n    '''\n\n    # Remove leading zeroes and ones from s\n    s = s.lstrip('01')\n\n    # Initialize count and sum\n    count = 0\n    sum = 0\n\n    # Loop through each character in the binary string\n    for char in s:\n        # Check if the character is odd\n        if char.isdigit():\n            # If the character is odd, add 1 to count and add the value of the character to sum\n            if int(char) % 2 == 1:\n                count += 1\n                sum += int(char)\n\n    # Divide sum by 2 to get the average of odd numbers in the rotated string\n    avg = sum // 2\n\n    # Return the value of count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    odd_count = 0\n    for i in range(n):\n        # Rotate the binary string by 1 bit to the left\n        s = (s[0] << 1) | (s[1] >> 7)\n        if s[0] == '1':\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    s = bin(int(s,2))[2:] # remove the \"0b\" prefix from the binary string\n    result = 0\n    for i in range(n):\n        s = s + s[0] # rotate the binary string by 1 bit to the right\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 1:\n            result += 1\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # initializing an empty list to store the odd numbers\n    odd_numbers = []\n    # converting the binary string to a list of integers\n    binary_list = [int(i) for i in s]\n    # rotating the binary list the given number of times\n    for i in range(n):\n        binary_list.append(binary_list.pop(0))\n    # iterating through the list of integers to find the odd numbers\n    for i in binary_list:\n        if i % 2!= 0:\n            odd_numbers.append(i)\n    # returning the length of the odd_numbers list\n    return len(odd_numbers)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #convert the input string to a binary string\n    bin_s = bin(int(s,2))[2:]\n    \n    #initialize a variable to store the count of odd values\n    count = 0\n    \n    #iterate n times\n    for i in range(n):\n        #rotate the binary string by one position to the right\n        new_bin_s = bin_s[1:] + bin_s[0]\n        #convert the rotated binary string to an integer\n        new_int = int(new_bin_s,2)\n        #check if the integer is odd\n        if new_int % 2!= 0:\n            count += 1\n    \n    #return the count of odd values\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of digits\n    s = [int(i) for i in s]\n    # Initialize the count to zero\n    count = 0\n    # Rotate the list of digits n times\n    for _ in range(n):\n        s.append(s.pop(0))\n    # Iterate over the rotated list and count the odd numbers\n    for i in s:\n        if i % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        s = s[::-1] # reverse the string\n        count += s.count('1') # count the number of '1's in the reversed string\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common:\n                common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a set of common elements.\n    '''\n    common_set = set()\n    \n    # Loop through the nested list\n    for sublist in nestedlist:\n        # Loop through the sublist and add common elements to a set\n        for item in sublist:\n            if item in common_set:\n                common_set.remove(item)\n            else:\n                common_set.add(item)\n    \n    # Return the set of common elements\n    return common_set"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Iterate through the nested lists\n    for lst in nestedlist:\n        # Iterate through the elements in the current list\n        for elem in lst:\n            # If the element is not in the set, add it\n            if elem not in common:\n                common.add(elem)\n\n    # Return the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize a set to store the common elements\n    common_elements = set()\n\n    # Iterate through the nested lists\n    for lst in nestedlist:\n        # Iterate through the elements in the current list\n        for elem in lst:\n            # Add the element to the common_elements set if it's not already present\n            if elem not in common_elements:\n                common_elements.add(elem)\n\n    # Return the common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create an empty set to store the common elements\n    common = set()\n    \n    # Iterate through the nested lists\n    for sublist in nestedlist:\n        # Iterate through the sublist and add common elements to the set\n        for item in sublist:\n            common.add(item)\n    \n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store the common elements\n    common_elements = set()\n\n    # Iterate through the nested lists\n    for sublist in nestedlist:\n        # Iterate through the sublist\n        for element in sublist:\n            # Add the element to the set if it's already in the set\n            if element in common_elements:\n                continue\n            common_elements.add(element)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return None\n    else:\n        for i in range(len(nestedlist)):\n            nestedlist[i] = list(set(nestedlist[i]))\n        return common_in_nested_lists(nestedlist[1:])"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set()\n    set2 = set()\n    \n    for item in nestedlist:\n        set1.update(item)\n        \n    for item in nestedlist:\n        set2.update(item)\n        \n    return set1.intersection(set2)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                common.remove(nestedlist[i][j])\n            else:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Remove any non-numeric characters from the string\n    cleaned_string = ''.join(c for c in text if c.isdigit())\n\n    # Check if the cleaned string is empty\n    if not cleaned_string:\n        return False\n\n    # Check if the cleaned string is an integer\n    try:\n        int(cleaned_string)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    This function checks if a string represents an integer or not.\n    '''\n\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    This function takes a string as input and returns True if it represents an integer, else it returns False.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n\n    for item in list1:\n        if len(item) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    else:\n        for i in list1:\n            if i:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Use a loop to iterate over all the dictionaries in the list\n    for d in list1:\n        # Use the len() function to check if the dictionary is empty or not\n        if len(d) == 0:\n            # If the dictionary is empty, return False\n            return False\n    # If all the dictionaries are not empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if not d:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each number in the tuple\n    for num in nums:\n        # Add the number to the sum variable\n        sum += num\n    # Return the sum\n    return sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list and sum the elements\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert tuple to list to work with lists\n    nums_list = list(nums)\n    # initialize an empty string\n    result = ''\n    # iterate through the list and add the digits of the integer to the result string\n    for num in nums_list:\n        result += str(num)\n    # return the result as an integer\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not isinstance(nums, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    elif not all(isinstance(x, int) and x > 0 for x in nums):\n        raise ValueError(\"All elements in the tuple must be positive integers\")\n    else:\n        return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n\n    # Convert the tuple into a list\n    nums_list = list(nums)\n\n    # Initialize the result variable\n    result = 0\n\n    # Traverse through the list and add the elements to the result\n    for num in nums_list:\n        result += num\n\n    # Return the result\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for elem in test_list:\n        try:\n            float_elem = float(elem)\n            new_list.append(float_elem)\n        except ValueError:\n            pass\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        try:\n            float_item = float(item)\n            result.append(float_item)\n        except ValueError:\n            pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, str):\n                try:\n                    item = float(item)\n                except ValueError:\n                    pass\n            elif isinstance(item, (int, float)):\n                continue\n            else:\n                item = float(str(item))\n            sublist[sublist.index(item)] = item\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i, row in enumerate(test_list):\n        for j, cell in enumerate(row):\n            try:\n                test_list[i][j] = float(cell)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        if isinstance(item, list):\n            list_to_float(item)\n        elif isinstance(item, (int, float, complex)):\n            test_list[test_list.index(item)] = float(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n                test_list[sublist.index(item)][0] = float(item)\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                pass\n            else:\n                sublist.remove(item)\n                sublist.append(float(item))\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on space character\n    words = string.split()\n    # convert each word to a list\n    words_list = [list(word) for word in words]\n    # return the list of lists\n    return words_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n    last_index = 0\n    \n    for i, element in enumerate(arr):\n        if i > last_index and element == arr[last_index]:\n            unique_element = arr[last_index]\n            last_index = i\n    \n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # find the first element that appears only once\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Traverse the array and check if the current element appears only once.\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            for j in range(i+1, len(arr)):\n                if arr[j] == arr[i]:\n                    return arr[i]\n    return -1  # If no such element is found, return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary and find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize variables\n    count = 1\n    single_element = arr[0]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the current element is equal to the previous element, increment the count\n        if arr[i] == single_element:\n            count += 1\n        else:\n            # If the count reaches 1, reset the count and set the single_element to the current element\n            if count == 1:\n                single_element = arr[i]\n            # If the count is greater than 1, check if the single_element is the first element\n            elif count > 1 and single_element == arr[0]:\n                return single_element\n            # Otherwise, update the single_element to the current element\n            else:\n                single_element = arr[i]\n                count = 1\n\n    # If the loop completes without finding a single element that appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return None\n    else:\n        for i in range(len(arr)):\n            if arr.count(arr[i]) == 1:\n                return arr[i]\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    # Initialize a set to store the unique elements\n    unique = set()\n\n    # Loop through the array and count the frequency of each element\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Loop through the dictionary and add the keys (which are unique elements) to the set\n    for key in freq:\n        unique.add(key)\n\n    # Check if there is only one unique element in the set\n    if len(unique) == 1:\n        # Return the unique element\n        return list(unique)[0]\n    else:\n        # Raise an exception if there are more than one unique element\n        raise ValueError(\"There are more than one unique element in the array\")"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Find the element that appears only once in the array\n    for num, count in freq.items():\n        if count == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n    count = 0\n    \n    # Iterate over the array to count the number of times each element appears\n    for i in range(len(arr)):\n        if arr[i]!= unique_element:\n            count += 1\n            unique_element = arr[i]\n    \n    # If the unique element is not found, return None\n    if count == 0:\n        return None\n    \n    # If the unique element is found, return the first occurrence of the element\n    for i in range(len(arr)):\n        if arr[i] == unique_element:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Traverse through the array and increment the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Traverse through the array and check if the frequency of each element is 1\n    for num in arr:\n        if freq[num] == 1:\n            return num\n\n    # If no element appears only once in the array, return -1\n    return -1"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][0] > max_product:\n                max_product = abs(list1[i][0] * list1[j][0])\n            if list1[i][1] * list1[j][1] > max_product:\n                max_product = abs(list1[i][1] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = abs(list1[i][0] * list1[j][1])\n            if pair_product > max_product:\n                max_product = pair_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Sort the list in ascending order\n    list1.sort()\n    \n    # Initialize two variables to store the maximum product and its corresponding pair of tuples\n    max_product = float('-inf')\n    max_pair = None\n    \n    # Loop through the list and find the maximum absolute product\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute difference between the current pair and the next pair\n            abs_diff = abs(list1[i]-list1[j])\n            \n            # Check if the absolute difference is greater than the current maximum\n            if abs_diff > max_product:\n                max_product = abs_diff\n                max_pair = (list1[i], list1[j])\n                \n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            diff = abs(list1[i][0]-list1[j][0]) + abs(list1[i][1]-list1[j][1])\n            if diff > max_product:\n                max_product = diff\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')  # initialize maximum product to negative infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            max_product = max(max_product, abs(product))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1]\n            max_product = max(max_product, abs(product))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # initialize variables to keep track of the maximum and minimum products\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    # loop through each tuple in the list\n    for tup in list1:\n        # extract the first and second elements of the tuple\n        first = tup[0]\n        second = tup[1]\n\n        # calculate the product of the two numbers and store it in a variable\n        product = first * second\n\n        # check if the product is greater than the current maximum product\n        if product > max_product:\n            max_product = product\n\n        # check if the product is less than the current minimum product\n        if product < min_product:\n            min_product = product\n\n    # return the maximum absolute product\n    return abs(max_product)"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Function to calculate absolute value of a number\n    def abs_value(x):\n        if x >= 0:\n            return x\n        else:\n            return -x\n    \n    # Function to find the maximum product of pairs of numbers in a tuple\n    def max_product(pair):\n        x, y = pair\n        return abs_value(x) * abs_value(y)\n    \n    # Initialize maximum product to negative infinity\n    max_product_found = float('-inf')\n    \n    # Loop through each tuple in the list\n    for pair in list1:\n        # Calculate the product of the pair\n        product = max_product(pair)\n        \n        # Check if the product is greater than the current maximum product\n        if product > max_product_found:\n            max_product_found = product\n    \n    # Return the maximum product found\n    return max_product_found"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    \n    # Loop through numbers from 1 to limit\n    for num in range(1, limit):\n        # Check if number is amicable\n        if num!= 1 and is_amicable(num):\n            # Add to sum if amicable\n            sum += num\n            \n    return sum\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable to the given number.\n    '''\n    # Check if number is less than 1000\n    if num < 1000:\n        # Initialize sum to zero\n        sum = 0\n        \n        # Loop through numbers from 1 to square root of number\n        for i in range(1, num):\n            # Check if number is divisible by i\n            if num % i == 0:\n                # Add i to sum if divisible by i\n                sum += i\n                \n        # Check if square root of number is equal to sum\n        if num == sum ** 2:\n            return True\n    \n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list to store the sum of amicable numbers\n    amicable_sum = []\n\n    # Loop through all numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n        # Check if the number is amicable\n        if is_amicable(i):\n            # Add the number to the sum of amicable numbers\n            amicable_sum.append(i)\n\n    # Return the sum of amicable numbers\n    return sum(amicable_sum)\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable.\n    '''\n    # Initialize two variables to store the sum of the proper divisors\n    sum_div1 = 0\n    sum_div2 = 0\n\n    # Loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(num**0.5)+1):\n        # Check if the number is divisible by the i-th number\n        if num % i == 0:\n            # Check if the divisor is also a proper divisor of the number\n            if i!= num // i:\n                return False\n            # Add the i-th number to the sum of the proper divisors\n            sum_div1 += i\n            # Add the divisor to the sum of the proper divisors\n            sum_div2 += num // i\n\n    # Return True if the number is amicable, else False\n    return num == sum_div1 + sum_div2"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i == sum(set(range(1, i))):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit):\n        if i!= 1 and i!= limit:\n            if i == sum(divisors(i)):\n                total += i\n    return total\n\ndef divisors(n):\n    divs = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n//i:\n                divs.append(n//i)\n    return divs"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if i!= 1:\n            for j in range(2, i):\n                if i % j == 0 and j!= i:\n                    break\n            else:\n                sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if i % 2 == 0 and i!= 2:\n            j = 1\n            while i*j <= limit:\n                if i*j == 2:\n                    amicable_sum += i\n                j += 1\n        elif i > 2 and i % 2 == 0 and i!= 2:\n            j = 1\n            while i*j <= limit:\n                if i*j == 4:\n                    amicable_sum += i\n                j += 1\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(2, limit):\n        if i in amicable_numbers(i):\n            amicable_sum += i\n    return amicable_sum\n\ndef amicable_numbers(n):\n    '''\n    Generate all the amicable numbers of a given number.\n    '''\n    amicable = []\n    d = 1\n    while d <= n // 2:\n        if n % d == 0:\n            amicable.append(d)\n            if n // d!= d:\n                amicable.append(n // d)\n        d += 1\n    return amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize variables for sum and count\n    sum_amicable = 0\n    count = 0\n    \n    # loop through numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # check if the number is amicable\n        if i < 1000:\n            amicable_num = sum(set(map(int, str(i))))\n            if amicable_num > i:\n                sum_amicable += i\n                count += 1\n    \n    # return the sum of amicable numbers\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit):\n        j = 2\n        while i*j <= limit:\n            if i*j == limit:\n                amicable_numbers.append(i*j)\n            j += 1\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    # Define a helper function to check if a number is amicable\n    def is_amicable(num):\n        # Check if the number is divisible by any of its factors\n        for i in range(1, int(num**0.5)+1):\n            if num%i == 0 and i!= num//i:\n                return True\n        return False\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the numbers from 1 to the limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable\n        if is_amicable(num) and is_amicable(sum(num, limit)):\n            # Add the amicable numbers to the sum\n            sum += num + sum(num, limit)\n    \n    # Return the sum of all amicable numbers\n    return sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a,b))\n    angle = round(angle,3)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # use the arg method to get the angle of a complex number\n    angle = cmath.phase(a + b * 1j)\n    # convert the angle from radians to degrees\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns the angle of the complex number.\n    '''\n    angle = cmath.phase(a*b)\n    angle = cmath.phase(angle)\n    angle = cmath.phase(angle)\n    angle = angle.real\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    angle = cmath.rect(angle)\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n\n    # Calculate the magnitude of the complex number\n    magnitude = cmath.sqrt(a**2 + b**2)\n\n    # Calculate the angle of the complex number using the arccosine formula\n    angle = cmath.phase(cmath.rect(a, b))\n\n    # Return the angle of the complex number in degrees\n    return angle.real * 180 / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    # Initialize variables\n    num_0s = 0\n    num_1s = 0\n    max_diff = 0\n\n    # Loop through the binary string\n    for char in string:\n        if char == '0':\n            num_0s += 1\n        else:\n            num_1s += 1\n\n        # Update the maximum difference\n        diff = abs(num_0s - num_1s)\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Convert string to list of bits\n    bits = [int(bit) for bit in list(string)]\n\n    # Initialize variables for the maximum difference and the count of 0s and 1s in the first bit\n    max_diff = 0\n    count_0s = count_1s = 0\n\n    # Loop through the bits and find the maximum difference\n    for i in range(1, len(bits)):\n        if bits[i]!= bits[i - 1]:\n            diff = count_0s - count_1s\n            if diff > max_diff:\n                max_diff = diff\n            count_0s = count_1s = 0\n        if bits[i] == 0:\n            count_0s += 1\n        else:\n            count_1s += 1\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Convert the string to a list of integers\n    binary_list = [int(i) for i in string]\n\n    # Initialize variables to keep track of the maximum difference and the current sub-string\n    max_diff = 0\n    current_substring = []\n\n    # Loop through the list of integers\n    for i in range(len(binary_list)):\n        # If the integer is 0, add it to the current sub-string and check the length of the sub-string\n        if binary_list[i] == 0:\n            current_substring.append(0)\n            if len(current_substring) > max_diff:\n                max_diff = len(current_substring)\n            current_substring = []\n        else:\n            # If the integer is 1, remove the last 0 from the current sub-string and check the length of the sub-string\n            current_substring.pop()\n            if len(current_substring) > max_diff:\n                max_diff = len(current_substring)\n\n    # Return the maximum difference between the number of 0s and number of 1s in any sub-string\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize the count of 0s and 1s for each index in the string\n    count_0 = [0] * len(string)\n    count_1 = [0] * len(string)\n\n    # Traverse the string from the beginning to the end and update the count of 0s and 1s for each index\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0[i] = count_0[i-1] + 1\n        else:\n            count_1[i] = count_1[i-1] + 1\n\n    # Initialize the result variable\n    result = 0\n\n    # Traverse the string again from the beginning to the end and compare the count of 0s and 1s at each index\n    for i in range(len(string)):\n        if count_0[i] > count_1[i]:\n            result = max(result, count_0[i] - count_1[i])\n        else:\n            result = max(result, count_1[i] - count_0[i])\n\n    return result"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    count = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n        \n        diff = abs(count - i)\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    num_0s = 0\n    num_1s = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            num_0s += 1\n        elif string[i] == '1':\n            num_1s += 1\n        else:\n            continue\n        \n        if i == 0:\n            if num_0s > num_1s:\n                max_diff = num_0s - num_1s\n            elif num_0s < num_1s:\n                max_diff = num_1s - num_0s\n            else:\n                max_diff = 0\n        else:\n            if num_0s > num_1s:\n                max_diff = max(max_diff, num_0s - num_1s)\n            elif num_0s < num_1s:\n                max_diff = max(max_diff, num_1s - num_0s)\n            else:\n                max_diff = max(max_diff, 0)\n                \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            diff = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    diff += 1\n                else:\n                    diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize the maximum difference and variables for 0s and 1s\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n\n    # Iterate through the string\n    for char in string:\n        # If the character is a 0, increment the zero count\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the one count\n        else:\n            one_count += 1\n\n        # Calculate the difference between the counts\n        diff = abs(zero_count - one_count)\n\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    # Initialize variables\n    zero_count = 0\n    one_count = 0\n    max_difference = 0\n\n    # Loop through each character in the string\n    for char in string:\n        # If the character is a zero, increment the zero count\n        if char == '0':\n            zero_count += 1\n        # If the character is a one, increment the one count\n        elif char == '1':\n            one_count += 1\n        # If both zero_count and one_count are non-zero, calculate the difference and update max_difference\n        if zero_count > 0 and one_count > 0:\n            difference = abs(zero_count - one_count)\n            if difference > max_difference:\n                max_difference = difference\n\n    # Return the maximum difference found\n    return max_difference"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    # Convert the binary string to a list of integers\n    binary_list = [int(bit) for bit in string]\n\n    # Initialize two variables to keep track of the number of 0s and 1s\n    zero_count = 0\n    one_count = 0\n\n    # Initialize variables to keep track of the maximum difference\n    max_diff = 0\n\n    # Loop through each sub-string of the binary string\n    for i in range(len(binary_list)):\n        # If the current sub-string has an even length, then it's a 0 sub-string\n        if i % 2 == 0:\n            # If the sub-string starts with a 0, then increment the zero_count\n            if binary_list[i] == 0:\n                zero_count += 1\n            # If the sub-string starts with a 1, then increment the one_count and reset the zero_count\n            else:\n                one_count += 1\n                zero_count = 0\n        # If the current sub-string has an odd length, then it's a 1 sub-string\n        else:\n            # If the sub-string starts with a 0, then increment the one_count\n            if binary_list[i] == 0:\n                one_count += 1\n            # If the sub-string starts with a 1, then increment the zero_count and reset the one_count\n            else:\n                zero_count += 1\n                one_count = 0\n\n        # Calculate the difference between the two count variables and update the maximum difference if necessary\n        diff = abs(one_count - zero_count)\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a < b: \n        a, b = b, a  # Swap a and b if a is smaller than b\n    \n    # Initialize sum variable to 0\n    sum_c = 0\n    \n    # Check all numbers from 1 to the smaller of the two numbers\n    for i in range(1, min(a, b) + 1):\n        # Check if i is a common divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # Add i to sum_c if it satisfies the condition\n            sum_c += i\n            \n    # Return the sum_c\n    return sum_c"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        Write a python function to find the greatest common divisor of two given numbers.\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a, b):\n        \"\"\"\n        Write a python function to find the least common multiple of two given numbers.\n        \"\"\"\n        return a * b // gcd(a, b)\n\n    def common_divisors(a, b):\n        \"\"\"\n        Write a python function to find the common divisors of two given numbers.\n        \"\"\"\n        divisors = []\n        i = 1\n        while i <= a:\n            if i % a == 0 and i % b == 0:\n                divisors.append(i)\n            i += 1\n        return divisors\n\n    def sum_of_common_divisors(a, b):\n        \"\"\"\n        Write a python function to find the sum of common divisors of two given numbers.\n        \"\"\"\n        divisors_a = common_divisors(a, b)\n        divisors_b = common_divisors(b, a)\n        common_divisors_ab = list(set(divisors_a) & set(divisors_b))\n        return sum(common_divisors_ab)\n\n    return sum_of_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers as input and returns their sum of common divisors.\n    \"\"\"\n    # Find the set of common divisors of the two numbers\n    common_divisors = set(divisors(a) & divisors(b))\n    # Find the sum of the common divisors\n    sum_of_common_divisors = sum(common_divisors)\n    return sum_of_common_divisors\n\ndef divisors(n):\n    \"\"\"\n    This function returns a list of all divisors of a given number.\n    \"\"\"\n    divisors_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors_list.append(i)\n    return divisors_list"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Function to find the sum of common divisors of two given numbers\n    def gcd(a, b):\n        if a == b:\n            return a\n        elif a < b:\n            return gcd(a, b - a)\n        else:\n            return gcd(b, a - b)\n\n    # Function to find the sum of all numbers between 1 and n, where n is the given number\n    def sum_of_numbers(n):\n        if n == 0:\n            return 0\n        else:\n            return n + sum_of_numbers(n - 1)\n\n    # Function to find the sum of common divisors of two given numbers\n    def common_divisors_sum(a, b):\n        return sum_of_numbers(gcd(a, b))\n\n    # Call the function to find the sum of common divisors of two given numbers\n    result = common_divisors_sum(a, b)\n\n    # Return the result\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    common = []\n\n    # find the divisors of each number\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # find the common divisors of the numbers and append them to the list\n    for i in range(len(divisors)):\n        if divisors[i] in b:\n            common.append(divisors[i])\n\n    # return the sum of the common divisors\n    return sum(common)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # check if both the numbers are positive integers\n    if isinstance(a, int) and isinstance(b, int) and a > 0 and b > 0:\n        # initialize the sum of common divisors to zero\n        sum_div = 0\n        # loop through all numbers from 1 to the smaller of the two numbers\n        for i in range(1, min(a, b) + 1):\n            # check if i is a common divisor of both a and b\n            if a % i == 0 and b % i == 0:\n                # add i to the sum of common divisors\n                sum_div += i\n        # return the sum of common divisors\n        return sum_div\n    else:\n        # raise an exception if the input numbers are not positive integers\n        raise ValueError(\"Both the numbers must be positive integers\")"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_divisors(num1, num2):\n    \"\"\"\n    Returns the list of common divisors of num1 and num2.\n    \"\"\"\n    divisors = []\n    for i in range(1, num1+1):\n        if num1 % i == 0 and num2 % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef sum(a, b):\n    \"\"\"\n    Returns the sum of the common divisors of a and b.\n    \"\"\"\n    divisors_a = common_divisors(a, b)\n    divisors_b = common_divisors(b, a)\n    common_divisors_sum = sum(divisors_a, divisors_b)\n    return common_divisors_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Find the list of common divisors of the two numbers\n    common_divisors = find_common_divisors(a, b)\n\n    # Initialize the sum variable to 0\n    sum_of_common_divisors = 0\n\n    # Calculate the sum of common divisors\n    for common_divisor in common_divisors:\n        sum_of_common_divisors += common_divisor\n\n    return sum_of_common_divisors\n\ndef find_common_divisors(a, b):\n    '''\n    Find the list of common divisors of two given numbers.\n    '''\n\n    # Find the list of divisors of the larger number\n    divisors = find_divisors(max(a, b))\n\n    # Find the list of common divisors\n    common_divisors = []\n    for divisor in divisors:\n        if divisor in [a, b]:\n            continue\n        if a % divisor == 0 and b % divisor == 0:\n            common_divisors.append(divisor)\n\n    return common_divisors\n\ndef find_divisors(n):\n    '''\n    Find the list of divisors of a given number.\n    '''\n\n    # Find the list of numbers from 1 to n\n    divisors = [i for i in range(1, n + 1)]\n\n    # Find the common divisors of n and each number in the list\n    for i in divisors:\n        if n % i == 0:\n            divisors.remove(i)\n            if i!= n // i:\n                divisors.remove(n // i)\n\n    return divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors of a and b\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    # Calculate the sum of common divisors\n    sum_of_common_divisors = 0\n    for i in common_divisors:\n        sum_of_common_divisors += i\n    \n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the set of common divisors of the two numbers\n    common_divisors = set(divisors(a) & divisors(b))\n\n    # Return the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(x):\n        result += y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y!= 0:\n        if y % 2 == 1:\n            product += x\n        x <<= 1\n        y >>= 1\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    result = []\n    \n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    \n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n\n    # Split the string into a list of words\n    words = str.split()\n\n    # Filter the list to only include words that are longer than n characters\n    long_words = [word for word in words if len(word) > n]\n\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # Split the string into a list of words\n    long_words = [word for word in words if len(word) > n] # Filter out words that are shorter than n characters\n    return long_words # Return the filtered list of words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    def is_magic_square(matrix):\n        n = len(matrix)\n        # Check if the matrix is a square\n        if n!= len(set(map(tuple, matrix))):\n            return False\n        # Check if the matrix is a magic square\n        for i in range(n):\n            row_sum = sum(matrix[i])\n            col_sum = sum(matrix[j] for j in range(n))\n            if row_sum!= col_sum:\n                return False\n            if i > 0:\n                if matrix[i] == matrix[i-1]:\n                    return False\n        return True\n\n    # Check if the matrix is a magic square\n    if is_magic_square(my_matrix):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the input matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n\n    # Calculate the sum of the anti-diagonal elements\n    anti_diagonal_sum = sum(sum(my_matrix[j][i] for j in range(len(my_matrix))) for i in range(len(my_matrix)))\n\n    return diagonal_sum == anti_diagonal_sum"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check the length of the first row and first column of the matrix\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n    \n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix contains only unique elements\n    unique_elements = set(sum(my_matrix, []))\n    if len(my_matrix)!= len(unique_elements):\n        return False\n    \n    # Check if the matrix is a magic square\n    sum_rows = sum(my_matrix, [])\n    sum_cols = [sum(row) for row in my_matrix]\n    sum_main_diags = [sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix))) for _ in range(len(my_matrix))]\n    sum_secondary_diags = [sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))) for _ in range(len(my_matrix))]\n    \n    if sum_rows == sum_cols == sum_main_diags == sum_secondary_diags:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3:\n        return \"Error: Matrix must have 3 rows and 3 columns.\"\n\n    # Check if all rows have the same length\n    for row in my_matrix:\n        if len(row)!= 3:\n            return \"Error: All rows must have the same length.\"\n\n    # Check if the matrix is a magic square\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(my_matrix[i][j] for i in range(3)) for j in range(3)]\n    diag_sum = [sum(my_matrix[i][i] for i in range(3)) for j in range(3)]\n\n    if row_sum == col_sum == diag_sum:\n        return \"The matrix is a magic square.\"\n    else:\n        return \"The matrix is not a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has the same dimensions as a 3x3 magic square\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int):\n                return False\n    \n    # Check if the matrix is a magic square\n    for i in range(3):\n        row = my_matrix[i]\n        col = [row[j] for j in range(3)]\n        if row!= col or col!= [row[i] for i in range(3)]:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    \n    # Check that the matrix is square\n    if n!= len(my_matrix[0]):\n        return \"Matrix must be square.\"\n    \n    # Check that the matrix contains only integers\n    for row in my_matrix:\n        for elem in row:\n            if not isinstance(elem, int):\n                return \"Matrix must only contain integers.\"\n    \n    # Calculate the sum of the elements in each column\n    col_sums = [sum(row) for row in my_matrix]\n    \n    # Check if the sum of the elements in each column is the same as the sum of the row sums\n    if col_sums!= [sum(row_sums) for row_sums in zip(*my_matrix)]:\n        return \"Matrix is not a magic square.\"\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes a square matrix as input and returns a boolean value indicating whether the matrix is a magic square or not.\n    The function calculates the sum of the diagonal elements of the matrix and checks if it is equal to the sum of the remaining elements in the matrix.\n    \"\"\"\n    # Initialize the sum of the diagonal elements and the sum of the remaining elements\n    diagonal_sum = sum(row[i] for i in range(len(row)))\n    remaining_sum = sum(sum(my_matrix[i]) for i in range(len(my_matrix)))\n    \n    # Check if the diagonal sum is equal to the remaining sum\n    if diagonal_sum == remaining_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix is symmetric\n    for i in range(len(my_matrix)):\n        for j in range(i+1, len(my_matrix[0])):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    \n    # Check if the matrix contains distinct values\n    values = set()\n    for row in my_matrix:\n        for value in row:\n            if value in values:\n                return False\n            values.add(value)\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    total = rows * cols\n    magic_sum = 0\n    for i in range(rows):\n        for j in range(cols):\n            magic_sum += my_matrix[i][j]\n    for i in range(rows):\n        magic_sum -= my_matrix[i][i]\n    for j in range(cols):\n        magic_sum -= my_matrix[j][j]\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            magic_sum -= my_matrix[i][j] + my_matrix[i][j + 1] + my_matrix[i + 1][j] + my_matrix[i + 1][j + 1]\n    if magic_sum == total:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def check_magic_square(matrix, n):\n        '''\n        Check if a matrix is a magic square.\n        '''\n        # Check if the matrix has n rows and n columns\n        if len(matrix)!= n or len(matrix[0])!= n:\n            return False\n        \n        # Check if all rows have the same elements\n        for i in range(n):\n            if matrix[i]!= matrix[0]:\n                return False\n        \n        # Check if all columns have the same elements\n        for j in range(n):\n            col = [matrix[i][j] for i in range(n)]\n            if col!= col[:1]:\n                return False\n        \n        # Check if all diagonal elements are the same\n        if matrix[0][0]!= matrix[n-1][n-1]:\n            return False\n        if matrix[0][n-1]!= matrix[n-1][0]:\n            return False\n        for i in range(n-1):\n            if matrix[i][i]!= matrix[i][n-1]:\n                return False\n        return True\n    \n    # Check if the matrix has 4 rows and 4 columns\n    if len(my_matrix)!= 4 or len(my_matrix[0])!= 4:\n        return \"The matrix must have 4 rows and 4 columns.\"\n    \n    # Check if all elements in the matrix are integers\n    for row in my_matrix:\n        for elem in row:\n            if not isinstance(elem, int):\n                return \"The matrix must contain only integers.\"\n    \n    # Check if the matrix is a magic square\n    if check_magic_square(my_matrix, 4):\n        return \"The matrix is a magic square.\"\n    else:\n        return \"The matrix is not a magic square.\""
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    # Count the frequency of each element in the list\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency\n    for item, freq_count in freq.items():\n        if freq_count > max_freq:\n            max_freq = freq_count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        counts[num] += 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_num = None\n    for num, count in freq.items():\n        if count == max_freq:\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n        \n    max_freq = max(freq.values())\n    max_num = None\n    for num, count in freq.items():\n        if count == max_freq:\n            max_num = num\n            break\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n\n    for num, freq in freq.items():\n        if freq == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # iterate through the list and update the frequency of each item\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with maximum frequency\n    max_freq = max(freq.values())\n    for num, freq in freq.items():\n        if freq == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the count of each item in the list\n    count_dict = defaultdict(int)\n\n    # Count the occurrences of each item in the list\n    for num in nums:\n        count_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_count = max(count_dict.values())\n    for item, count in count_dict.items():\n        if count == max_count:\n            return item\n\n    # If there is no item with maximum frequency, return None\n    return None"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n    vowel_indices.reverse()\n    return ''.join([str1[i] for i in vowel_indices])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    str2 = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str2 = ''\n    for char in str1:\n        if char.lower() in vowels:\n            str2 = char + str2\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_index = 0\n    result = ''\n\n    # Iterate over the characters of the input string\n    for char in str1:\n        # Check if the character is a vowel\n        if char in vowels:\n            # If it is, reverse its position in the result string and update the vowel index\n            result = char + result[vowel_index+1:]\n            vowel_index += 1\n        else:\n            # Otherwise, simply append the character to the result string\n            result += char\n\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result = char + result\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char in vowels and i == 0 or (i > 0 and str1[i-1] in vowels) and char!= 'y':\n            vowel_indices.append(i)\n    vowel_indices.reverse()\n    new_str = ''\n    for i in vowel_indices:\n        new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = [v for v in vowels]\n    result = \"\"\n    for i in range(len(string)-1, -1, -1):\n        if string[i] not in vowels_list:\n            result += string[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Check if the input is a tuple\n    if not isinstance(tup1, tuple):\n        raise TypeError('Input must be a tuple.')\n    # Convert the tuple to a string\n    str_tup = str(tup1)\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    str_tup = str(tup1)\n    # Return the string\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Use the built-in str() function to convert the tuple to a string.\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum of negative numbers to zero\n    negative_sum = 0\n\n    # Loop through the list of numbers\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            negative_sum += num\n\n    # Return the sum of negative numbers\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n\n    # Initialize the sum of negative numbers to 0\n    negative_sum = 0\n\n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add it to the negative sum\n            negative_sum += num\n\n    # Return the negative sum\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = [num for num in nums if num < 0]\n    return sum(negatives)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Define a function that calculates the nth triangular number\n    def nth_triangular(n):\n        \"\"\"\n        Define a function to calculate the nth triangular number.\n        \"\"\"\n        # Initialize the first two triangular numbers\n        a, b = 1, 3\n        # Loop through the remaining triangular numbers\n        for i in range(2, n+1):\n            # Calculate the next triangular number by adding the previous two\n            c = a + b\n            # Update the previous two triangular numbers\n            a, b = b, c\n        return a\n    \n    # Use the nth triangular number to calculate the nth hexagonal number\n    return nth_triangular(2*n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal = 1\n    for i in range(1, n+1):\n        hexagonal += 2*i*(i-1)\n    return hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) ** 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 0\n    for i in range(1, n+1): \n        num += (2 * i) ** 2\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def num_to_hex(num): \n        return hex(num)[2:]\n\n    def sum_of_hex_digits(hex_num): \n        return sum(int(d, 16) for d in hex_num)\n\n    def hex_to_num(hex_num): \n        return int(hex_num, 16)\n\n    def hexagonal_number(n): \n        return num_to_hex(n * hex_to_num('10') - hex_to_num('1'))\n\n    return hexagonal_number(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    hex_num = (n * (2 * n - 1))\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2 \n\nn = 5\nprint(hexagonal_num(n)) # Output: 25"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2 + 1"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n\n    # Iterate through the array\n    for num in nums:\n        # If the number is zero, increment the count of zeroes\n        if num == 0:\n            zeroes += 1\n        # If the number is non-zero, increment the count of non-zeroes\n        else:\n            non_zeroes += 1\n\n    # Return the ratio of zeroes to non-zeroes\n    return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    arr = array('i', nums)\n    zero_count = sum(arr == 0)\n    non_zero_count = len(arr)\n    zero_ratio = zero_count / non_zero_count\n    print(\"Ratio of zeroes to non-zeroes: {:.2f}\".format(zero_ratio))\n"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list of integers\n    nums = list(nums)\n\n    # Count the number of zeroes and non-zeroes in the array\n    zeroes = sum(1 for num in nums if num == 0)\n    non_zeroes = len(nums) - zeroes\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zeroes / non_zeroes if non_zeroes!= 0 else 0\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    zero_ratio = round(zero_count/non_zero_count, 2)\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the input array to an array of boolean values\n    arr = array('b', [bool(x) for x in nums])\n\n    # Count the number of zeroes and non-zeroes\n    zero_count = sum(arr)\n    non_zero_count = len(nums) - zero_count\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = 1.0 * zero_count / non_zero_count\n\n    # Return the ratio of zeroes to non-zeroes\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i')\n    non_zero_count = array('i')\n    for num in nums:\n        if num == 0:\n            zero_count.append(1)\n        else:\n            non_zero_count.append(1)\n    zero_count_sum = sum(zero_count)\n    non_zero_count_sum = sum(non_zero_count)\n    if zero_count_sum == 0:\n        return 0\n    return non_zero_count_sum/zero_count_sum"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    total = 0\n    \n    for num in arr:\n        if num == 0:\n            count += 1\n        total += 1\n    \n    if total == 0:\n        return 0\n    else:\n        return count / total"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)  # Convert the array to an integer array to perform calculations on\n    zeros = 0\n    nonzeros = 0\n    for num in arr:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0.0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Initialize zero count and non-zero count arrays\n    zero_arr = array('i')\n    nonzero_arr = array('i')\n\n    # Iterate through each element of the array\n    for num in nums:\n        # If the element is zero, add it to the zero count array\n        if num == 0:\n            zero_arr.append(1)\n        # Otherwise, add it to the non-zero count array\n        else:\n            nonzero_arr.append(1)\n\n    # Calculate the ratio of zeroes to non-zeroes\n    if len(nonzero_arr) == 0:\n        ratio = 1\n    else:\n        ratio = zero_arr[0] / nonzero_arr[0]\n\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # loop through each power of 2 from 1 to n\n    for i in range(1, n+1):\n        # check if the number is equal to the sum of powers of 2\n        if n == 2**i:\n            return True\n    # if the number is not equal to the sum of powers of 2, then it cannot be represented as sum of powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_Power_Of_Two(x):\n        return (x & (x - 1)) == 0\n    \n    def get_Nearest_Power_Of_Two(x):\n        return 1 << (x.bit_length() - x.count_leading_zeros())\n    \n    # check if n can be represented as sum of powers of 2\n    if n == 0 or n == 1:\n        return True\n    \n    # check if n can be represented as sum of powers of 2 by dividing it by the nearest power of 2\n    nearest_power_of_two = get_Nearest_Power_Of_Two(n)\n    if n == nearest_power_of_two:\n        return True\n    if (n - nearest_power_of_two) % nearest_power_of_two == 0:\n        return True\n    \n    # check if n can be represented as sum of powers of 2 by using bitwise operations\n    if is_Power_Of_Two(n) and is_Power_Of_Two(nearest_power_of_two):\n        return True\n    if is_Power_Of_Two(n) and (n - nearest_power_of_two) % nearest_power_of_two == 0:\n        return True\n    if is_Power_Of_Two(nearest_power_of_two) and (nearest_power_of_two - n) % n == 0:\n        return True\n    \n    # if all above checks fail, n cannot be represented as sum of powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, n//2+1):\n        if n%i==0:\n            if n/i == 2**i:\n                return True\n            elif n/i == 2**(i-1):\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if n is power of 2\n    if n == 1: \n        return True\n    elif n < 1: \n        return False\n\n    # check if n is power of 4\n    if n % 4 == 0: \n        return True\n\n    # check if n is power of 2 raised to the power of 3\n    if (n & (n - 1)) == 0: \n        return True\n\n    # check if n is sum of powers of 2\n    for i in range(1, n): \n        if (n - i) % (2 ** i) == 0: \n            return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count >= 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n % 2 == 0:\n        n //= 2\n    if n == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            j = i*i\n            while j <= n:\n                if n % j:\n                    j += i\n                else:\n                    return False\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def check_power(x):\n        count = 0\n        while x > 1:\n            if x % 2 == 0:\n                count += 1\n                x //= 2\n            else:\n                x = 3*x + 1\n        return count\n    \n    def is_sum_of_powers_of_two(num):\n        power = check_power(num)\n        if power == 0:\n            return True\n        elif power % 2 == 1:\n            return False\n        else:\n            return is_sum_of_powers_of_two(num + 1)\n    \n    return is_sum_of_powers_of_two(n)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is already a power of 2\n    if n == 1 or n == 2:\n        return True\n    # Check if the number is a power of 4\n    elif n % 4 == 0:\n        return False\n    # Check if the number is a sum of powers of 2\n    else:\n        # Initialize sum to 0\n        sum = 0\n        # Initialize the power variable to 1\n        power = 1\n        # Loop until the power variable becomes greater than or equal to the square root of the given number\n        while power ** 2 <= n:\n            # If the power variable is odd, add it to the sum\n            if power % 2!= 0:\n                sum += power\n            # Double the power variable\n            power *= 2\n        # If the given number can be represented as sum of powers of 2, return True\n        if sum == n:\n            return True\n        # If the given number cannot be represented as sum of powers of 2, return False\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # base case\n    if n == 0:\n        return True\n\n    # find the number of bits required to represent n\n    bits = 0\n    while n > 0:\n        n >>= 1\n        bits += 1\n\n    # check if the sum of powers of 2 is non-zero\n    total = 0\n    for i in range(bits):\n        total += (1 << i)\n\n    return n == total"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # Using the formula of circumference of a circle\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # using formula for circumference\n    print(\"The circumference of a circle with radius\", r, \"is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2*3.14*r\n    print(\"The circumference of a circle of radius\", r, \"is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        result.extend(sublist)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    flattened = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened += extract_singly(item)\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sub_list in test_list:\n        flat_list.extend(sub_list)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly = set()\n    for sublist in test_list:\n        for item in sublist:\n            singly.add(item)\n    return singly"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for sublist in test_list for num in sublist]"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        elif isinstance(item, set):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sub_list in test_list:\n        flattened_list.extend(sub_list)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten(lst):\n    if isinstance(lst, list):\n        for item in lst:\n            flatten(item)\n    else:\n        yield lst\n\ndef extract_singly(test_list):\n    flattened = list(flatten(test_list))\n    return sum(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return set(flattened_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Find the length of the list\n    n = len(nums)\n\n    # Use a while loop to iterate until the list is sorted\n    while True:\n        # Find the index of the smallest element\n        min_idx = 0\n        for i in range(1, n):\n            if nums[i] < nums[min_idx]:\n                min_idx = i\n\n        # If the smallest element has been moved, swap it with the last element of the list\n        if min_idx!= 0:\n            nums[min_idx], nums[n-1] = nums[n-1], nums[min_idx]\n            n -= 1\n        else:\n            break\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the Pancake Sort algorithm.\n\n    Pancake Sort is a variation of the Bubble Sort algorithm in which\n    the list elements are sorted by recursively swapping adjacent elements\n    if they are in the wrong order. This process continues until the\n    list is sorted.\n\n    The time complexity of Pancake Sort is O(n^2), where n is the length\n    of the input list.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(n):\n            if i == 0 or nums[i] > nums[i - 1]:\n                continue\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]\n            swapped = True\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    def reverse_pancake(nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    def sort_pancakes(nums, start):\n        if start >= len(nums) - 1:\n            return\n        reverse_pancake(nums, start, len(nums) - 1)\n        sort_pancakes(nums, start + 1)\n\n    sort_pancakes(nums, 0)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # length of the list\n    n = len(nums)\n    \n    # pancake sort algorithm\n    for i in range(n-1, 0, -1):\n        # find the maximum element in the i-th column of the pancake\n        max_idx = i\n        for j in range(i):\n            if nums[j] < nums[max_idx]:\n                max_idx = j\n        \n        # swap the maximum element with the i-th element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # reverse the i-th column of the pancake\n        for j in range(i-1, 0, -1):\n            nums[i-j], nums[i-j+1] = nums[i-j+1], nums[i-j]\n        \n        # reverse the entire pancake\n        nums[0], nums[i] = nums[i], nums[0]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    def sort(nums, start, end):\n        if start >= end:\n            return\n        \n        # Find the maximum element in the subarray\n        max_idx = start\n        for i in range(start, end):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        \n        # Swap the maximum element with the first element\n        nums[start], nums[max_idx] = nums[max_idx], nums[start]\n        \n        # Sort the subarray recursively\n        sort(nums, start + 1, end)\n    \n    # Perform pancake sort on the input array\n    sort(nums, 0, len(nums) - 1)\n    \n    # Print the sorted array\n    print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sorting algorithm.\n\n    Args:\n    nums (list): The list of elements to be sorted.\n\n    Returns:\n    The sorted list.\n    \"\"\"\n    # Calculate the length of the list\n    n = len(nums)\n\n    # Perform pancake sorting\n    for i in range(n):\n        # Find the smallest element in the unsorted part of the list\n        min_index = i\n        for j in range(i, n):\n            if nums[j] < nums[min_index]:\n                min_index = j\n\n        # Swap the smallest element with the first element of the unsorted part of the list\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 0, -1):\n        # Find the maximum element in the list\n        max_index = 0\n        for j in range(1, i):\n            if nums[j-1] < nums[j]:\n                max_index = j\n                break\n        # Swap the maximum element with the last element\n        nums[max_index], nums[i-1] = nums[i-1], nums[max_index]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n\n    # Loop through the list and sort it in ascending order\n    for i in range(len(nums) - 1, 0, -1):\n\n        # Choose the pivot element and swap it with the last element of the unsorted sublist\n        pivot = nums[i]\n        j = i - 1\n        while j >= 0 and nums[j] > pivot:\n            nums[j + 1] = nums[j]\n            j -= 1\n        nums[j + 1] = pivot\n\n        # Reverse the sublist that contains the pivot element\n        k = j + 1\n        while k < i:\n            nums[k], nums[k - 1] = nums[k - 1], nums[k]\n            k += 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n\n    The pancake sort algorithm works by repeatedly swapping adjacent elements in the list,\n    until the list is sorted. The swapping occurs in such a way that the largest element\n    is moved to the end of the list, and the next largest element is moved to the second-\n    to-last position, and so on.\n\n    The algorithm keeps repeating this process until the list is sorted.\n\n    Args:\n        nums (list): A list of integers to be sorted.\n\n    Returns:\n        A sorted list of integers.\n    '''\n    n = len(nums)\n    # Create a list to store the swapping information for each iteration\n    swapping_info = [[0, 0] for _ in range(n)]\n    # Perform the pancake sort algorithm n times\n    for _ in range(n):\n        # Find the index of the largest element in the unsorted part of the list\n        max_idx = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        # Swap the largest element with the first element in the unsorted part of the list\n        nums[max_idx], nums[0] = nums[0], nums[max_idx]\n        # Update the swapping information for the next iteration\n        for i in range(n):\n            if i!= max_idx:\n                swapping_info[i][0] += 1\n                swapping_info[i][1] -= 1\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    def helper(arr):\n        for i in range(len(arr)-1, 0, -1):\n            j = 0\n            while j < i:\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n                else:\n                    j += 1\n        return arr\n\n    nums = sorted(nums, reverse=True)\n    pancake = helper(nums)\n    return pancake"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns the number of items that are identical in the same position of the lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list2[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            for j in range(len(list1)):\n                if list1[j] == list3[j]:\n                    if i!= j:\n                        count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes in an array as an argument and returns the maximum difference between any two elements in the array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes in an array of integers and returns the maximum absolute difference between any two elements in the array. \n    '''\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize two variables to store the maximum difference and the first element of the array\n    max_diff = arr[1] - arr[0]\n    first_element = arr[0]\n    \n    # Loop through the array and compare each element with the first element and the maximum difference found so far\n    for i in range(1, len(arr)):\n        if abs(arr[i] - first_element) > max_diff:\n            max_diff = abs(arr[i] - first_element)\n            first_element = arr[i]\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # Initialize variables to keep track of the maximum and minimum elements in the array\n    max_diff = float('-inf')\n    max_elem = arr[0]\n    min_elem = arr[0]\n    \n    # Loop through the array and update the maximum and minimum elements accordingly\n    for i in range(1, len(arr)):\n        if abs(arr[i] - max_elem) > max_diff:\n            max_diff = abs(arr[i] - max_elem)\n            max_elem = arr[i]\n        if abs(arr[i] - min_elem) < max_diff:\n            min_elem = arr[i]\n    \n    # Return the maximum difference between any two elements in the array\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if len(arr) < 2:\n        return \"The array should have at least 2 elements.\"\n\n    max_diff = 0\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    # Compute the discriminant of the quadratic equation ax^2 + bx + c = 0\n    d = b**2 - 4*a*n\n    \n    if d > 0:\n        # There are two solutions x1 and x2\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        \n        # Sort the solutions in ascending order\n        if x1 > x2:\n            x1, x2 = x2, x1\n        \n        return (x1, x2)\n    elif d == 0:\n        # There is only one solution x\n        x = -b/(2*a)\n        return (x, x)\n    else:\n        # No solutions exist\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n//b + 1):\n        for y in range(a, n-x*b, b):\n            if x*a + y*b == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if the equation is not of the form ax + by = n\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n\n    # If the discriminant is less than 0, no solution exists\n    if discriminant < 0:\n        return None\n\n    # Calculate the two solutions\n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    for i in range(-1000, 1001):\n        for j in range(-1000, 1001):\n            if a * i + b * j == n:\n                if x is None or abs(x) > abs(i):\n                    x = i\n                if y is None or abs(y) > abs(j):\n                    y = j\n                break\n    if x is None or y is None:\n        return None\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-100, 101):\n        for y in range(-100, 101):\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # first, find the discriminant\n    discriminant = b**2 - 4 * a * n\n    \n    # if the discriminant is less than 0, then there are no real roots\n    if discriminant < 0:\n        return None\n    \n    # if the discriminant is zero, then there is one real root\n    elif discriminant == 0:\n        return (-b) // a\n    \n    # if the discriminant is positive, then there are two real roots\n    else:\n        x1 = (-b + discriminant**0.5) // (2 * a)\n        x2 = (-b - discriminant**0.5) // (2 * a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:  # if b is zero, there is no solution\n        return None\n    else:\n        x = (-n + (b**2 - 4 * a * n) ** 0.5) / (2 * a)\n        y = (-n - (b**2 - 4 * a * n) ** 0.5) / (2 * a)\n        return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    x1 = -b / (2 * a)\n    x2 = n / a\n    if x1 == x2:\n        return (x1,)\n    if x1 > x2:\n        x1, x2 = x2, x1\n    y1 = x1 - a * x1\n    y2 = x2 - a * x2\n    if x1 == n / a:\n        return (x1, y1)\n    if x2 == n / a:\n        return (x2, y2)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-1000, 1000):\n        for y in range(-1000, 1000):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if b == 0:\n        return None\n    else:\n        x1 = -n / b\n        x2 = (b * n) // (-b)\n        if x1 == x2:\n            return (x1, x1)\n        elif x1 < x2:\n            return (x1, x2)\n        else:\n            return (x2, x1)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n\n    Args:\n    list1 (list): A list of integers.\n    list2 (list): A list of integers.\n\n    Returns:\n    list: A new list without the elements present in list2.\n    \"\"\"\n\n    # Remove elements from list1 present in list2\n    list1 = [num for num in list1 if num not in list2]\n\n    # Return the modified list1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # convert both lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # use difference between two sets to get the elements to be removed\n    elements_to_remove = set1.difference(set2)\n\n    # iterate over the list and remove the elements to be removed\n    for element in list1:\n        if element in elements_to_remove:\n            list1.remove(element)\n\n    # print the updated list\n    print(list1)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Iterate through the first list\n    for item in list1:\n        # Check if the item is present in the second list\n        if item in list2:\n            # Remove the item from the first list\n            list1.remove(item)\n    # Return the updated first list\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the second list and remove the elements that are present in the first list\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # convert the given list to set to remove duplicates\n    list1 = set(list1)\n    # iterate over the list2 and remove the elements present in list1\n    for item in list2:\n        if item in list1:\n            list2.remove(item)\n    # convert the updated list2 back to a list\n    return list(list2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while i <= n // 2:\n        total += n - 2 * i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    for i in range(n // 2):\n        total_sum += n - 2 * i\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += (n - 2 * i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n // 2) // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    for i in range(n // 2):\n        total_sum += (n - 2 * i)\n    return total_sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the perimeter of the polygon\n    perimeter = s * l\n    \n    # calculate the area of the polygon using the formula A = (s * (s-1)) / 2\n    area = (perimeter * (perimeter - 1)) / 2\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of a triangle using Heron's formula\n    area = (s * (s-l) * (s-2*l) / 6) ** 0.5\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - 1)) / 4\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l * (s - tan(pi/l)) / 2)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += ((tan((2*pi/l)*i))**2)*s\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the semi-perimeter of the polygon\n    sp = (s*l)/2\n\n    # Calculate the area of the polygon using Heron's formula\n    area = 0.5*s*sp*(tan(pi/l) + tan(pi/l*2))\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l * (l - 2)) / (4 * math.tan(math.pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l * (s ** 2)) / (4 * tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (s + tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    # Calculate the semi-perimeter\n    perimeter = 2 * s * l\n    \n    # Calculate the area using the formula for the area of a regular polygon\n    area = (perimeter * (perimeter - l)) / (4 * pi)\n    \n    # Return the calculated area\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # find the divisors of n\n    divs = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.append(i)\n            if n // i!= i:\n                divs.append(n // i)\n    # calculate the sum of the divisors\n    div_sum = sum(divs)\n    # compare the sum of the divisors with n\n    if div_sum == n:\n        print(\"The sum of the divisors of {} and {} are the same\".format(n, n))\n    else:\n        print(\"The sum of the divisors of {} and {} are different\".format(n, n))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    divisors.append(n)\n    return sum(divisors) == n * (len(divisors) - 1)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # find all divisors of n\n    divs = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n//i:\n                divs.append(n//i)\n    # add 1 to n if n is not a perfect square\n    if n % int(math.sqrt(n)) == 0:\n        divs.append(n)\n\n    # determine if the sum of the divisors is the same for each pair of divisors\n    for i in range(len(divs)-1):\n        for j in range(i+1, len(divs)):\n            if divs[i]+divs[j] == n:\n                print(f\"{divs[i]} + {divs[j]} = {n}\")\n            elif divs[i]+divs[j] < n:\n                print(f\"{divs[i]} + {divs[j]} > {n}\")\n            elif divs[i]+divs[j] > n:\n                print(f\"{divs[i]} + {divs[j]} < {n}\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of divisors of n using math module \n    div_sum = sum(i for i in range(1, n+1) if n % i == 0)\n    \n    # check if the sum of divisors of n and 2n are same or not\n    if div_sum == n*2:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # find the divisors of n\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n    # calculate the sum of the divisors\n    sum_div = sum(div_list)\n    # check if the sum of the divisors is the same as the original number\n    if sum_div == n:\n        print(n, \"is a prime number\")\n    else:\n        print(n, \"is not a prime number\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # compute the sum of the divisors of n\n    sum_divisors = sum(range(1, int(math.sqrt(n))+1)) + n\n\n    # compute the sum of the divisors of the other number\n    other_sum_divisors = sum(range(1, int(math.sqrt(n))+1))\n\n    # check if the sums are equal\n    if sum_divisors == other_sum_divisors:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n is the same for both numbers and False otherwise.\n    '''\n    # function to find the divisors of an integer\n    def find_divisors(num):\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    # finding the divisors of n\n    div1 = find_divisors(n)\n    div2 = find_divisors(n*n)\n    \n    # comparing the two divisors\n    if sorted(div1) == sorted(div2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    divisor_sum = 0\n    while i <= n:\n        if n % i == 0:\n            divisor_sum += i\n        i += 1\n    if len(set(divisor_sum)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    for i in range(int(math.sqrt(n))+1, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Initialize an empty dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n    # Iterate through each character in the input string\n    for char in str1:\n        # If the character is a lowercase letter, add it to the dictionary with a value of 1\n        if 'a' <= char <= 'z':\n            if char not in char_count:\n                char_count[char] = 1\n            else:\n                char_count[char] += 1\n    # Return the dictionary containing the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    # convert all characters to lowercase\n    str1 = str1.lower()\n    # create a list of all English alphabet characters\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # initialize a dictionary to store character position counts\n    char_count = {}\n    # loop through all characters in the string\n    for char in str1:\n        # check if the character is a letter in the English alphabet\n        if char in english_alphabet:\n            # check if the character has a position in the string\n            if char in char_count:\n                # increment the count for this position\n                char_count[char] += 1\n            else:\n                # add the character to the dictionary with a count of 1\n                char_count[char] = 1\n    # return the character position counts dictionary\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for char in str1:\n        if char.lower() in alphabet:\n            index = alphabet.index(char.lower())\n            if index == str1.lower().index(char.lower()):\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1.lower() == alphabet[i].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # create a dictionary to store the character frequency\n    freq = {}\n    # iterate over the characters of the string\n    for char in str1:\n        # if the character is an English alphabet, increment its frequency\n        if 'a' <= char <= 'z':\n            freq[char] = freq.get(char, 0) + 1\n    # count the number of characters that occur at the same position in the English alphabet\n    result = 0\n    for i in range(26):\n        if freq[chr(i+97)] > 0:\n            result += freq[chr(i+97)]\n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(65 + i))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(26):\n        for char in str1:\n            if char.lower() == alphabet[i].lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert string to lowercase\n    str1 = str1.lower()\n\n    # create a dictionary to store the count of each character\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n\n        # if character is a letter, update the count in the dictionary\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # loop through each character in the English alphabet\n    for i in range(ord('a'), ord('z') + 1):\n        # if the character is already in the dictionary, count the position of the character in the string\n        if chr(i) in char_count:\n            print(\"Character '{}' occurs at position {}\".format(chr(i), str1.find(chr(i))))"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    count = {}\n    for i in range(26):\n        count[chr(65+i)] = 0\n    \n    for char in str1:\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            count[char.lower()] += 1\n    \n    result = {}\n    for i in range(26):\n        result[chr(65+i)] = count[chr(65+i)]\n    \n    return result"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # convert n to binary and count the number of ones\n    count = 0\n    while n > 1:\n        count += n & 1\n        n >>= 1\n    # calculate the power of 2 using the binary representation and the number of ones\n    power_of_2 = 1\n    for _ in range(count):\n        power_of_2 <<= 1\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n < 1:\n        return 1\n    else:\n        return 2 ** ((n - 1).bit_length())\n\nprint(next_power_of_2(4))  # Output: 8"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n: \n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # If n is already a power of 2, just return n\n    if n & (n-1) == 0:\n        return n\n    \n    # Find the smallest power of 2 greater than or equal to 2^k, where k is the bit length of n\n    k = 0\n    while n > 1:\n        n = n >> 1\n        k += 1\n    \n    # Return 2^k\n    return 1 << k"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the smallest power of 2 greater than or equal to n\n    while n % 2 == 0:\n        n = n // 2\n    # If n is already a power of 2, return n\n    if n > 0:\n        return n\n    # If n is not a power of 2, return 1\n    else:\n        return 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    \n    if n & (n-1) == 0:\n        return n << 1  # If n is a power of 2, just return n*2\n    \n    # Otherwise, find the next power of 2 greater than or equal to n\n    n |= n >> 1  # Set all bits above 1 to 1\n    n |= n >> 2  # Set all bits above 2 to 1\n    n |= n >> 4  # Set all bits above 4 to 1\n    n |= n >> 8  # Set all bits above 8 to 1\n    n |= n >> 16  # Set all bits above 16 to 1\n    \n    return n + 1  # Add 1 to get the next power of 2 greater than or equal to n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary representation\n    binary_representation = bin(n)[2:]\n    \n    # Initialize power of 2\n    power = 1\n    \n    # Iterate over bits of binary representation\n    for bit in binary_representation:\n        # If bit is 1, multiply power by 2 and set power to the result\n        if bit == '1':\n            power *= 2\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to binary string\n    binary_str = bin(n)[2:]\n    # Convert binary string to decimal\n    decimal = int(binary_str, 2)\n    # Find the largest power of 2 less than or equal to n\n    while decimal!= 0:\n        decimal = decimal >> 1\n    # The smallest power of 2 greater than or equal to n is 2^(decimal - 1)\n    return 2**(decimal - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        # Return n if it is already a power of 2\n        return n\n    else:\n        # Find the next power of 2\n        p = 1\n        while p < n:\n            p <<= 1\n        # Return the next power of 2\n        return p"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two parameters:\n    a: The list to search in\n    x: The number to search for\n    \n    This function returns the number of occurrences of x in a list a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(lst, target):\n    count = 0\n    for num in lst:\n        if num == target:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize variables\n    total = 0\n    \n    # Iterate through the list and add the numbers within the range to the total\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n            \n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        m, n = n, m\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_list = 0\n    for i in range(m, n+1):\n        sum_list += list1[i]\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_value = 0\n    for i in range(m, n+1):\n        sum_value += list1[i-1]\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_value = 0\n    for i in range(m, n + 1):\n        sum_value += list1[i]\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if the indices are valid\n    if m < 0 or n >= len(list1) or m > n:\n        return None\n    \n    # Calculate the sum of the range\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    \n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        total += list1[i]\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a * math.sin(math.pi/5)\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # convert the length of the side to a ratio\n    ratio = 5 / 4\n    perimeter = a * ratio\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Using the formula for the perimeter of a regular pentagon from the formula for the area of a regular triangle\n    # and the sides of the pentagon, we can find the perimeter of the pentagon as:\n    # Perimeter = 5(a/5)\n    # where 5 is the number of sides of the pentagon, a is the length of one side, and /5 is the conversion of a to its perpendicular length\n    perimeter = 5*(a/5)\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter of the pentagon\n    s = (5*a**2)/(2*math.tan(math.pi/5))\n    # Return the perimeter of the pentagon\n    return 5*a*math.sin(math.pi/5) + 5*a*math.cos(math.pi/5) - s"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * math.pi * a\n    perimeter = circumference * 5 / 4\n    return round(perimeter, 2)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the perimeter\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurance of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    while'std' in s:\n        count += s.count('std')\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = [type(x) for x in test_tuple]\n    if len(types) == 1:\n        return True\n    elif len(set(types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(i) for i in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = []\n\n    for element in test_tuple:\n        data_types.append(type(element))\n\n    return all(data_type == data_types[0] for data_type in data_types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        first_element = type(test_tuple[0])\n        for element in test_tuple:\n            if type(element)!= first_element:\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_set = set()\n    for item in test_tuple:\n        type_set.add(type(item))\n    return len(type_set) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Get the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    # Loop through the tuple and check if all the elements have the same data type\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count of x to 0\n    count = 0\n\n    # Initialize the left and right pointers\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        # If the current element is equal to x, increment the count\n        if arr[left] == x:\n            count += 1\n\n        # If the count reaches n/2, the element is the majority\n        if count > n / 2:\n            return True\n\n        # If the current element is greater than x, move the left pointer to the left\n        if arr[left] > x:\n            left += 1\n\n        # If the current element is less than x, move the right pointer to the right\n        else:\n            right -= 1\n\n    # If the while loop completes without finding the majority element, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    # Initialize count to 0\n    count = 0\n    # Initialize the candidate element to be checked\n    candidate = arr[0]\n    # Loop through the array\n    for i in range(1, n):\n        # If the current element is equal to the candidate, increment the count\n        if arr[i] == candidate:\n            count += 1\n        # If the count reaches n/2, return True, as the candidate is the majority\n        elif count == n/2:\n            return True\n        # Otherwise, update the candidate to the next element in the array\n        else:\n            candidate = arr[i]\n    # If the loop completes without finding a majority, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count == n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer as input and returns the number of set bits in that number.\n    \n    To count the number of set bits in an integer, we can use bitwise operators.\n    A set bit is a binary digit with a value of 1. \n    For example, the binary representation of 8 is 1000.\n    The binary representation of the count of set bits in 8 is 0001.\n    \n    We can use the bitwise AND operator (&) to check if a particular bit is set. \n    For example, if we want to check if the 2nd bit is set in 8, we can do:\n    \n    if (8 & (1 << 1)):\n        # the 2nd bit is set\n    else:\n        # the 2nd bit is not set\n        \n    This works because the 2nd bit (which corresponds to the 2nd position of the binary representation) has a value of 2 in binary and so the bitwise AND operation with the mask (1 << 1) will return a 0 if the 2nd bit is not set and a 1 if it is set.\n    \n    We can use the bitwise XOR operator (^) to check if a particular bit is not set. \n    For example, if we want to check if the 3rd bit is not set in 8, we can do:\n    \n    if (8 ^ (1 << 2)):\n        # the 3rd bit is not set\n    else:\n        # the 3rd bit is set\n        \n    Again, this works because the 3rd bit (which corresponds to the 3rd position of the binary representation) has a value of 0 in binary and so the bitwise XOR operation with the mask (1 << 2) will return a 1 if the 3rd bit is not set and a 0 if it is set.\n    \n    We can then use these two conditions to count the number of set bits in the integer.\n    We can start by initializing a counter to 0. Then, for each bit in the integer, we can check if it is set (by checking if the bit is set using the bitwise AND operation). If the bit is set, we can increment the counter. Finally, we can return the counter.\n    \n    Time complexity: O(log n) since we are only using binary search to find the number of set bits.\n    Space complexity: O(1) since we are not using any extra data structures.\n    \n    '''\n    \n    # initialize the counter to 0\n    count = 0\n    \n    # loop through each bit in the integer\n    while n > 0:\n        # if the current bit is set (i.e. is greater than 0), increment the counter\n        if n & 1:\n            count += 1\n        \n        # shift the integer to the right by 1 bit\n        n = n >> 1\n        \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        n &= (n - 1)\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Create an empty string to store the result\n    result = ''\n    # Loop through each character in the input string\n    for char in str:\n        # If the character's index is odd, append it to the result string\n        if str.index(char) % 2 == 1:\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Convert string to list of characters\n    str_list = list(str)\n    # Initialize an empty string to store the resulting string\n    result = ''\n    # Iterate over the list of characters\n    for i in range(len(str_list)):\n        # If the index value of the character is odd, append it to the result string\n        if i % 2!= 0:\n            result += str_list[i]\n    # Return the resulting string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for char in str:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return \"\".join([string[i] if i % 2 == 0 else \"\" for i in range(len(string))])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(string):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the odd values of characters from a string.\n\n    Args:\n        str (str): A string with odd index values.\n\n    Returns:\n        str: A string with even index values.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a\n    elif b < a and b < c: \n        return b\n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c): \n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of these numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # check for the base case\n    if n == 0:\n        if l == 0 and r == 0:\n            return True\n        else:\n            return False\n\n    # initialize the result\n    result = True\n\n    # loop through all possible bits\n    for i in range(n):\n        # check if the bit is set or unset\n        if (l >> i) & 1 == 0:\n            if (r >> i) & 1 == 1:\n                # if the bit is unset, and the range contains it, then we can return False\n                result = False\n                break\n\n    # return the result\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the given range to a binary string\n    binary_string = bin(r - l + 1)[2:].zfill(n)\n\n    # Convert the binary string to a set of bits\n    bit_set = set(binary_string)\n\n    # Check whether all the bits are unset in the given range or not\n    if len(bit_set) == 1 << n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n    n: integer, the number whose bits need to be checked\n    l: integer, the start index of the range to check\n    r: integer, the end index of the range to check\n\n    Returns:\n    A boolean value indicating whether all the bits are unset in the given range or not.\n\n    \"\"\"\n    # Initialize a mask with all bits set to 1\n    mask = 0\n    for i in range(32):\n        mask |= (1 << i)\n\n    # Loop through all bits in the range [l,r]\n    for i in range(l, r + 1):\n        # Extract the i-th bit from the number and AND it with the mask\n        if (n & (1 << i))!= mask & (1 << i):\n            return False\n\n    # If we make it through the loop without returning False, then all bits are set\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    if (r - l) % 2 == 0:\n        return all_Bits_Set_In_The_Given_Range(n >> 1, l, (r + 1) // 2)\n    else:\n        return all_Bits_Set_In_The_Given_Range(n >> 1, (r + 1) // 2, r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize count variable to 0\n    count = 0\n    \n    # Loop through all bits in the given range\n    for i in range(l, r+1):\n        # Count the number of set bits in the current bit mask\n        set_bits = bin(i)[2:].count('1')\n        \n        # Increment the count variable by the number of set bits in the current bit mask\n        count += set_bits\n        \n    # Check if the count variable is equal to n\n    if count == n:\n        print(\"All the bits are set in the given range.\")\n    else:\n        print(\"All the bits are unset in the given range.\")"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # check if l is less than or equal to r\n    if l > r:\n        print(\"Invalid Input: l should be less than or equal to r\")\n        return\n\n    # loop through each bit and check if it is set or not\n    for i in range(l, r+1):\n        # check if the bit is set or not\n        if (n & (1 << i)) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three integer parameters: n, l, and r.\n    n is the integer value whose bits are to be checked.\n    l is the lower limit of the range.\n    r is the upper limit of the range.\n    \"\"\"\n\n    # Calculate the range of the bits to be checked\n    range_of_bits = r - l + 1\n\n    # Check if all the bits are unset in the given range\n    if n & ((1 << range_of_bits) - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize a variable to store the sum of the bits set in the range\n    count = 0\n\n    # Iterate through each number in the range (inclusive of the lower and upper limit)\n    for i in range(l, r+1):\n        # Convert each number to binary string and count the number of set bits\n        binary = bin(i)[2:]\n        count += binary.count('1')\n\n    # Check if the sum of the set bits in the range is equal to the total number of bits in the range\n    if count == n:\n        print(\"All bits are set in the given range.\")\n    else:\n        print(\"Not all bits are set in the given range.\")"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r + 1):\n        if (n & (1 << i))!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Parameters:\n    n (int): The integer value of the range.\n    l (int): The lower bound of the range.\n    r (int): The upper bound of the range.\n\n    Returns:\n    bool: True if all the bits are unset in the given range, else False.\n\n    Example:\n    all_Bits_Set_In_The_Given_Range(10,2,5) # Output: True\n    all_Bits_Set_In_The_Given_Range(10,6,9) # Output: False\n    '''\n\n    # Initialize a variable to store the count of unset bits\n    unset_bits_count = 0\n\n    # Iterate through each bit of the integer value of the range\n    for i in range(l,r+1):\n        # Check if the bit is set or not\n        if not (n & (1 << i)):\n            unset_bits_count += 1\n\n    # Check if all the bits are unset\n    if unset_bits_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize three lists to store the positive and negative elements\n    pos = []\n    neg = []\n    zero = []\n\n    # Iterate over the array and add the elements to the appropriate lists\n    for i in range(n):\n        if arr[i] >= 0:\n            pos.append(arr[i])\n        else:\n            neg.append(arr[i])\n        if arr[i] == 0:\n            zero.append(i)\n\n    # Iterate over the array and add the elements to the appropriate positions in the original array\n    i = 0\n    for j in range(n):\n        if j < n:\n            arr[i] = neg[j]\n            i += 1\n        else:\n            arr[i] = pos[j-n]\n            i += 1\n\n    # Iterate over the zero list and add the elements to the appropriate positions in the original array\n    for k in zero:\n        if k < n:\n            arr[i] = neg[k]\n            i += 1\n        else:\n            arr[i] = pos[k-n]\n            i += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers: i and j\n    i = 0\n    j = n - 1\n    \n    # Iterate through the array\n    while i < j:\n        # If the element at the i-th index is negative, swap it with the element at the j-th index\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        # If the element at the j-th index is positive or equal to 0, increment i and decrement j\n        else:\n            i += 1\n            j -= 1\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables to keep track of the indices of the positive and negative elements\n    i = 0\n    j = 0\n\n    # loop through the array\n    while i < len(arr):\n        # if the element is negative, increment the index of the negative element\n        if arr[i] < 0:\n            j += 1\n            # swap the element at the current index with the element at the index of the negative element\n            arr[i], arr[j] = arr[j], arr[i]\n        # if the element is positive, increment the index of the positive element\n        else:\n            i += 1\n\n    # loop through the array again and re-arrange the positive elements in a relative order\n    while i < len(arr):\n        # if the element is negative, increment the index of the negative element\n        if arr[i] < 0:\n            j += 1\n            # swap the element at the current index with the element at the index of the negative element\n            arr[i], arr[j] = arr[j], arr[i]\n        # if the element is positive, increment the index of the positive element\n        else:\n            i += 1\n\n    # loop through the array again and re-arrange the negative elements in a relative order\n    while j < len(arr):\n        # if the element is negative, increment the index of the negative element\n        if arr[j] < 0:\n            j += 1\n            # swap the element at the current index with the element at the index of the negative element\n            arr[j], arr[i] = arr[i], arr[j]\n        # if the element is positive, increment the index of the positive element\n        else:\n            i += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n    The function first checks if the array is empty or if n is greater than the length of the array. If either of these conditions are met, the function returns an empty list. Otherwise, the function initializes two variables: i and j. i represents the current index of the array, and j represents the index where the negative elements will be placed.\n\n    Then, the function iterates through the array from index 0 to index n-1. For each element at index i, the function checks if the element is negative. If it is, the function swaps it with the element at index j and increments the value of j. After the iteration, the function returns the modified array.\n\n    If the element at index i is positive, the function simply increments the value of i.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    n = 3\n    re_arrange_array(arr, n) -> [5, 1, 8, 6, 2, 9, 3, 4, 7]\n\n    Note: The relative order of negative and positive elements is preserved in the re-arrangement of the array.\n    '''\n\n    if not arr or n > len(arr):\n        return []\n\n    i, j = 0, 0\n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n        i += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a dictionary to store the indices of positive and negative elements\n    neg_indices = {}\n    pos_indices = {}\n    for i in range(n):\n        if arr[i] < 0:\n            neg_indices[arr[i]] = i\n        else:\n            pos_indices[arr[i]] = i\n    \n    # sort the positive elements by their indices in the original array\n    sorted_pos_indices = sorted(pos_indices.items(), key=lambda x: arr.index(x[0]))\n    \n    # use the sorted indices to re-arrange the first n elements of the original array\n    for i in range(n):\n        arr[i] = sorted_pos_indices[i][0]\n    \n    # sort the negative elements by their indices in the original array\n    sorted_neg_indices = sorted(neg_indices.items(), key=lambda x: arr.index(x[0]))\n    \n    # use the sorted indices to re-arrange the remaining elements of the original array\n    for i in range(n, len(arr)):\n        if sorted_neg_indices[i-n][0] < 0:\n            arr[i] = sorted_neg_indices[i-n][0]\n        else:\n            arr[i] = sorted_pos_indices[i-n][0]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    # iterate through the array and count the number of negative and positive elements\n    count_pos = 0\n    count_neg = 0\n    for num in arr:\n        if num > 0:\n            count_pos += 1\n        else:\n            count_neg += 1\n\n    # if the number of positive and negative elements is not equal, then return the original array\n    if count_pos!= count_neg:\n        return arr\n\n    # iterate through the array again and swap the elements that belong to the same group\n    i = 0\n    while i < n:\n        pos_group = True\n        j = 0\n        while j < count_pos:\n            if arr[i] < 0:\n                pos_group = False\n                break\n            j += 1\n        if pos_group:\n            i += 1\n        else:\n            j = 0\n            while j < count_neg:\n                if arr[i] > 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                j += 1\n            i += 1\n\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[n-i-1] = arr[n-i-1], arr[i]\n        i += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two lists to store negative and positive elements\n    negative = []\n    positive = []\n\n    # Iterate through the given array and add negative and positive elements to their respective lists\n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n\n    # Create a new array to store the re-arranged array\n    new_arr = []\n\n    # Iterate through the first n elements of the negative and positive lists and add them to the new array in the desired order\n    for i in range(n):\n        new_arr.append(negative.pop(0))\n        new_arr.append(positive.pop(0))\n\n    # Add any remaining negative elements to the new array\n    for num in negative:\n        new_arr.append(num)\n\n    # Add any remaining positive elements to the new array\n    for num in positive:\n        new_arr.append(num)\n\n    # Return the new array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers to keep track of the position of negative and positive elements\n    neg_start = 0\n    neg_end = n - 1\n    pos_start = n\n    \n    # Traverse the array from the beginning to the end\n    for i in range(n):\n        # If the element at i is negative, swap it with the element at neg_start\n        if arr[i] < 0:\n            arr[i], arr[neg_start] = arr[neg_start], arr[i]\n            # Move the neg_start pointer to the next element after the element at i\n            neg_start += 1\n        # If the element at i is positive, swap it with the element at pos_start\n        else:\n            arr[i], arr[pos_start] = arr[pos_start], arr[i]\n            # Move the pos_start pointer to the next element after the element at i\n            pos_start += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    zeroes = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        elif arr[i] == 0:\n            zeroes.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    # combine all three lists into one and sort them in ascending order\n    combined = negatives + zeroes + positives\n    combined.sort()\n    \n    # update the original array with the sorted values\n    for i in range(n):\n        if combined[i] < 0:\n            arr[i] = combined[i]\n        elif combined[i] == 0:\n            arr[i] = combined[i]\n        else:\n            arr[i] = combined[i]"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str2 = \"\"\n    for i in str1:\n        if i == \" \":\n            str2 += char\n        else:\n            str2 += i\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ',char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return ''.join([char if char.isspace() else c for c in str1])"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapq to find the n largest elements in the list\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Convert heap to list and return\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    list1 = set(list1)\n\n    # Create a max heap and fill it with the unique items in the list\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n\n    # Return the n largest items from the heap\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap and fill it with the elements of the list\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    \n    # Fill the remaining elements of the min-heap with the next n elements of the list\n    for i in range(n, len(list1)):\n        heapq.heappushpop(heap, list1[i])\n    \n    # Return the min-heap as the result\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap and push the first n elements of the list onto the heap\n    heap = []\n    for num in list1[:n]:\n        heapq.heappush(heap, num)\n\n    # pop elements from the heap and append them to the result list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a heap\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n    # pop and return the n largest items from the heap\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    # Convert the list to a set to get unique elements\n    unique_set = set(list1)\n    # Create a min heap of the first n unique elements\n    min_heap = [heapq.nsmallest(n, unique_set)]\n    # Iterate over the remaining elements of the list\n    for num in list1[n:]:\n        # If the new element is smaller than the smallest element in the heap,\n        # pop the smallest element from the heap and add the new element to the heap\n        if num < min_heap[0][-1]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n        # If the new element is larger than or equal to the smallest element in the heap,\n        # add the new element to the heap\n        else:\n            heapq.heappush(min_heap, num)\n    # Return the n largest elements in the heap\n    return [num[0] for num in min_heap]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return 2 * r * h + 2 * r * r + 2 * h * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateral_surface_area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # Calculate the lateral surface area\n    L = 2 * r * math.sin(math.pi/6)\n    S = math.pi * r**2 + 2 * math.pi * r * h\n\n    # Return the lateral surface area\n    return L + S"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * r * h\n\n    # return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # defining the lateral surface area of the cylinder\n    lateral_surface = (2*r*h) + (2*r*h*h) + (2*r*h*h*h) + (2*r*h*h*h*h)\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # calculate the lateral surface area of a cylinder\n    LSA = math.pi * r**2 * h\n\n    # return the lateral surface area\n    return LSA"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi*(r**2) # Find the surface area of a cylinder using formula for the area of a circle\n    lateral_area = area*(h/2) # Find the lateral surface area of the cylinder\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: lateral surface area of the cylinder\n    \"\"\"\n    return math.pi * r**2 * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14159*r*r + 2*3.14159*r*h + 2*3.14159*h*h\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3 # formula for volume of a cube\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bit_set = n | (n - 1)\n    return even_bit_set"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Loop through each bit in the binary representation of n\n    for i in range(32):\n        # Check if the ith bit of n is an even bit\n        if (n & (1 << i)) > 0:\n            # Set the ith bit of the result to 1\n            result |= (1 << i)\n            \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    while n > 0:\n        if n % 2 == 0:\n            result += n\n        n //= 2\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # loop through all bits of the number\n    for bit in range(8):\n        # check if the current bit is even\n        if n & (1 << bit) == 0:\n            # set the bit to 1\n            n |= 1 << bit\n\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    # Convert the input number to binary format\n    binary_n = bin(n)[2:]\n    # Iterate over each digit in the binary number\n    for digit in binary_n:\n        # If the digit is even, set the corresponding bit of the result variable to 1\n        if int(digit) % 2 == 0:\n            result = result | (1 << int(digit))\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    while n > 0:\n        result <<= 1\n        result |= n & 1\n        n >>= 1\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the even bits set to 1\n    even_bits_set = 0\n    \n    # Iterate through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set the corresponding bit in the even_bits_set variable to 1\n        if int(bit) == 0:\n            even_bits_set = even_bits_set << 1\n        else:\n            even_bits_set = even_bits_set | 1\n    \n    # Return the even_bits_set variable\n    return even_bits_set"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert the number to a string\n    n = bin(n)[2:]\n    # initialize an empty string to store the result\n    result = ''\n    # iterate over each bit in the binary string\n    for bit in n:\n        # if the bit is even, append a 1 to the result\n        if int(bit) % 2 == 0:\n            result += '1'\n        # otherwise, append a 0 to the result\n        else:\n            result += '0'\n    # convert the result back to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes an integer as input and returns an integer with all even bits set to 1.\n    \"\"\"\n    return n | (n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate through each bit of the input number\n    for i in range(32): \n        # Check if the current bit is even\n        if n & (1 << i): \n            # Set the corresponding bit of the result to 1\n            result |= (1 << i)\n\n    # Return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object to count the occurrences of each tuple\n    counter = Counter(test_list)\n    \n    # create a dictionary to store the results\n    result_dict = {}\n    \n    # loop through the keys in the counter object and add the tuple as a key and the count as the value to the result dictionary\n    for key, count in counter.items():\n        result_dict[key] = count\n    \n    # return the result dictionary\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts\n    count_dict = {}\n    \n    # Loop through the test_list and count the occurrences of each tuple\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    \n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object from the test_list\n    counter = Counter(test_list)\n\n    # Create a dictionary to store the results\n    result = {}\n\n    # Iterate over the items in the Counter object\n    for item, count in counter.items():\n        # If the item is not already in the result dictionary, add it with a count of 1\n        if item not in result:\n            result[item] = 1\n        # If the item is already in the result dictionary, increment the count by 1\n        else:\n            result[item] += 1\n\n    # Return the result dictionary\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Convert the list of tuples into a set to eliminate duplicates\n    unique_set = set(test_list)\n\n    # Convert the set back into a list of tuples\n    unique_list = list(unique_set)\n\n    # Use Counter to count the number of occurrences of each tuple in the list\n    counts = Counter(unique_list)\n\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts of each unique tuple\n    count_dict = {}\n    \n    # Iterate through the list of tuples\n    for item in test_list:\n        # If the tuple is already in the dictionary, increment its count by 1\n        if item in count_dict:\n            count_dict[item] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[item] = 1\n    \n    # Return the dictionary of counts of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts of each tuple in the list\n    counts = Counter()\n    \n    # Iterate over each tuple in the list\n    for item in test_list:\n        # Add the tuple to the Counter object to get the count of occurrences\n        counts[item] += 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize variables\n    count = 0\n    start = 0\n    # Traverse through the string\n    for end in range(len(str)):\n        # If the current character is not empty, increment the count\n        if str[end]!= '':\n            count += 1\n        # If the current character is empty, update the start pointer\n        else:\n            start = end + 1\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    # Create a set to store the unique characters in the string\n    chars = set(str)\n\n    # Initialize the count to 0\n    count = 0\n\n    # Iterate through each unique character in the string\n    for char in chars:\n        # Iterate through each character in the string to get the number of substrings\n        for i in range(len(str)):\n            count += 1\n\n            # If the current character is not the same as the next character, the substring is empty\n            if i < len(str) - 1 and str[i] == str[i+1]:\n                count -= 1\n\n            # If the current character is the next character in the string, the substring is not empty\n            if i == len(str) - 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    count = 0\n    for i in range(1,n+1):\n        count += m*i*(m-i)\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(2, m + 1):\n        if i >= 2 * i and i <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m, 1, -1):\n        if i >= 2 * (m + 1) and i <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # Initialize the count to 0\n    count = 0\n\n    # Create a list of m zeros\n    prev_list = [0] * m\n\n    # Loop over the range of n+1 (to avoid counting empty sequences)\n    for i in range(n + 1):\n\n        # Check if we have already counted this sequence length\n        if i < m:\n\n            # Calculate the index of the next element to include in the sequence\n            j = i + i - n\n\n            # If the index is within range, add 1 to the count and append the current element to the sequence\n            if 0 <= j < m:\n                count += 1\n                prev_list[j] = i\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize variables\n    total_sequences = 0\n    current_sequence = 1\n    previous_element = 0\n\n    # Calculate the total number of possible sequences\n    for i in range(n):\n        current_element = i + 2\n        if current_element <= m:\n            current_sequence += 1\n        else:\n            break\n\n        # Check if we have a new sequence\n        if i == n - 1:\n            total_sequences += current_sequence\n        else:\n            if current_element <= previous_element + 2:\n                total_sequences += current_sequence\n            else:\n                current_sequence = 1\n                previous_element = current_element\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers m and n and returns the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(m, 0, -2):\n        if i >= 2 * m:\n            count += 1\n        elif i >= 2 * m - n:\n            count -= 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid(arr, m, n):\n        if len(arr)!= n:\n            return False\n        for i in range(1, n):\n            if arr[i] - arr[i - 1] <= 2 * arr[i - 1] <= m:\n                return False\n        return True\n    \n    def generate_sequences(arr, m, n):\n        if n == 1:\n            yield arr[0]\n        else:\n            for i in range(m, arr[n - 1] - 2, -1):\n                if i % 2 == 0:\n                    arr[n - 1] = i\n                else:\n                    arr[n - 1] = i + 1\n                if is_valid(arr, m, n):\n                    for seq in generate_sequences(arr, m, n - 1):\n                        yield seq\n    \n    total = 0\n    for sequence in generate_sequences([2] * n, m, n):\n        total += 1\n    \n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through all possible sequences of length n\n    for i in range(n, m+1):\n\n        # Check if each element is a positive integer greater than or equal to twice the previous element but less than or equal to m\n        if i >= 2*n and i <= m:\n            count += 1\n\n    # Return the total count of possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    num_sequences = 0\n    for i in range(n):\n        if i == 0 or m % 2 == 0:\n            num_sequences += m\n        else:\n            for j in range(2, int(m/2) + 1):\n                if (i - j) % 2 == 0:\n                    num_sequences += m // j\n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count to 0\n    count = 0\n\n    # Initialize the first element to 1\n    first_element = 1\n\n    # Initialize the second element to 2\n    second_element = 2\n\n    # Loop through the remaining elements from 3 to n\n    for i in range(3, n + 1):\n        # Calculate the next element\n        next_element = (first_element + second_element) % m\n\n        # Check if the next element is greater than or equal to twice the previous element but less than or equal to m\n        if next_element >= 2 * first_element <= m:\n            count += 1\n\n        # Update the first element and second element\n        first_element = second_element\n        second_element = next_element\n\n    # Return the count of possible sequences\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    # Check if the length of the first list is greater than 1\n    if length > 1:\n        # Set the index of the last element of the first list to the length of the first list minus 2\n        index = length - 2\n        # Get the last element of the first list\n        last_element = list1[index]\n        # Set the last element of the first list to the elements of the second list\n        list1[index] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the first list\n    n = len(list1)\n    # iterate through the first list from the last index to the first index\n    for i in range(n-1, -1, -1):\n        # if the index is even, replace the last element with the element from the second list\n        if i % 2 == 0:\n            list1[i] = list2[i % len(list2)]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    if len(list1) == 0:\n        return list2\n    else:\n        return list1[:-1] + list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # Get the length of the first list\n    length = len(list1)\n\n    # Set the last element of the first list to be the same length as the second list\n    list1[length - 1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) < 2:\n        return None\n    \n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = 0\n    for char in str1:\n        total_charac += 1\n    return total_charac"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrtN = math.sqrt(N)\n    next_sqrtN = math.ceil(sqrtN) ** 2\n\n    return next_sqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # We can find the next perfect square by finding the first perfect square greater than N \n    # and then finding the smallest perfect square greater than the next perfect square.\n    # We can use binary search to find the first perfect square greater than N.\n    def binary_search_first_perfect_square(N):\n        left, right = 1, N\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid > N:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    # Now, we can find the next perfect square using binary search.\n    first_perfect_square = binary_search_first_perfect_square(N)\n    next_square = first_perfect_square + 1\n    next_perfect_square = next_square * next_square\n    while next_perfect_square <= N:\n        next_square += 1\n        next_perfect_square = next_square * next_square\n\n    return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrtN = int(math.sqrt(N))\n    sqrtN += 1\n    while True:\n        sqrt_sqrtN = int(math.sqrt(sqrtN))\n        sqrtN += 1\n        if sqrtN >= sqrt_sqrtN:\n            return sqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(num):\n        if num < 2:\n            return False\n        sqrt_num = int(math.sqrt(num))\n        return sqrt_num**2 == num\n\n    while True:\n        N += 1\n        if is_perfect_square(N):\n            return N\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # Get the square root of the given number\n    sqrt_N = int(math.sqrt(N))\n    \n    # If the square root is odd, increment it by 1\n    if sqrt_N % 2 == 1:\n        sqrt_N += 1\n    \n    # Multiply the square root by itself and add 1\n    return int(sqrt_N ** 2 + 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    while True:\n        N += 1\n        if N > sqrt_N:\n            return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    count = 0\n    num = N\n\n    # Check if the number is already a perfect square\n    if num % int(math.sqrt(num)) == 0:\n        return num\n\n    # Find the next perfect square\n    while num % int(math.sqrt(num))!= 0:\n        num += 1\n        count += 1\n\n    return num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square greater than N.\n    \"\"\"\n    # If N is a perfect square, return N+1\n    if math.isqrt(N) * math.isqrt(N) == N:\n        return N+1\n    # If N is not a perfect square, find the next smallest perfect square greater than N\n    else:\n        # Calculate the square root of N using the math library\n        sqrt_N = math.sqrt(N)\n        # Calculate the next perfect square greater than sqrt_N using the math library\n        next_sqrt_N = math.ceil(sqrt_N) * math.ceil(sqrt_N)\n        # Check if the next perfect square is greater than N\n        if next_sqrt_N > N:\n            return next_sqrt_N\n        else:\n            # If the next perfect square is not greater than N, return N+1\n            return N+1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_nth_prime(n):\n        i = 2\n        while True:\n            if is_prime(i):\n                i += 1\n                if i == n:\n                    return i\n            else:\n                i += 1\n\n    def next_prime_greater_than_sqrt(sqrt_N):\n        i = sqrt_N + 1\n        while True:\n            i += 1\n            if is_prime(i):\n                return i\n            else:\n                i += 1\n\n    def sqrt_nth_prime(N):\n        sqrt_N = int(math.sqrt(N))\n        i = sqrt_N\n        while True:\n            if is_prime(i):\n                return i\n            i += 1\n\n    sqrt_N = sqrt_nth_prime(N)\n    i = next_prime_greater_than_sqrt(sqrt_N)\n    while True:\n        if math.sqrt(i) % 1 == 0:\n            return i\n        else:\n            i += 1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_Perfect_Square(N):\n    sqrt_N = int(math.sqrt(N)) + 1\n    while True:\n        if (sqrt_N*sqrt_N) > N:\n            break\n        sqrt_N += 1\n    return sqrt_N*sqrt_N"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Find the length of the array\n    n = len(arr)\n    \n    # Initialize variables for the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through the array from the beginning to the end\n    for i in range(n):\n        # Check if the current element is increasing or decreasing\n        if arr[i] > arr[i+1]:\n            current_sum += arr[i]\n        else:\n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            # Reset the current sum\n            current_sum = 0\n    \n    # Check if the current sum is greater than the maximum sum\n    if current_sum > max_sum:\n        max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = float('-inf')\n    temp = float('-inf')\n    for i in range(len(arr)):\n        if arr[i] > temp:\n            temp = arr[i]\n        elif arr[i] < temp:\n            temp = arr[i] + max_sum\n            max_sum = temp\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # initialize variables\n    n = len(arr)\n    max_sum = 0\n    max_sum_decreasing = 0\n    max_sum_increasing = 0\n    left = 0\n    right = n-1\n\n    # check if the array is increasing\n    while left < right:\n        if arr[left] < arr[right]:\n            break\n        max_sum_increasing = max(max_sum_increasing, arr[left] + arr[right])\n        left += 1\n        right -= 1\n\n    # check if the array is decreasing\n    while left < right:\n        if arr[left] > arr[right]:\n            break\n        max_sum_decreasing = max(max_sum_decreasing, arr[left] + arr[right])\n        left += 1\n        right -= 1\n\n    # check if the array is bitonic\n    if max_sum_increasing > max_sum_decreasing:\n        max_sum = max_sum_increasing\n    else:\n        max_sum = max_sum_decreasing\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    # Initialize a list to store the cumulative sums of the increasing subsequences ending at each index\n    cum_sums = [0] * len(arr)\n    \n    # Initialize two pointers: left and right, pointing to the beginning and end of the array\n    left, right = 0, len(arr) - 1\n    \n    # Initialize variables for the maximum sum of bitonic subsequences ending at each index\n    max_inc_sum = 0\n    max_dec_sum = 0\n    \n    # Iterate over the array and update the cumulative sums and max sums as needed\n    while left < right:\n        if arr[left] < arr[right]:\n            cum_sums[left] = cum_sums[left] + arr[left]\n            left += 1\n        else:\n            cum_sums[right] = cum_sums[right] + arr[right]\n            right -= 1\n        \n        # Update the maximum sum of bitonic subsequences ending at each index\n        max_inc_sum = max(max_inc_sum, cum_sums[left])\n        max_dec_sum = max(max_dec_sum, cum_sums[right])\n    \n    return max(max_inc_sum, max_dec_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Initialize variables to store the maximum sum and its indices\n    max_sum = float('-inf')\n    max_sum_indices = []\n\n    # Loop through the array and calculate the maximum sum of a bitonic subsequence\n    for i in range(len(arr)):\n        if i == 0 or arr[i-1] < arr[i]:\n            # If the current element is increasing, we can extend the bitonic subsequence by adding it to the maximum sum\n            if arr[i] > max_sum:\n                max_sum = arr[i]\n                max_sum_indices = [i]\n            else:\n                max_sum_indices.append(i)\n        else:\n            # If the current element is decreasing, we need to continue the current bitonic subsequence until we find an element that is increasing again\n            bitonic_subsequence = arr[max_sum_indices[0]:i+1]\n            increasing_count = 0\n            decreasing_count = 0\n            for j in bitonic_subsequence:\n                if j > arr[i]:\n                    increasing_count += 1\n                else:\n                    decreasing_count += 1\n            # If there are more decreasing elements than increasing elements, we can extend the bitonic subsequence by adding the current element to the maximum sum\n            if decreasing_count >= increasing_count:\n                max_sum += arr[i]\n                max_sum_indices.append(i)\n\n    return max_sum_indices"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # check if the array is empty\n    if not arr:\n        return 0\n    \n    # check if the array has only one element\n    if len(arr) == 1:\n        return arr[0]\n    \n    # initialize the maximum sum to be negative infinity\n    max_sum = float('-inf')\n    \n    # check if the first element is increasing\n    if arr[0] < arr[1]:\n        max_sum = max(arr[0], arr[1]) + arr[2]\n    else:\n        max_sum = max(arr[0], arr[1])\n        \n    # check if the array has three or more elements\n    if len(arr) > 2:\n        # loop through the array starting from the third element\n        for i in range(2, len(arr)):\n            # check if the current element is increasing\n            if arr[i] > arr[i-1]:\n                # check if the maximum sum so far is still increasing\n                if max_sum < arr[i]:\n                    max_sum = max(max_sum, arr[i])\n            else:\n                # check if the maximum sum so far is still decreasing\n                if max_sum < arr[i]:\n                    max_sum = max(max_sum, arr[i])\n                    \n    # return the maximum sum found\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return 0\n\n    n = len(arr)\n    max_sum = float('-inf')\n\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            max_sum = max(max_sum, arr[i] + arr[i+1] + arr[i+2])\n        elif arr[i] > arr[i+1]:\n            max_sum = max(max_sum, arr[i] + arr[i+1] + arr[i+2])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[1]\n\n    if arr[1] >= arr[0]:\n        dp[1] = max(dp[1], arr[1])\n\n    for i in range(2, n):\n        if arr[i] >= arr[i - 1]:\n            dp[i] = max(dp[i - 1], dp[i]) + arr[i]\n        else:\n            dp[i] = max(dp[i - 1], dp[i])\n\n    return dp[-1]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize variables to store the maximum sum of subsequence ending with each element of the array\n    max_sum_i = [0] * n\n    max_sum_i[0] = arr[0]\n    max_sum_i[1] = max(arr[0], arr[1])\n\n    # Iterate through the array from 2 to n-1\n    for i in range(2, n):\n        # Check if the current element is increasing or decreasing based on its previous two elements\n        if arr[i] < arr[i-1]:\n            # If it's increasing, update the maximum sum of subsequence ending with the current element\n            max_sum_i[i] = max(max_sum_i[i-1] + arr[i], max_sum_i[i-2] + arr[i])\n        else:\n            # If it's decreasing, update the maximum sum of subsequence ending with the previous two elements\n            max_sum_i[i] = max(max_sum_i[i-1], max_sum_i[i-2] + arr[i])\n\n    # Return the maximum sum of the subsequence ending with each element of the array\n    return max(max_sum_i[i] for i in range(n))"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    # To find maximum sum of subsequence ending at index i\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            dp[i][i] = arr[i]\n        else:\n            dp[i][i] = arr[i] + dp[i-1][i-1]\n\n    # To find maximum sum of subsequence ending at index i\n    max_sum = dp[0][n-1]\n\n    # To find maximum sum of subsequence ending at index i\n    for i in range(n-2, -1, -1):\n        if arr[i] <= arr[i+1]:\n            dp[i][i] = arr[i] + dp[i+1][i+1]\n        else:\n            dp[i][i] = arr[i] + dp[i+1][i+1]\n        max_sum = max(max_sum, dp[i][i])\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Number should be non-negative.')\n    \n    # Initialize the two variables for the babylonian method\n    guess = number / 2\n    upper_bound = number\n    \n    # Keep iterating until the difference between the upper and lower bounds is less than some tolerance\n    while abs(guess*guess - number) > 0.0001:\n        if guess*guess > number:\n            upper_bound = guess\n        else:\n            guess = (guess + number / guess) / 2\n            \n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    count = 0\n    while True:\n        if guess*guess == number:\n            return guess\n        if guess*guess > number:\n            guess = (guess + number/guess)/2\n            count += 1\n        else:\n            guess = (guess + number/guess)/2\n            count += 1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    while True:\n        next_guess = (guess + number / guess) / 2\n        if abs(next_guess - guess) < 0.0001:\n            break\n        guess = next_guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = number / 2\n    x1 = x0\n    n = 0\n    while abs(x1 - x0) > 0.0001:\n        x2 = x1 - (number / x1)\n        n += 1\n        x0 = x1\n        x1 = x2\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Check if the input is a positive integer\n    if not isinstance(number, int) or number < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Initialize variables for the numerator and denominator of the iteration\n    num = number\n    den = 1\n\n    # Initialize variables for the current approximation and the number of iterations\n    approx = 0\n    iterations = 0\n\n    # Iterate until the numerator is less than 10^-10\n    while abs(num) >= 1e-10:\n        # Update the numerator and denominator of the next iteration\n        num += den / (2 * iterations + 1)\n        den += den / (2 * iterations + 1)\n        iterations += 1\n\n    # Compute and return the final approximation\n    return approx"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print(\"Number should be positive\")\n    elif number == 0:\n        return 0\n    else:\n        guess = number / 2\n        while guess**2 > number:\n            guess = (guess + number / guess) / 2\n        return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2\n    y = x\n    \n    while abs(x - y) > 0.00001:\n        x = (x + y) / 2\n        y = number / x\n        \n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number/x\n    i = 1\n    while abs(y-x) > 0.000001:\n        x = y\n        y = (number/x) + ((number/x)**2)/2\n        i += 1\n    return y, i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # calculate the initial estimate of the square root\n    x0 = number / 2\n\n    # loop until the estimated square root is within a certain tolerance of the actual square root\n    while True:\n        # calculate the next estimate\n        x1 = (x0 + number / x0) / 2\n\n        # check if the estimated square root is within the tolerance of the actual square root\n        if abs(x1 * x1 - number) < 0.0001:\n            break\n\n        # update the estimate\n        x0 = x1\n\n    # return the estimated square root\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    epsilon = 1e-6\n    guess = number/2\n    while True:\n        if abs(guess**2 - number) < epsilon:\n            return guess\n        elif guess**2 < number:\n            guess = (guess + number/guess)/2\n        else:\n            guess = (guess + number/guess)/2"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Create a 2D array to store the length of the longest palindromic subsequence for all prefixes of the string\n    lengths = [[0 for _ in range(len(str))] for _ in range(len(str))]\n\n    # Initialize the first row and the first column\n    for i in range(len(str)):\n        lengths[i][i] = 1\n\n    # Fill the rest of the array using dynamic programming\n    for length in range(3, len(str) + 1):\n        for i in range(len(str) - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                lengths[i][j] = lengths[i+1][j-1] + 2\n            else:\n                lengths[i][j] = max(lengths[i+1][j], lengths[i][j-1])\n\n    return lengths[0][len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D array to store LPS lengths of all substrings\n    L = [[0] * n for _ in range(n)]\n    # Initialize LPS lengths of all substrings as 1\n    for i in range(n):\n        L[i][i] = 1\n    # Fill LPS lengths of all substrings\n    for length in range(3, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            # Check if substring is a palindrome\n            if str[start] == str[end]:\n                # If substring is a palindrome, calculate LPS length\n                L[start][end] = L[start+1][end-1] + 2\n            else:\n                # If substring is not a palindrome, use LPS length of adjacent substring\n                L[start][end] = max(L[start+1][end], L[start][end-1])\n    return L[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 1:\n        return 1\n\n    # Create a table to store the lengths of longest palindromic subsequences ending at each index\n    table = [[0] * n for _ in range(n)]\n\n    # Base cases\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill in the table in a bottom-up manner\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if s[start] == s[end]:\n                table[start][end] = table[start + 1][end - 1] + 2\n            else:\n                table[start][end] = max(table[start + 1][end], table[start][end - 1])\n\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # create a 2D table to store the length of palindromic subsequences ending at each index\n    table = [[0]*n for _ in range(n)]\n    # base case: if the string is empty or has only one character, it is a palindrome\n    table[0][0] = 1\n    \n    for i in range(1, n):\n        # check if the character at index i is a palindrome\n        if str[i] == str[i]:\n            # if it is, set the length of the palindromic subsequence ending at index i as 1\n            table[i][i] = 1\n        # otherwise, check if the substring from index i-1 to i-1+n-i is a palindrome\n        for j in range(max(0, i-n+1), i):\n            if str[j] == str[i]:\n                # if it is, set the length of the palindromic subsequence ending at index i as 1+j-i+1\n                table[i][j] = 1 + table[j+1][i-1]\n                \n    # find the length of the longest palindromic subsequence\n    max_len = 0\n    for i in range(n):\n        max_len = max(max_len, table[i][i])\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    # Initialize variables\n    n = len(str)\n    dp = [0] * n\n\n    # Iterate through the string\n    for i in range(1, n):\n        # If the current character is same as the last character, then its palindrome length is 1\n        if str[i] == str[i-1]:\n            dp[i] = 1 + dp[i-1]\n        # If the current character is different from the last character, then find the maximum of palindrome lengths of the two subsequences\n        else:\n            dp[i] = max(dp[i-1], dp[i-2])\n\n    # Return the maximum length of the palindrome subsequence\n    return dp[-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef lps(s):\n    n = len(s)\n    # Initialize two pointers i and j to start of the string\n    i = j = 0\n    # Initialize maximum length of palindromic subsequence\n    max_len = 1\n    # Initialize an array to store the lengths of palindromic subsequences of length i\n    lps_array = [1] * n\n    # Traverse through the string and find the longest palindromic subsequence of length i\n    while j < n - 1:\n        # If the character at j is same as the next character at i, increment i and j and update lps_array[i]\n        if s[j] == s[i + 1]:\n            i += 1\n            j += 1\n            lps_array[j] = lps_array[i - 1] + 2\n            # Update maximum length of palindromic subsequence if current length is greater\n            max_len = max(max_len, lps_array[j])\n        # If the character at j is different from the next character at i, reset i and decrement j\n        else:\n            i = max(0, i - lps_array[j] + 1)\n            j = i - 1\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Create a table to store the length of the longest palindromic subsequence ending at each index in the string.\n    table = [[0]*len(str) for _ in range(len(str)+1)]\n\n    # Initialize the first row and column to 0.\n    table[0][0] = 0\n\n    # Fill in the rest of the table using the following recurrence relation:\n    # table[i][j] = max(table[i-1][j], table[i][j-1], table[i-1][j-1]) + 1, if str[i] == str[j]\n    # table[i][j] = max(table[i-1][j], table[i][j-1]), if str[i]!= str[j]\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence in the string.\n    return table[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at i,j\n    table = [[0] * n for _ in range(n)]\n    # Initialize the table with the base case\n    for i in range(n):\n        table[i][i] = 1\n    # Fill in the table using dynamic programming\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n    # Return the length of the longest palindromic subsequence\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Create a 2D array to store the length of the longest palindromic subsequence ending at each position\n    dp = [[0] * n for _ in range(n)]\n    # Initialize the first column and the first row to 0\n    for i in range(n):\n        dp[i][i] = 1\n    # Fill in the rest of the DP array using dynamic programming\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(s):\n    return s == s[::-1]\n\n\ndef longest_palindromic_subsequence(s):\n    n = len(s)\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each index\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and first column with 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if is_palindrome(s[i:j + 1]):\n                dp[i][j] = length\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n + (1/(n-1)))/(2/n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n-1)/(2*(n-2))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the sum of harmonic series\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    \n    # Return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(n-1):\n        sum += 1/(i+1)\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += 1.0 / (i+1)\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n * (n-1)) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1/i for i in range(1, n)])"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set of unique values in array_nums1\n    unique_set = set(array_nums1)\n\n    # Create a list of intersection values\n    intersection_list = []\n\n    # Iterate through array_nums2 and check if each value is in the set of unique values in array_nums1\n    for num in array_nums2:\n        if num in unique_set:\n            intersection_list.append(num)\n\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set from array_nums1\n    set1 = set(array_nums1)\n    # create an empty set to store the intersection\n    intersection = set()\n    # iterate over array_nums2 and check if it exists in set1\n    for num in array_nums2:\n        if num in set1:\n            intersection.add(num)\n    # convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n\n    Args:\n    - array_nums1 (list): a list of integers\n    - array_nums2 (list): a list of integers\n\n    Returns:\n    - list: a list of integers that are the elements of both input arrays that appear in the same position\n\n    \"\"\"\n\n    # Initialize a set to store the elements of the first array\n    set_nums1 = set(array_nums1)\n\n    # Initialize an empty list to store the intersection of the two arrays\n    intersection = []\n\n    # Iterate through the second array and check if each element is present in the set of elements of the first array\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection.append(num)\n            # Remove the element from the set of elements of the first array to avoid duplicates\n            set_nums1.remove(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection_set = set(array_nums1) & set(array_nums2)\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    common_nums = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in common_nums:\n            common_nums.append(num)\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty dictionary to store the intersection\n    intersection = {}\n    \n    # Iterate over the first array\n    for num in array_nums1:\n        # If the number is in the second array and not yet in the intersection dictionary, add it\n        if num in array_nums2 and num not in intersection:\n            intersection[num] = True\n    \n    # Create a new list with the intersection keys\n    intersection_list = list(intersection.keys())\n    \n    # Sort the new list and return it\n    intersection_list.sort()\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create two dictionaries to store the unique elements of array_nums1 and array_nums2\n    dict1 = {}\n    dict2 = {}\n    for num in array_nums1:\n        dict1[num] = True\n    for num in array_nums2:\n        dict2[num] = True\n    # find the intersection of the two dictionaries using the keys() method\n    intersection = dict1.keys() & dict2.keys()\n    # return the intersection as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize an empty list to store the intersection\n    intersection_list = []\n    \n    # Create sets from both arrays\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find the intersection of the two sets and convert it to a list\n    intersection = list(set1.intersection(set2))\n    \n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes in a tuple and an element and counts the \n    occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    count = 0\n    for element in tup: \n        if element == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(1, len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result[::2] + list[::2] + result[1::2]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list `lst` and an element `elem` and returns a new list with `elem` inserted before each element in `lst`.\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        new_lst.append(elem)\n        new_lst.append(item)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.insert(i, element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(0, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result_list = []\n    for i in range(len(list)):\n        result_list.append(element)\n        result_list.append(list[i])\n    return result_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.extend(list[:i])\n        result.extend(list[i+1:])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = num.real, num.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(num)\n        print(f'Magnitude: {magnitude}, Phase: {phase}')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        magnitude = abs(num)\n        angle = cmath.phase(num)\n        print(\"Magnitude:\", magnitude, \"Angle:\", angle)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        # Convert complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n\n        # Print polar coordinates\n        print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    This function converts complex numbers to polar coordinates.\n    '''  \n    result = []  \n    for number in numbers:  \n        real, imag = cmath.polar(number)  \n        result.append((real, imag))  \n    return result  "
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # convert complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # print polar coordinates\n        print('({}, {})'.format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        if isinstance(number, complex):\n            r = abs(number)\n            theta = cmath.phase(number)\n            print(f\"{r} + {theta}i\")\n        else:\n            print(f\"{number} is not a complex number\")\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        r = abs(num)\n        phi = cmath.phase(num)\n\n        print(f\"({r}, {phi})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns the corresponding list of polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real, imag = num.real, num.imag\n        # calculate the magnitude of the complex number\n        mag = cmath.sqrt(real**2 + imag**2)\n        # calculate the angle of the complex number\n        angle = cmath.phase(num)\n        # convert the angle to degrees\n        angle_deg = angle * 180.0 / cmath.pi\n        # append the polar coordinates to the result list\n        result.append((mag, angle_deg))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for num in numbers:\n        complex_numbers.append(complex(*num.split('+')[-1].split('j')))\n\n    polar_coordinates = []\n    for complex_num in complex_numbers:\n        magnitude = cmath.sqrt(complex_num.real**2 + complex_num.imag**2)\n        angle = cmath.phase(complex_num)\n        polar_coordinates.append((magnitude, angle))\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \n    Args:\n    numbers (list): list of complex numbers to be converted\n    \n    Returns:\n    list: list of complex numbers in polar coordinates\n    \"\"\"\n    polar_numbers = []\n    for number in numbers:\n        if isinstance(number, complex):\n            r = abs(number)\n            theta = cmath.phase(number)\n            polar_numbers.append((r, theta))\n        else:\n            raise ValueError(\"All elements in the input list must be complex numbers.\")\n    return polar_numbers"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the count of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(colors, n):\n    '''\n    Write a function that takes in a list of colors and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(colors, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    \"\"\"\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    \"\"\"\n    if n > len(l):\n        raise ValueError(\"Length of the list should be less than or equal to n\")\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for comb in combinations_with_replacement(l[:i] + l[i+1:], n-1):\n            result.append((l[i],) + comb)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combination = tuple(l[i:i+n])\n        combinations.append(combination)\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l) - n + 1):\n        comb = tuple(l[i:i+n])\n        combs.append(comb)\n    return combs"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all possible combinations with repetition of n elements\n    combinations = combinations_with_replacement(l, n)\n    # convert the combinations to a list of tuples\n    result = list(combinations)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all possible combinations of the list\n    combos = combinations_with_replacement(l, n)\n    # Convert the combinations to a list of tuples\n    combos_list = list(combos)\n    # Return the list of tuples\n    return combos_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all possible combinations of length n with repetition\n    comb = combinations_with_replacement(l, n)\n    # Convert the combinations to a list of tuples\n    comb_list = [(tuple(c)) for c in comb]\n    return comb_list"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(n):\n    '''\n    A helper function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # Initialize a boolean array \"prime[0..n]\" and\n    # \"prime[i] = true\" if i is prime, else false.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while(p**2 <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p**2, n+1, p):\n                prime[i] = False\n        p += 1\n    count = sum(prime)\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    num = 2\n    while num < n:\n        if all(num%i!=0 for i in range(2,int(num**0.5)+1)):\n            count += 1\n        num += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # initialize the count variable\n    count = 0\n\n    # iterate through all numbers between 2 and n-1\n    for i in range(2, n):\n        # check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if i is prime, increment the count\n        if is_prime:\n            count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    # initialize the count variable\n    count = 0\n    \n    # loop through the numbers from 2 to n-1\n    for i in range(2, n):\n        # check if the number is prime\n        is_prime = True\n        # loop through the numbers from 2 to the square root of the number\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if the number is prime, increment the count variable\n        if is_prime:\n            count += 1\n    \n    # return the count of prime numbers less than n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Compare the length of the tuples\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # initialize variables\n    max_val1, max_val2 = test_tup1\n    min_val1, min_val2 = test_tup2\n    # check if the first tuple has a greater value than the second tuple\n    if test_tup1 > test_tup2:\n        max_val1 = test_tup1[0]\n        max_val2 = test_tup2[0]\n        min_val1 = test_tup1[1]\n        min_val2 = test_tup2[1]\n    # check if the first tuple has a smaller value than the second tuple\n    elif test_tup1 < test_tup2:\n        max_val2 = test_tup1[0]\n        min_val2 = test_tup1[1]\n        max_val1 = test_tup2[0]\n        min_val1 = test_tup2[1]\n    # check if the second tuple has a greater value than the first tuple\n    elif test_tup2 > test_tup1:\n        max_val1 = test_tup2[0]\n        max_val2 = test_tup1[0]\n        min_val1 = test_tup2[1]\n        min_val2 = test_tup1[1]\n    # check if the second tuple has a smaller value than the first tuple\n    elif test_tup2 < test_tup1:\n        max_val2 = test_tup2[0]\n        min_val2 = test_tup2[1]\n        max_val1 = test_tup1[0]\n        min_val1 = test_tup1[1]\n    # return the maximum value tuple\n    return max_val1, max_val2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = max(test_tup1, test_tup2)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(test_tup1[0], test_tup2[0])\n    if max_val == test_tup1[0]:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2\n    else:\n        if test_tup2[1] > test_tup1[1]:\n            return test_tup2\n        else:\n            return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = test_tup1\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_tup[i]:\n            max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n    \n    max_tuple = (max(test_tup1), max(test_tup2))\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input, compares them and returns the tuple with the maximum value in each tuple.\n    \"\"\"\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max2 = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max1 += 1\n        elif test_tup1[i] < test_tup2[i]:\n            max2 += 1\n    return max(max1, max2)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Initialize the first three newman\u2013shanks\u2013williams primes\n    p1 = 2\n    p2 = 3\n    p3 = 5\n\n    # Calculate the number of newman\u2013shanks\u2013williams primes up to n\n    num_primes = n // p1 + (n % p1 == 0) + n // p2 + (n % p2 == 0) + n // p3 + (n % p3 == 0)\n\n    # Loop through the newman\u2013shanks\u2013williams primes until we find the nth one\n    for i in range(4, num_primes + 1):\n        p = (p1 * i * i - 2 * p1 * i + p3) // (2 * p1)\n        if (p * p == n):\n            return p\n        elif (p * p > n):\n            return None\n\n    # If we reach this point, the nth newman\u2013shanks\u2013williams prime number was not found\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n    # check if n is a valid input\n    if n < 1 or n > len(primes):\n        return \"Invalid input. n must be a positive integer less than or equal to the number of newman-shanks-williams primes.\"\n\n    # find the nth newman-shanks-williams prime\n    index = n - 1\n    while index >= 0:\n        if index == 0:\n            return primes[index]\n        index -= 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        i = 3\n        while True:\n            if (2*i**2 + 1) % 6 == 0:\n                i += 1\n            else:\n                break\n        return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Define the range of numbers to check for primality\n    range_of_numbers = range(2, 1000001)\n    count = 0\n\n    # Check each number in the range to see if it is prime\n    for num in range_of_numbers:\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n\n        # If we have found the nth prime number, return it\n        if count == n:\n            return num\n\n    # If we haven't found the nth prime number, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a variable to store the nth newman-shanks-williams prime number\n    prime = 0\n\n    # Initialize a variable to store the number of digits in n\n    digit_count = 0\n\n    # Loop until we find the nth newman-shanks-williams prime number\n    while digit_count < n:\n\n        # Check if n is a newman-shanks-williams prime number\n        is_prime = True\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                is_prime = False\n                break\n\n        # If n is a newman-shanks-williams prime number, update prime and increment n by 1\n        if is_prime:\n            prime = n\n            n += 1\n            digit_count = len(str(prime))\n        else:\n            n += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and is_prime(num + 1) and is_prime(num + 2):\n            count += 1\n        num += 1\n    return num\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 0\n    count = 0\n    while True:\n        i += 1\n        if is_prime(i):\n            count += 1\n            if count == n:\n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # initialize the first two newman prime numbers\n    newman_p1 = 2\n    newman_p2 = 3\n\n    # loop through the rest of the numbers up to n\n    for i in range(2, n+1):\n        # calculate the next newman prime number\n        next_newman_prime = 3 * newman_p1 + 1\n\n        # check if the next newman prime is divisible by any number between 2 and 2*i\n        for j in range(2, 2*i+1):\n            if next_newman_prime % j == 0:\n                break\n        else:\n            # if no divisor found, the next newman prime is a newman prime\n            newman_p1 = next_newman_prime\n\n    return newman_p1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    newman_prime = 2\n    count = 1\n    while count < n:\n        is_prime = True\n        for i in range(2, int(newman_prime ** 0.5) + 1):\n            if newman_prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            newman_prime += 1\n            count += 1\n    return newman_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the first newman-shanks-williams prime number\n    prime = 2\n    \n    # Loop through the remaining n-1 newman-shanks-williams primes\n    for i in range(1, n-1):\n        # Calculate the next newman-shanks-williams prime number\n        current_prime = prime**2 - 1\n        \n        # If the current newman-shanks-williams prime number is prime,\n        # print it and move on to the next one\n        while not is_prime(current_prime):\n            current_prime -= 1\n        \n        # Update the current prime number to the next newman-shanks-williams prime number\n        prime = current_prime\n        \n    # Return the last newman-shanks-williams prime number\n    return prime\n"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the number of elements in the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The number of elements in the two tuples must be equal\")\n        return\n    \n    # Perform element-wise division operation\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            print(\"Error: The second element in the tuple cannot be zero\")\n            return\n        else:\n            test_tup1[i] = test_tup1[i] / test_tup2[i]\n    \n    # Print the resultant tuple\n    print(\"Resultant tuple:\", test_tup1)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([x / y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the tuples are same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the tuples should be same!\")\n        return\n    \n    # Initialize a new list to store the result of the division\n    result_list = []\n    \n    # Loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Divide the corresponding element of the first tuple with the corresponding element of the second tuple\n        result = test_tup1[i] / test_tup2[i]\n        # Append the result to the result list\n        result_list.append(result)\n    \n    # Return the result list\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same number of elements.\")\n        return\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= type(test_tup2[i]):\n            print(\"Error: The elements should be of the same data type.\")\n            return\n        if type(test_tup1[i]) == int or type(test_tup1[i]) == float:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        else:\n            print(\"Error: Elements should be of integer or float data type.\")\n            return\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the list into two parts where the length of the first part of the list is L.\n    '''\n    # Split the list into two parts of length L\n    part1 = lst[:L]\n    part2 = lst[L:]\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(list1) < L:\n        return None\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) >= L:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)\n    else:\n        print(\"List must have at least L elements\")"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Splitting the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # Returning the resulting lists in a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if L > len(lst):\n        print(\"Error: L should be less than or equal to the length of the input list.\")\n        return\n    else:\n        part1 = lst[:L]\n        part2 = lst[L:]\n        return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the list into two parts where the length of the first part of the list is L.\n    It returns the resulting lists in a tuple.\n    '''\n    if L > len(lst):\n        print(\"The length of the list must be less than or equal to the length of the list.\")\n        return\n    elif L == 0:\n        return (lst[:], [])\n    else:\n        return (lst[:L], lst[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0 or L > len(list1):\n        return None\n    \n    # Initialize two empty lists to hold the first part and second part of the list\n    part1 = []\n    part2 = []\n    \n    # Loop through the original list and add each element to the appropriate part list\n    for i in range(len(list1)):\n        if i < L:\n            part1.append(list1[i])\n        else:\n            part2.append(list1[i])\n    \n    # Return the resulting lists as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    n = len(list1)\n    if L > n:\n        raise ValueError(\"L is greater than the length of the input list.\")\n    return list1[:L], list1[L:]"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \n    Parameters:\n    h_age (int): The height of the dog in inches.\n    \n    Returns:\n    age (float): The dog's age in dog's years.\n    \"\"\"\n    # Convert height from inches to centimeters\n    h_cm = h_age * 2.54\n    \n    # Calculate age in dog's years\n    age = h_cm / 12\n    \n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 1:\n        return \"Invalid input.\"\n    else:\n        dog_years = h_age * 7\n        return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_years = h_age * 7\n    return dog_age_years\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * (int(h_age) // 7)\n    if int(h_age) % 7!= 0:\n        dog_years += 1\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    age = h_age * 7\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age / 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert height in inches to meters\n    meters = h_age * 0.0254\n    \n    # calculate dog's age in dog's years\n    age = meters / 12\n    \n    # return the age\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Calculate dog's age in dog's years based on height\n    dog_years = 7 * (h_age / 100)\n\n    # Return the dog's age in dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n\n    # Calculate dog's years based on height in inches\n    dog_years = h_age / 12\n\n    # Convert the dog's years to whole and decimal parts\n    whole_years = int(dog_years)\n    decimal_years = dog_years - whole_years\n\n    # Return the dog's age in dog's years\n    return whole_years, decimal_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = step\n    L = []\n    i = 0\n    while i < len(S):\n        L.append(S[i:i+n])\n        i += n\n    return L"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = len(S)\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    res = []\n    while len(S) > 0:\n        if len(S) <= n:\n            temp = S\n            S = []\n            res.append(temp)\n        else:\n            temp = S[:n]\n            S = S[n:]\n            res.append(temp)\n    return res"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        return []\n    if len(S) <= step:\n        return [S]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step!= 0:\n        S += [None] * (step - len(S) % step) # add None values to make the length a multiple of n\n    return [S[i:i+step] for i in range(0, len(S), step)] # split the list into sublists of length step"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2*6 # Formula for lateral surface area of a cube using its side length"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    area = l ** 2\n    lateral_surface_area = 6 * area\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the area of the cube\n    area = 6 * l * l\n    # Calculate the lateral surface area\n    lateral = 2 * (area + 3 * l * l)\n    return lateral"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l + 12*l*l*l + 8*l*l*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6*l**2 # cube with side length l has a lateral surface area of 6l^2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6*l**2) + (l**2)\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    i = 1\n    while i <= n:\n        sum_squares += i**2\n        i += 2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    # initializing sum to 0\n    sum = 0\n\n    # loop through the first n odd numbers\n    for i in range(1, n+1, 2):\n        # adding the square of the current number to the sum\n        sum += i**2\n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initialize sum to zero\n    sum = 0\n\n    # loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n\n        # square the number and add to sum\n        sum += i*i\n\n    # return the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    \n    # loop through odd natural numbers\n    while count < n:\n        # add the square of the current natural number to the sum of squares\n        sum_of_squares += count*count\n        # increment the count by 1\n        count += 1\n        \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n    # initialize counter variable to zero\n    count = 1\n    # loop through odd natural numbers starting from 3\n    while count <= n:\n        # add square of the current odd natural number to the sum\n        sum += count**2\n        # increment the counter variable\n        count += 1\n    # return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # Initialize sum and count to zero\n    sum = 0\n    count = 0\n\n    # Loop through first n odd natural numbers\n    while count < n:\n        # Add the square of the current number to sum\n        sum += (count * count)\n        # Increment count by 1\n        count += 1\n\n    # Return the sum of the squares of the odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # Initialize a variable to store the sum of squares of odd numbers\n    sum_squares = 0\n\n    # Iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current odd number to the sum of squares\n        sum_squares += i*i\n\n    # Return the sum of squares of odd numbers\n    return sum_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        for i in range(n):\n            print(\"*\", end=\"\")\n        print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Convert n to string\n    n = str(n)\n    \n    # Initialize the result\n    result = \"\"\n    \n    # Loop through each digit of n\n    for digit in n:\n        # Convert the digit to integer\n        digit = int(digit)\n        \n        # Calculate the count of stars required for the current digit\n        count = 1\n        if digit > 0:\n            count = 3 * digit\n        \n        # Add the required number of stars to the result\n        for i in range(count):\n            result += \"*\"\n    \n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n-1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # loop to print n star numbers\n    for i in range(1, n+1): \n        # print n star number\n        print(\"*\" * i) "
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the counter variable\n    count = 1\n    \n    # Loop through the stars\n    while count <= n: \n        # Print the current star number\n        print(\"*\" * count) \n        # Increment the counter\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return \"*\"\n    else:\n        for i in range(1, n+1):\n            print(\"*\" * i)\n        return None"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n\n    Args:\n        n: an integer representing the index of the star to find.\n\n    Returns:\n        an integer representing then'th star number.\n    '''\n\n    # Initialize the first two numbers of the sequence to 1\n    prev = 1\n    curr = 2\n\n    # Calculate then'th number\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence\n        next_num = prev + curr\n        # Update the previous and current numbers\n        prev = curr\n        curr = next_num\n\n    # Return then'th number\n    return curr"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the result to 1\n    result = 1\n    \n    # loop n times\n    for i in range(n): \n        # add the result to i times the result\n        result += i * result\n        \n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1: \n        return \"*\"\n    else: \n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper() # convert the input character to uppercase\n    ascii_value = ord(k) # find the ASCII value using the ord() function\n    return ascii_value # return the ASCII value as the output"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # convert k to string\n    k = str(k)\n    # convert each character of the string to its ascii value\n    ascii_val = [ord(c) for c in k]\n    # return the sum of the ascii values\n    return sum(ascii_val)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    print(\"The ascii value of\", k, \"is\", ascii_value)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0  \n    for i in range(len(arr)):  \n        if i % 2 == 0 and arr[i] % 2 == 0:  \n            even_sum += arr[i]  \n    return even_sum  "
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_count = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n                even_count += 1\n    return even_sum, even_count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # Initialize variables to store the sum of even numbers and even indices\n    even_sum = 0\n    even_index = 0\n\n    # Loop through the list and check if the current element is even\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            # If the current element is even, add it to the even_sum and increment the even_index\n            even_sum += arr[i]\n            even_index += 1\n\n    # Return the sum of even numbers at even positions and the even_index\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = []\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if i % 2 == 0:\n                even_sum += num\n                even_index.append(i)\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # Initialize the sum variable\n    sum_even = 0\n\n    # Iterate over the list and add up even numbers at even positions\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n\n    # Return the sum of even numbers at even positions\n    return sum_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the first n even natural numbers\n    for i in range(n):\n        # calculate the i-th even natural number raised to the fifth power\n        power = 5 ** (i+1)\n        # add the result to the sum\n        sum += power\n    # return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1): \n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0 and i ** 5 == i * i * i * i * i:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # Initialize the sum variable to 0\n    total = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the sum of the i-th even natural number raised to the fifth power\n        power = (i**5)\n        total += power\n    \n    # Return the total sum of the first n even natural numbers that are raised to the fifth power\n    return total"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for i in range(len(test_list)):\n        result_list.append(test_list[i][-1])\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    rear_elements = []\n    for i, tup in enumerate(test_list):\n        rear_elements.append(tup[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    # create an empty list to store the rear elements\n    rear_list = []\n    \n    # loop through the list of tuples\n    for tup in test_list:\n        # append the rear element to the list\n        rear_list.append(tup[-1])\n    \n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length!\")\n        return None\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] -= test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] - test_tup2[i])\n        return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # initialize a new empty tuple to store the result\n    result = ()\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # check if the current index is in the second tuple\n        if i < len(test_tup2):\n            # subtract the corresponding elements from the first tuple and the second tuple\n            result += (test_tup1[i] - test_tup2[i],)\n        else:\n            # add the corresponding elements from the first tuple to the result\n            result += (test_tup1[i],)\n    # return the resulting tuple\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Initialize an empty list to hold the result\n    result = []\n\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the element from the second tuple\n        result.append(test_tup1[i] - test_tup2[i])\n\n    # Return the result\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Initialize the sum to zero\n    coeff_sum = 0\n    \n    # Iterate through the range of even indices\n    for i in range(2, n+1, 2):\n        # Calculate the binomial coefficient\n        coeff = math.comb(n, i)\n        \n        # If the index is even, add the coefficient to the sum\n        if i % 2 == 0:\n            coeff_sum += coeff\n    \n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(1, n+1):\n        sum_even_coeffs += math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_coeffs -= math.comb(n, i-2)\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum of even index binomial coefficients to zero\n    even_binomial_sum = 0\n    \n    # Loop through the even indices of n\n    for i in range(2, n+1, 2):\n        # Calculate the binomial coefficient for i\n        binomial_coeff = math.factorial(n)/(math.factorial(i-1)*math.factorial(n-i))\n        # Add the even index binomial coefficient to the sum\n        even_binomial_sum += binomial_coeff\n        \n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial_coeffs = 0\n\n    for i in range(1, n + 1):\n        sum_even_binomial_coeffs += math.comb(n, i)\n\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(2, n + 1):\n        for j in range(i, n + 1, i):\n            if j % 2 == 0:\n                sum += math.comb(n, j)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_sum += math.factorial(i) // math.factorial(i-2)\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    \"\"\"\n    # Calculate the even index binomial coefficients using recursion\n    def even_binomial_coeff_recursive(k, n):\n        if k == 0:\n            return 1\n        elif k % 2 == 0:\n            return 2 * even_binomial_coeff_recursive(k-2, n)\n        else:\n            return even_binomial_coeff_recursive(k-1, n)\n\n    # Calculate the sum of even index binomial coefficients using recursion\n    def sum_even_binomial_coeff_recursive(k, n):\n        if k == 0:\n            return 0\n        elif k % 2 == 0:\n            return even_binomial_coeff_recursive(k-1, n) + sum_even_binomial_coeff_recursive(k-2, n)\n        else:\n            return sum_even_binomial_coeff_recursive(k-1, n)\n\n    # Calculate the sum of even index binomial coefficients using a loop\n    def sum_even_binomial_coeff_loop(k, n):\n        sum_even = 0\n        for i in range(2*k, n+1, 2):\n            sum_even += math.comb(n, i-2)\n        return sum_even\n\n    # Call the appropriate function based on whether n is even or odd\n    if n % 2 == 0:\n        return sum_even_binomial_coeff_recursive(n//2, n)\n    else:\n        return sum_even_binomial_coeff_loop(n, n)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum of even index binomial coefficients to zero\n    sum_even_index_coeffs = 0\n    # Initialize the current sum of even index binomial coefficients to 1\n    current_sum_even_index_coeffs = 1\n    \n    # Loop through each index of the binomial coefficient matrix\n    for i in range(1, n+1):\n        # Calculate the binomial coefficient of i and n-i\n        binomial_coeff = math.comb(n, i)\n        # Check if the current binomial coefficient is even\n        if binomial_coeff % 2 == 0:\n            # Add the current binomial coefficient to the sum of even index binomial coefficients\n            sum_even_index_coeffs += binomial_coeff\n            # Check if the current sum of even index binomial coefficients is even\n            if current_sum_even_index_coeffs % 2 == 0:\n                # If it is, update the current sum of even index binomial coefficients to the previous sum\n                current_sum_even_index_coeffs = sum_even_index_coeffs\n                # Reset the sum of even index binomial coefficients to zero\n                sum_even_index_coeffs = 0\n    \n    # Return the final sum of even index binomial coefficients\n    return current_sum_even_index_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2, n+1):\n        binomial_coeff = (math.factorial(n) // (math.factorial(i-1) * math.factorial(n-i+1)))\n        if i % 2 == 0:\n            coeff_sum += binomial_coeff\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (3.14 * r**2 * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (1/3) * pi * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (1/3)*3.14159*(r**2)*h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3)*pi*(r**2)*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159 * r**2 * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2 * 3.14159 * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (3.14 * r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculating the volume of the cylinder\n    V = (1/3) * (3.14) * (r**2) * (h)\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3.14*(r**2))*(h/3)\n    return vol"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # Filter the dictionary to only include entries with values greater than or equal to n\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    i = 0\n    while i < len(test_tup):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n        i += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    for i in range(n+1):\n        decagonal += i*i\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        return 4 * (n - 1) ** 2 + 1\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    return (n * (3 * n - 1)) // 2\n\nn = int(input(\"Enter the number of rows: \"))\n\nfor i in range(1, n+1):\n    print(\"*\" * is_num_decagonal(i))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal_num = 0\n    last_digit = 1\n    # Loop through each digit of the decagonal number\n    for i in range(1, n+1):\n        # Calculate the current digit of the decagonal number\n        digit = (last_digit * (2*i-1))//(1*(i+1))\n        # Append the current digit to the string\n        decagonal_num = decagonal_num * 10 + digit\n        # Update the last digit for the next iteration\n        last_digit = digit\n    # Check if the decagonal number is palindromic\n    if decagonal_num == int(str(decagonal_num)[::-1]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(n):\n        decagonal_num += (i**2 + 1)\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 1\n    b = 2\n    count = 0\n    while count < n:\n        a += b\n        count += 1\n    return a - b"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_nums = []\n    for i in range(1, n+1):\n        decagonal_nums.append((i * (i + 1)) // 2)\n    return decagonal_nums[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    dec_num = 0\n    while i <= n:\n        dec_num += i\n        i += 1\n    return dec_num\n\nn = 5\nprint(is_num_decagonal(n)) # Output: 55"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    else:\n        # Initialize the sum of squares\n        sum_squares = 0\n        \n        # Loop through the number of rows to find the nth decagonal number\n        for i in range(1, n+1):\n            # Calculate the sum of squares in the i-th row\n            row_sum_squares = 10 * (i*i)\n            \n            # Add the sum of squares to the sum of squares\n            sum_squares += row_sum_squares\n        \n        # Return the nth decagonal number\n        return sum_squares"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements are unique, False otherwise.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = []\n    for element in test_list:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    if unique:\n        print(\"The list is unique.\")\n    else:\n        print(\"The list is not unique.\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # Check if the length of the unique set is equal to the length of the original list\n    return len(unique_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = []\n    for element in test_list:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have the same length.\")\n        return\n    \n    # Subtract each element from each other\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists should have the same length.\")\n    else:\n        result = [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list containing the element-wise difference between them.\n    '''\n    # check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists do not have the same length.\")\n        return\n    \n    # initialize a new list to store the result\n    result = []\n    \n    # iterate over the two lists\n    for i in range(len(nums1)):\n        # subtract the two elements and append the result to the result list\n        result.append(nums1[i] - nums2[i])\n    \n    # return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Parameters:\n    nums1: List of numbers\n    nums2: List of numbers\n\n    Returns:\n    result: List of differences between the two lists.\n    \"\"\"\n\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return 'The lists are not of equal length'\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must have the same length\"\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [digits.count(d) for d in range(10)]\n    return all(freq[d] <= d for d in range(10))"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # convert the integer to a string\n    num_str = str(n)\n    # initialize a dictionary to store the frequency of each digit\n    digit_freq = {}\n    # loop through each character in the string and update the frequency of each digit\n    for char in num_str:\n        if char in digit_freq:\n            digit_freq[char] += 1\n        else:\n            digit_freq[char] = 1\n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for digit, freq in digit_freq.items():\n        if freq > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10 # initialize a list of zeros to store the frequency of each digit in the integer\n    for digit in str(n): # iterate over each digit in the integer\n        freq[int(digit)] += 1 # increment the frequency of the digit in the list\n    for digit in freq: # iterate over each digit in the frequency list\n        if digit > n: # if the frequency of the digit is greater than the integer itself\n            return False\n    return True # if all digits have a frequency of less than or equal to itself, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # convert the integer to a string\n    str_n = str(n)\n    \n    # create a dictionary to store the frequency of each digit\n    digit_freq = {}\n    \n    # loop through each character in the string\n    for char in str_n:\n        # if the character is already in the dictionary, increment its count\n        if char in digit_freq:\n            digit_freq[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            digit_freq[char] = 1\n            \n    # loop through each digit in the integer and check if its frequency is less than or equal to the digit itself\n    for digit in str_n:\n        # if the frequency of the digit is less than or equal to the digit itself, return True\n        if digit_freq[digit] <= int(digit):\n            return True\n    \n    # if no digit has a frequency less than or equal to itself, return False\n    return False"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    \n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n            \n    for d in freq:\n        if freq[d] > d:\n            return False\n        \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in range(10):\n        freq[i] = 0\n    while n > 0:\n        digit = n % 10\n        freq[digit] += 1\n        n //= 10\n    for i in freq:\n        if freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    count = [0] * 10\n    for digit in str(n):\n        count[int(digit)] += 1\n    for i in range(1, 10):\n        if count[i] > count[i-1]:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Initialize a dictionary to store the frequency of each digit\n    digit_freq = {}\n    \n    # Iterate through each digit in the integer\n    for digit in str(n):\n        # Check if the digit is already in the dictionary\n        if digit in digit_freq:\n            # Increment the frequency of the digit in the dictionary\n            digit_freq[digit] += 1\n        else:\n            # Add the digit to the dictionary with frequency 1\n            digit_freq[digit] = 1\n            \n    # Iterate through each digit in the integer again\n    for digit in str(n):\n        # Check if the frequency of the digit in the dictionary is greater than or equal to the digit itself\n        if digit_freq[digit] >= int(digit):\n            # The digit is not valid\n            return False\n            \n    # The digit is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    num = n\n    \n    while num > 0:\n        freq[num % 10] += 1\n        num //= 10\n    \n    for i in range(10):\n        if freq[i] > freq[n % 10]:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    # Initialize a variable to keep track of whether all elements are equal\n    all_elements_equal = True\n    \n    # Loop through each item in the list\n    for item in list:\n        # If the current item is not equal to the given element, set the variable to False\n        if item!= element:\n            all_elements_equal = False\n    \n    # Return the value of the variable, indicating whether all elements are equal or not\n    return all_elements_equal"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check if the list is empty\n    if len(list) == 0:\n        return True\n\n    # Check if all the elements in the list are equal to the given element\n    for item in list:\n        if item!= element:\n            return False\n\n    # If all the elements are equal, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list[i] == element for i in range(len(list)))"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        return check_element(list[1:], element) if list[0] == element else False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(\"All elements in the list are equal to the given element.\")\n    else:\n        print(\"Not all elements in the list are equal to the given element.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?:b{2,3})'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=(b{2,3}))'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        print(\"The string contains the pattern 'a[b]{2,3}'\")\n    else:\n        print(\"The string does not contain the pattern 'a[b]{2,3}'\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    This function checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = re.compile(r'a.*[b]{2,3}')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[^b]*b{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b{{2,3}})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"a[^b]*b(?=(?:[^b]*b){2,3})b*\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize variables to keep track of the maximum sum and its index\n    max_sum = float('-inf')\n    max_index = -1\n\n    # Loop through the input array and keep track of the sum of subarrays of length k\n    # until we reach the end of the array\n    for i in range(n-k+1):\n        # Compute the sum of the subarray of length k\n        subarray_sum = sum(a[i:i+k])\n\n        # If the current sum is greater than the maximum sum found so far, update the maximum sum and its index\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n            max_index = i\n\n    # Return the maximum sum found and its index\n    return max_sum, max_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(k):\n        current_sum += a[i]\n\n    max_sum = max(max_sum, current_sum)\n\n    for i in range(n-k):\n        current_sum = current_sum - a[i] + a[i+k]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize a variable to store the largest sum\n    max_sum = float('-inf')\n\n    # Initialize a variable to store the current sum\n    curr_sum = 0\n\n    # Loop through the array a n times\n    for i in range(n): \n\n        # Repeat the current element k times\n        for j in range(k): \n\n            # Add the current element to the current sum\n            curr_sum += a[i]\n\n        # Check if the current sum is greater than the max sum so far\n        if curr_sum > max_sum: \n\n            # Update the max sum\n            max_sum = curr_sum\n\n        # Reset the current sum\n        curr_sum = 0\n\n    # Return the max sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')  # initialize maximum sum\n    current_sum = 0  # initialize current sum\n    repeat_count = 0  # initialize repeat count\n    \n    # iterate over the array\n    for i in range(n):\n        current_sum += a[i]  # add current element to the current sum\n        \n        # check if current sum is greater than maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            repeat_count = 1\n        \n        # check if current sum is greater than or equal to the maximum sum and repeat count is less than k\n        elif current_sum == max_sum and repeat_count < k:\n            max_sum = current_sum\n            repeat_count += 1\n            \n        # if current sum is not greater than maximum sum or equal to the maximum sum and repeat count is equal to k, subtract the element from the current sum\n        else:\n            current_sum -= a[i]  # subtract current element from the current sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    max_sum_index = 0\n\n    # Iterate through the array and calculate the sum of the current subarray\n    for i in range(n):\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum and its index\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_index = i\n\n        # If the current sum is greater than the maximum sum and the subarray contains k repeats of the array, update the maximum sum and its index\n        if current_sum > max_sum and (i-max_sum_index+1) % k == 0:\n            max_sum = current_sum\n            max_sum_index = i\n\n    # Return the maximum sum of the subarray\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    This function finds the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Find the maximum subarray sum\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    for i in range(n):\n        if i >= k:\n            # Add the previous element to the current sum\n            current_sum += a[start_index - k]\n        # Update the maximum subarray sum and the start index\n        max_sum = max(max_sum, current_sum)\n        current_sum = 0\n        start_index = i\n    # Check if the sum of the last k elements is greater than the maximum sum\n    current_sum += a[-1] * k\n    max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a modified array by repeating the original array k times\n    modified_array = [0]*(n*k)\n    for i in range(n):\n        modified_array[i*k:(i+1)*k] = a\n    # find the maximum subarray sum in the modified array\n    max_sum = float('-inf')\n    for i in range(n*k):\n        current_sum = 0\n        for j in range(k):\n            current_sum += modified_array[i+j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    mod_a = [0] * (n * k)  # modified array\n    mod_a[0] = a[0]  # first element of modified array\n\n    for i in range(1, n * k):\n        mod_a[i] = a[i % n]\n\n    max_sum = max(mod_a)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    start_sum = float('-inf')\n    end_sum = float('-inf')\n\n    for i in range(n-k+1):\n        current_sum = a[i]\n        for j in range(k):\n            current_sum += a[i+j]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_sum = a[i]\n            end_sum = a[i+k-1]\n\n    return max_sum, start_sum, end_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the maximum subarray sum and the current subarray sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Repeat the given array k times\n    for i in range(k):\n        # Initialize the current subarray sum as the maximum subarray sum\n        current_sum = max_sum\n        \n        # Iterate through the array and add the current element to the current subarray sum\n        for j in range(n):\n            current_sum += a[j]\n            \n        # Update the maximum subarray sum if the current subarray sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes an integer n as input and returns the sum of squares of the first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    \n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        i += 1\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_nums = []\n    for i in range(2, n+1, 2):\n        even_nums.append(i)\n    return sum([num**2 for num in even_nums])"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_numbers = [i for i in range(2, n+1, 2)]\n    squares = [i**2 for i in even_numbers]\n    return sum(squares)"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n    \n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of i to the sum variable\n        sum += i*i\n    \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_squares = 0\n    for i in range(2, n+1, 2):\n        even_squares += i**2\n    return even_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):   # iterate only over even natural numbers starting from 2\n        sum += i*i  # add the square of i to the sum\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i ** 2\n    return sum_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or not max_lengths:\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        lengths = [len(i) for i in lst]\n        if len(lengths) == max(lengths):\n            max_lengths.append(lengths)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    maxLengthList = []\n\n    for i in range(len(list1)):\n        if len(list1[i]) > maxLength:\n            maxLength = len(list1[i])\n            maxLengthList = [list1[i]]\n        elif len(list1[i]) == maxLength:\n            maxLengthList.append(list1[i])\n\n    return maxLengthList"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum length\n    max_lengths = []\n    # Iterate over each sublist in the list\n    for sublist in list1:\n        # Initialize a counter to keep track of the number of elements in the sublist\n        count = 0\n        # Iterate over each element in the sublist\n        for element in sublist:\n            # Increment the counter\n            count += 1\n        # If the counter is greater than the current maximum length, update the maximum length\n        if count > max_lengths[0]:\n            max_lengths = [count]\n        elif count == max_lengths[0]:\n            max_lengths.append(count)\n    # Return the maximum length list\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list of maximum length.\n    '''\n    lengths = [len(sublist) for sublist in list1]\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths) or not max_lengths:\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    max_len = max(lengths)\n    lst_max_len = [lst for lst in list1 if len(lst) == max_len]\n    return lst_max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    \n    # Base cases\n    for i in range(1, n+1):\n        dp[i][0] = 1\n        dp[i][1] = 1 if i > 0 else 0\n\n    for j in range(2, k+1):\n        dp[0][j] = 1 if j > 0 else 0\n\n    for i in range(1, n+1):\n        for j in range(2, k+1):\n            if i == j:\n                dp[i][j] = dp[i][j-1]\n            elif i > j:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i][j-1] + dp[i-1][j-1]\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a list to store the number of ways for each color\n    ways = [0] * k\n\n    # Initialize a dictionary to store the count of each color\n    color_count = {color: 0 for color in range(k)}\n\n    # Iterate through the fence\n    for i in range(n):\n        # Get the color of the current post\n        current_color = i % k\n\n        # Check if the current post has the same color as the previous one\n        if i > 0 and current_color == color_count[current_color - 1]:\n            # Update the count of the color of the current post\n            ways[current_color] += 1\n\n            # If there are at most 2 adjacent posts with the same color, update the count of the color of the previous post\n            if color_count[current_color] >= 2:\n                ways[current_color - 1] += 1\n\n        # Update the count of the current color\n        color_count[current_color] += 1\n\n    # Return the number of ways of painting the fence with at most 2 adjacent posts with the same color\n    return ways[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a dictionary to store the number of ways to paint the fence for each color\n    ways = {}\n\n    # Initialize a variable to store the number of ways to paint the fence for the first color\n    ways[0] = 1\n\n    # Loop through the remaining k-1 colors\n    for i in range(1, k):\n        # Calculate the number of ways to paint the fence for the current color\n        ways[i] = (n - i + 1) * ways[i - 1]\n\n    # Calculate the number of ways to paint the fence for the last color\n    ways[k-1] = n\n\n    # Initialize a variable to store the number of ways to paint the fence for the second last color\n    ways[k-2] = (n - (k-1) + 1) * ways[k-2]\n\n    # Return the number of ways to paint the fence for the last two colors\n    return ways[k-2] * ways[k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 0 or k <= 0:\n        return 0\n    elif n == 1 or k == 1:\n        return n\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # If the fence consists of n posts, then there are k! ways to paint it using k colors\n    if n == k:\n        return k * (k - 1) // 2\n\n    # If the fence has less than 2 posts, then there is no way to paint it using k colors\n    elif n < 2:\n        return 0\n\n    # If the fence has at least 2 posts, then there are 2! ways to paint the first two posts using k colors\n    else:\n        return 2 * count_no_of_ways(n - 1, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize a dictionary to store the number of ways for each color\n    ways_dict = {}\n    for i in range(1, k+1):\n        ways_dict[i] = [0] * k\n    ways_dict[1][1] = 1  # First color is always different from the last color\n\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            for color in range(2, k+1):\n                # Check if the color is different from the previous color\n                if color!= j:\n                    ways_dict[i][color] += ways_dict[i-1][color-1]\n\n    return ways_dict[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    # initialize a list to store the count of ways for each color\n    count = [0] * k\n    \n    # initialize a list to store the count of ways for each subsequence of colors\n    subseq_count = [0] * (k*k)\n    \n    # base case: if n is 1, then there is only one way to paint the fence\n    if n == 1:\n        return 1\n    \n    # base case: if n is 0, then there are no ways to paint the fence\n    if n == 0:\n        return 0\n    \n    # initialize the count of ways for the first color as 1\n    count[0] = 1\n    \n    # loop through all the colors and compute the count of ways for each subsequence\n    for color in range(1, k):\n        for i in range(n-1):\n            # compute the next subsequence by considering the previous subsequence\n            next_subseq_count = 0\n            for j in range(color):\n                next_subseq_count += count[j]\n            # add the count for this subsequence to the total count\n            subseq_count[color*color + i] = next_subseq_count + count[color]\n    \n    # return the count for the last subsequence\n    return subseq_count[k*k - 1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    # Base case: if n == 0, return 0 as there can be 0 ways to paint n posts\n    if n == 0:\n        return 0\n    \n    # Base case: if k == 1, return 1 as there can be 1 way to paint n posts\n    if k == 1:\n        return 1\n    \n    # Initialize a 2D array to store the number of ways to paint n posts using k colors\n    ways = [[0] * (k + 1) for i in range(n + 1)]\n    \n    # Fill the array in bottom-up manner\n    for i in range(n + 1):\n        for j in range(k + 1):\n            if i == 0 or j == 0: # if i == 0, there are only 0 ways to paint 0 posts\n                ways[i][j] = 1\n            elif j == 1: # if j == 1, there are only 1 ways to paint 1 post\n                ways[i][j] = 1\n            else: # if i > 0 and j > 1, there are ways to paint i posts using j colors\n                ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n    \n    # Return the value at the bottom-right corner of the array\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 3 or k < 2: # base cases\n        return 0\n    elif n == 3: # special case for 3 posts and 2 colors\n        return 2\n    else:\n        ways = count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)\n        if n > 2 and n % 2 == 1: # condition to handle odd-sized fence\n            ways -= count_no_of_ways(n-3, k) # condition to exclude 3rd post\n        return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    # define a dictionary to store the number of ways for each number of colors\n    ways = {1: 1}  # 1 way to paint the fence with 1 color\n    for i in range(2, k + 1):\n        ways[i] = 0  # initialize the number of ways to 0 for each number of colors\n    \n    # iterate through all possible number of colors\n    for j in range(1, n + 1):\n        for i in range(2, k + 1):\n            # check if the adjacent posts have the same color\n            if (j - 1) % i == 0:\n                # if yes, add the number of ways from j-1 to i-1 for all colors\n                ways[i] += ways[j - 1] * ways[i - 1]\n                \n    return ways[k]  # return the total number of ways for k colors\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # Find the quotient of n and m using integer division\n    q = n // m\n\n    # If the remainder is non-zero, add 1 to the quotient and continue iterating until the remainder is zero\n    while m!= 0:\n        n, m = m, n % m\n        q += 1\n\n    # Return the final quotient\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Error: Division by zero is not allowed.\"\n    else:\n        return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  # integer division to get the quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        n, m = m, n\n    quotient = 0\n    remainder = n\n    while remainder >= m:\n        quotient += 1\n        remainder -= m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    This function takes two numbers as input, n and m, and returns the quotient of n divided by m.\n    The quotient is rounded down to the nearest integer.\n\n    Input:\n    n: a positive integer\n    m: a positive integer\n\n    Output:\n    The quotient of n divided by m rounded down to the nearest integer.\n    '''\n\n    # Check if m is zero, if so return -1\n    if m == 0:\n        return -1\n\n    # Find the quotient of n divided by m using integer division\n    quotient = n // m\n\n    # If the remainder is greater than or equal to m, add 1 to the quotient\n    if n % m >= m:\n        quotient += 1\n\n    # Return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2  # calculate the semi-perimeter\n    c = math.sqrt(s * (s - w) * (s - h))  # calculate the hypotenuse\n    third_side = math.sqrt(s * (s - w) * (s - h) * (s - c))  # calculate the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the hypotenuse\n    hypo = math.sqrt(w**2 + h**2)\n    \n    # Calculate the length of the other side\n    other = w + hypo\n    \n    return other"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5  # Formula for the square root\n    c = math.sqrt(w**2 + h**2)  # Formula for the cosine\n\n    return round(s - c, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    c = (w**2 + s**2 - h**2)**0.5\n    return round(c, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Formula for area of triangle:\n    # area = sqrt(s * (s-w) * (s-h) * (s-l))\n    # where s is the semi-perimeter of the triangle\n    s = 0.5 * w + 0.5 * h\n    area = math.sqrt(s * (s - w) * (s - h) * (s - w))\n    # Using the formula for the area of a right triangle, we can find the third side:\n    third_side = math.sqrt(area)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    return side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function finds the third side of a right angled triangle given its width and height.\n\n    Args:\n    w (float): The width of the right angled triangle.\n    h (float): The height of the right angled triangle.\n\n    Returns:\n    float: The third side of the right angled triangle.\n    \"\"\"\n    # Use Heron's formula to find the semi-perimeter of the right angled triangle\n    s = (w + h) / 2\n    # Use the Pythagorean theorem to find the square of the length of the third side\n    t = math.sqrt(s * (s - w) * (s - h) * (s - w + h))\n    # Return the third side of the right angled triangle\n    return t"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2))"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize a variable to store the maximum value\n    max_val = None\n\n    # iterate through the list and compare each value to the current max value\n    for value in listval:\n        if max_val is None or value > max_val:\n            max_val = value\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize the maximum value to the first element of the list\n    max_val = listval[0]\n\n    # Iterate through the rest of the list and update the maximum value if a larger value is found\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    maxval = listval[0]\n    for val in listval[1:]:\n        if val > maxval:\n            maxval = val\n    \n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]  # initialize the maximum value to be the first element of the list\n    for i in range(1, len(listval)):  # iterate over the list from the second element to the end\n        if listval[i] > max_val:  # if the current element is greater than the maximum value\n            max_val = listval[i]  # update the maximum value to be the current element\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in listval:\n        if i > max_num:\n            max_num = i\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0] # initialize maxval with the first value in the list\n    for i in range(1, len(listval)): # loop through the rest of the list\n        if listval[i] > maxval: # if the current value is greater than maxval\n            maxval = listval[i] # update maxval to the current value\n    return maxval # return the maxval as the output"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for num in listval:\n        if max_num is None or num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')  # initialize the maximum value as negative infinity\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize variables\n    div_sum = 0\n    i = 1\n    # loop through all numbers from 1 to the square root of the number\n    while i*i <= number:\n        # if the number is divisible by i, add it to the sum\n        if number % i == 0:\n            div_sum += i\n        # increment the loop variable\n        i += 1\n    # add the last number to the sum\n    div_sum += number\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    divisor_sum = 0\n    i = 1\n    while i <= number:\n        if number % i == 0:\n            divisor_sum += i\n        i += 1\n    \n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(0, i):\n            if arr[j] > arr[i]:\n                inv_count += i - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] <= right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\ndef get_Inv_Count(arr):\n    merge_sort(arr)\n    inv_count = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                inv_count += (n - j - 1)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n  \n    # Traverse the array twice \n    # first to find the size of the subarray \n    # with 0 inversions \n    # second to find the actual inversions \n    count = 0 \n  \n    for i in range(n): \n        # Find the maximum element in the \n        # subarray starting from index i \n        max_index = i \n        for j in range(i+1, n): \n            if arr[j] > arr[max_index]: \n                max_index = j \n  \n        # Swap the maximum element with \n        # the first element of the subarray \n        arr[i], arr[max_index] = arr[max_index], arr[i] \n  \n        # Count inversions in the subarray \n        left = i+1 \n        right = n-1 \n        while left < right: \n            if arr[left] > arr[i] and arr[right] > arr[i]: \n                count += right - left \n                left += 1 \n            elif arr[left] > arr[i]: \n                right -= 1 \n            else: \n                left += 1 \n  \n        # Move the index of the maximum element \n        # to the end of the subarray \n        if i!= max_index: \n            arr[max_index], arr[i] = arr[i], arr[max_index] \n  \n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Store the length of the array\n    n = len(arr)\n    # Initialize two pointers for left and right\n    i, j = 0, n - 1\n    # Initialize an empty list to store the inversions\n    inv_count = []\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    while i < j:\n        # Check if the left array element is greater than the right array element\n        if arr[i] > arr[j]:\n            # If yes, then add the inversion to the list and increment both the pointers\n            inv_count.append((i, j))\n            i += 1\n            j -= 1\n        elif arr[i] < arr[j]:\n            # If no, then increment the left pointer\n            i += 1\n        else:\n            # If the left array element is equal to the right array element, then increment both the pointers\n            i += 1\n            j -= 1\n\n    # Return the list of inversions\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n\n    # Sort the array in increasing order\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                i = 0\n\n    # Count inversions\n    count = 0\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                count += i - j\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inversion_count = 0 \n    \n    # Sort the array \n    arr.sort() \n    \n    # Traverse the array to count inversions \n    i = 0 \n    j = n - 1 \n    \n    while i < j: \n        # Find the maximum element in the subarray arr[i:j] \n        if arr[i] > arr[j]: \n            inversion_count += j - i \n            i += 1 \n        else: \n            j -= 1 \n        \n    return inversion_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # initialize the count to zero\n    inv_count = 0\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # calculate the inversions\n    for i in range(1, n):\n        left = 0\n        right = i - 1\n\n        # find the left and right subarrays that contain the largest element\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] < arr[i]:\n                left = mid + 1\n            else:\n                right = mid\n\n        # calculate the inversion count in the left subarray\n        inv_count += i - left\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # If the array has less than or equal to 1 element, return 0\n    if n <= 1:\n        return 0\n    # If the array has 2 or more elements, sort the array using selection sort\n    else:\n        for i in range(n - 1):\n            min_idx = i\n            for j in range(i + 1, n):\n                if arr[j] < arr[min_idx]:\n                    min_idx = j\n            arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        # Count the inversions by counting the number of swaps made in the sorting process\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if arr[i] > arr[j]:\n                    count += (j - i)\n        return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Count the inversions using two pointers\n    left = 0\n    right = n-1\n    while left < right:\n        # If left element is greater than the right element, then there is an inversion\n        if arr[left] > arr[right]:\n            count += (right - left)\n            left += 1\n        else:\n            right -= 1\n    \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    # counting inversions using a divide-and-conquer approach\n    def merge_sort(arr):\n        if n <= 1:\n            return arr\n        mid = n // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    def merge(left, right):\n        i = j = k = 0\n        inv_count = 0\n        result = []\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result, inv_count\n\n    arr = merge_sort(arr)\n    return arr[1]"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initialize an empty list to hold the flattened version of the list\n    flattened_list = []\n\n    # Loop through each element in the input list\n    for element in list1:\n        # If the element is a list, recursively call the flatten_list function on it\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        # If the element is not a list, add it to the flattened_list\n        else:\n            flattened_list.append(element)\n\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for data in stdata:\n        max_dict[data[1]] += data[0]\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    # Create a defaultdict to store the sales data\n    sales_data = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for item in stdata:\n        # Add the quantity to the dictionary\n        sales_data[item[0]] += item[1]\n    \n    # Initialize variables to store the maximum aggregate and the total quantity sold\n    max_agg = float('-inf')\n    total_qty = 0\n    \n    # Iterate through the dictionary to find the maximum aggregate and the total quantity sold\n    for item in sales_data.items():\n        if item[1] > max_agg:\n            max_agg = item[1]\n        total_qty += item[1]\n    \n    # Return the maximum aggregate and the total quantity sold\n    return max_agg, total_qty"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the maximum aggregate for each customer\n    max_aggs = defaultdict(int)\n\n    # iterate through the list of tuples\n    for customer, amount in stdata:\n        # update the maximum aggregate for the customer\n        max_aggs[customer] = max(amount, max_aggs[customer])\n\n    # iterate through the dictionary to find the customer with the maximum aggregate\n    max_customer = None\n    max_agg = 0\n    for customer, agg in max_aggs.items():\n        if agg > max_agg:\n            max_agg = agg\n            max_customer = customer\n\n    # return the maximum aggregate for the customer with the maximum aggregate\n    return max_agg, max_customer"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the count of each customer\n    customer_count = defaultdict(int)\n\n    # Iterate through the list of tuples and update the count of each customer\n    for item in stdata:\n        customer_count[item[0]] += item[1]\n\n    # Create a list of tuples with the customer and their count\n    customer_list = customer_count.items()\n\n    # Sort the list of tuples based on the count in descending order\n    customer_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Calculate the maximum aggregate\n    max_agg = sum([x[1] for x in customer_list])\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[0]] += item[1]\n    max_list = sorted(max_dict.items(), key=lambda x: x[1], reverse=True)\n    return max_list[0][0]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(float)\n    for item in stdata:\n        max_dict[item[1]] += item[0]\n    max_aggr = max(max_dict.values())\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for t in stdata:\n        for item, price in t:\n            max_agg[item] += price\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the sum of items in each category\n    cat_sum = defaultdict(int)\n\n    # iterate through the list of tuples\n    for item, price in stdata:\n        # add the price to the sum of items in the category\n        cat_sum[item] += price\n\n    # initialize the maximum aggregate variable\n    max_agg = float('-inf')\n\n    # iterate through the categories and compare the sum to the maximum aggregate\n    for cat, sum_ in cat_sum.items():\n        if sum_ > max_agg:\n            max_agg = sum_\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the count of each item in the list\n    counts = defaultdict(int)\n\n    # Loop through the list and update the count for each item\n    for item in stdata:\n        counts[item] += 1\n\n    # Calculate the maximum aggregate by finding the maximum value in the counts dictionary\n    max_aggregate = max(counts.values())\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value.\n    '''\n    # create a defaultdict to store the count of each stock\n    stock_counts = defaultdict(int)\n    \n    # iterate through the list of tuples and increment the count for each stock\n    for stock, price in stdata:\n        stock_counts[stock] += 1\n    \n    # calculate the maximum aggregate value by iterating through the dictionary and keeping track of the maximum count\n    max_aggregate = 0\n    for count in stock_counts.values():\n        if count > max_aggregate:\n            max_aggregate = count\n    \n    return max_aggregate"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        # extract the first n bits\n        num = i & ((1 << n) - 1)\n        # extract the last n bits\n        last_n = i >> n\n        # add the two numbers and check if the sum is equal\n        if num + last_n == 2**(2*n)-1:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        temp = bin(i)[2:].zfill(n)\n        if sum(map(int, temp[:n])) == sum(map(int, temp[-n:])):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize count and set of binary sequences\n    count = 0\n    binary_seq = set()\n\n    # Generate all binary sequences of length 2n\n    for i in range(2**n):\n        # Convert integer i to binary string\n        binary = bin(i)[2:]\n\n        # Check if binary string sums to 2n\n        if int(binary[:n]) + int(binary[n:]) == 2**n:\n            # Add binary sequence to set and increment count\n            binary_seq.add(binary)\n            count += 1\n\n    return count, binary_seq"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Define the length of the sequence\n    length = 2 * n\n    \n    # Initialize the count to 0\n    count = 0\n    \n    # Generate all possible binary sequences of length length\n    for i in range(2**length):\n        \n        # Extract the first n bits and last n bits from the sequence\n        first_n = i // 2**(length - n)\n        last_n = i % 2**(length - n)\n        \n        # Check if the sum of first n bits is same as the sum of last n bits\n        if first_n == last_n:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2 ** n):\n        # Get the binary representation of i\n        binary_i = bin(i)[2:]\n        # Get the sum of the first n bits\n        sum_first_n = sum([int(bit) for bit in binary_i[:n]])\n        # Get the sum of the last n bits\n        sum_last_n = sum([int(bit) for bit in binary_i[-n:]])\n        # Check if the sum of the first n bits is equal to the sum of the last n bits\n        if sum_first_n == sum_last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n):\n        count += 1\n        for j in range(1, 2**n):\n            if i + j == 2**n - 1:\n                count -= 1\n                break\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        bit_sum = 0\n        j = 0\n        while j < n:\n            bit_sum += (i >> j) & 1\n            j += 1\n        if bit_sum == i & ((1 << n) - 1):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    def binary_to_decimal(binary):\n        decimal = 0\n        for i in range(len(binary)):\n            decimal += int(binary[i]) * (2**i)\n        return decimal\n\n    def is_subsequence(binary, subseq):\n        for i in range(len(subseq)):\n            if binary[i]!= subseq[i]:\n                return False\n        return True\n\n    def count_binary_sequences(n):\n        count = 0\n        for i in range(2**(n-1)):\n            binary = bin(i)[2:].zfill(n)\n            for j in range(2**(n-1)):\n                subseq = bin(j)[2:].zfill(n)\n                if is_subsequence(binary, subseq) and binary_to_decimal(binary) == binary_to_decimal(subseq):\n                    count += 1\n        return count\n\n    return count_binary_sequences(n)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(1, 2**n+1):\n        if i % 2 == 0:\n            count += 1\n    return count\n\nprint(count_binary_seq(5))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    def binary_seq_sum(seq):\n        return sum([int(x) for x in seq])\n\n    def binary_seq_count(seq, length):\n        return seq.count('0' * length) * 2\n\n    def get_binary_seq(n):\n        return [str(i) for i in range(2 ** n)]\n\n    count = 0\n    seq_len = 2 * n\n    for i in range(2 ** (n - 1)):\n        for seq in get_binary_seq(n):\n            if binary_seq_sum(seq[:n]) == binary_seq_sum(seq[n:]):\n                count += binary_seq_count(seq, n)\n\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d.keys():\n        if isinstance(d[key], dict):\n            depth = 1 + dict_depth(d[key])\n            if depth > max_depth:\n                max_depth = depth\n        else:\n            max_depth = 0\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        max_depth = 0\n        for key in d.keys():\n            value = d[key]\n            if isinstance(value, dict):\n                depth = dict_depth(value) + 1\n                if depth > max_depth:\n                    max_depth = depth\n        return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n            max_depth = max(max_depth, dict_depth(value))\n            current_depth -= 1\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    current_depth += 1\n                    max_depth = max(max_depth, dict_depth(item))\n                    current_depth -= 1\n        else:\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            current_depth -= 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = dict_depth(value) + 1\n        else:\n            new_depth = 1\n        if new_depth > max_depth:\n            max_depth = new_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Base case\n    if not isinstance(d, dict):\n        return 1\n    \n    # Recursive case\n    depth = 1\n    for value in d.values():\n        depth = max(depth, dict_depth(value))\n    \n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0  # non-dictionary inputs are at depth 0\n    else:\n        return 1 + max(dict_depth(v) for k, v in d.items())"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            count += 1 + dict_depth(d[key])\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = 1 + dict_depth(v)\n            max_depth = max(max_depth, depth)\n        else:\n            max_depth = max(max_depth, 0)\n    return max_depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes a list of integers arr, list of ranges ranges,\n    number of rotations rotations, and the index of the element to find.\n    The function returns the element at the given index after number of rotations.\n    '''\n    if rotations == 0:\n        return arr[index]\n    else:\n        return find_Element(arr, ranges, rotations-1, (index + ranges[index]) % len(arr))"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array of elements arr, a list of range tuples ranges, and a list of rotation tuples rotations, and an index.\n    It finds the element at the given index after rotations by applying the rotations to the array.\n    \"\"\"\n    result = arr[index]\n    for i in range(len(ranges)):\n        start, end = ranges[i]\n        rotation, direction = rotations[i]\n        if direction == 0:\n            # rotation left\n            result = arr[result][rotation:] + arr[0:rotation]\n        elif direction == 1:\n            # rotation right\n            result = arr[end-rotation:end] + arr[start:start+rotation]\n        else:\n            # rotation around pivot\n            result = arr[end-rotation+rotation:end+rotation] + arr[start-rotation:start]\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, an array of ranges, and the number of rotations to perform, and\n    returns the element at the specified index after the specified number of rotations.\n\n    Args:\n        arr (list): The array of elements to search.\n        ranges (list): The array of ranges for each element in the array.\n        rotations (int): The number of rotations to perform.\n        index (int): The index of the element to find.\n\n    Returns:\n        The element at the specified index after the specified number of rotations.\n    '''\n\n    # calculate the starting index of the element\n    start = 0\n    for i in range(rotations):\n        start += ranges[i]\n\n    # calculate the ending index of the element\n    end = start + ranges[rotations - 1]\n\n    # calculate the distance to the start and end of the array\n    array_length = arr[0] * ranges[-1]\n\n    # calculate the distance to the element's starting position\n    element_start = array_length - ranges[rotations - 1]\n\n    # calculate the distance to the element's ending position\n    element_end = array_length - start\n\n    # calculate the distance to the element's index\n    element_index = start + (index * ranges[rotations - 1])\n\n    # calculate the distance to the end of the array after the element has been rotated\n    rotated_array_length = (array_length - start + end) % array_length\n\n    # calculate the distance to the element's index after it has been rotated\n    rotated_element_index = ((rotated_array_length - start + end + element_index) % array_length) % array_length\n\n    # return the element at the specified index after the specified number of rotations\n    return arr[rotated_element_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the total number of rotations required\n    total_rotations = sum(ranges) + rotations\n\n    # Calculate the rotation factor for each range\n    rotation_factors = [range / total_rotations for range in ranges]\n\n    # Calculate the final index\n    final_index = index + sum(i * j for i, j in zip(range(len(arr)), rotation_factors))\n\n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, a list of rotations, and an index as input and returns the element at the given index after the given number of rotations.\n    \n    Args:\n    arr (list): An array of elements.\n    ranges (list): A list of ranges.\n    rotations (list): A list of rotations.\n    index (int): The index at which we want to find the element after rotations.\n    \n    Returns:\n    int: The element at the given index after rotations.\n    \"\"\"\n    count = 0\n    for i in range(len(rotations)):\n        if rotations[i] == index:\n            count += 1\n            if count == len(ranges):\n                return arr[ranges[count - 1]]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes the input of an array, a list of ranges, a list of rotations, and an index.\n    It then finds the element at the given index after the number of rotations specified in the ranges list.\n    \"\"\"\n\n    # Initialize a variable to keep track of the current rotation\n    current_rotation = 0\n\n    # Iterate through the rotations list and apply the rotations to the array\n    for rotation in rotations:\n        if rotation < 0:\n            # If the rotation is negative, reverse the array using slicing\n            arr = arr[::-1]\n            current_rotation += 1\n        elif rotation > 0:\n            # If the rotation is positive, shift the elements of the array by the rotation\n            for i in range(rotation):\n                arr.append(arr.pop(0))\n            current_rotation += 1\n\n    # Calculate the final index after rotations\n    final_index = (index + current_rotation) % len(arr)\n\n    # Find the element at the final index\n    element = arr[final_index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables\n    n = len(arr)\n    rotations %= n\n    temp = []\n    # Find the element at index index after rotations rotations\n    for i in range(n - 1, -1, -1):\n        if i < rotations:\n            temp.append(arr[i])\n        else:\n            temp.append(arr[i - rotations])\n    temp = temp[index - rotations:index]\n    # Remove duplicates from the list\n    temp = list(set(temp))\n    # Return the element at the index index\n    if len(temp) == 1:\n        return temp[0]\n    else:\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the final index after rotations\n    final_index = (index + rotations) % len(arr)\n\n    # Calculate the element at the final index\n    final_element = arr[final_index]\n\n    # Calculate the number of rotations needed to get to the final index\n    rotations_needed = 0\n    for i in range(len(arr)):\n        if final_index == i:\n            break\n        rotations_needed += 1\n\n    # Find the element at the final index after rotations\n    for i in range(rotations_needed):\n        if rotations % 2 == 0:\n            index = (index - 1) % len(arr)\n            final_index = (final_index - 1) % len(arr)\n        else:\n            index = (index + 1) % len(arr)\n            final_index = (final_index + 1) % len(arr)\n        rotations -= 1\n\n    # Return the element at the final index\n    return final_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Get the element at the given index\n    element = arr[index]\n    # Calculate the index of the element after rotations\n    after_rot = index + rotations\n    # Calculate the distance between the given index and the element after rotations\n    dist = after_rot - index\n    # Check if the element is on the left side of the range\n    if dist > 0:\n        # Get the first element after the rotation\n        left_element = arr[index - 1]\n        # Check if the element is in the left range\n        if left_element in ranges[rotations - 1]:\n            # Return the element after rotations\n            return arr[after_rot]\n        else:\n            # Check if the element is in the right range\n            if left_element in ranges[rotations]:\n                # Return the element after rotations\n                return arr[after_rot]\n            else:\n                # Return the element at the given index\n                return element\n    else:\n        # Get the last element before the rotation\n        right_element = arr[index + 1]\n        # Check if the element is in the right range\n        if right_element in ranges[rotations]:\n            # Return the element after rotations\n            return arr[after_rot]\n        else:\n            # Check if the element is in the left range\n            if right_element in ranges[rotations - 1]:\n                # Return the element after rotations\n                return arr[after_rot]\n            else:\n                # Return the element at the given index\n                return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array 'arr' containing a sequence of elements, a list of ranges\n    indicating the possible rotations and a list of rotations, and an index 'index'. It returns\n    the element at the given index after the number of rotations indicated by the 'rotations'\n    list.\n\n    The function finds the possible rotations by finding all possible pairs of rotations that\n    achieve the desired index. For example, if the array is {1, 2, 3, 4, 5, 6} and the index is\n    3, the function would find pairs of rotations that end up with the array {4, 5, 6, 1, 2, 3}.\n\n    The function then finds the element at the given index by multiplying the element at the initial\n    index by the product of the element at the final index and the element at the initial index.\n    For example, if the array is {1, 2, 3, 4, 5, 6} and the index is 3, the function would\n    multiply the element at the initial index (2) with the product of the element at the final\n    index (6) and the element at the initial index (1). This would give the final element (12).\n\n    Args:\n        arr (list): the sequence of elements.\n        ranges (list): a list of tuples indicating the rotations and the corresponding ranges.\n        rotations (list): a list of tuples indicating the rotations and the corresponding ranges.\n        index (int): the index to find the element at.\n\n    Returns:\n        The element at the given index after the number of rotations indicated by the 'rotations'\n        list.\n    \"\"\"\n\n    # Initialize a list to store the element at each index after each rotation.\n    result = []\n\n    # Find all possible rotations that end up with the desired index.\n    for rotation in rotations:\n        # Apply the rotation to the array.\n        temp = list(arr)\n        for i in range(rotation[1]):\n            temp[i], temp[i + rotation[0]] = temp[i + rotation[0]], temp[i]\n        # If the sum of the rotated indices is equal to the desired index, add the element to the result.\n        if sum(temp) == index:\n            result.append(temp[index])\n\n    # If there are no rotations that end up with the desired index, return None.\n    if not result:\n        return None\n\n    # Multiply the element at the initial index with the product of the element at the final index and\n    # the element at the initial index.\n    return result[0] * result[-1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Regular expression pattern to match words starting with 'p'\n    pattern = r'^p[a-zA-Z0-9]*'\n\n    # Using list comprehension to filter words starting with 'p'\n    matches = [word for word in words if re.match(pattern, word)]\n\n    # Return two words starting with 'p' from the list\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'\\bp[a-zA-Z]+\\b',''.join(words))\n    if p_words:\n        return p_words[0], p_words[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-zA-Z]*')\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Regular expression to match words starting with 'p'\n    pattern = re.compile(\"^p\\w+$\")\n    # Loop through the list of words\n    for word in words:\n        # Use the regular expression to match words starting with 'p'\n        match = pattern.match(word)\n        # If a match is found, return the two words\n        if match:\n            return match.group(), match.group().replace('p', 'P')"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    for word in words:\n        if pattern.search(word):\n            return word, word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'p[a-z]*') # Match any word starting with letter 'p'\n    for word in words:\n        match = pattern.match(word)\n        if match:\n            return word\n    return None # No words starting with 'p' were found in the list"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = re.findall(pattern, words)\n    if matches:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p[a-zA-Z]*')\n    for word in words:\n        if pattern.match(word):\n            return word\n    return \"No matching words found.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i][0].lower() == 'p':\n            return words[i-1], words[i]\n    return None, None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n\n    if a[index] > a[k-1]:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    prefix_sum = [0] * (n+1)\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Calculate prefix sum\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + a[i-1]\n\n    # Calculate maximum sum\n    for i in range(1, n+1):\n        if i < k:\n            current_sum = prefix_sum[i]\n        else:\n            current_sum = prefix_sum[i] - prefix_sum[i-k]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index, k-1)\n    \n    if index == 0:\n        return 0\n    \n    if index == n-1 and k == n-1:\n        return a[index]\n    \n    if index == n-1 and k < n-1:\n        return max(a[index], a[k])\n    \n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = max(a[0], a[1])\n    \n    for i in range(2, n+1):\n        if a[i] > dp[i-1]:\n            dp[i] = dp[i-1] + a[i]\n        else:\n            dp[i] = max(dp[i-1], dp[i-2] + a[i])\n    \n    if k == n-1:\n        return dp[k]\n    \n    return max(dp[k], dp[k-1])"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create an array to store the maximum sum of increasing subsequence from prefix until ith index\n    dp = [0] * n\n    # Initialize the maximum sum of increasing subsequence from prefix until ith index as the maximum possible value\n    for i in range(n):\n        dp[i] = max(dp[j] + a[i] for j in range(i))\n    # Initialize the maximum sum of increasing subsequence from prefix until kth element as the maximum possible value\n    for i in range(k):\n        dp[i] = max(dp[j] + a[i] for j in range(n))\n    # Initialize the maximum sum of increasing subsequence from prefix until ith index and kth element as 0\n    for i in range(k, n):\n        dp[i] = 0\n    # Find the maximum sum of increasing subsequence from prefix until ith index and also including the kth element\n    for i in range(k, n):\n        dp[i] = max(dp[i] + dp[j] for j in range(i) if a[i] > a[j])\n    # Return the maximum sum of increasing subsequence from prefix until the given index\n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum of increasing subsequence found so far\n    max_sum = float('-inf')\n\n    # Initialize an array to store the length of the increasing subsequence found so far\n    length = [0] * n\n\n    # Initialize the current prefix sum and index of the maximum sum of increasing subsequence found so far\n    prefix_sum = 0\n    max_index = 0\n\n    # Loop through all possible starting indices from 0 to i - 1\n    for i in range(index):\n        # Update the prefix sum and find the length of the increasing subsequence from prefix to i\n        prefix_sum -= a[i]\n        length[i] = prefix_sum\n\n        # If the current prefix sum is greater than the maximum sum and the current index is greater than k, update the maximum sum and its index\n        if prefix_sum > max_sum and i > k:\n            max_sum = prefix_sum\n            max_index = i\n\n    # Update the prefix sum and find the length of the increasing subsequence from prefix to index\n    prefix_sum += a[index]\n    length[index] = prefix_sum\n\n    # If the current prefix sum is greater than the maximum sum and the current index is greater than k, update the maximum sum and its index\n    if prefix_sum > max_sum and index > k:\n        max_sum = prefix_sum\n        max_index = index\n\n    # Update the prefix sum and find the length of the increasing subsequence from prefix to k - 1\n    prefix_sum -= a[k - 1]\n    length[k - 1] = prefix_sum\n\n    # If the current prefix sum is greater than the maximum sum and the current index is greater than k, update the maximum sum and its index\n    if prefix_sum > max_sum and k - 1 > k:\n        max_sum = prefix_sum\n        max_index = k - 1\n\n    # Loop through all possible ending indices from index to n - 1\n    for i in range(index, n):\n        # If the current prefix sum is less than the maximum sum, update the prefix sum and find the length of the increasing subsequence from prefix to i\n        prefix_sum += a[i]\n        length[i] = prefix_sum\n\n        # If the current prefix sum is greater than the maximum sum and the current index is greater than k, update the maximum sum and its index\n        if prefix_sum > max_sum and i > k:\n            max_sum = prefix_sum\n            max_index = i\n\n    return max_sum, max_index, length"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # initialize dp array with initial values as a[0]\n    dp = [a[0]] * (n + 1)\n    dp[1] = max(a[0], a[1])\n\n    # fill dp array with values\n    for i in range(2, n + 1):\n        if i == index:\n            dp[i] = max(dp[i - 1], a[i])\n            for j in range(i - 1, index - k + 1, -1):\n                dp[i] = max(dp[i], dp[j] + a[i])\n        else:\n            dp[i] = max(dp[i - 1], dp[i - 2] + a[i])\n\n    return dp[-1]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize the result to be negative infinity\n    result = float('-inf')\n\n    # Initialize the length of the increasing subsequence\n    current_length = 0\n\n    # Initialize the starting index of the increasing subsequence\n    current_start = index\n\n    # Initialize the current sum of increasing subsequence\n    current_sum = a[index]\n\n    # Loop through all possible starting indices from 0 to i-1\n    for i in range(index):\n\n        # Check if the sum of the increasing subsequence is greater than the current sum of the increasing subsequence\n        if current_sum + a[i] > a[index]:\n\n            # Update the result if the current sum of increasing subsequence is greater than the result\n            if current_sum + a[i] > result:\n                result = current_sum + a[i]\n                current_length = i - current_start + 1\n                current_start = i\n\n        # Check if the current sum of increasing subsequence includes the kth element\n        elif current_sum + a[i] == a[index] and i < k:\n\n            # Update the result if the current sum of increasing subsequence includes the kth element\n            if current_sum + a[i] > result:\n                result = current_sum + a[i]\n                current_length = i - current_start + 1\n                current_start = i\n\n    # Check if the maximum sum of increasing subsequence includes the kth element\n    if current_sum + a[index] == a[index] and current_length < k:\n        current_length = index - current_start + 1\n\n    return result, current_length, current_start"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the sum and max sum\n    sum = 0\n    max_sum = float('-inf')\n\n    # Initialize the dp array with zeros\n    dp = [0] * n\n\n    # Traverse the array from prefix until kth index\n    for i in range(index, k):\n        # Calculate the sum of the increasing subsequence\n        sum += a[i]\n        # Update the max sum if needed\n        if sum > max_sum:\n            max_sum = sum\n\n    # Return the max sum of increasing subsequence from prefix until kth index\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [0] * (k + 1)\n    for i in range(index + 1, n + 1):\n        for j in range(i, min(i + k + 1, n) + 1):\n            dp[j] = max(dp[j], dp[i] + a[j - 1])\n    return dp[min(k + 1, n)]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # create a prefix array to store the sum of increasing subsequence ending at i\n    prefix = [0] * n\n    \n    # initialize the prefix array with the first element of the array\n    prefix[0] = a[0]\n    \n    # initialize the maximum sum found so far to be the first element of the array\n    max_sum = a[0]\n    \n    # iterate over the remaining elements of the array\n    for i in range(1, n):\n        # if the current element is greater than or equal to k\n        if a[i] >= k:\n            # if the current element is less than the maximum sum found so far\n            if a[i] < max_sum:\n                # find the index of the maximum sum found so far and update it to be the current element\n                j = max_sum.index(max_sum)\n                max_sum[j] = a[i]\n                # find the sum of the increasing subsequence from prefix[0:j+1] to prefix[j]\n                prefix[i] = prefix[j] + max_sum[j]\n            else:\n                # if the current element is greater than the maximum sum found so far\n                # find the index of the maximum sum found so far and update it to be the current element\n                j = max_sum.index(max_sum)\n                max_sum[j] = a[i]\n                # find the sum of the increasing subsequence from prefix[0:j] to prefix[j+1] and update the prefix array to be the sum\n                prefix[i] = prefix[j] + a[i]\n        else:\n            # if the current element is less than or equal to k\n            # update the prefix array to be the sum of the previous element and the current element\n            prefix[i] = prefix[i-1] + a[i]\n    \n    # return the maximum sum of increasing subsequence from prefix[0:index+1]\n    return prefix[index]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    colontup = deepcopy(tuplex)\n    \n    # Add m number of 0s to the end of the tuple\n    colontup += (0,) * m\n    \n    # Add n number of 0s to the beginning of the tuple\n    colontup = (0,) * n + colontup\n    \n    return colontup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a new list to store the colon\n    colon = []\n\n    # Iterate through each element of the tuple\n    for i in range(len(tuplex)):\n        # Check if the index is in the range of the tuple\n        if i in range(m,n):\n            # Add the element to the colon list\n            colon.append(tuplex[i])\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a new tuple with a length of m\n    new_tuplex = deepcopy(tuplex)\n\n    # loop over the new tuple and replace every nth element with -1\n    for i in range(0, len(new_tuplex), n):\n        new_tuplex[i] = -1\n\n    # print the new tuple\n    print(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex = new_tuplex[:i] + (None,) + new_tuplex[i+1:]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Convert the tuple to a list to perform the slicing\n    tuplex = list(tuplex)\n\n    # Perform the slicing\n    for i in range(m):\n        if i < n:\n            tuplex[i] = deepcopy(tuplex[i])\n        else:\n            break\n\n    # Convert the list back to a tuple\n    colon = tuple(tuplex)\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a deep copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the number of rows and columns in the tuple\n    rows = len(tuplex_copy)\n    cols = len(tuplex_copy[0])\n\n    # Check if the selected indices are valid\n    if m > rows or m < 0:\n        raise ValueError(\"Invalid row index\")\n    if n > cols or n < 0:\n        raise ValueError(\"Invalid column index\")\n\n    # Get the indices of the selected row and column\n    row_index = m\n    col_index = n\n\n    # Create a new list to store the colon of the tuple\n    colon = []\n\n    # Loop through the rows and columns in the tuple\n    for i in range(rows):\n        if i == row_index:\n            colon.append(tuplex_copy[i][col_index])\n        else:\n            colon.append(tuplex_copy[i][i])\n\n    # Return the colon of the tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a new list to hold the new tuple\n    new_tuplex = []\n\n    # iterate through the elements of the original tuple\n    for i in range(len(tuplex)):\n        # if the current index is less than m\n        if i < m:\n            # add the original element to the new list\n            new_tuplex.append(tuplex[i])\n        # if the current index is equal to m\n        elif i == m:\n            # add the first n elements of the original tuple to the new list\n            new_tuplex.extend(tuplex[:n])\n        # if the current index is greater than or equal to m and less than n\n        else:\n            # add the last n-m elements of the original tuple to the new list\n            new_tuplex.extend(tuplex[-(n-m):])\n\n    # return the new list of tuples\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Append a new element at the end of the tuple\n    tuplex_copy = tuplex_copy + (0,)\n    # Slice the tuple from the beginning up to the new element\n    colon = tuplex_copy[0:m]\n    # Replace each element in the colon with the given number\n    for i in range(m):\n        colon[i] = n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex = (new_tuplex[0],) + new_tuplex[2:]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the number of elements in the tuple\n    num_elements = len(new_tuplex)\n\n    # Check if the number of rows is less than or equal to the number of columns\n    if m <= num_elements and n <= num_elements:\n\n        # Get the number of rows and columns\n        num_rows = m\n        num_cols = n\n\n        # Get the number of elements in each row and column\n        row_length = num_elements // num_rows\n        col_length = num_elements // num_cols\n\n        # Create a new list of lists to hold the colon\n        colon = []\n\n        # Loop through the rows\n        for i in range(num_rows):\n\n            # Loop through the columns\n            for j in range(num_cols):\n\n                # Create a new list to hold the elements in this row and column\n                row = []\n\n                # Loop through the elements in this row and column\n                for k in range(i * row_length, (i + 1) * row_length):\n                    row.append(new_tuplex[k])\n\n                # Add this row to the colon\n                colon.append(row)\n\n        # Return the colon\n        return colon\n\n    # Return None if the dimensions are not valid\n    return None"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize two empty lists to store the largest products and the indices of their respective elements\n    max_products = []\n    indices = []\n    # Iterate through the elements of the two input lists\n    for i in range(len(nums1)):\n        # Initialize two variables to store the largest product and its index\n        max_product = float('-inf')\n        max_index = -1\n        # Iterate through the remaining elements of the current list\n        for j in range(i, len(nums1)):\n            # Calculate the product of the current element and all the elements to its left\n            product = nums1[i] * nums2[j]\n            # If the product is greater than the current maximum product, update the maximum product and its index\n            if product > max_product:\n                max_product = product\n                max_index = j\n            # If we have found the desired number of products, break out of the inner loop\n            if len(max_products) == N:\n                break\n        # Add the index of the current maximum product to the list of indices\n        indices.append(max_index)\n        # Add the current maximum product to the list of products\n        max_products.append(max_product)\n    # Return the list of products and the list of indices\n    return max_products, indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2) or len(nums1) < N:\n        return \"Invalid input. Lists should have equal length and be of length N or more.\"\n    if N < 1 or N > min(len(nums1), len(nums2)):\n        return \"Invalid input. N should be between 1 and the length of the shorter list.\"\n    \n    products = []\n    for i in range(len(nums1)):\n        for j in range(i+1, min(len(nums1), len(nums2))):\n            if nums1[i] * nums2[j] > 0:\n                products.append((nums1[i], nums2[j]))\n                \n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to keep track of the largest products and their indices\n    max_product1 = nums1[0]\n    max_product2 = nums2[0]\n    max_product_indices1 = [0]\n    max_product_indices2 = [0]\n    \n    # Iterate through the two lists to find the largest products\n    for i in range(1, N):\n        if nums1[i] > max_product1:\n            max_product1 = nums1[i]\n            max_product2 = nums1[0] * max_product1\n            max_product_indices1 = [0]\n            max_product_indices1.append(i)\n        elif nums1[i] * max_product1 > max_product2:\n            max_product2 = nums1[i] * max_product1\n            max_product_indices2 = [0]\n            max_product_indices2.append(i)\n        \n        if nums2[i] > max_product1:\n            max_product1 = nums2[i]\n            max_product2 = nums2[0] * max_product1\n            max_product_indices1 = [0]\n            max_product_indices1.append(i)\n        elif nums2[i] * max_product1 > max_product2:\n            max_product2 = nums2[i] * max_product1\n            max_product_indices2 = [0]\n            max_product_indices2.append(i)\n    \n    return max_product2, max_product_indices2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the input lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the products and their indices\n    largest_products = []\n    product_indices = []\n\n    # Loop through the sorted lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the selected factors\n            product = nums1[i] * nums2[j]\n\n            # Add the product and its indices to the result list\n            largest_products.append(product)\n            product_indices.append((i, j))\n\n            # Check if the result list has N elements\n            if len(largest_products) == N:\n                # If it does, break out of the inner loop\n                break\n\n    # Return the largest products and their indices\n    return largest_products, product_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    largest_products = []\n    for i in range(N):\n        largest_products.append([])\n    for num1 in nums1:\n        for num2 in nums2:\n            largest_product = max(num1*num2, num2*num1)\n            for j in range(N):\n                if j == 0:\n                    largest_products[j].append(largest_product)\n                else:\n                    largest_products[j].append(largest_product * largest_products[j-1][0])\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    largest_products = []\n    factors1 = []\n    factors2 = []\n    \n    # Calculate the product of the largest N elements in both lists\n    for i in range(N):\n        max_product = max(nums1[i], nums2[i], max_product)\n        factors1.append(nums1[i])\n        factors2.append(nums2[i])\n    \n    # Calculate the product of the largest N elements in each list\n    for i in range(N):\n        product = 1\n        for j in range(N):\n            if j!= i:\n                product *= max(nums1[j], nums2[j])\n        largest_products.append(product)\n    \n    # Return the largest N products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    if N > len(nums1) * len(nums2):\n        raise ValueError(\"The requested number of products exceeds the number of available products.\")\n\n    # Find the largest product of any factor from each list\n    factor1 = max(nums1)\n    factor2 = max(nums2)\n\n    # Compute the product of the largest factor\n    product = factor1 * factor2\n\n    # Initialize a list to store the products of the other factors\n    products = []\n\n    # Iterate over the other factors\n    for factor in [x for x in nums1 if x!= factor1] + [x for x in nums2 if x!= factor2]:\n        # Compute the product of the current factor and the largest factor\n        product *= factor\n\n        # Add the product to the list of products\n        products.append(product)\n\n    # Sort the list of products in descending order\n    products.sort(reverse=True)\n\n    # Return the top N largest products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(N):\n        max_product = max(nums1[i], nums2[i])\n        max_products.append(max_product)\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the given lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Find the largest N elements from each list\n    largest_product1 = nums1[-N:]\n    largest_product2 = nums2[-N:]\n\n    # Calculate the product of largest N elements\n    largest_product = 1\n    for i in range(len(largest_product1)):\n        largest_product *= largest_product1[i]\n        largest_product *= largest_product2[i]\n\n    return largest_product\n"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Find the maximum product from nums1\n    max_prod1 = max(nums1)\n\n    # Create a list to store the maximum product for each factor from nums2\n    max_prods2 = [0] * N\n\n    # Loop through each number in nums1 and find the maximum product for each factor from nums2\n    for num1 in nums1:\n        for i in range(N):\n            # Calculate the maximum product for factor i\n            max_prods2[i] = max(max_prods2[i], num1 * nums2[i])\n\n    # Find the indices of the maximum products in max_prods2\n    max_indices = [max_prods2.index(max_prod) for max_prod in max_prods2]\n\n    # Create a list to store the largest products from nums1 and their indices\n    largest_prods = []\n\n    # Loop through each factor from nums2 and add the largest product for that factor to the list\n    for i in range(N):\n        largest_prods.append((max_prods2[i], max_indices.index(i)))\n\n    # Sort the list by the largest product and its index\n    largest_prods.sort(reverse=True)\n\n    # Return the specified number of largest products\n    return largest_prods[:N]"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        print(\"The maximum number is:\",a)\n    else:\n        print(\"The maximum number is:\",b)\n"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of characters.\n\n    Args:\n        str1 (str): The string to be converted to a tuple of characters.\n\n    Returns:\n        A tuple of characters corresponding to the input string.\n    \"\"\"\n\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as input and returns the number with the leftmost unset bit set to 1.\n    For example, if the input is 3, the output will be 5.\n    \"\"\"\n    # Initialize the index of the leftmost unset bit\n    leftmost_unset_bit = 0\n    # Iterate over the bits of the integer from right to left\n    for i in range(32, -1, -1):\n        # Check if the current bit is unset (i.e., 0)\n        if n & (1 << i) == 0:\n            # If the current bit is unset, set the index of the leftmost unset bit to the current bit\n            leftmost_unset_bit = i\n            # Break out of the loop since we've found the leftmost unset bit\n            break\n    # Set the leftmost unset bit to 1 and return the updated integer\n    return n | (1 << leftmost_unset_bit)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    set_bit = 0b1\n    unset_bit = 0b0\n    \n    while set_bit == 0b1:\n        if n & set_bit == 0:\n            set_bit <<= 1\n        else:\n            unset_bit = set_bit\n            set_bit <<= 1\n            \n    n |= set_bit\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to keep track of the unset bits \n    unset_bits = 0\n    \n    # Loop through each bit of the integer \n    for i in range(32): \n        # If the current bit is unset, set the unset_bits variable to 1 \n        if not (n & (1 << i)): \n            unset_bits = 1\n    \n    # If all the bits are set, unset_bits will be 0, so set the left most bit to 1 \n    if unset_bits == 0: \n        n |= (1 << 31)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Set the left most unset bit in a binary number n.\n    '''\n\n    # Convert n to a binary string\n    binary_str = bin(n)[2:]\n\n    # Find the position of the leftmost unset bit\n    for i in range(len(binary_str)):\n        if binary_str[i] == '1':\n            # Set the leftmost unset bit to 1\n            binary_str = binary_str[:i] + '1' + binary_str[i+1:]\n            break\n\n    # Convert the binary string back to an integer\n    return int(binary_str, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function sets the left most unset bit in the given number.\n    \"\"\"\n    while n & 1 == 0: # while n is even\n        n = n >> 1 # shift right by 1\n    return n # return the final result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    left = 1\n    while left & n == 0:\n        left <<= 1\n    return left\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Find the first set bit in binary representation of n\n    i = 0\n    while (n & (1 << i)) == 0:\n        i += 1\n\n    # Set the leftmost unset bit to 1\n    n = n | (1 << i)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the binary representation of n to an array of 0s and 1s\n    binary_array = list(bin(n)[2:])\n    # Iterate through the array of 0s and 1s from right to left\n    for i in range(len(binary_array) - 1, -1, -1):\n        # If the current bit is 0, set it to 1 and exit the loop\n        if binary_array[i] == '0':\n            binary_array[i] = '1'\n            break\n    # Convert the array of 0s and 1s back to a binary number\n    left_most_unset_bit = int(''.join(binary_array), 2)\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in an integer.\n\n    Args:\n        n: An integer.\n\n    Returns:\n        A new integer where the left most unset bit is set to 1.\n    \"\"\"\n    i = 1\n    while n & i == 0:\n        i <<= 1\n    return n | i"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    while (n & 1) == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone using the formula V = \u03c0r\u00b2h.\n    '''\n    area = math.pi * r**2\n    volume = area * h\n    \n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume of the cone\n    volume = (1/3) * math.pi * r**2 * h\n    # return the volume\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes two parameters, r (radius of cone) and h (height of cone).\n    It calculates the volume of the cone using the formula: V = (1/3) * pi * r^2 * h.\n    \"\"\"\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r**2) * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function finds the volume of a cone.\n    \n    Args:\n    r (float): radius of the cone\n    h (float): height of the cone\n    \n    Returns:\n    (float): volume of the cone\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if i == 1:\n            return 1\n        i *= 2\n    return i // 2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 1\n    while i <= n:\n        if i == 1 << 30:\n            break\n        i <<= 1\n    return i >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n >> 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if i == n:\n            return i\n        i <<= 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 0\n    while n > 1:\n        n = n >> 1\n        power += 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2**int(n.bit_length() - 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # initialize variables\n    highest = 0\n    power = 0\n\n    # iterate through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # check if i is a power of 2\n        if i == 1:\n            highest = 1\n            power = 0\n        elif i == 2:\n            highest = 2\n            power = 0\n        elif i == 4:\n            highest = 4\n            power = 0\n        elif i == 8:\n            highest = 8\n            power = 0\n        elif i == 16:\n            highest = 16\n            power = 0\n        elif i == 32:\n            highest = 32\n            power = 0\n        elif i == 64:\n            highest = 64\n            power = 0\n        elif i == 128:\n            highest = 128\n            power = 0\n        elif i == 256:\n            highest = 256\n            power = 0\n        elif i == 512:\n            highest = 512\n            power = 0\n        elif i == 1024:\n            highest = 1024\n            power = 0\n        elif i == 2048:\n            highest = 2048\n            power = 0\n        elif i == 4096:\n            highest = 4096\n            power = 0\n        elif i == 8192:\n            highest = 8192\n            power = 0\n        elif i == 16384:\n            highest = 16384\n            power = 0\n        elif i == 32768:\n            highest = 32768\n            power = 0\n        elif i == 65536:\n            highest = 65536\n            power = 0\n        elif i == 131072:\n            highest = 131072\n            power = 0\n        elif i == 262144:\n            highest = 262144\n            power = 0\n        elif i == 524288:\n            highest = 524288\n            power = 0\n        elif i == 1048576:\n            highest = 1048576\n            power = 0\n        elif i == 2097152:\n            highest = 2097152\n            power = 0\n        elif i == 4194304:\n            highest = 4194304\n            power = 0\n        elif i == 8388608:\n            highest = 8388608\n            power = 0\n        elif i == 16777216:\n            highest = 16777216\n            power = 0\n        elif i == 33554432:\n            highest = 33554432\n            power = 0\n        elif i == 67108864:\n            highest = 67108864\n            power = 0\n        elif i == 134217728:\n            highest = 134217728\n            power = 0\n        elif i == 268435456:\n            highest = 268435456\n            power = 0\n        elif i == 536870912:\n            highest = 536870912\n            power = 0\n        elif i == 1073741824:\n            highest = 1073741824\n            power = 0\n        elif i == 2147483648:\n            highest = 2147483648\n            power = 0\n\n        # update highest and power if i is a higher power of 2\n        elif i > highest:\n            highest = i\n            power = 0\n        elif i == 2**power:\n            power += 1\n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # initialize variables\n    power = 1\n    highest_power = power\n\n    # loop until highest power is greater than n\n    while power <= n:\n        if power == highest_power:\n            highest_power <<= 1\n        power <<= 1\n\n    # return the highest power\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1 + highest_Power_of_2(n - 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Loop until we find the highest power of 2 less than or equal to n\n    while n > 0: \n        # Check if n is a power of 2\n        if n & (n-1) == 0:\n            return n\n        # Otherwise, n is not a power of 2, so increment it by 1\n        n = n + 1"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th lucas number is:\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the nth lucas number.\n    \"\"\"\n\n    # base case\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        # recursive case\n        lucas = find_lucas(n-1)\n        return lucas + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find the nth lucas number.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        lucas = find_lucas(n-1) + find_lucas(n-2)\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_prev = 2\n        lucas_curr = 1\n        for i in range(2, n+1):\n            lucas_next = lucas_prev + lucas_curr\n            lucas_prev = lucas_curr\n            lucas_curr = lucas_next\n        return lucas_curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n\n    # Initialize the first two Lucas numbers\n    a, b = 0, 1\n\n    # Loop through the remaining terms\n    for _ in range(2, n + 1):\n        # Calculate the next Lucas number\n        c = a + b\n\n        # Update a and b for the next iteration\n        a, b = b, c\n\n    # Return the nth Lucas number\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    Check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sieve_of_eratosthenes(n):\n    '''\n    Generate a list of primes up to n using the Sieve of Eratosthenes algorithm.\n    '''\n    primes = [True] * (n+1)\n    primes[0], primes[1] = False, False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    \n    return [x for x in range(2, n+1) if primes[x]]\n\ndef find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas_numbers = sieve_of_eratosthenes(n)\n    return lucas_numbers[n-1]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Args:\n    list_: list of objects that can be formatted using the string.\n    string: format string.\n\n    Returns:\n    list: list with all elements formatted using the string.\n    \"\"\"\n    formatted_list = [string.format(item) for item in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(x) for x in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for i in list_:\n        result.append(string % i)\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in args:\n        for item in i:\n            key, value = item.split('=')\n            if key in result:\n                result[key].append(value)\n            else:\n                result[key] = [value]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create empty dictionary to store the nested dictionary\n    nested_dict = {}\n    # loop through each list and add keys to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]].update(l3[i])\n    # return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize the nested dictionary\n    result = {}\n\n    # Loop through the list1 and list2 and add the values to the nested dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {'list2': l2[i], 'list3': l3[i]}\n\n    # Return the nested dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    This function takes any number of lists as input and returns a single nested dictionary.\n\n    The function takes a list of tuples, where each tuple contains a list or tuple of keys and values.\n    Each key is associated with a value from one of the input lists.\n\n    The function uses the values from each list as the keys for a dictionary created using the keys from the first list.\n    The values from the lists are appended to the values for the corresponding keys in the created dictionary.\n\n    The function returns the final dictionary.\n    '''\n    # create an empty dictionary\n    d = {}\n\n    # loop through each tuple in the lists\n    for t in lists:\n        # loop through each key-value pair in the tuple\n        for k, v in t:\n            # if the key is already in the dictionary, append the value to the list of values for that key\n            if k in d:\n                d[k].append(v)\n            # if the key is not already in the dictionary, add the key-value pair to the dictionary\n            else:\n                d[k] = [v]\n\n    # return the final dictionary\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Loop through each list and add each element as a key-value pair in the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    - l1: list of strings\n    - l2: list of integers\n    - l3: list of tuples\n\n    Returns:\n    - a nested dictionary with keys from l1 and values from l2 and l3\n\n    Example usage:\n    >>> l1 = ['a', 'b', 'c']\n    >>> l2 = [1, 2, 3]\n    >>> l3 = [('x', 1), ('y', 2), ('z', 3)]\n    >>> nested_dict = convert_list_dictionary(l1, l2, l3)\n    >>> print(nested_dict)\n    {\n        'a': 1,\n        'b': 2,\n        'c': 3,\n        'x': 1,\n        'y': 2,\n        'z': 3\n    }\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        if len(l3) > i:\n            for j in range(len(l3[i])):\n                result[l1[i] + '_' + str(j)] = l3[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary to store the nested dictionaries\n    nested_dict = {}\n    # loop through the first list\n    for i in range(len(l1)):\n        # create a new dictionary for this sublist\n        sublist_dict = {}\n        # loop through the second list\n        for j in range(len(l2[i])):\n            # add the key-value pair to the sublist dictionary\n            sublist_dict[l2[i][j]] = l3[i][j]\n        # add the sublist dictionary to the nested dictionary for the first list\n        nested_dict[l1[i]] = sublist_dict\n    # return the final nested dictionary\n    return nested_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*lst):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    d = {}\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if j == 0:\n                if lst[i][j] not in d:\n                    d[lst[i][j]] = {lst[i][j+1]: lst[i][j+2]}\n            else:\n                d[lst[i][j-1]][lst[i][j]] = lst[i][j+1]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    dictionary = {}\n    # loop through each list\n    for i in range(len(l1)):\n        # loop through each element of each list\n        for j in range(len(l1[i])):\n            # if the element is a string, add it to the dictionary as a key\n            if isinstance(l1[i][j], str):\n                dictionary[l1[i][j]] = l2[i][j]\n    # loop through each element of each list\n    for i in range(len(l3)):\n        # if the element is a string, add it to the dictionary as a value\n        if isinstance(l3[i], str):\n            dictionary[l3[i]] = l3[i]\n    # return the dictionary\n    return dictionary"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary to store the converted data\n    converted_data = {}\n    # loop through each list\n    for i in range(len(l1)):\n        # initialize an empty dictionary to store the data for the current list\n        list_data = {}\n        # loop through each item in the current list\n        for j in range(len(l1[i])):\n            # add the current item to the list_data dictionary as a key-value pair\n            list_data[l2[i][j]] = l3[i][j]\n        # add the current list_data dictionary as a key-value pair to the converted_data dictionary\n        converted_data[l1[i]] = list_data\n    # return the converted_data dictionary\n    return converted_data"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 15\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return n\n    \n    f1 = get_max_sum(n//2)\n    f2 = get_max_sum(n//3)\n    f3 = get_max_sum(n//4)\n    f4 = get_max_sum(n//5)\n    \n    return max(max(f1, f2, f3, f4), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 0\n    else:\n        f = get_max_sum(n-1)\n        if f == 0:\n            return n\n        else:\n            return max(f, n*(n-1)//2)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 14\n    else:\n        max_sum = 0\n        for i in range(1, n+1):\n            max_sum = max(max_sum, (get_max_sum(n/i) + get_max_sum(n/i**2) + get_max_sum(n/i**3) + get_max_sum(n/i**4)))\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 1:\n        return n\n\n    # Base case: if n is 1, return n\n    if n == 1:\n        return 1\n\n    # Recursive case: find the maximum sum between n/2 and n\n    max_sum1 = get_max_sum(n/2)\n\n    # Find the maximum sum between n/3 and n\n    max_sum2 = get_max_sum(n/3)\n\n    # Find the maximum sum between n/4 and n\n    max_sum3 = get_max_sum(n/4)\n\n    # Find the maximum sum between n/5 and n\n    max_sum4 = get_max_sum(n/5)\n\n    # Find the maximum sum between n and n\n    max_sum5 = n\n\n    # Find the maximum sum between the 4 maximum sums\n    max_sum = max(max_sum1, max_sum2, max_sum3, max_sum4, max_sum5)\n\n    # Return the maximum sum found\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    def helper(n):\n        if n <= 1:\n            return n\n        else:\n            return max(helper(n/2) + helper(n/3) + helper(n/4) + helper(n/5), n)\n\n    return helper(n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables for max_length and list with maximum length\n    max_length = 0\n    max_list = []\n    \n    # Loop through the list\n    for item in input_list:\n        # If the length of the item is greater than the current max_length, update max_length and max_list\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        # If the length of the item is equal to max_length, append the item to max_list\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    # Return the max_list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize maximum length to be 0\n    max_length = 0\n\n    # Iterate through each item in the list\n    for item in input_list:\n        # Increment the maximum length if the current item has a longer length\n        if len(item) > max_length:\n            max_length = len(item)\n\n    # Return the list with the maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list)\n    max_list = input_list\n    for i in range(len(input_list)):\n        if len(input_list) > max_length:\n            max_length = len(input_list)\n            max_list = input_list\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = [i]\n        elif len(i) == max_len:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # create a set to store the elements of the tuple\n    unique_elements = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(unique_elements) == len(test_tup):\n        # if the length is equal, then the tuple contains no duplicates\n        return True\n    else:\n        # if the length is not equal, then the tuple contains duplicates\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set from the given tuple to check for duplicates\n    test_set = set(test_tup)\n    \n    # If the length of the set is equal to the length of the tuple, it means there are no duplicates\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the set is empty (if there are no duplicates)\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for element in test_tup:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store unique values\n    unique_set = set()\n    # loop through the tuple and add each value to the set\n    for value in test_tup:\n        unique_set.add(value)\n    # check if the set is empty\n    if len(unique_set) == len(test_tup):\n        # if it is, return True\n        return True\n    # if the set is not empty, return False\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n\n    # convert the tuple into a set to remove duplicates\n    unique_tup = set(test_tup)\n\n    # check if the length of the set is equal to the length of the original tuple\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n\n    # Iterate through the string\n    for char in str1:\n        # If the character is not already in the dictionary, add it and its frequency as 1\n        if char not in char_freq:\n            char_freq[char] = 1\n        # If the character is already in the dictionary, increment its frequency by 1\n        else:\n            char_freq[char] += 1\n\n    # Iterate through the dictionary to find the first non-repeated character\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterate through the dictionary and find the first character with frequency 1\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    \n    # If no character has frequency 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n\n    # find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize two dictionaries to store character counts and non-repeating characters\n    char_count = {}\n    non_repeating_chars = set()\n    \n    # Loop through the string\n    for char in str1:\n        # If the character is already in the dictionary, add it to the set of non-repeating characters\n        if char in char_count:\n            char_count[char] += 1\n            if char_count[char] == 1:\n                non_repeating_chars.add(char)\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n            \n    # Return the first non-repeating character in the set of non-repeating characters\n    return next(iter(non_repeating_chars)) if non_repeating_chars else None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for key, value in char_count.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    first_non_repeating = None\n    for char in char_count:\n        if char_count[char] == 1:\n            first_non_repeating = char\n            break\n\n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character in the string\n    count_dict = {}\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n    \n    # loop through the dictionary and find the first character with a count of 1\n    for char, count in count_dict.items():\n        if count == 1:\n            return char\n    \n    # if no character has a count of 1, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    return pattern.match(string) is not None\n\nstring = input(\"Enter a string: \")\nif check_char(string):\n    print(\"The given string starts and ends with the same character.\")\nelse:\n    print(\"The given string does not start or end with the same character.\")"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # check if the string matches the given regular expression pattern\n    if re.match(regex, string):\n        # if it does, check if the first and last characters are the same\n        if string[0] == string[-1]:\n            # if they are, return True\n            return True\n        else:\n            # if they're not, return False\n            return False\n    else:\n        # if the string doesn't match the regular expression pattern, return False\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Find the median of the three numbers\n    sorted_list = sorted([a, b, c])\n    median = sorted_list[len(sorted_list) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers\n    numbers = sorted([a, b, c])\n\n    # Calculate the median\n    median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    # Determine the length of the sorted list\n    n = len(sorted_nums)\n    # If the length is odd, return the middle number\n    if n % 2 == 1:\n        return sorted_nums[n//2]\n    # If the length is even, return the average of the two middle numbers\n    else:\n        return (sorted_nums[n//2-1] + sorted_nums[n//2]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        median = (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        median = numbers[mid]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of these numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the length of the list\n    n = len(numbers)\n\n    # Calculate the middle index of the list\n    mid = n // 2\n\n    # If the length of the list is odd, return the middle number\n    if n % 2 == 1:\n        return numbers[mid]\n\n    # If the length of the list is even, return the average of the two middle numbers\n    else:\n        return (numbers[mid - 1] + numbers[mid]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n\n    # sort the three numbers\n    sorted_numbers = sorted([a, b, c])\n\n    # determine if the median is the middle number or the average of the middle two numbers\n    if len(sorted_numbers) % 2 == 0:  # if the length of the list is even\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:  # if the length of the list is odd\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Calculate the length of the sorted list\n    length = len(numbers)\n    \n    # If the length of the sorted list is odd, return the middle element\n    if length % 2 == 1:\n        return numbers[length // 2]\n    \n    # If the length of the sorted list is even, return the average of the two middle elements\n    else:\n        middle_one = numbers[length // 2 - 1]\n        middle_two = numbers[length // 2]\n        return (middle_one + middle_two) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n\n    if len(numbers) % 2 == 0:\n        median = (numbers[mid-1] + numbers[mid]) / 2\n    else:\n        median = numbers[mid]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import random\n\ndef quickselect(arr, k):\n    \"\"\"\n    Quickselect algorithm implementation to find the kth smallest element in an array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    pivot = random.choice(arr)\n    lows = [el for el in arr if el < pivot]\n    highs = [el for el in arr if el > pivot]\n    pivots = [el for el in arr if el == pivot]\n\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digit = num % 10\n            digits_sum += digit\n            num //= 10\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num //= 10\n        result.append(sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n\n    sum_of_digits = []\n    for num in nums:\n        num_digits = [int(digit) for digit in str(num)]\n        sum_of_digit = sum(num_digits)\n        sum_of_digits.append(sum_of_digit)\n\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum_num = sum(int(digit) for digit in str(num))\n        result.append(sum_num)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize the sum variable to 0\n    total = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Convert the number to a string\n        num_str = str(num)\n        \n        # Convert the string to a list of digits\n        num_digits = [int(digit) for digit in num_str]\n        \n        # Compute the sum of the digits\n        total += sum(num_digits)\n        \n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        while num > 0:\n            total += num % 10\n            num //= 10\n        result.append(total)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        sum_of_digits += digit_sum\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert both tuples to lists and zip them\n    zip_list = list(zip(list(test_tup1), list(test_tup2)))\n    \n    # Iterate through each element of the zip list and perform the bitwise xor operation\n    for i in range(len(zip_list)):\n        zip_list[i] = (zip_list[i][0] ^ zip_list[i][1])\n    \n    # Convert the zip list back to a tuple and return it\n    return tuple(zip_list)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result = xor_result ^ test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] ^ test_tup2[i]:\n            result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = test_tup1[0] ^ test_tup2[0]\n    for i in range(1, len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    # Loop through the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] ^ test_tup2[i]),)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result_tup = tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create an empty set to store unique tuples\n    unique_tuples = set()\n    \n    # loop through each element in the list\n    for element in test_list:\n        # check if the current element is already in the set\n        if (element, tuple(element)) not in unique_tuples:\n            # if not, add it to the set\n            unique_tuples.add((element, tuple(element)))\n    \n    # return the size of the set (which is the number of unique tuples)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n\n    for tup in test_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n\n    return len(unique_tuples)\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Creating a set to store the unique tuples\n    unique_tuples = set()\n\n    # Looping through the list and adding each tuple to the set\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n\n    # Returning the length of the unique_tuples set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    # Create a set to store unique tuples\n    unique_tuples = set()\n    # Iterate through the list\n    for tup in test_list:\n        # Add the tuple to the set if it's not already in there\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    # Return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a resultant tuple with same length as the two input tuples\n    result_tup = [0] * len(test_tup1)\n\n    # Loop through the elements of the input tuples\n    for i in range(len(test_tup1)):\n        # Perform addition of the corresponding elements of the input tuples\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Checking if both tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must be of equal length.\")\n        return\n\n    # Initializing a new tuple to store the added elements\n    added_tup = []\n\n    # Looping through both tuples and adding corresponding elements\n    for i in range(len(test_tup1)):\n        added_tup.append(test_tup1[i] + test_tup2[i])\n\n    # Returning the sum of the two tuples as a new tuple\n    return tuple(added_tup)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        new_tup = []\n        for j in range(len(test_tup2[i])):\n            new_tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(new_tup))\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples should have the same number of elements\")\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            if isinstance(test_tup1[i][j], (int, float)) and isinstance(test_tup2[i][j], (int, float)):\n                test_tup1[i][j] += test_tup2[i][j]\n            else:\n                raise TypeError(\"Both input tuples should have the same data types\")\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new empty tuple to store the result\n    result_tup = ()\n\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # check if the index is valid for both tuples\n        if i < len(test_tup1) and i < len(test_tup2):\n            # perform addition of the corresponding elements\n            result_tup += (test_tup1[i] + test_tup2[i],)\n        # if any of the index is out of range, add None to the result tuple\n        else:\n            result_tup += (None,)\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_result = []\n        for j in range(len(test_tup2[i])):\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_result))\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        tup = []\n        for j in range(len(test_tup1[i])):\n            tup.append(test_tup1[i][j] + test_tup2[i][j])\n        res.append(tup)\n    return res"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples have different lengths.\")\n        return\n\n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function checks whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if x in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for i in tuple1:\n        if i in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex: \n        if element in tuple1: \n            return True \n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            print(f\"{element} exists in {tuple1}.\")\n        else:\n            print(f\"{element} does not exist in {tuple1}.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Convert the given number to an integer\n    x = int(x)\n\n    # Check whether the number is odd or even\n    if x % 2 == 1:\n        return \"Odd\"\n    else:\n        return \"Even\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # calculating the parity of the number using the bitwise operator \n    parity = x & 1 \n\n    # checking the parity of the number \n    if parity == 0: \n        return \"Even\" \n    else: \n        return \"Odd\" "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # check if the number is even or not\n    if x % 2 == 0:\n        # if even, parity is even\n        parity = 'Even'\n    else:\n        # if odd, parity is odd\n        parity = 'Odd'\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The parity of the number is even.\" \n    else: \n        return \"The parity of the number is odd.\" "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer x as input and returns True if the parity of x is odd and False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize variables\n    a, b, c = 0, 0, 0\n    # convert the given number to list of digits\n    num_list = list(str(n))\n    # loop through the list of digits and increment the corresponding number by 1\n    for i in range(len(num_list)):\n        if num_list[i] == '9':\n            num_list[i] = '0'\n        else:\n            num_list[i] = chr(ord(num_list[i]) + 1)\n        # check if the resulting number is greater than the original number\n        if int(''.join(num_list)) > n:\n            # update the variables\n            a = int(''.join(num_list))\n            b = int(str(n)[::-1])\n            c = int(str(n)[::-1][::-1])\n            # reverse the list of digits\n            num_list = list(str(a)[::-1])\n    # join the digits of the new number and return it\n    return int(''.join(num_list))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Initialize variables for the new number\n    new_num = ''\n    digits = list(num_str)\n\n    # Rearrange the digits in the number until the number becomes smaller than 10\n    while int(new_num) < 10:\n        # Check if the digit is larger than 9 or not\n        if int(digits[0]) > 9:\n            # If it is larger than 9, add 1 to the digit and remove the 1 from the list\n            digits[0] = str(int(digits[0]) + 1)\n            digits.pop(0)\n        else:\n            # If it is not larger than 9, add 1 to the digit\n            digits[0] = str(int(digits[0]) + 1)\n\n        # Convert the list of digits back to a string and add it to the new number\n        new_num = ''.join(digits)\n\n        # Rearrange the digits in the number until the number becomes smaller than 10\n        digits = list(new_num)\n\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # converting the given number to a string\n    number_str = str(n)\n\n    # converting the string to a list\n    number_list = list(number_str)\n\n    # finding the maximum digit in the number\n    max_digit = max(number_list)\n\n    # finding the digit that is one position higher than the maximum digit\n    new_digit = max_digit + 1\n\n    # finding the index of the new digit in the number\n    new_digit_index = number_list.index(new_digit)\n\n    # rearranging the digits of the number\n    for i in range(new_digit_index, len(number_list)):\n        number_list[i], number_list[new_digit_index] = number_list[new_digit_index], number_list[i]\n\n    # converting the list back to a string\n    new_number_str = ''.join(str(x) for x in number_list)\n\n    # converting the new string to an integer\n    new_number = int(new_number_str)\n\n    # returning the new number\n    return new_number\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Create a list to store the digits of the number\n    num_list = [int(digit) for digit in num_str]\n    # Reverse the list\n    num_list.reverse()\n    # Convert the reversed list back to a string\n    bigger_str = \"\".join([str(digit) for digit in num_list])\n    # Convert the string back to an integer\n    bigger_num = int(bigger_str)\n    # Return the next bigger number\n    return bigger_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert number to string\n    num_str = str(n)\n\n    # create a list of unique digits\n    unique_digits = list(set(num_str))\n\n    # sort the list in descending order\n    unique_digits.sort(reverse=True)\n\n    # create a list of digits in the next larger number\n    next_larger_num = []\n    for digit in unique_digits:\n        index = num_str.index(digit)\n        next_digit = int(digit) + 1\n        next_larger_num.append(next_digit)\n\n    # convert the list to a string and return the number\n    return int(''.join(map(str, next_larger_num)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_list = [int(x) for x in str(n)]\n    largest = max(num_list)\n    index = num_list.index(largest)\n    num_list.pop(index)\n    next_num = int(''.join(str(x) for x in num_list))\n    return next_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    largest_digit = max(digits)\n    largest_digit_index = digits.index(largest_digit)\n    \n    if largest_digit_index == len(digits) - 1:\n        return n\n    \n    digits[largest_digit_index] = '0'\n    \n    for i in range(largest_digit_index - 1, -1, -1):\n        if digits[i] == '9':\n            digits[i] = '0'\n            digits[i + 1] = '1'\n            break\n    \n    result = int(''.join(digits))\n    \n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Initialize the next bigger number to be the same as the input number\n    next_bigger = n\n\n    # Loop through each digit in the input number\n    for digit in str(n):\n        # Find the index of the digit in the next bigger number\n        index = n.index(digit)\n\n        # Replace the digit in the next bigger number with the digit to its left\n        next_bigger = next_bigger[:index] + next_bigger[index-1] + next_bigger[index+1:]\n\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    n_digits = len(digits)\n    \n    for i in range(n_digits-1):\n        if int(digits[i]) > int(digits[i+1]):\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            break\n        \n    n_new = int(''.join(digits))\n    \n    return n_new"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # Helper function to swap two digits\n    def swap(s, i, j):\n        s[i], s[j] = s[j], s[i]\n    \n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Initialize the number of swaps\n    num_swaps = 0\n    \n    # Iterate over the digits of the number in reverse order\n    for i in range(len(num_str)-1, -1, -1):\n        # Determine the index of the next digit to swap\n        j = (i+1) % 2 + (i+2) % 2\n        # Swap the digits if necessary\n        if num_str[i] < num_str[j]:\n            swap(num_str, i, j)\n            num_swaps += 1\n    \n    # Convert the swapped digits back to an integer and return it\n    return int(''.join(num_str))"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    def merge_sort(nums):\n        if len(nums) > 1:\n            mid = len(nums) // 2\n            left = nums[:mid]\n            right = nums[mid:]\n            merge_sort(left)\n            merge_sort(right)\n            i = j = k = 0\n            while i < len(left) and j < len(right):\n                if left[i] < right[j]:\n                    nums[k] = left[i]\n                    i += 1\n                else:\n                    nums[k] = right[j]\n                    j += 1\n                k += 1\n            while i < len(left):\n                nums[k] = left[i]\n                i += 1\n                k += 1\n            while j < len(right):\n                nums[k] = right[j]\n                j += 1\n                k += 1\n\n    nums1_sorted = nums1.copy()\n    nums2_sorted = nums2.copy()\n    merge_sort(nums1_sorted)\n    merge_sort(nums2_sorted)\n\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    res = []\n    for i in range(len(nums1_sorted)):\n        for j in range(len(nums2_sorted)):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1_sorted[i] + nums2_sorted[j], (i, j)))\n            else:\n                if nums1_sorted[i] + nums2_sorted[j] < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (nums1_sorted[i] + nums2_sorted[j], (i, j)))\n                elif nums1_sorted[i] + nums2_sorted[j] == min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (nums1_sorted[i] + nums2_sorted[j], (i, j)))\n\n    for val, pair in min_heap:\n        res.append(pair)\n\n    return res"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef min_heap(arr):\n    for i in range(len(arr)//2 - 1, -1, -1):\n        heapq.heapify(arr[i:])\n    return arr\n\ndef sort_arrays(nums1, nums2):\n    nums1.sort()\n    nums2.sort()\n\ndef k_smallest_pairs(nums1, nums2, k):\n    sort_arrays(nums1, nums2)\n    heap = min_heap([0] * k)\n    res = []\n    i, j = 0, 0\n    while len(heap) < k:\n        if nums1[i] + nums2[j] < nums1[i] or nums1[i] + nums2[j] < nums2[j]:\n            heapq.heappush(heap, -nums1[i])\n            heapq.heappush(heap, -nums2[j])\n            i += 1\n        else:\n            heapq.heappush(heap, -nums2[j])\n            j += 1\n    while heap:\n        res.append(-heapq.heappop(heap))\n    return res"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap of tuples (diff, idx1, idx2)\n    pq = []\n    for i, num1 in enumerate(nums1):\n        for j, num2 in enumerate(nums2):\n            diff = abs(num1 - num2)\n            if diff!= 0:\n                heapq.heappush(pq, (-diff, i, j))\n                if len(pq) > k:\n                    heapq.heappop(pq)\n    \n    # Extract the k smallest pairs from the min-heap and return as a list of tuples\n    result = []\n    while pq:\n        diff, idx1, idx2 = heapq.heappop(pq)\n        result.append((nums1[idx1], nums2[idx2]))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a heap of pairs, where each pair represents the minimum value of the two elements\n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    \n    # Extract the k pairs from the heap\n    result = []\n    while min_heap:\n        value, pair = heapq.heappop(min_heap)\n        result.append(pair)\n        if len(result) == k:\n            break\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i]+nums2[j], (i,j)))\n            else:\n                min_value, min_pair = heapq.heappop(heap)\n                if nums1[i]+nums2[j] < min_value:\n                    heapq.heappush(heap, (nums1[i]+nums2[j], (i,j)))\n    pairs = []\n    while heap:\n        min_value, min_pair = heapq.heappop(heap)\n        pairs.append(min_pair)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Sort the two arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Create a min heap to store the pairs\n    pairs = []\n    heapq.heapify(pairs)\n\n    # Initialize two pointers for the two arrays\n    i = j = 0\n\n    # Loop until we have k pairs\n    while k > 0:\n        # Calculate the sum of the current pair\n        current_sum = nums1[i] + nums2[j]\n\n        # If the sum is smaller than the minimum, update the minimum and add the pair to the heap\n        if len(pairs) == 0 or current_sum < pairs[0][1]:\n            heapq.heappush(pairs, (current_sum, (nums1[i], nums2[j])))\n\n        # If the sum is equal to the minimum, add the pair to the heap\n        elif current_sum == pairs[0][1]:\n            heapq.heappush(pairs, (current_sum, (nums1[i], nums2[j])))\n\n        # If the sum is greater than the minimum, remove the pair with the smallest sum from the heap and increment the pointers\n        else:\n            heappop(pairs)\n            i += 1\n            k -= 1\n            j += 1\n\n    # Return the k smallest pairs\n    result = []\n    while pairs:\n        result.append(pairs[0][1])\n        pairs = heapq.heappop(pairs)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of the first array\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, -num)\n\n    # create a min heap of the second array\n    min_heap_2 = []\n    for num in nums2:\n        heapq.heappush(min_heap_2, -num)\n\n    # find the k smallest pairs\n    result = []\n    while k > 0 and min_heap and min_heap_2:\n        pair_1 = -heapq.heappop(min_heap)\n        pair_2 = -heapq.heappop(min_heap_2)\n        if pair_1 < pair_2:\n            result.append((pair_1, pair_2))\n            heapq.heappush(min_heap, -pair_1)\n            k -= 1\n        else:\n            result.append((pair_2, pair_1))\n            heapq.heappush(min_heap_2, -pair_2)\n            k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n    nums1: List[int]\n        A list of integers representing the first array.\n    nums2: List[int]\n        A list of integers representing the second array.\n    k: int\n        The number of pairs to return.\n\n    Returns:\n    List[Tuple[int, int]]:\n        A list of tuples representing the k number of smallest pairs. Each tuple contains two integers, where the first integer represents one element from nums1 and the second integer represents one element from nums2.\n    \"\"\"\n\n    # Create a min heap of size k for the smallest pairs\n    heap = []\n\n    # Iterate over the arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # If the heap is full, remove the smallest pair and insert the new pair\n            if len(heap) == k:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-num1, -num2))\n            else:\n                heapq.heappush(heap, (-num1, -num2))\n\n    # Extract the k smallest pairs from the heap\n    pairs = [(-heapq.heappop(heap)[0], -heapq.heappop(heap)[0]) for _ in range(k)]\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap1 = []\n    min_heap2 = []\n    \n    for num in nums1:\n        heapq.heappush(min_heap1, num)\n    \n    for num in nums2:\n        if len(min_heap1) > 0 and len(min_heap2) > 0:\n            if num < min_heap1[0]:\n                heapq.heappop(min_heap1)\n            if num < min_heap2[0]:\n                heapq.heappop(min_heap2)\n        heapq.heappush(min_heap2, num)\n    \n    return min_heap2"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for num in nums1:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    result = []\n    while heap:\n        result.append([heap[0], heapq.heappop(heap)])\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize variables\n    minimum = float('inf')\n    product = 1\n    \n    # iterate through the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # update the minimum product if necessary\n            if product < minimum:\n                minimum = product\n                \n    # return the minimum product\n    return minimum"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for pair in list1:\n        if all(isinstance(x, tuple) for x in pair):\n            product = 1\n            for num in pair:\n                product *= num\n            min_product = min(min_product, product)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to keep track of the minimum product and the corresponding pairs of tuples\n    min_product = float('inf')\n    pair1 = None\n    pair2 = None\n    \n    # Loop through the list of tuples and find the pairs of tuples with the minimum product\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][1] < min_product:\n                min_product = list1[i][0] * list1[j][1]\n                pair1 = list1[i]\n                pair2 = list1[j]\n    \n    # Return the minimum product and the corresponding pairs of tuples\n    return min_product, pair1, pair2"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to store minimum product and list of pairs\n    min_prod = float('inf')\n    pairs = []\n\n    # Iterate over each tuple in the list\n    for tup in list1:\n        # Iterate over each other tuple in the list\n        for other_tup in list1:\n            # Check if the two tuples have the same element values\n            if tup!= other_tup and all(x == y for x, y in zip(tup, other_tup)):\n                # Calculate the product of the two tuples\n                prod = 1\n                for num in tup:\n                    prod *= num\n                for num in other_tup:\n                    prod *= num\n                # Check if the product is smaller than the current minimum\n                if prod < min_prod:\n                    # Update the minimum product and add the pair to the list\n                    min_prod = prod\n                    pairs = [tup, other_tup]\n\n    # Return the minimum product and the list of pairs\n    return min_prod, pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Finds the minimum product of pairs of tuples within a given list.\n\n    Args:\n    lst (list): List of tuples.\n\n    Returns:\n    int: Minimum product of pairs of tuples.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    min_tuple = None\n    \n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # If the product is less than the current minimum, update the variables\n            if product < min_product:\n                min_product = product\n                min_tuple = (list1[i], list1[j])\n    \n    # Return the minimum product and tuple\n    return min_product, min_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input, and returns the minimum product of the pairs of tuples within the list.\n    '''\n    # Initialize variables to store the minimum and maximum values\n    min_value = float('inf')\n    max_value = float('-inf')\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Get the current tuple\n        current_tuple = list1[i]\n\n        # Loop through the remaining tuples\n        for j in range(i+1, len(list1)):\n            # Get the next tuple\n            next_tuple = list1[j]\n\n            # Calculate the product of the current and next tuples\n            product = current_tuple[0] * next_tuple[1]\n\n            # If the product is less than the current minimum, update the minimum value\n            if product < min_value:\n                min_value = product\n\n            # If the product is greater than the current maximum, update the maximum value\n            elif product > max_value:\n                max_value = product\n\n    # Return the minimum product value\n    return min_value"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product to positive infinity\n    min_product = float('inf')\n    # Initialize the minimum tuple to None\n    min_tuple = None\n\n    # Iterate through the list of tuples\n    for tuple1 in list1:\n        # Iterate through the list of tuples\n        for tuple2 in list1:\n            # Check if the tuples have different elements\n            if len(set(tuple1) & set(tuple2)) > 0:\n                # Calculate the product of the two tuples and compare it with the minimum product\n                product = tuple1[0] * tuple2[0]\n                if product < min_product:\n                    min_product = product\n                    min_tuple = tuple1, tuple2\n\n    # Return the minimum product and the tuple with the minimum product\n    return min_product, min_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize the minimum product and set it to infinity\n    min_prod = float('inf')\n    # loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # find the product of the two tuples and compare it to the current minimum\n            prod = list1[i][0] * list1[j][1]\n            if prod < min_prod:\n                min_prod = prod\n    # return the minimum product\n    return min_prod"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return 0\n    \n    # Initialize variables to keep track of minimum and maximum values\n    min_val = list1[0]\n    max_val = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i][0] < min_val[0]:\n            min_val = (list1[i][0], list1[i][1])\n        elif list1[i][0] == min_val[0]:\n            if list1[i][1] < min_val[1]:\n                min_val = (list1[i][0], list1[i][1])\n        \n        if list1[i][1] > max_val[1]:\n            max_val = (list1[i][0], list1[i][1])\n        elif list1[i][1] == max_val[1]:\n            if list1[i][0] > max_val[0]:\n                max_val = (list1[i][0], list1[i][1])\n    \n    # Calculate the minimum product using the given formula\n    min_product = min_val[0] * min_val[1]\n    if max_val[0]!= 0 and min_val[1]!= 0:\n        min_product = min(min_product, max_val[0] * max_val[1])\n    \n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list.\")\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0] # initialize minimum value to first value in list\n    for val in listval: # iterate through rest of list\n        if val < min_val: # if current value is smaller than min_val, update min_val\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in listval:\n        if type(i) == float and type(min_val)!= float:\n            min_val = i\n        elif type(i) == int and type(min_val)!= int:\n            min_val = i\n        elif type(i) == str and type(min_val)!= str:\n            min_val = i\n        elif type(i) == bool and type(min_val)!= bool:\n            min_val = i\n        elif type(i) == list and type(min_val)!= list:\n            min_val = i\n        elif type(i) == tuple and type(min_val)!= tuple:\n            min_val = i\n        elif type(i) == set and type(min_val)!= set:\n            min_val = i\n        elif type(i) == dict and type(min_val)!= dict:\n            min_val = i\n        elif i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0] #initialize minimum value to first element of list\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i] #if current element is less than minimum, update minimum value\n    return min_val #return minimum value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize variables\n    min_val = None\n    for value in listval:\n        # Check if current value is smaller than the current minimum value\n        if min_val is None or value < min_val:\n            min_val = value\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('_(.?)')\n    return pattern.sub(lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('_(.)', re.IGNORECASE)\n    return pattern.sub(lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.)', lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to camel case\n    camel_case = ''.join([word[0].lower(), word[1:]])\n\n    # Remove any leading or trailing underscores\n    camel_case = re.sub(r'^_|_$', '', camel_case)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case string to camel case string\n    camel_case = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    camel_case = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', camel_case)\n    return camel_case.lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the given snake case word to a regular expression pattern\n    pattern = re.compile(r'_(.?)')\n\n    # Iterate over the substrings of the given word using the pattern\n    result = ''\n    for substring in pattern.findall(word):\n        # If the substring is a single character, convert it to uppercase and append it to the result\n        if len(substring) == 1:\n            result += substring.upper()\n        # If the substring is a multiple character, capitalize the first character and append the rest of the substring in lowercase to the result\n        else:\n            result += substring[0].upper() + substring[1:]\n\n    # Remove any leading or trailing underscores from the result\n    result = result.lstrip('_').rstrip('_')\n\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(_[a-z])', lambda x: x.group(1).upper(), word)\n    return word[0].upper() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case string to a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n    \n    # Convert the first word to uppercase and all other words to lowercase\n    camel_case_words = []\n    for i in range(len(words)):\n        if i == 0:\n            camel_case_words.append(words[i].capitalize())\n        else:\n            camel_case_words.append(words[i].lower())\n    \n    # Join the camel case words together\n    camel_case_word = ''.join(camel_case_words)\n    \n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # replace all underscores with spaces and capitalize the first letter of each word\n    words = re.findall(r'_(.?)', word)\n    camel_word = words[0].upper()\n    for i in range(1, len(words)):\n        camel_word += words[i]\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words based on underscores\n    words = re.findall(r'_([a-z])', word)\n\n    # Convert the first word to camel case\n    camel_word = words[0]\n    camel_word = camel_word.capitalize()\n\n    # Convert the remaining words to camel case\n    for i in range(1, len(words)):\n        camel_word += words[i].capitalize()\n\n    # Return the camel case string\n    return camel_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return \"Invalid input. The length of the list is less than the nth element.\"\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        nth_element = list1[n-1]\n        return nth_element\n    except IndexError:\n        print(\"IndexError: List does not have that many elements.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if isinstance(list1, list):\n            if isinstance(list1[0], tuple):\n                return list1[n-1]\n            else:\n                print(\"The input list is not a list of tuples.\")\n        else:\n            print(\"The input is not a list.\")\n    except IndexError:\n        print(\"The index provided is out of range.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input is a list of tuples\n    if type(list1[0]) == tuple:\n        # Extract the nth element from the list of tuples\n        return list1[n-1]\n    else:\n        # If the input is not a list of tuples, return None\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns the nth element from the list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n    list1: list\n        A list of values to search for in list2.\n    list2: list\n        A list of values to search for in list1.\n\n    Returns:\n    bool\n        True if any value in list1 exists in list2, False otherwise.\n    \"\"\"\n\n    for value in list1:\n        if value in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Create a set of values in the first list\n    set1 = set(list1)\n    # Loop through the second list\n    for element in list2:\n        # Check if the element is in the set of values in the first list\n        if element in set1:\n            # If it is, return True\n            return True\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns a boolean value indicating whether any value in the first list exists in the second list or not.\n    '''\n    # Check if any value in the first list exists in the second list\n    for val in list1:\n        if val in list2:\n            return True\n    # If no value in the first list exists in the second list, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    first_max = float('-inf')\n    second_max = float('-inf')\n\n    for i in arr:\n        if i > max_product:\n            first_max = max_product\n            second_max = max_product\n            max_product = i\n        elif i > first_max:\n            second_max = first_max\n            first_max = i\n        elif i > second_max:\n            second_max = i\n\n    if max_product == float('-inf'):\n        print('No pair found.')\n    else:\n        print('Pair:', arr[arr.index(max_product)], arr[arr.index(second_max)])\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (-1, -1)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_pair[0]:\n                max_pair = (current_product, arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair with the highest product.\n    \"\"\"\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2 and num!= max1:\n            max2 = num\n    return max1, max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = [-1, -1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_pair[0]:\n                max_pair = [product, arr[i]]\n            elif product > max_pair[1]:\n                max_pair = [product, arr[j]]\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_product_pair = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_product_pair = [arr[i], arr[j]]\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n\n        if i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2:\n            min2 = i\n\n    return max(max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n\n    Parameters:\n    arr (list): An array of integers.\n\n    Returns:\n    tuple: A tuple containing the indices of the two elements in the array with the highest product.\n    \"\"\"\n    max_pair = (0, 1)\n    max_product = arr[0] * arr[1]\n\n    for i in range(2, len(arr)):\n        current_product = arr[i] * arr[i-1]\n        if current_product > max_product:\n            max_product = current_product\n            max_pair = (i-1, i)\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Given an array of integers, find the pair with the highest product.\n    :param arr: A list of integers.\n    :return: A tuple containing the indices of the two numbers that have the highest product.\n    \"\"\"\n    # Initialize variables\n    max_product = float('-inf')\n    best_pair = None\n\n    # Loop over all possible pairs of indices\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            # Calculate the product of the two numbers\n            product = arr[i] * arr[j]\n\n            # Update the max_product variable if the product is greater\n            if product > max_product:\n                max_product = product\n                best_pair = (i, j)\n\n    return best_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize two variables to store the maximum and minimum values in the array\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    \n    # Iterate through the array and update the maximum and minimum values\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n            \n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n            \n    # Return the maximum product\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    common_elements = []\n    for tup in Input:\n        if len(set(tup[0])) > 1:\n            common_elements.append(tup[0][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a dictionary where the keys are the common first element of the tuples and the values are the tuples containing that element.\n    '''\n    groups = {}\n    for i in range(len(Input)):\n        first_element = Input[i][0]\n        if first_element in groups:\n            groups[first_element].append(Input[i])\n        else:\n            groups[first_element] = [Input[i]]\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for item in Input:\n        if item[0] in common:\n            continue\n        common.append(item[0])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty dictionary to store the counts of first element in each tuple\n    counts = {}\n    # loop through the list of tuples and update the count for the first element in each tuple\n    for item in Input:\n        if item[0] in counts:\n            counts[item[0]] += 1\n        else:\n            counts[item[0]] = 1\n    # find the tuple with the maximum count of the first element\n    max_count = max(counts.values())\n    # loop through the list of tuples and add the tuple with the maximum count of the first element to a list\n    result = []\n    for item in Input:\n        if counts[item[0]] == max_count:\n            result.append(item)\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n\n    for tup in Input:\n        if tup[0] == common_element:\n            common_element = tup[1]\n        elif tup[0] is None:\n            common_element = tup[1]\n\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    for i in range(len(Input)): \n        for j in range(i+1, len(Input)): \n            if Input[i][0] == Input[j][0]: \n                if common_first_element is None: \n                    common_first_element = Input[i][0]\n                else: \n                    common_first_element = common_first_element.intersection(Input[j][1])\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # Find the first element of each tuple in the input list\n    first_elements = [x[0] for x in Input]\n\n    # Create a dictionary to store the number of times each first element appears\n    count_dict = {}\n    for element in first_elements:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    # Find the most common first element\n    max_count = 0\n    common_element = None\n    for element, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            common_element = element\n\n    # Return the most common first element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    # Initialize an empty dictionary to store common elements\n    common_dict = {}\n    # Iterate through the input list of tuples\n    for i in Input:\n        # Get the first element of the tuple\n        first = i[0]\n        # If the first element is already in the dictionary, increment its count\n        if first in common_dict:\n            common_dict[first] += 1\n        # If the first element is not in the dictionary, add it with a count of 1\n        else:\n            common_dict[first] = 1\n    # Iterate through the dictionary and return the tuple with the highest count as the common element\n    max_count = max(common_dict.values())\n    for key, value in common_dict.items():\n        if value == max_count:\n            return (key,)\n    # If no common element is found, return None\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = []\n\n    for i in Input:\n        if len(i) > 0:\n            if i[0] not in common_first:\n                common_first.append(i[0])\n\n    return common_first"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = None \n    for i in lst: \n        if len(i) > max_length: \n            max_length = len(i) \n            max_element = i \n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = len(max(lst, key=len))\n    max_element = max(lst, key=len)\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = ''\n    for elem in lst: \n        if len(elem) > max_length: \n            max_length = len(elem) \n            max_elem = elem \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_element = elem\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(map(len, lst)) \n    max_elem = next(filter(lambda x: len(x) == max_len, lst)) \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Loop through the list and round each number\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n    \n    # Calculate the total sum and multiply by the length of the list\n    total_sum = sum(list1)\n    result = total_sum * len(list1)\n    \n    # Print the result\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(map(round, list1))\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round every number in the list\n    list1 = [round(x) for x in list1]\n\n    # Calculate the total sum\n    total_sum = sum(list1)\n\n    # Print the result\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(10))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1,n+1,2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # iterate through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the cube of each number\n        cube = i**3\n        \n        # add the cube to the sum\n        sum += cube\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_tuple = \"\"\n    for element in test_tup:\n        concatenated_tuple += str(element) + \" \"\n    return concatenated_tuple.strip()"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for item in test_tup:\n        concatenated_str += str(item) + \" \"\n    return concatenated_str[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # initializing an empty string to store the concatenated elements\n    concatenated_string = ''\n    # iterating over each element of the tuple\n    for element in test_tup:\n        # concatenating the element to the concatenated_string\n        concatenated_string += str(element)\n    # returning the concatenated_string\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    This function takes a tuple as input and returns a concatenated string by joining each element of the tuple with the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = delimiter.join(map(str, test_tup))\n    return concatenated_string\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(map(str, test_tup))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    return sum / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n    average = total / count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    average_of_cubes = sum_of_cubes / (n*n*n)\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_cube = sum_cubes / n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    avg = sum / count\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    sum_of_cube = 0\n    for i in range(1, n+1):\n        cube = i ** 3\n        count += 1\n        sum_of_cube += cube\n    return sum_of_cube / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initializing a variable to store the sum of cubes\n    sum_of_cubes = 0\n\n    # iterating through the first n natural numbers\n    for i in range(1, n+1):\n        # calculating the cube of the number\n        cube = i**3\n        \n        # adding the cube to the sum\n        sum_of_cubes += cube\n    \n    # dividing the sum of cubes by n and storing it in a variable\n    average_of_cubes = sum_of_cubes / n\n    \n    # printing the result\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average_of_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(n):\n        num = i + 1\n        cube = num ** 3\n        sum += cube\n        count += 1\n    avg = sum / count\n    print(\"The average of cubes of the first {} natural numbers is: {}\".format(n, avg))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_cube += i**3\n        count += 1\n\n    if count!= 0:\n        avg_cube = sum_cube / count\n        return avg_cube\n    else:\n        return \"No numbers to average.\""
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    # initialize an empty list to store the rear index elements\n    rear_elements = []\n    # iterate over each string in the given tuple\n    for string in test_tuple:\n        # extract only the rear index element from the string\n        rear_element = string[-1]\n        # add the extracted element to the list of rear index elements\n        rear_elements.append(rear_element)\n    # return the list of rear index elements\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for i in range(len(test_tuple)):\n        rear_index_list.append(test_tuple[i][-1])\n    return rear_index_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for i in range(len(test_tuple)):\n        rear_index_list.append(test_tuple[i][-1])\n    return rear_index_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    extracted_strings = []\n    for string in test_tuple:\n        rear_index = len(string) - 1\n        extracted_strings.append(string[rear_index])\n    return extracted_strings"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [str(test_tuple[i][-1]) for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_tuple = ()\n    for i in range(len(test_tuple)):\n        rear_index_tuple += (test_tuple[i][-1],)\n    return rear_index_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # loop through each tuple element\n    for element in test_tuple:\n        # if element is a string, extract the rear index element and print it\n        if isinstance(element, str):\n            rear_index_element = element[-1]\n            print(rear_index_element)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        result.append(test_tuple[i][-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for i in range(len(lst)):\n        if x in lst[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes in a list of sublists and an element x and counts the number of sublists \n    in the list that contain the element x.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for lst in lst:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    # create a new list to store the odd numbers\n    new_nums = []\n    # iterate through the input list\n    for num in nums:\n        # check if the number is odd\n        if num % 2!= 0:\n            # if it is odd, add it to the new list\n            new_nums.append(num)\n    # return the new list of odd numbers\n    return new_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = [num for num in nums if num % 2!= 0]\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Match the date in the given string\n    match = re.match(pattern, dt)\n    # If the date matches, extract the date components and convert them to yyyy-mm-dd format\n    if match:\n        year, month, day = match.groups()\n        new_date = '{}-{}-{}'.format(day, month, year)\n        return new_date\n    # If the date doesn't match, return the original date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Remove the time part of the date\n    date = re.sub(r'\\s+\\d+:\\d+', '', dt)\n    # Convert the date format from yyyy-mm-dd to dd-mm-yyyy\n    date_format = date.replace('-', '/')\n    return date_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define the pattern for the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # define the regex pattern for matching the pattern in the date string\n    regex = re.compile(pattern)\n    # match the pattern in the date string using regex and extract the year, month, and day components\n    match = regex.match(dt)\n    year, month, day = match.groups()\n    # create a new date string with the day, month, and year components in the desired order\n    new_date = day + '-' + month + '-' + year\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the pattern to match the date in yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use re.match() to match the pattern with the date in the input string\n    match = re.match(pattern, dt)\n    # Check if the match object is not None\n    if match:\n        # Extract the matched groups (year, month, and day) from the match object\n        year, month, day = match.groups()\n        # Format the date in dd-mm-yyyy format\n        return f\"{day}-{month}-{year}\"\n    else:\n        # Return the original input string if the date format is not yyyy-mm-dd\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # use the re.sub() function to replace the year with the new format and return the result\n    return re.sub(pattern, r'\\2-\\1-\\3', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    match = re.match(pattern, dt)\n    if match:\n        date_parts = match.group().split('-')\n        day = date_parts[2]\n        month = date_parts[1]\n        year = date_parts[0]\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression to match date format in yyyy-mm-dd format\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n\n    # Search for the first match of the pattern in the date string\n    match = pattern.search(dt)\n\n    # If no match is found, return the original date string\n    if not match:\n        return dt\n\n    # Extract the groups from the match object\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n\n    # Convert the day, month and year to the required format\n    formatted_date = f'{day}-{month}-{year}'\n\n    return formatted_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    result = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    yyyy_match = re.match(yyyy_pattern, dt)\n    if yyyy_match:\n        day, month, year = yyyy_match.groups()\n        formatted_dt = f'{day}-{month}-{year}'\n        return formatted_dt\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Step size for shell sort\n    gap = n // 2\n\n    while gap > 0:\n        # Move the gap to the next position\n        for i in range(gap, n):\n            # Insert the current element at its correct position\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                # Move the elements to the right by the gap\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = my_list[i]\n\n        # Decrease the gap by a factor of 3/2\n        gap = int(gap/3)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    # Calculate the maximum gap\n    gap = len(my_list) // 2\n    while gap > 0:\n        # Insertion sort for this gap size\n        for i in range(gap, len(my_list)):\n            # Last element moved to its correct position\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                # Swap adjacent elements if they are in the wrong order\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        # Decrease gap size\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    # Do h steps, where h is the largest integer such that h*n <= len(my_list)\n    for h in range(n//2, 0, -1):\n        # Perform insertion sort for h elements\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n\n    n = len(my_list)\n\n    # h = 1\n    # while h < n // 3:\n    #     h = 3 * h + 1\n    # h = n // 3\n    h = 1\n    while h < n // 3:\n        h = 3 * h + 1\n    while h >= 1:\n        # Insertion sort for h increments\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            while j >= h and my_list[j - h] > key:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = key\n        h //= 3\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Find the largest gap (gap = n/2)\n    n = len(my_list)\n    gap = n // 2\n    \n    # Insertion sort on gapped intervals, starting from gap\n    while gap > 0:\n        # Traverse through all elements\n        for i in range(gap, n):\n            # Save the current element\n            temp = my_list[i]\n            \n            # Move elements of current gap size backward\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            \n            # The current element is now in its correct position\n            my_list[j] = temp\n        \n        # Decrease gap size\n        gap //= 2\n    \n    # print the sorted list\n    print(\"Sorted list is:\", my_list)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths.\")\n        return\n    # Create an empty list to store the elementwise and tuples\n    result = []\n    # Loop through the tuples and add the elementwise and tuples to the result list\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The length of the two tuples must be the same.')\n    return tuple(zip(test_tup1, test_tup2, test_tup1 & test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            and_tup += (test_tup1[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as inputs and returns the elementwise and tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # Check if both tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have equal length.\")\n    \n    # Extract the elementwise and tuples using a list comprehension\n    and_tup = [x1 and x2 for x1, x2 in zip(test_tup1, test_tup2)]\n    \n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tuples = []\n    for i in range(len(test_tup1)):\n        and_tuples.append((test_tup1[i] & test_tup2[i]))\n    return tuple(and_tuples)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize empty list to hold the results\n    and_list = []\n    \n    # iterate through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # extract the two elements and perform the logical AND operation\n        and_result = test_tup1[i] & test_tup2[i]\n        # append the result to the list of results\n        and_list.append(and_result)\n        \n    # return the list of results\n    return and_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i], test_tup2[i])\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # Extract each element from each tuple and perform elementwise and operation\n    result_tup = tuple(elem1 & elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculating the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Checking if the discriminant is real\n    if disc < 0:\n        print(\"The discriminant is negative, hence the directrix does not exist.\")\n    else:\n        # Calculating the two solutions\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n\n        # Printing the two solutions\n        print(\"The two solutions are\", root1, \"and\", root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the discriminant of the quadratic equation ax^2 + bx + c = 0\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Calculate the two real roots of the quadratic equation\n        x1 = (-b - discriminant**0.5) / (2*a)\n        x2 = (-b + discriminant**0.5) / (2*a)\n\n        # Return the two real roots\n        return (x1, x2)\n    elif discriminant == 0:\n        # If the discriminant is zero, the directrix is a single real root\n        x = -b / (2*a)\n        return (x, x)\n    else:\n        # If the discriminant is negative, there are no real roots\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "a(x^2) + bx"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b ** 2 - 4 * a * c\n    if delta > 0:\n        x1 = (-b + delta ** 0.5) / (2 * a)\n        x2 = (-b - delta ** 0.5) / (2 * a)\n        return x1, x2\n    elif delta == 0:\n        x1 = -b / (2 * a)\n        x2 = -b / (2 * a)\n        return x1, x2\n    else:\n        return \"No real roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    directrix = (-b + discriminant**0.5)/(2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # find the determinant of the matrix\n    det = b**2 - 4*a*c\n    # check if the determinant is equal to 0\n    if det == 0:\n        print(\"The directrix is either horizontal or vertical.\")\n    # if it's positive, the directrix is in the positive quadrant\n    elif det > 0:\n        x = (-b + det**0.5) / (2*a)\n        print(\"The directrix is between x={:.2f} and x={:.2f}\".format(x, x))\n    # if it's negative, the directrix is in the negative quadrant\n    else:\n        x = (-b - det**0.5) / (2*a)\n        print(\"The directrix is between x={:.2f} and x={:.2f}\".format(x, x))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    if a == 0:\n        return None\n\n    if b**2 - 4*a*c < 0:\n        return None\n\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "Now we have the directrix of the parabola, which is the point where the slope of the parabola is negative."
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        return \"There are no real roots for this parabola.\"\n    elif discriminant == 0:\n        root = -b / (2 * a)\n        return f\"There is one real root: {root}\"\n    else:\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n        return f\"There are two real roots: {root1}, {root2}\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return x1, x2\n    elif discriminant == 0:\n        x = -b / (2*a)\n        return x\n    else:\n        print(\"The given values of a, b and c do not make a parabola.\")"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set of elements in both lists\n    common = set(list1) & set(list2)\n    # If the set is not empty, then there is at least one common element\n    if common:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for item in list1:\n        if item in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set from each list and find the intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    common_set = set1.intersection(set2)\n\n    # If the length of the intersection is greater than 0, then there is a common element\n    if len(common_set) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Initialize a set to store the common elements of the two lists\n    common = set()\n    \n    # Iterate through each element of list1\n    for element1 in list1:\n        # Check if the element is also present in list2\n        if element1 in list2:\n            # If it is, add it to the set of common elements\n            common.add(element1)\n    \n    # Return True if the set of common elements is not empty, otherwise return False\n    if common:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set of elements from both lists\n    set1 = set(list1)\n    set2 = set(list2)\n    # Find the intersection of the two sets and convert it back to a list\n    common = list(set1.intersection(set2))\n    # Check if the list is empty, which means there were no common elements\n    if not common:\n        return False\n    else:\n        return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Loop through both lists\n    for num in list1:\n        if num in list2:\n            return True\n\n    # If we get to this point, no common element was found\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    s = (base1 + base2 + height) / 2\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    return s * (1 - area)\n\nprint(median_trapezium(10, 5, 20))"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapezium\n    area1 = base1 * height / 2\n    area2 = base2 * height / 2\n    \n    # Calculate the length of the trapezium\n    trapezium_length = area1 + area2\n    \n    # Calculate the median length of the trapezium\n    if trapezium_length % 2 == 0:\n        median = (area1 + area2) / 2\n    else:\n        median = (area1 + area2 + base1) / 2\n    \n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    if base1 < base2:\n        base1, base2 = base2, base1  # swap bases if base1 is smaller than base2\n\n    area = 0.5 * base1 * height\n    area += 0.5 * base2 * height\n    area += 0.5 * base1 * height\n\n    return (area / 2) * height"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the sum of all sides and the area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # Calculate the length of the half base\n    half_base = (base1 + base2) / 2\n    \n    # Calculate the number of equal parts and the lengths of each part\n    num_equal_parts = int(height / area)\n    part_lengths = [half_base] * num_equal_parts\n    \n    # Calculate the length of the trapezium\n    trapezium_length = sum(part_lengths)\n    \n    # Return the median length of the trapezium\n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * base2 + height * base1 * (base2 - base1) + height * (base2 - base1) * (base2 + base1)\n    # Use the Pythagorean theorem to find the length of the perpendicular\n    length = height * (base1 ** 2 + base2 ** 2) ** 0.5\n    # Calculate the median by taking the average of the two sides\n    median = (area - length) / (2 * height)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    # Calculate the length of the base of the trapezium\n    base = 0.5 * (base1 + base2)\n    # Calculate the difference between the height and the area of the trapezium\n    difference = height - area\n    # Calculate the length of the longer base of the trapezium\n    longer_base = base + difference\n    # Return the median length of the trapezium\n    return longer_base"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the area of the trapezium using the trapezium formula\n    area = 0.5 * base1 * base2 + 0.5 * base2 * height\n    # Find the length of the base of the trapezium using the trapezium formula\n    base_length = 0.5 * math.sqrt(area - base1 * base2)\n    # Find the length of the hypotenuse using the Pythagorean theorem\n    hypotenuse_length = math.sqrt(height**2 - base_length**2)\n    # Find the length of the half of the trapezium that is above the median\n    above_median_length = (base1 + base2) * math.sqrt(1 + ((height/2)**2))\n    # Find the length of the half of the trapezium that is below the median\n    below_median_length = (base1 + base2) * math.sqrt(1 - ((height/2)**2))\n    # Combine the lengths of the trapezium that are above and below the median\n    combined_length = above_median_length + below_median_length\n    # Find the median length of the trapezium\n    median_length = 0.5 * (base_length + combined_length)\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    return 0.5 * (base1 + base2 + height)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    Parameters:\n    base1 (int): The length of the first base of the trapezium.\n    base2 (int): The length of the second base of the trapezium.\n    height (int): The height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the length of the base of the trapezium that is halfway up the height\n    base = 0.5 * (base1 + base2)\n\n    # Calculate the length of the other base of the trapezium that is halfway up the height\n    other_base = 0.5 * (base1 + base2) - base\n\n    # Calculate the length of the hypotenuse of the trapezium\n    hypotenuse = 0.5 * (base1 + base2 + other_base)\n\n    # Calculate the area of the base\n    area_base = 0.5 * base * height\n\n    # Calculate the area of the other base\n    area_other_base = 0.5 * other_base * height\n\n    # Calculate the area of the hypotenuse\n    area_hypotenuse = 0.5 * hypotenuse * height\n\n    # Calculate the area of the trapezium\n    area_trapezium = area_base + area_other_base + area_hypotenuse\n\n    # Calculate the length of the perpendicular from the base to the hypotenuse\n    perpendicular_length = 0.5 * (area_base ** 0.5 + area_hypotenuse ** 0.5)\n\n    # Calculate the area of the perpendicular\n    area_perpendicular = 0.5 * perpendicular_length ** 2\n\n    # Calculate the area of the other half of the trapezium\n    area_other_half = area - area_trapezium\n\n    # Calculate the area of the trapezium's base part\n    area_base_half = 0.5 * base * height\n\n    # Calculate the area of the trapezium's other base part\n    area_other_base_half = 0.5 * other_base * height\n\n    # Calculate the area of the trapezium's hypotenuse part\n    area_hypotenuse_half = 0.5 * hypotenuse * height\n\n    # Calculate the area of the trapezium's base part\n    area_trapezium_base_half = area_base_half + area_other_base_half + area_hypotenuse_half\n\n    # Calculate the area of the trapezium's other base part\n    area_trapezium_other_base_half = area_trapezium_base_half - area_trapezium_base_half ** 2\n\n    # Calculate the area of the trapezium's hypotenuse part\n    area_trapezium_hypotenuse_half = area_trapezium_base_half - area_trapezium_other_base_half\n\n    # Calculate the length of the trapezium's midsection\n    midsection_length = 0.5 * (area_trapezium_other_base_half + area_trapezium_hypotenuse_half)\n\n    # Calculate the area of the trapezium's midsection\n    area_midsection = 0.5 * midsection_length ** 2\n\n    # Calculate the area of the trapezium's overall shape\n    area_overall = area_trapezium + area_trapezium_base_half + area_trapezium_other_base_half + area_trapezium_hypotenuse_half + area_trapezium_base_half ** 2 + area_trapezium_other_base_half ** 2 + area_trapezium_hypotenuse_half ** 2 + area_midsection\n\n    # Calculate the area of the trapezium's center point\n    area_center = 0.5 * area_overall\n\n    # Calculate the median area\n    median_area = 0.5 * (area_center + area_perpendicular)\n\n    # Calculate the median length of the trapezium\n    median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    if area % 2 == 0:\n        mid_area = area / 2\n        left_area = mid_area\n        right_area = mid_area\n    else:\n        mid_area = area / 2\n        left_area = mid_area\n        right_area = mid_area + 0.5\n\n    left_length = 0.5 * base1\n    right_length = 0.5 * (base2 - left_length)\n    middle_length = 0.5 * (base1 + base2)\n\n    if left_area > right_area:\n        return middle_length\n    elif left_area < right_area:\n        return left_length\n    else:\n        return middle_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for element in arr:\n        if element > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(f\"{i} is greater than {number}.\")\n        else:\n            print(f\"{i} is not greater than {number}.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[^b]*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\b\\w*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    return result.group() if result else None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as an input and returns the last digit of the number.\n    '''\n    # convert the number to a string\n    num = str(n)\n    # get the last character of the string\n    last_char = num[-1]\n    # convert the last character to an integer\n    last_int = int(last_char)\n    # return the last integer\n    return last_int"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    \n    # find the length of the string\n    len_str = len(num_str)\n    \n    # find the last digit of the number\n    last_digit = num_str[len_str-1]\n    \n    # return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # convert the number to a string to remove leading zeros\n    num = str(n)\n    # extract the last digit of the string\n    last_digit = int(num[-1])\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    # initializing an empty list to store the negative numbers\n    negative_numbers = []\n\n    # iterating over each number in the list\n    for num in list1:\n        # checking if the number is negative\n        if num < 0:\n            # appending the negative number to the list\n            negative_numbers.append(num)\n\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list of numbers and returns a list of their negative numbers.\n    '''\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers from the original list.\n    '''\n    # initialize an empty list to store the negative numbers\n    neg_list = []\n    \n    # iterate through each element of the input list\n    for num in list1:\n        # check if the element is negative\n        if num < 0:\n            # if it is, append it to the neg_list\n            neg_list.append(num)\n    \n    # return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n    \"\"\"\n    new_lst = []\n    for num in lst:\n        if num < 0:\n            new_lst.append(num)\n    return new_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers in the original list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    return ''.join([char for char in string if char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the non-odd characters\n    new_str = ''\n    # loop through each character in the input string\n    for char in str1:\n        # check if the character is odd\n        if char % 2!= 0:\n            # if it is odd, add it to the new string\n            new_str += char\n    # return the new string with odd characters removed\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    \n    # Loop through each character in the list\n    for i in range(len(char_list)):\n        # Check if the character is odd\n        if char_list[i] % 2!= 0:\n            # Remove the character from the list\n            del char_list[i]\n    \n    # Convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the result\n    result = ''\n    # loop through each character in the input string\n    for char in str1:\n        # if the character is odd, add it to the result string\n        if int(char) % 2!= 0:\n            result += char\n    # return the final result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(filter(lambda x: x.isdigit(), str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x.isalpha(), str1))"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[j][0] == test_list[i][1]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    Parameters:\n    test_list (list): a list of tuples\n\n    Returns:\n    int: the number of bidirectional tuple pairs in the list\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if (test_list[i], test_list[j]) in test_list or (test_list[j], test_list[i]) in test_list:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j][0] or (test_list[j][0], test_list[i][1]) in test_list[i][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        if num > 0 and num % 2 == 0:\n            result = result + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_int = 1\n    for num in L:\n        single_int *= num\n    return single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # convert the list to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(L)]\n    # initialize the result to 0\n    result = 0\n    # iterate over the digits and add the corresponding multiple to the result\n    for digit in digits:\n        result += digit * L.count(digit)\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 0\n    for num in L:\n        single_integer = single_integer * 10 + num\n    return single_integer"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b([A-Za-z]+)\\b\\s*[A-Z]\\s*(\\w+)\\b', text)\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+\\b', text)\n\n    # Check if there are any adverbs in the sentence\n    if not adverbs:\n        return None\n\n    # Sort the adverbs based on their positions in the sentence\n    adverbs = sorted(adverbs, key=lambda x: text.index(x))\n\n    # Find the first adverb and its position\n    first_adverb = adverbs[0]\n    first_adverb_position = text.index(first_adverb)\n\n    return first_adverb_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b(?:the|a|an|at|on|by|from|into|over|with|about|below|above|between|through|between)\\b'\n\n    # Use the regular expression search method to find all occurrences of adverbs\n    matches = re.findall(pattern, text)\n\n    # Create a list of tuples containing the adverb and its position in the sentence\n    positions = [(match, text.lower().index(match.lower())) for match in matches]\n\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(\\w+\\s+)?(not|very|rarely|not+\\s+very|not+\\s+rarely|rarely|very)\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        adverb_positions = [(match[1], match.start()) for match in matches[0]]\n        adverb_positions.sort(key=lambda x: x[1])\n        return adverb_positions\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use a regular expression to find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+(er|est|es|ed|ing|ly|lys|less|les)\\b', text, re.IGNORECASE)\n    # Print the list of adverbs and their positions\n    for i, adv in enumerate(adverbs):\n        print(f'{adv}: {i+1}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b(adverb)\\b', text)\n    positions = re.finditer(r'\\b(adverb)\\b', text)\n    result = []\n    for i, adverb in enumerate(adverbs):\n        result.append({'adverb': adverb, 'position': positions.span()[i]})\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression to find the first adverb\n    pattern = r'\\b\\w+\\b\\s*(to|because|if|as|when)\\b'\n    # Find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # If there are no matches, return None\n    if not matches:\n        return None\n    # Extract the adverb and its position from the match\n    adverb, pos = matches[0].split()\n    # Convert the position to an integer\n    pos = int(pos)\n    # Return a tuple of the adverb and its position\n    return adverb, pos"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b([a-zA-Z]+)(\\W+)', text)\n\n    # Sort the adverbs by their positions in the sentence\n    adverbs = sorted(adverbs, key=lambda x: text.find(x[0]))\n\n    # Print the adverbs and their positions\n    print('Adverbs and their positions:')\n    for adverb, position in adverbs:\n        print(f'{adverb} at position {position}')\n\n    # Print the first adverb and its position\n    if adverbs:\n        print(f'\\nFirst adverb: {adverbs[0][0]} at position {adverbs[0][1]}')\n    else:\n        print('No adverbs found.')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\w+', text.lower())\n    # Loop through the words\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if word in ['very','really', 'amazing', 'amazingly', 'great', 'ugly', 'terrible', 'terribly']:\n            # If it is, print the word and its position in the sentence\n            print(f'{word} found at position {i}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    adverbs = re.findall(r\"\\b\\w*adverb\\w*\\b\", text)\n    positions = []\n    for i, adv in enumerate(adverbs):\n        if adv.endswith(\"ly\"):\n            positions.append((i, i+3))\n        elif adv.endswith(\"ly\"):\n            positions.append((i, i+2))\n    return positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n\n    :param l: Length of the side of the cube.\n    :type l: float\n    :return: Surface area of the cube.\n    :rtype: float\n    \"\"\"\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    surface_area = (2 * l + 2 * l + 2 * l) * l * l\n    return surface_area - area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l ** 2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = array('i', 0)\n    total_count = array('i', 0)\n    \n    for num in nums:\n        if num > 0:\n            pos_count.append(1)\n        else:\n            pos_count.append(0)\n        total_count.append(1)\n        \n    for i in range(len(nums)):\n        if pos_count[i] > 0:\n            pos_count[i] = 1\n        else:\n            pos_count[i] = 0\n            \n    positive_ratio = 0\n    for i in range(len(total_count)):\n        if total_count[i] > 0:\n            positive_ratio += pos_count[i]/total_count[i]\n    \n    print(positive_ratio)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array of integers to store the positive numbers in the array\n    positives = array('i')\n\n    # Iterate through the array and add only positive numbers to the positives array\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n\n    # Calculate the ration of positive numbers by dividing the length of the positives array by the length of the array\n    ration = len(positives) / len(nums)\n\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def positive_count(nums):\n    # create an array of integers to store the positive numbers\n    arr = array('i', [0] * len(nums))\n    # loop through the array and check if each element is positive\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            arr[i] = 1\n    # calculate the ratio of positive numbers to the total number of elements in the array\n    return arr[0] / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    neg_count = 0\n    for i in arr:\n        if i > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    pos_ratio = pos_count / (pos_count + neg_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize two empty arrays to store positive and negative numbers\n    pos_arr = array('i')\n    neg_arr = array('i')\n\n    # Loop through the array and append positive and negative numbers to the appropriate arrays\n    for num in nums:\n        if num > 0:\n            pos_arr.append(num)\n        else:\n            neg_arr.append(num)\n\n    # Calculate the length of the arrays\n    pos_len = len(pos_arr)\n    neg_len = len(neg_arr)\n\n    # Calculate the ratio of positive to negative numbers\n    if pos_len == 0:\n        pos_ratio = 0\n    else:\n        pos_ratio = neg_len / pos_len\n\n    # Return the ratio of positive to negative numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Given an array of integers, return a floating-point number indicating the\n    ratio of positive numbers to the total number of elements in the array.\n    \"\"\"\n    # Convert the input array to an array of floats\n    nums_float = array('d', nums)\n    # Calculate the total number of elements in the array\n    total_elements = len(nums)\n    # Calculate the count of positive numbers\n    count_positive = len([num for num in nums_float if num > 0])\n    # Calculate the ratio of positive numbers to the total number of elements\n    ratio = count_positive / total_elements\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    neg_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n    if pos_count == 0:\n        return 0\n    else:\n        return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i', [x for x in nums if x > 0])\n    neg_nums = array('i', [x for x in nums if x < 0])\n    pos_count = len(pos_nums)\n    neg_count = len(neg_nums)\n    if pos_count == 0:\n        return 0\n    elif neg_count == 0:\n        return 1\n    else:\n        return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list of integers as an input and returns the largest negative number in the list.\n    '''\n    largest = float('-inf') # initialize largest to negative infinity\n    for num in lst:\n        if num < 0:\n            largest = max(largest, num) # update largest if current num is negative\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as an argument and returns the largest negative number in the list.\n    '''\n\n    # Initialize variables to keep track of the largest negative number and its index\n    max_neg = float('-inf')\n    max_index = -1\n\n    # Loop through each element in the list\n    for i, num in enumerate(list1):\n        # If the element is negative and larger than the current largest negative number\n        if num < 0 and num > max_neg:\n            # Update the largest negative number and its index\n            max_neg = num\n            max_index = i\n\n    # Return the largest negative number and its index\n    return max_neg, max_index"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    largest = -float('inf')\n\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # initialize largest negative number\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')  # initialize largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:  # if the current number is negative and is greater than the current largest, update largest\n            largest = num\n    return largest  # return the largest negative number found"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_negative
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j == 0:\n                test_list[i] = test_list[i][:K]\n            else:\n                test_list[i] = test_list[i][1:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Args:\n        test_list (list): A list of tuples to be trimmed.\n        K (int): The number of elements to be trimmed from each tuple.\n\n    Returns:\n        A list of trimmed tuples.\n\n    Raises:\n        ValueError: If K is not a positive integer.\n    \"\"\"\n\n    if not isinstance(K, int) or K <= 0:\n        raise ValueError(\"K must be a positive integer.\")\n\n    trimmed_list = []\n\n    for tup in test_list:\n        if len(tup) <= K:\n            trimmed_list.append(tup)\n        else:\n            trimmed_list.append(tup[:K])\n\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Iterate over each tuple in the list\n    for i in range(len(test_list)):\n        # If the length of the tuple is greater than K, trim it by K\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize empty list to store trimmed tuples\n    trimmed_list = []\n    # Loop through each tuple in the test_list\n    for tup in test_list:\n        # Initialize a new tuple with the first k elements of the original tuple\n        trimmed_tup = tup[:K]\n        # Append the trimmed tuple to the trimmed_list\n        trimmed_list.append(trimmed_tup)\n    # Return the trimmed_list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if K >= len(test_list[i][j]):\n                del test_list[i][j]\n                if j < len(test_list[i])-1:\n                    test_list[i].pop()\n                else:\n                    test_list[i] = tuple(test_list[i])\n            else:\n                test_list[i][j] = test_list[i][j][:K]\n                if j < len(test_list[i])-1:\n                    test_list[i].pop()\n                else:\n                    test_list[i] = tuple(test_list[i])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K as input and returns a list of trimmed tuples.\n    The trimmed tuple is defined as the tuple whose elements are the first K elements of the original tuple.\n    \"\"\"\n    return [tuple(t[:K]) for t in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i, tup in enumerate(test_list):\n        trimmed_tup = tuple(tup[j] for j in range(len(tup)) if j % K!= 0)\n        result.append(trimmed_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    result = []\n    for item in test_list:\n        result.append(tuple(item[:K]))\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n        \n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check the length of the two tuples\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return None\n\n    # Initialize an empty list to store the result of multiplication\n    result_list = []\n\n    # Iterate through each index in the two tuples\n    for i in range(len(test_tup1)):\n        # Get the element at the current index from each tuple\n        ele1 = test_tup1[i]\n        ele2 = test_tup2[i]\n\n        # Multiply the two elements and append it to the result list\n        result_list.append(ele1 * ele2)\n\n    # Convert the result list to a tuple and return it\n    return tuple(result_list)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The tuples have different lengths\")\n        return\n\n    # initialize the result tuple with zeros\n    result_tup = tuple(0 for i in range(len(test_tup1)))\n\n    # perform the multiplication\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same number of elements.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup) # count the occurrences of elements of the tuple\n    count_dict = Counter(lst) # count the occurrences of elements of the list\n    count_dict.update(count_dict) # update the count_dict with the element counts of the tuple\n    \n    return count_dict # return the element count dictionary"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_counts = Counter(lst) \n    return tup, lst_counts\n    \n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = {}\n    for key in count_dict:\n        count = count_dict[key]\n        if tup in key:\n            if key in result:\n                result[key] += count\n            else:\n                result[key] = count\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for elem in lst:\n        count[elem] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    return {k: v for k, v in count_dict.items() if k in lst}"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    for element in lst:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = dict(count)\n    for key in result:\n        if key in lst:\n            result[key] += 1\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    count_dict = {}\n    for item in tup:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] -= 1\n            if count_dict[item] == 0:\n                del count_dict[item]\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    # Using Counter function from collections module to count the occurrence of each element in the list\n    count = Counter(lst)\n    \n    # Loop through the tuple and count the occurrence of each element in the list using Counter function\n    result = {}\n    for item in tup:\n        if item in count:\n            result[item] = count[item]\n            \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup) \n    result = [] \n\n    for i in range(len(lst)): \n        if lst[i] in count_dict: \n            result.append(count_dict[lst[i]]) \n\n    return result "
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Loop through the list and find the cubes of each element\n    cubes = [num ** 3 for num in nums]\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Iterate through the list of numbers\n    for num in nums:\n        # Calculate the cube of the number\n        cube = num ** 3\n        # Print the cube of the number\n        print(cube)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 4, 16, 81, 256, 1024, 4096, 16384, 65536, 262144, 1048576, 4194304, 16777216, 67108864, 268435456, 1073741824, 4294967296]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * i * i * i * i * i * i * i * i * i * i * i * i * i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i+1) * (i+1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sum = 0\n    for num in perrin_numbers:\n        sum += num\n    return sum\n\nprint(cal_sum(10)) # Output: 55"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i**2 + i - 1\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 2 * (i ** 4 - i + 1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    p = [1, 1, 2, 4, 7, 11, 16, 22, 29, 37, 46, 56, 67, 79, 92, 106, 121, 137, 154, 172, 191, 211, 232, 254, 277, 301, 326, 352, 379, 407, 436, 466, 497, 529, 562, 596, 631, 667, 704, 742, 781, 821, 862, 904, 947, 991]\n    return sum(p[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    sum_perrin = 0\n    for i in range(n):\n        sum_perrin += perrin_numbers[i]\n    return sum_perrin"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        if len(s) == l[0]:\n            result.append(s)\n        if len(s) >= l[0] and len(s) <= l[1]:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # initializing an empty list to store the extracted strings\n    extracted_strings = []\n    \n    # looping through the given list of strings\n    for string in l:\n        # checking if the current string length is greater than or equal to the specified size\n        if len(string) >= l:\n            # extracting the required number of characters from the string\n            extracted_string = string[:l]\n            # adding the extracted string to the extracted_strings list\n            extracted_strings.append(extracted_string)\n    \n    # returning the extracted_strings list\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for s in l:\n        if len(s) >= l:\n            extracted_strings.append(s[:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(0, len(l), l):\n        extracted_strings.append(l[i:i+l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n\n    # Initialize an empty list to store the extracted strings\n    extracted_list = []\n\n    # Loop through each string in the list\n    for i in range(len(l)):\n        # Append the extracted string to the extracted_list if its size is equal to the specified size\n        if len(str) == l[i]:\n            extracted_list.append(str)\n\n    # Return the extracted_list\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for string in str_list:\n        if len(string) > size:\n            extracted_list.append(string[0:size])\n        else:\n            extracted_list.append(string)\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and an integer specifying the size of the desired strings.\n    It returns a new list with the extracted strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) > size:\n            extracted_strings.append(string[:size])\n        else:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer `size` as input.\n    It returns a new list containing the specified size of strings from the original list.\n    '''\n    extracted_list = []\n    for string in str_list:\n        if len(string) <= size:\n            extracted_list.append(string)\n        else:\n            extracted_list.append(string[:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(0, len(str_list), size):\n        extracted_list.append(str_list[i:i+size])\n    return extracted_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text2 = re.sub('\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text3 = text2.strip()\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespace using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    # Remove multiple consecutive whitespaces\n    text3 = re.sub(r'\\s+','', text2)\n    # Remove leading and trailing whitespaces\n    text4 = re.sub(r'^[ \\t\\n\\r]+', '', text3)\n    text5 = re.sub(r'[ \\t\\n\\r]+$', '', text4)\n    # Return the cleaned string\n    return text5"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+','', text).strip()\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = actual_cost/sale_amount\n    if loss_percentage < 0.05:\n        return 0\n    else:\n        return (actual_cost - (sale_amount*0.05))"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        return sale_amount - actual_cost\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount < actual_cost: \n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    # If actual cost is less than or equal to sale amount, then there is no loss\n    if actual_cost <= sale_amount:\n        return 0\n    \n    # Calculate the loss amount\n    loss = sale_amount - actual_cost\n    \n    return loss"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n%i == 0: \n            sum_even_factors += i\n            if n//i!= i: \n                sum_even_factors += n//i\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumOfFactors(n):\n    '''\n    This function finds the sum of even factors of a given number n.\n    '''\n    # Initialize a variable to store the sum of even factors\n    sum = 0\n    \n    # Loop through all the numbers from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # If the number is evenly divisible by i, add it to the sum\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    \n    # Return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of even factors of n.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of all even factors of n.\n\n    Example:\n    >>> sumofFactors(10)\n    0\n\n    >>> sumofFactors(20)\n    2\n\n    >>> sumofFactors(50)\n    6\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            else:\n                sum -= i\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            sum += i\n            n //= i\n    if n > 1:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize a variable to hold the sum of even factors\n    evenSum = 0\n    \n    # loop through all the factors of n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            # if i is even, add it to the sum\n            if i % 2 == 0:\n                evenSum += i\n    \n    # return the sum of even factors\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 and n % (i+2) == 0 : \n            even_sum += i + n // i\n    return even_sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # define a regular expression pattern to match a word containing 'z'\n    pattern = r'\\b\\w+z\\b'\n    # use re.findall() to find all matches in the input text\n    matches = re.findall(pattern, text)\n    # return the list of matches as a string\n    return ', '.join(matches)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\s*z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)[a-zA-Z]+\\b' # matches any word containing 'z'\n    matches = re.findall(pattern, text) # find all matches using regex\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*z\\w*'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\sz\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    # define the regular expression pattern to match 'z'\n    pattern = r'\\b(z)\\b'\n    # search for the pattern in the given text using re.search()\n    match = re.search(pattern, text)\n    # if the match is found, return the matched text\n    if match:\n        return match.group(1)\n    # otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*[zZ][a-z]*\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if 1 <= monthnum2 <= 12:\n        if monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) and monthnum2 == 2:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return False\n    else:\n        print(\"Invalid month number\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"The month number contains 31 days.\"\n    else:\n        return \"The month number does not contain 31 days.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return False\n    elif monthnum2 in [4,6,9,11]:\n        return True\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check whether the length of the month number is valid or not\n    if len(monthnum2)!= 2:\n        return False\n\n    # Check whether the month number is valid or not\n    try:\n        monthnum = int(monthnum2)\n        if monthnum < 1 or monthnum > 12:\n            return False\n    except ValueError:\n        return False\n\n    # Check whether the month number contains 31 days or not\n    if monthnum % 2 == 0:\n        if monthnum in (4, 6, 9, 11):\n            return True\n        elif monthnum in (2, 3, 5, 7, 8, 10, 12):\n            return False\n        else:\n            return True\n    else:\n        if monthnum in (4, 6, 9, 11):\n            return False\n        elif monthnum in (2, 3, 5, 7, 8, 10, 12):\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check if the input month number is valid\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n\n    # Get the number of days in the given month\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2]:\n        return False\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            days = 31\n        else:\n            days = 30\n    elif monthnum2 % 4 == 0:\n        days = 31\n    else:\n        days = 30\n    return days"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return False\n    elif monthnum2 in [4,6,9,11]:\n        return True\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst[0]\n    min_length = len(lst[0])\n    \n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_sublist = lst[i]\n            min_length = len(lst[i])\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    result = []\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            result = sublist\n    \n    return result"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0]) \n    min_sublist = lst[0] \n    for sublist in lst: \n        if len(sublist) < min_len: \n            min_len = len(sublist) \n            min_sublist = sublist \n    return min_sublist "
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            current_sublist = lst[i:j]\n            if len(current_sublist) < min_length:\n                min_length = len(current_sublist)\n                min_sublist = current_sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    sublist = None\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                sublist = lst[i:j+1]\n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    This function takes a list as input and returns the sublist with minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = []\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_sublist = i\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]{1}[a-z]*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define the regular expression pattern for uppercase substrings\n    pattern = r'[A-Z]+'\n\n    # Use the re.sub() method to remove all uppercase substrings from the input string\n    result = re.sub(pattern, '', str1)\n\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression to match uppercase substrings\n    uppercase_regex = re.compile(r'[A-Z]+')\n    # Use the findall() method to find all uppercase substrings in the string\n    uppercase_substrings = uppercase_regex.findall(str1)\n    # Iterate over the list of uppercase substrings and replace them with an empty string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Use the pattern to find all uppercase substrings in the string\n    substrings = pattern.findall(str1)\n    # Loop through the substrings and remove them from the string\n    for substring in substrings:\n        str1 = re.sub(substring, '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define regular expression pattern to match uppercase characters\n    pattern = r'([A-Z]+)'\n    # Use re.sub() method to remove uppercase substrings from the string\n    str2 = re.sub(pattern, '', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function will remove all uppercase substrings from the input string.\n    '''\n    return re.sub(r'\\b[A-Z]+\\b', '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # use regular expressions to find uppercase substrings\n    regex = r'([A-Z])'\n    matches = re.findall(regex, str1)\n    # loop through matches and replace each substring with a space\n    for match in matches:\n        str1 = str1.replace(match,'')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'(?i)[A-Z]', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z].*[A-Z]', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Replace all uppercase substrings with an empty string\n    str1 = re.sub(r'[A-Z]', '', str1)\n    # Remove leading and trailing whitespace\n    str1 = str1.strip()\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        if isinstance(i, list):\n            for j in i:\n                result.append(j)\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[i][0]\n    return lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]] + Extract(lst[1:])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(i[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        if type(sublist) == list:\n            print(sublist[0])\n        else:\n            print(sublist)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and extracts the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Create a list to store the extracted elements\n    result = []\n    \n    # Loop over each sublist in the input list\n    for sublist in lst:\n        # If the sublist has only one element, add it to the result list\n        if len(sublist) == 1:\n            result.append(sublist[0])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and returns the number of upper case characters in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create an empty list to store the combinations\n    comb_list = []\n    \n    # loop through each element in the list\n    for i in range(len(list1)):\n        # create a new list that excludes the current element\n        excl_list = list(list1)\n        excl_list.pop(i)\n        \n        # loop through each element in the excluded list\n        for j in range(len(excl_list)):\n            # create a new list that includes the current and excluded elements\n            comb_list.append([list1[i], excl_list[j]])\n    \n    # return the combination list\n    return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create a list of all possible combinations of the elements of the list\n    combinations = []\n    n = len(list1)\n    for i in range(1, 1 << n):\n        combination = []\n        for j in range(n):\n            if (i >> j) & 1:\n                combination.append(list1[j])\n        combinations.append(combination)\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            print(list1[j-i], end=' ')"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combination = list1[i:j]\n            print(combination)"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1) + 1):\n        combination = []\n        for j in range(len(list1) - i + 1):\n            combination.append(list1[j:j+i])\n        result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize an empty list to store all combinations\n    combinations = []\n\n    # iterate over all possible starting positions for combinations\n    for i in range(len(list1)):\n        # initialize an empty list to store the current combination\n        current_combination = []\n        # iterate over all possible ending positions for the current combination\n        for j in range(i, len(list1)):\n            # append the element at the current position to the current combination\n            current_combination.append(list1[j])\n            # if the current combination is a valid combination, add it to the list of all combinations\n            if len(current_combination) == 2:\n                combinations.append(current_combination[:])\n            # if the current combination is not a valid combination, remove the last element from the combination\n            else:\n                current_combination.pop()\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create an empty list to store the combinations\n    combinations = []\n    \n    # Define the function to generate all combinations recursively\n    def generate_combinations(current_combination, remaining_elements):\n        # If the remaining elements are empty, add the current combination to the list of combinations\n        if len(remaining_elements) == 0:\n            combinations.append(current_combination)\n        # Otherwise, iterate through the remaining elements and add them to the current combination\n        else:\n            for element in remaining_elements:\n                generate_combinations(current_combination + [element], remaining_elements[remaining_elements.index(element):])\n\n    # Call the generate_combinations function with the list of elements as the argument\n    generate_combinations([], list1)\n    \n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    combinations = []\n\n    for i in range(1, n+1):\n        for j in range(i):\n            subset = list1[j:j+i]\n            combinations.append(subset)\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    res = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            res.append(lst[i:j])\n    return res"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    min_product = current_product\n\n    for num in arr:\n        if num < 0:\n            current_product = 1\n            min_product = current_product\n        else:\n            current_product *= num\n            min_product = min(min_product, current_product)\n\n        max_product = max(max_product, current_product)\n\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_ending_here_neg = arr[0] if arr[0] < 0 else 1\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here_neg * arr[i], arr[i])\n        max_ending_here_neg = max(max_ending_here_neg, arr[i])\n        min_ending_here = min(min_ending_here, arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        if current_product < 0:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n            \n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and finds the maximum product subarray.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n\n    Args:\n    arr: List of integers representing the array.\n\n    Returns:\n    Maximum product subarray of the given array.\n    \"\"\"\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Returns the maximum product subarray of the given array.\n\n    Parameters:\n    arr: List[int]\n        The array to find the maximum product subarray of.\n\n    Returns:\n    int\n        The maximum product subarray.\n    \"\"\"\n    max_product = float('-inf')\n    max_so_far = float('-inf')\n    min_so_far = float('inf')\n\n    for num in arr:\n        max_so_far = max(max_so_far * num, num)\n        min_so_far = min(min_so_far * num, num)\n        max_product = max(max_product, max_so_far)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n    \"\"\"\n    max_product = arr[0]\n    curr_product = 1\n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product * arr[i])\n        max_product = max(max_product, curr_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a set to store the values of the dictionary\n    values = set(dict.values())\n    \n    # Check if all values in the set are same\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[key] for key in dict]\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    elif len(dict) == 1:\n        return n in dict.values()\n    else:\n        return n in dict.values() and check_value(dict, n)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    first_value = next(iter(dict.values()))\n    for value in dict.values():\n        if value!= first_value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in dict.values():\n        if i!= dict[0]:\n            count += 1\n        if count == n:\n            return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_set = set()\n    for key, value in dict.items():\n        value_set.add(value)\n    return len(value_set) == 1"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Check if the dictionary is empty\n    if not dict:\n        return True\n    \n    # Get the first value of the dictionary\n    first_value = next(iter(dict.values()))\n    \n    # Iterate over all the values of the dictionary and check if they are same\n    for value in dict.values():\n        if value!= first_value:\n            return False\n    \n    # If all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    \n    for key in dict:\n        if not isinstance(dict[key], type(dict[n])):\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a list to store values\n    values = []\n    \n    # Loop through all values in the dictionary\n    for value in dict.values():\n        # Append the value to the values list\n        values.append(value)\n    \n    # Check if all values in the dictionary are same\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # loop through each item in the dictionary\n    for item in dict1:\n        # if the item is an empty string or a list with only empty strings, remove the item from the dictionary\n        if isinstance(dict1[item], str) and not dict1[item].strip():\n            del dict1[item]\n        elif isinstance(dict1[item], list) and all(isinstance(x, str) and not x.strip() for x in dict1[item]):\n            del dict1[item]\n    return dict1"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    \n    dp = [1, arr[0], arr[0]*arr[1]]\n    for i in range(2, n):\n        dp.append(max(dp[i-1], dp[i-2]*arr[i], dp[i-1]*arr[i]))\n    \n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    # Initialize variables to keep track of the maximum product and the current maximum product\n    max_product = float('-inf')\n    current_max_product = 1\n    \n    # Iterate through the array\n    for num in arr:\n        # If the current number is greater than the current maximum product, update the current maximum product\n        if num > current_max_product:\n            current_max_product = num\n        \n        # If the current number is less than the current maximum product, update the maximum product if the product is greater\n        if num < current_max_product:\n            max_product = max(max_product, current_max_product * num)\n            \n        # If the current number is equal to the current maximum product, update the maximum product if the product is greater\n        elif num == current_max_product:\n            max_product = max(max_product, current_max_product * num)\n            \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # Find the length of the array\n    n = len(arr)\n    \n    # Create a matrix to store the maximum products\n    max_products = [[float('-inf')] * n for i in range(n)]\n    \n    # Initialize the first row and column of the matrix\n    for i in range(n):\n        max_products[i][i] = arr[i]\n    \n    # Fill the rest of the matrix\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            max_products[i][j] = max(arr[i]*arr[j], max_products[i+1][j], max_products[i][j-1])\n            \n    # Find the maximum product\n    max_product = max_products[0][n-1]\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here * min_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here * max_ending_here)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        dp[i] = max_ending_here\n\n    max_ending_here = max(dp[0], dp[0] * dp[1])\n    max_ending_here = max(max_ending_here, max_ending_here * dp[2])\n\n    for i in range(3, n):\n        max_ending_here = max(dp[i] * dp[i - 1], max_ending_here)\n        max_ending_here = max(max_ending_here, dp[i] * dp[i - 2])\n\n    return max_ending_here"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_ending_here = max(max_ending_here, min_ending_here)\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here, min_ending_here * arr[i])\n        min_ending_here = min(min_ending_here, max_ending_here)\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    # create a temporary array to store the increasing subsequence\n    temp = []\n    # initialize variables to store the maximum product and the current subsequence\n    max_product = float('-inf')\n    current_subsequence = 1\n\n    # iterate through the array\n    for i in range(len(arr)):\n        # add the current element to the temporary array\n        temp.append(arr[i])\n        # check if the length of the current subsequence is greater than the maximum subsequence length\n        if len(temp) > current_subsequence:\n            # update the maximum product and the current subsequence\n            max_product = max(max_product, current_subsequence * max(temp))\n            # reset the temporary array\n            temp = [arr[i]]\n            # update the current subsequence\n            current_subsequence = 1\n        else:\n            # update the current subsequence\n            current_subsequence += 1\n\n    # add the last element of the array to the temporary array\n    temp.append(arr[-1])\n    # check if the length of the current subsequence is greater than the maximum subsequence length\n    if len(temp) > current_subsequence:\n        # update the maximum product\n        max_product = max(max_product, current_subsequence * max(temp))\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if arr[0] >= arr[1]:\n        return max(arr[0], arr[1]) * max_product(arr[2:])\n    else:\n        return max(arr[1], arr[0]) * max_product(arr[2:])"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)  \n    # Initialize the maximum subsequence product and its index\n    max_product = float('-inf')  \n    start_index = -1  \n    # Traverse the array from the first element to the last element\n    for i in range(1, n):  \n        # If the current element is smaller than the previous element, then update the start index\n        if arr[i] < arr[i-1]:  \n            start_index = i  \n        # Calculate the subsequence product and update the maximum product if the current element is larger\n        subsequence_product = arr[i] * arr[i-1]  \n        if subsequence_product > max_product:  \n            max_product = subsequence_product  \n    # If there is no subsequence product, then the maximum product is the product of the first two elements\n    if start_index == -1:  \n        max_product = arr[0] * arr[1]  \n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"Error: Tuple should have at least two elements.\"\n\n    n = len(test_tup)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i == j:\n                continue\n            else:\n                print(test_tup[i] + test_tup[j])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup) - 1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Initialize the sum to zero\n    total = 0\n\n    # Loop through the tuple and add the pairwise elements to the sum\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"The input tuple must have an even number of elements\")\n    return sum(x+y for x, y in zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through the tuple, adding each element to the sum\n    for i in range(len(test_tup) - 1):\n        sum += test_tup[i] + test_tup[i + 1]\n\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    else:\n        return sum([test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1)])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n\n    sum_pairs = []\n    for i in range(len(test_tup)-1):\n        sum_pairs.append(test_tup[i] + test_tup[i+1])\n\n    return sum_pairs"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        return (test_tup[0] + test_tup[1]) + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Get the length of the tuple\n    length = len(test_tup)\n\n    # Initialize a variable to store the result\n    result = 0\n\n    # Loop through each element of the tuple\n    for i in range(length-1):\n        # Add the current element and the next element\n        result += test_tup[i] + test_tup[i+1]\n\n    # Return the result\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize an empty list to store the sum of each pair\n    pairwise_sum = []\n\n    # loop through the tuple and add the pairwise sum to the list\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n\n    return pairwise_sum"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # calculate the product of the array elements modulo n\n    product = 1\n    for x in arr:\n        product = (product * x) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr1, arr2, n):\n    '''\n    Write a python function to find the remainder of the product of two arrays modulo n.\n    '''\n    \n    product = [0] * len(arr1)\n\n    for i in range(len(arr1)):\n        product[i] = arr1[i] * arr2[i]\n    \n    result = 1\n    \n    for i in range(len(product)):\n        result = result * (product[i] % n)\n        result = result % n\n        \n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in an array and an integer n and returns the product of the array multiplied modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and a modulo value n and returns the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    # Calculate the product of the array modulo n\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product*num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Find the product of the array\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        \n    # Find the remainder when the product is divided by n\n    remainder = product % n\n    \n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    # initialize variables\n    consecutive = True\n    prev = None\n    # iterate through the list\n    for i in range(len(l)):\n        # check if the current element is consecutive with the previous element\n        if consecutive and l[i] == prev + 1:\n            prev = l[i]\n        # if the current element is not consecutive, set consecutive to False\n        elif not consecutive:\n            consecutive = False\n        # if the current element is not consecutive and it is not the first element, return False\n        elif prev is not None:\n            return False\n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers or False otherwise.\n    A number is consecutive if it is the next number after the previous number in the list.\n    '''\n    # check if list has at least two elements\n    if len(l) < 2: \n        return False\n    \n    # loop through the list and compare each element to the next\n    for i in range(len(l)-1):\n        if l[i+1]!= l[i]+1:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers and False otherwise.\n    '''\n    n = len(l)\n    for i in range(n-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return True\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    n = len(l)\n    for i in range(n):\n        if l[i]!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as an input and returns True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    elif l[0] == l[1]:\n        return False\n    else:\n        for i in range(1, len(l)-1):\n            if l[i] - l[i-1] == 1:\n                return True\n            elif l[i] - l[i-1]!= 1:\n                return False\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n\n    # Check if the list is empty or not\n    if len(l) == 0:\n        return \"The list is empty.\"\n\n    # Set the initial value for consecutive and start_num\n    consecutive = True\n    start_num = l[0]\n\n    # Iterate through the list\n    for num in l[1:]:\n        # Check if the current number is consecutive or not\n        if num == start_num + 1:\n            start_num = num\n        else:\n            consecutive = False\n            break\n\n    # Check if the list contains consecutive numbers or not\n    if consecutive:\n        return \"The list contains consecutive numbers.\"\n    else:\n        return \"The list does not contain consecutive numbers.\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    #Create a new list to store consecutive numbers\n    consecutive = []\n\n    #Loop through the list\n    for i in l: \n        #If the current element is equal to the previous element, add it to the consecutive list\n        if i == consecutive[-1]:\n            consecutive.append(i)\n        else:\n            #If the current element is not equal to the previous element, check if the consecutive list is not empty\n            if consecutive:\n                #If it is not empty, check if all consecutive elements are consecutive\n                for j in consecutive:\n                    if j!= consecutive[-1] + 1:\n                        #If not, return False\n                        return False\n                #If all consecutive elements are consecutive, return True\n                return True\n            #If the consecutive list is empty, add the current element to the consecutive list\n            else:\n                consecutive.append(i)\n\n    #If the loop completes without finding consecutive numbers, return False\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create a set from the first list to get unique elements\n    unique_set1 = set(test_list1)\n    # create a set from the second list to get unique elements\n    unique_set2 = set(test_list2)\n    # find the intersection of the two sets\n    intersection = unique_set1.intersection(unique_set2)\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = set(test_list1) & set(test_list2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the input lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to tuples and return\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1) & set(test_list2))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for item in test_list1:\n        if item in test_list2:\n            result.append(item)\n    return tuple(result)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                intersection_list.append(test_list1[i])\n                break\n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    i = 0\n    j = 0\n\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] < test_list2[j]:\n            i += 1\n        elif test_list1[i] > test_list2[j]:\n            j += 1\n        else:\n            result.append(test_list1[i])\n            i += 1\n            j += 1\n\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert the two lists into sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back into a list\n    intersection_list = list(intersection)\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Convert both lists to sets so that duplicates are removed\n    set_list1 = set(test_list1)\n    set_list2 = set(test_list2)\n\n    # Find the intersection of the two sets and convert it back to a tuple\n    intersection = tuple(set_list1.intersection(set_list2))\n\n    # Return the intersection\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Initialize an empty set to store the intersection\n    intersection = set()\n\n    # Iterate through both lists and find the intersection of elements\n    for item in test_list1:\n        if item in test_list2:\n            intersection.add(item)\n\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Loop through the list and replace the character if found\n    for i in range(len(lst)):\n        if lst[i] == ch:\n            lst[i] = newch\n    # Convert the list back to a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes in a string, a character to be replaced, and a new character to replace the old character with.\n    It returns the modified string with the old character replaced by the new character.\n    '''\n    # Iterate through the string and replace all occurrences of the old character with the new character\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the input dictionary\n    counter = Counter(dict1)\n    \n    # Sort the Counter object by values in descending order\n    sorted_counter = counter.most_common(None)\n    \n    # Sort the sorted Counter object by keys in ascending order\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object so that we can sort it by value\n    counter = Counter(dict1)\n    # Sort the Counter object by value in descending order\n    sorted_counter = counter.most_common(None)\n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value using Counter.most_common() function.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and returns a sorted dictionary with values in ascending order.\n    '''\n    # Create a Counter object from the input dictionary\n    counter = Counter(dict1)\n\n    # Sort the Counter object by value in ascending order\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1]))\n\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Use Counter to count the occurrences of values in the dictionary\n    count = Counter(dict1)\n    \n    # Sort the dictionary by value in ascending order\n    sorted_dict = dict(sorted(count.items(), key=lambda item: item[1]))\n    \n    # Return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    \n    # Sort the Counter object by value in descending order\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    \n    # Convert the sorted dictionary back to a dictionary\n    return dict(sorted_dict)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest value in the array\n    largest = max(nums)\n    smallest = min(nums)\n    # Calculate the sum of the largest and smallest value\n    sum = largest + smallest\n    # Return the sum\n    return sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize the variables to keep track of the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    # Loop through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    # Return the sum of the largest and smallest values\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    # Calculate the sum of the largest and smallest values\n    sum_largest_smallest = largest + smallest\n    \n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Find the sum of the largest and smallest values\n    result = nums[0] + nums[1]\n    return result"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    This function takes in an array of numbers and returns their sum and the largest and smallest values in the array.\n    '''\n\n    # find the largest and smallest values in the array\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # find the sum of the largest and smallest values\n    sum_largest_smallest = largest + smallest\n\n    return sum_largest_smallest, largest, smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) < 2:\n        return \"The array must have at least two elements.\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Calculate the sum of the first and last elements\n    first_and_last_sum = nums[0] + nums[-1]\n    \n    # Calculate the sum of the smallest and largest elements\n    smallest_and_largest_sum = nums[0] + nums[-1]\n    \n    # Return the sum of the first and last elements and the sum of the smallest and largest elements\n    return first_and_last_sum, smallest_and_largest_sum"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all characters are lowercase, and False otherwise.\n    \"\"\"\n    for char in string:\n        if char.isupper():\n            return False\n    return True"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    This function converts a given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # find all lowercase substrings in the string\n    matches = re.findall(r'[a-z]+', str1)\n    # remove the matches from the original string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all the lowercase substrings in the string\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1.lower())\n    # Loop through all the lowercase substrings and remove them from the string\n    for substring in lowercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Use the re.findall() function to find all lowercase substrings in the given string\n    substrings = re.findall(pattern, str1)\n    # Loop through all the substrings found and remove them from the string\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regex to find all lowercase substrings\n    pattern = re.compile(r'\\b[a-z]\\w*\\b')\n    matches = pattern.findall(string)\n    \n    # Remove lowercase substrings from the string\n    new_string =''.join(word for word in string.split() if word.lower() not in matches)\n    \n    return new_string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings in the given string\n    lowercase_substrings = re.findall(r'[a-z]+', str1)\n    \n    # Remove lowercase substrings from the given string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b\\w*[a-z]\\w*\\b'\n    # Use the `sub()` method to replace all lowercase substrings with an empty string\n    result = re.sub(pattern, '', string)\n    return result"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Extracting the first digit of the number using string slicing\n    first_digit = str(n)[0]\n    # Returning the first digit of the number\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to string\n    str_num = str(n)\n    # Get the first character of the string\n    digit = str_num[0]\n    # Return the first digit of the number\n    return digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # converting the number into a string\n    num = str(n)\n    # extracting the first character of the string\n    first_char = num[0]\n    # converting the first character into an integer\n    first_int = int(first_char)\n    # returning the first integer\n    return first_int"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = [] \n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    # create an empty list for odd numbers\n    odd_list = []\n\n    # loop through each element in the input list\n    for num in list:\n        # check if the element is odd\n        if num % 2!= 0:\n            # if it is, add it to the odd_list\n            odd_list.append(num)\n\n    # return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list = []\n    for num in list:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0: # check if the number is odd\n            result.append(num) # add it to the result list if it's odd\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers as input and returns the odd ones.\n    '''\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(x**3 for x in range(1,n+1))\n    sum_of_natural = sum(range(1,n+1))\n    difference = sum_of_cubes - sum_of_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_cubes(n):\n    return n * (n + 1) * (2 * n + 1) // 6\n\ndef sum_of_natural_numbers(n):\n    return n * (n + 1) // 2\n\ndef difference(n):\n    return sum_of_cubes(n) - sum_of_natural_numbers(n)\n\nprint(difference(10))  # Output: 45"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Function to calculate the sum of cubes of the first n natural numbers\n    def sum_of_cubes(n):\n        \"\"\"\n        Calculate the sum of cubes of the first n natural numbers.\n        \"\"\"\n        return n**3 + (n**3)*((n-1)*n//2)\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_first_n = sum(range(1,n+1))\n\n    # Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    return sum_of_cubes(n) - sum_of_first_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initialize the sum of cubes and sum of natural numbers\n    sum_cubes = 0\n    sum_natural = 0\n\n    # iterate n times and calculate the sum of cubes and sum of natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        sum_natural += i\n    \n    # calculate the difference between the sum of cubes and the sum of natural numbers\n    diff = sum_cubes - sum_natural\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    def sum_of_cubes(n):\n        \"\"\"\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        \"\"\"\n        sum = 0\n        for i in range(1, n+1):\n            sum += i**3\n        return sum\n    \n    def sum_of_numbers(n):\n        \"\"\"\n        Write a python function to find the sum of the first n natural numbers.\n        \"\"\"\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        return sum\n    \n    sum_of_cubes_n = sum_of_cubes(n)\n    sum_of_numbers_n = sum_of_numbers(n)\n    \n    difference_n = sum_of_cubes_n - sum_of_numbers_n\n    \n    return difference_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Sum of first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    \n    # Difference between the two sums\n    difference = sum_cubes - sum_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_cubes(n):\n    \"\"\"\n    Calculate the sum of cubes of the first n natural numbers.\n    \"\"\"\n    return sum([i**3 for i in range(1, n+1)])\n\ndef sum_natural_numbers(n):\n    \"\"\"\n    Calculate the sum of the first n natural numbers.\n    \"\"\"\n    return sum(range(1, n+1))\n\ndef difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    return sum_cubes(n) - sum_natural_numbers(n)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # find the difference between the two sums\n    diff = abs(sum_cubes - sum_natural)\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes = [num**3 for num in range(1, n+1)]\n    sums = [sum(range(1, num+1)) for num in range(1, n+1)]\n\n    return sum(cubes) - sum(sums)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    count = 0\n    for i in range(N-1) : \n        for j in range(i+2,N) : \n            if A[i] ^ A[j] % 2!= 0 : \n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    # initialize the count variable to 0\n    count = 0\n    \n    # loop through the array A and check if the xor of the current element and all the elements before it is odd\n    for i in range(N):\n        xor = A[i] ^ A[0:i]\n        if xor & 1 == 1:\n            count += 1\n    \n    # return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize the count of odd pairs to zero\n    odd_count = 0\n    # Traverse through each element of the array\n    for i in range(N):\n        # Calculate the xor value of the current element with all other elements in the array\n        xor_value = 0\n        for j in range(N):\n            xor_value ^= A[j]\n        # If the xor value is odd, increment the count of odd pairs\n        if xor_value % 2 == 1:\n            odd_count += 1\n    # Return the count of odd pairs\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    # Initialize variables\n    count = 0\n    odd_xor_count = 0\n\n    # Iterate through the array A\n    for i in range(N):\n        # Calculate the xor value of the ith element with all other elements in the array\n        xor_value = sum(A[j] ^ A[i] for j in range(N))\n\n        # Check if the xor value is odd\n        if xor_value % 2 == 1:\n            count += 1\n\n        # Check if the xor value is odd when the xor value is negated\n        if xor_value % 2 == 1 and (xor_value + 1) % 2 == 0:\n            odd_xor_count += 1\n\n    # Return the count of odd xor values\n    return count + odd_xor_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_set = set()\n    count = 0\n    for i in range(N):\n        xor_val = sum(A[i])\n        xor_set.add(xor_val)\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_val = A[i][0]^A[j][0]\n            if xor_val in xor_set:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            if ((A[i] ^ A[j]) % 2!= 0):\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pairs = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                odd_pairs += 1\n    return odd_pairs"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n    # Iterate through each character in the string\n    for i in range(len(string)):\n        # If the character is uppercase, convert it to lowercase\n        if string[i] == string[i].upper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # If the character is lowercase, convert it to uppercase\n        else:\n            string = string[:i] + string[i].upper() + string[i+1:]\n    # Return the modified string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize an empty string to store the toggled characters\n    toggled_string = ''\n    # iterate through each character in the original string\n    for char in string:\n        # check if the character is uppercase\n        if char.isupper():\n            # convert the character to lowercase\n            toggled_char = char.lower()\n        else:\n            # convert the character to uppercase\n            toggled_char = char.upper()\n        # add the toggled character to the new string\n        toggled_string += toggled_char\n    # return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(map(lambda x: x.upper() if x.islower() else x.lower(), string))"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.isalpha() else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isupper() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(char)-ord('A')+ord('a')) if char.isalpha() else char for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n\n    Parameters:\n    n1 (int): An integer.\n    n2 (int): An integer.\n\n    Returns:\n    int: The sum of the per-digit difference between n1 and n2.\n    \"\"\"\n    result = 0\n    for i in range(10):\n        diff = abs(n1 % 10 - n2 % 10)\n        result += diff * (10**(i-1))\n        n1 //= 10\n        n2 //= 10\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Find the sum of the per-digit difference between two integers.\n    \"\"\"\n    num1 = str(n1)\n    num2 = str(n2)\n    # convert both numbers to lists of digits\n    digits1 = [int(digit) for digit in num1]\n    digits2 = [int(digit) for digit in num2]\n    # compare the digits of the two numbers and calculate the sum of per-digit differences\n    diff_sum = 0\n    for i in range(len(digits1)):\n        diff = digits1[i] - digits2[i]\n        diff_sum += diff * diff\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both numbers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    # initialize the sum of differences\n    diff_sum = 0\n    # iterate through the digits of both numbers\n    for i in range(max(len(s1), len(s2))):\n        # get the digits of both numbers\n        d1 = s1[i] if i < len(s1) else '0'\n        d2 = s2[i] if i < len(s2) else '0'\n        # calculate the per-digit difference and add to the sum\n        diff = abs(int(d1) - int(d2))\n        diff_sum += diff\n    # return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digit_list1 = [int(digit) for digit in str(n1)]\n    digit_list2 = [int(digit) for digit in str(n2)]\n\n    # Find the difference between the two lists of digits\n    digit_diff = [abs(digit1 - digit2) for digit1, digit2 in zip(digit_list1, digit_list2)]\n\n    # Calculate the sum of the differences\n    total_diff = sum(digit_diff)\n\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Find the absolute difference between the two lists of digits\n    diff = [abs(d1 - d2) for d1, d2 in zip(digits1, digits2)]\n\n    # Sum up the absolute differences\n    return sum(diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    # Convert the numbers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # Calculate the length of the strings\n    len1 = len(str1)\n    len2 = len(str2)\n    \n    # Check if the strings have the same length\n    if len1!= len2:\n        print(\"The two numbers must have the same length.\")\n        return\n    \n    # Initialize the sum variable\n    sum_diff = 0\n    \n    # Loop through each digit in both strings\n    for i in range(len1):\n        # Convert the current digits to integers\n        int1 = int(str1[i])\n        int2 = int(str2[i])\n        \n        # Calculate the absolute difference between the two integers\n        diff = abs(int1 - int2)\n        \n        # Add the absolute difference to the sum variable\n        sum_diff += diff\n    \n    # Return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    \n    # Convert the two integers to lists of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n    \n    # Loop through the digits and calculate the sum of the per-digit difference\n    for i in range(len(num1_digits)):\n        sum += abs(num1_digits[i] - num2_digits[i])\n        \n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # loop through each digit in the strings\n    sum_diff = 0\n    for i in range(len(str1)):\n        diff = abs(int(str1[i]) - int(str2[i]))\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Calculate the difference between the two numbers\n    diff = n1 - n2\n    \n    # Calculate the total number of digits in the difference\n    num_digits = len(str(diff))\n    \n    # Initialize the sum of the per-digit differences to 0\n    digit_sum = 0\n    \n    # Iterate through the digits in the difference and add up the differences\n    for i in range(num_digits):\n        digit_sum += abs(diff % 10 - (diff // 10) % 10)\n        diff //= 10\n    \n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    # Initialize a list to hold the digits of n1 and n2\n    digit_sum = []\n\n    # Loop through each digit of n1 and n2\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        # Get the i-th digit of n1 and n2 as integers\n        d1 = int(str(n1)[i])\n        d2 = int(str(n2)[i])\n\n        # Calculate the absolute difference between the digits\n        diff = abs(d1 - d2)\n\n        # Append the difference to the digit_sum list\n        digit_sum.append(diff)\n\n    # Return the sum of the differences\n    return sum(digit_sum)"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    max_start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if i == size-1 or current_sum > max_sum:\n            max_sum = current_sum\n            max_start = i\n            \n    return max_sum, max_start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes in a list a and a size parameter and returns the sum of the largest contiguous sublist in the list.\n    \"\"\"\n    # Initialize variables to keep track of the maximum sum so far and the current subarray sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate over the list and update the current_sum and max_sum variables accordingly\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # iterate through the list\n    for i in range(size):\n        current_sum += a[i]\n\n        # update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # if the current sum is negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # using set union operator to get the union of two sets\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # converting the set to a list and sorting it\n    union_list = sorted(list(union_set))\n\n    # printing the result\n    print(\"Union of the elements of two tuples is:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Concatenate the two tuples and remove duplicates using set()\n    union_set = set(test_tup1 + test_tup2)\n    # Convert the set back to a list and sort it\n    sorted_union = sorted(list(union_set))\n    # Output the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Initialize an empty list to store the union of elements\n    union_list = []\n    # Loop through both input tuples\n    for i in range(len(test_tup1)):\n        # Check if the element is not already in the union list\n        if test_tup1[i] not in union_list:\n            # Add the element to the union list\n            union_list.append(test_tup1[i])\n    # Loop through both input tuples again\n    for i in range(len(test_tup2)):\n        # Check if the element is not already in the union list\n        if test_tup2[i] not in union_list:\n            # Add the element to the union list\n            union_list.append(test_tup2[i])\n    # Sort the union list in ascending order\n    union_list.sort()\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # union of the two tuples\n    union = set(test_tup1) | set(test_tup2)\n    # convert the union set back to a list and sort it\n    union_list = sorted(list(union))\n    # print the union in sorted order\n    print(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two given tuples\n    union_list = list(set(test_tup1) | set(test_tup2))\n    # Sort the union list in ascending order\n    union_list.sort()\n    # Return the sorted union list as output\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Create a set to store unique elements of both tuples\n    union_set = set(test_tup1 + test_tup2)\n    # Convert the set to a list and sort it\n    sorted_union = sorted(list(union_set))\n    # Output the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    \n    # Convert the combined tuple into a set to remove duplicates\n    unique_tup = set(combined_tup)\n    \n    # Convert the set back into a tuple and sort it in ascending order\n    sorted_tup = tuple(sorted(unique_tup))\n    \n    # Output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert tuples to sets to remove duplicates and sort them\n    set1 = sorted(set(test_tup1))\n    set2 = sorted(set(test_tup2))\n    # Combine the two sets and convert back to tuples\n    combined_set = sorted(set1 | set2)\n    # Return the combined set as a tuple\n    return tuple(combined_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    union_list = sorted(union_set)\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Merge the lists using set union\n    unique_list = list(set(list1) | set(list2))\n\n    # Sort the list in ascending order\n    unique_list.sort()\n\n    # Convert the list back to a tuple\n    result_tup = tuple(unique_list)\n\n    # Print the result\n    print(\"The union of the two tuples is:\", result_tup)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    sublist = []\n\n    for i in lst:\n        sublist.append(i)\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            max_length += 1\n        else:\n            max_length = 1\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = []  \n    for i in range(len(lst)):  \n        longest_sublist.append(1)  \n        for j in range(i+1, len(lst)):  \n            if lst[j] > lst[i]:  \n                longest_sublist[j] = max(longest_sublist[j], longest_sublist[i]+1)  \n    return max(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    max_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            max_length += 1\n        else:\n            max_length = max(max_length, 1)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        sublist = lst[i:i+10]\n        if max_len < len(sublist):\n            max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    longest = 0\n    for i in range(len(lst)):\n        sublist = lst[i]\n        for j in range(i+1, len(lst)):\n            sublist += lst[j]\n            if len(sublist) > longest:\n                longest = len(sublist)\n\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize max_length to 0\n    max_length = 0\n    \n    # iterate through the list of sublists\n    for sublist in lst:\n        # initialize length to 0\n        length = 0\n        \n        # iterate through the sublist\n        for item in sublist:\n            # increment length by 1\n            length += 1\n            \n            # if length exceeds max_length, update max_length\n            if length > max_length:\n                max_length = length\n    # return max_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    # Initialize the maximum length to 0\n    max_length = 0\n    # Initialize a list to store the length of each sublist\n    sublist_lengths = []\n\n    # Loop through each sublist in the list\n    for sublist in lst:\n        # Append the length of the current sublist to the list\n        sublist_lengths.append(len(sublist))\n        # Update the maximum length if the current sublist has a longer length\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n\n    # Return the maximum length of all sublists\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i]\n        for j in range(i+1,len(lst)):\n            sublist.append(lst[j])\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    Args:\n        text (str): The string to extract values from.\n\n    Returns:\n        list: A list of extracted values.\n    \"\"\"\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\b)(?:[\\'\"])(?:[^\\2]*(?:(?!\\2)[^\\2])*)\\2'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\\\"([^\\\"]*)\\\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]+\"|[^\"]+'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        if match.startswith('\"') and match.endswith('\"'):\n            values.append(match[1:-1])\n        elif not match.startswith('\"') and not match.endswith('\"'):\n            values.append(match)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(?:[^\"\\\\]|\\\\.)*\"'\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    values = []\n    for match in matches:\n        value = match.group(0).strip('\"')\n        values.append(value)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]+)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    \n    # Use the re.finditer() function to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Iterate through the matches and extract the values between quotation marks\n    for match in matches:\n        value = match.group(1)\n        print(value)"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    # Initialize two variables to keep track of the number of pairs\n    count = 0\n    # Iterate through the list\n    for i in range(n):\n        # Iterate through the list from the next index\n        for j in range(i+1, n):\n            # Check if both elements are different\n            if arr[i]!= arr[j]:\n                # Increment the count by 1\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += arr[i] * arr[j]\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    # create a list of unique elements in the array\n    unique_elements = list(set(arr))\n    # initialize a counter variable to count the number of pairs\n    count = 0\n    # loop through each unique element in the array\n    for i in range(len(unique_elements)):\n        # loop through each element in the array\n        for j in range(i+1, len(unique_elements)):\n            # if the current element is less than the next element, increment the counter variable\n            if unique_elements[i] < unique_elements[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    # split the string into a list of characters\n    char_list = list(word)\n    # return the list of characters\n    return char_list"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] "
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Splitting the string into characters using list comprehension\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop over each digit in the number\n    while n > 0:\n        # Get the last digit\n        digit = n % 10\n        \n        # Add it to the total\n        total += digit\n        \n        # Remove the last digit from the number\n        n = n // 10\n    \n    # Return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Sum up the digits using a loop\n    result = 0\n    for digit in digits:\n        result += digit\n    return result"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # loop through each digit in the number and add it to the sum_of_digits variable\n    while n > 0:\n        digit = n % 10\n        sum_of_digits += digit\n        n //= 10\n        \n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Get the digits of n\n    digits = [int(digit) for digit in str(n)]\n    \n    # Sum the digits\n    total = sum(digits)\n    \n    # Return the sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    digits = str(n)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each digit in the string\n    for digit in digits:\n        # Add the digit to the sum\n        sum += int(digit)\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum = 0\n    # Loop through each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        # Add the last digit to the sum\n        sum += digit\n        # Remove the last digit from the number\n        n //= 10\n    # Return the sum of the digits\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Convert the list to a string\n    str_list = \"\".join(str(x) for x in list1)\n\n    # Sort the string\n    sorted_str = sorted(str_list)\n\n    # Convert the sorted string back to a list\n    sorted_list = [int(x) for x in sorted_str]\n\n    # Check if the original list is equal to the sorted list\n    if list1 == sorted_list:\n        return \"The list is sorted.\"\n    else:\n        return \"The list is not sorted.\""
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as an argument and returns True if the list is sorted\n    and False otherwise. It uses a simple sorting algorithm to check if the list is sorted.\n    \"\"\"\n    # loop through the list and compare each pair of adjacent elements\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Traverse through each sublist of list1\n    for sublist in list1:\n        # Sort the sublist in ascending order using sort() method\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = str(list1[i][j].lower())\n\n    for i in range(len(list1)):\n        list1[i].sort()\n\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for lst in nums:\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert lists to sets to remove duplicates\n    unique_nums = set(num for lst in nums for num in lst)\n    # convert set back to list\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty set to store unique numbers\n    unique_nums = set()\n    # iterate through each list of numbers\n    for num_list in nums:\n        # iterate through each number in the list\n        for num in num_list:\n            # if the number is not already in the set, add it to the set\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # create a new list with the unique numbers\n    new_list = list(unique_nums)\n    # return the new list with the unique numbers\n    return new_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to remove duplicates from the list\n    unique_nums = set(nums)\n    # convert the set back to a list\n    result = list(unique_nums)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i]!= nums[i-1]:\n            unique_nums.append(nums[i])\n            if len(unique_nums) == 2:\n                break\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty list to store unique numbers\n    unique_nums = []\n    # loop through each list in the given list\n    for num_list in nums:\n        # loop through each number in the list\n        for num in num_list:\n            # check if the number is already in the unique_nums list\n            if num not in unique_nums:\n                # if it's not, add it to the list\n                unique_nums.append(num)\n    # return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty dictionary to store the unique numbers\n    unique_nums = {}\n    # Loop through each number in the given lists\n    for num in nums:\n        # If the number is not already in the dictionary, add it with a value of 1\n        if num not in unique_nums:\n            unique_nums[num] = 1\n        # If the number is already in the dictionary, increment its value by 1\n        else:\n            unique_nums[num] += 1\n    # Create a new list to store the unique numbers in the correct order\n    unique_num_list = []\n    # Loop through the unique numbers dictionary and add them to the new list in order\n    for num, count in unique_nums.items():\n        if count == 1:\n            unique_num_list.append(num)\n    # Return the new list of unique numbers\n    return unique_num_list"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)  # convert the list to a set to remove duplicates\n    product = 1  # initialize the product to 1\n    \n    # calculate the product of the unique numbers\n    for num in unique_nums:\n        product *= num\n    \n    return product  # return the product of the unique numbers"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    # create a set of the unique numbers in the list\n    unique_set = set(list_data)\n    # calculate the product of the unique numbers\n    unique_product = 1\n    for num in unique_set:\n        unique_product *= num\n    # return the unique product\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of numbers and returns the product of the unique numbers in the list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set of unique numbers in the given list\n    unique_numbers = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)  # Convert the list to a set to remove duplicates\n    unique_product = 1  # Initialize the product variable to 1\n    for num in unique_nums:  # Loop through each unique number\n        unique_product *= num  # Multiply the product by the unique number\n    return unique_product  # Return the product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for number in unique_numbers:\n        product *= number\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Initialize a set to store unique numbers\n    unique_set = set(list_data)\n\n    # Calculate the product of unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    unique_product = 1\n    for number in unique_numbers:\n        unique_product *= number\n    return unique_product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the diameter of the cylinder\n    d = 2*r\n    # Calculate the base area\n    area_base = math.pi*(r**2)\n    # Calculate the top area\n    area_top = math.pi*r*h\n    # Calculate the total surface area\n    area = area_base + area_top\n    # Return the surface area\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n\n    Returns:\n    float: the surface area of the cylinder\n    \"\"\"\n    # formula to calculate the surface area of a cylinder\n    # surface area = 2 * pi * r * h\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    pi = 3.14159265358979323846\n    surface_area = 2 * pi * r * h + 2 * pi * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14*(r**2)+2*3.14*(r*h)+2*3.14*(h**2)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * pi * r * h\n    print(\"Surface area of a cylinder is:\", area)\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    area = (2*3.14159)*r*h # surface area of the cylinder\n    print(\"The surface area of the cylinder is:\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Formula to calculate the surface area of a cylinder\n    # Surface Area = 2 * pi * r * h\n    surface_area = 2 * 3.14 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Using the formula for the surface area of a cylinder\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * r + 2 * math.pi * r * h + 2 * math.pi * h * h\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    elif len(A) < len(B):\n        return False\n    else:\n        return sorted(B) in sorted(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): #If B is longer than A, then A must be a sublist of B\n        return False\n    for i in range(len(A)): #Check if A is a sublist of B\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n\n    if len(B) > len(A):\n        return False\n\n    i, j = 0, 0\n\n    while j < len(B):\n        if B[j] in A:\n            i = A.index(B[j])\n            j += 1\n        elif B[j] > A[i]:\n            i += 1\n            if i == len(A):\n                return True\n            else:\n                j += 1\n        else:\n            j += 1\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists A and B as input and returns a boolean value indicating whether B is a sublist of A or not.\n    \"\"\"\n    if not A:\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n    return i == len(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    # Check if the length of the sublist is greater than the length of the main list\n    if len(B) > len(A):\n        return False\n    \n    # Check if the sublist is present in the main list\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False\n    for i in range(len(B)): \n        if A[i] not in B[i:]: \n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    # check if the length of A is greater than or equal to length of B\n    if len(A) < len(B):\n        return False\n    \n    # loop through A and check if B is present in A\n    for i in range(len(A) - len(B) + 1):\n        # check if all the elements of B are present in A[i:i+len(B)]\n        if A[i:i+len(B)] == B:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0 \n    j = 0 \n    while j < len(B): \n        if A[i] == B[j]: \n            i += 1 \n        j += 1 \n    if i == len(A): \n        return True\n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n\n    # checking for the length of A and B\n    if len(A) > len(B): \n        return False \n\n    # checking for the length of B and B itself\n    if len(B) > len(A): \n        return False \n\n    # checking for the sublist condition\n    for i in range(len(A)-len(B)+1): \n        if A[i:i+len(B)] == B: \n            return True \n\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Calculate factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Extract last digit from factorial\n    last_digit = factorial % 10\n    \n    # Return last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    # Convert the number to a string\n    n_str = str(n)\n    # Find the length of the string\n    length = len(n_str)\n    # Initialize the last digit to 0\n    last_digit = 0\n    # Loop through the string from the right to the left\n    for i in range(length - 1, -1, -1):\n        # Find the product of the current digit and the factorial of the current number\n        digit_factorial = 1\n        for j in range(1, n_str[i] + 1):\n            digit_factorial *= j\n        # Multiply the current last digit with the factorial of the current number\n        last_digit *= digit_factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Find the length of the number string\n    len_num = len(num_str)\n    # Calculate the factorial of the number\n    factorial = 1\n    for i in range(1, len_num+1):\n        factorial *= int(num_str[len_num-i])\n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # convert the number to a string\n    str_n = str(n)\n    # split the string into its digits\n    digits = [int(d) for d in str_n]\n    # find the last digit in the list of digits\n    last_digit = digits[-1]\n    # calculate the factorial of the original number\n    factorial = 1\n    for i in range(1, last_digit+1):\n        factorial *= i\n    # return the last digit of the factorial\n    return factorial%10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Initialize variables\n    factorial = 1\n    last_digit = 0\n    \n    # Calculate factorial of n\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Find last digit of factorial\n    while factorial > 0:\n        last_digit = factorial % 10\n        factorial //= 10\n\n    # Return last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    \n    # Use a loop to iterate through each digit in the factorial\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        \n        # Add the last digit to the running total\n        last_digit += digit\n        \n        # Remove the last digit from the number\n        n //= 10\n    \n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize result variable\n    result = 1\n    \n    # Convert n to a string\n    n = str(n)\n    \n    # Loop through the digits of n and multiply each digit by its factorial\n    for digit in n:\n        factorial = 1\n        for i in range(1, int(digit)+1):\n            factorial *= i\n        result *= factorial\n    \n    # Extract the last digit from the result variable and return it\n    return int(result % 10)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Find the last digit of the factorial\n    last_digit = num_str[-1]\n\n    # Return the last digit of the factorial\n    return int(last_digit)"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    index = 0\n    \n    while index < len(list1):\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n        index += 1\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i, j, k = 0, 0, 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] <= list2[j]:\n            if list2[j] <= list3[k]:\n                flat_list.append(list1[i])\n                i += 1\n                j += 1\n            else:\n                flat_list.append(list3[k])\n                k += 1\n        else:\n            if list1[i] <= list3[k]:\n                flat_list.append(list1[i])\n                i += 1\n            else:\n                flat_list.append(list3[k])\n                k += 1\n\n    while i < len(list1):\n        flat_list.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        flat_list.append(list2[j])\n        j += 1\n\n    while k < len(list3):\n        flat_list.append(list3[k])\n        k += 1\n\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Iterate through the lists and add elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Create an empty list to hold the interleaved list\n    interleaved_list = []\n    # Loop through each list in turn\n    for i in range(len(list1)):\n        # Append the i-th element of list1 to the interleaved list\n        interleaved_list.append(list1[i])\n        # Append the i-th element of list2 to the interleaved list\n        interleaved_list.append(list2[i])\n        # Append the i-th element of list3 to the interleaved list\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j]:\n            if list1[i] < list3[k]:\n                result.append(list1[i])\n                i += 1\n            else:\n                result.append(list3[k])\n                k += 1\n        elif list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes 3 lists of the same length as input and returns a single flat list that contains the elements of all 3 input lists.\n    \"\"\"\n    # Concatenate all the lists into a single list\n    flat_list = list1 + list2 + list3\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_set = set(test_tup1) - set(test_tup2)\n    return tuple(diff_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elements = []\n\n    # Iterate through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element is present in the second tuple\n        if test_tup1[i] not in test_tup2:\n            common_elements.append(test_tup1[i])\n\n    # Return the common elements\n    return common_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize empty lists to store dissimilar elements\n    dissimilar_list1 = []\n    dissimilar_list2 = []\n\n    # Loop through the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # Check if the element at index i is equal to the element at the same index in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # If the element is not equal, add it to the appropriate list\n            if i % 2 == 0:\n                dissimilar_list1.append(test_tup1[i])\n            else:\n                dissimilar_list2.append(test_tup1[i])\n\n    # Return the two lists of dissimilar elements\n    return (dissimilar_list1, dissimilar_list2)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Get the length of both tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Loop through both tuples\n    for i in range(len1):\n        # If the current elements are not equal, return the index\n        if test_tup1[i]!= test_tup2[i]:\n            return i\n\n    # If no dissimilar elements are found, return None\n    return None"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate through each element in the first tuple\n    for elem1 in test_tup1:\n        # Iterate through each element in the second tuple\n        for elem2 in test_tup2:\n            # If the element is different, add it to the dissimilar list\n            if elem1!= elem2:\n                dissimilar_list.append(elem1)\n                break  # Exit the second loop after finding the first dissimilar element\n\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of the dissimilar elements.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of elements that are present in test_tup1 but not in test_tup2.\n    \"\"\"\n    dissimilar = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar.append(elem)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a list to store the dissimilar elements\n    dissimilar = []\n\n    # Loop through each element of the first tuple and check if it exists in the second tuple\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            # If the element is not present in the second tuple, add it to the list of dissimilar elements\n            dissimilar.append(elem)\n\n    # Return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Initialize a list to store even elements\n    even_list = []\n\n    # Loop through the nested tuple\n    for tup in test_tuple:\n        # Check if all elements in the tuple are even\n        if all(even_fnc(x) for x in tup):\n            # If all elements are even, add the tuple to the even_list\n            even_list.append(tup)\n\n    # Return the even_list containing only even elements\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple\n\ndef even_num(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            result.append(even_fnc(elem))\n        else:\n            result.append(elem)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for tup in test_tuple:\n        if all(isinstance(i, even_fnc) for i in tup):\n            even_list.append(tup)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple([even_fnc(x) for x in test_tuple if type(x) == tuple])"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_lst = []\n    for lst in test_tuple:\n        for elem in lst:\n            if even_fnc(elem):\n                even_lst.append(elem)\n    return even_lst\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements from the nested mixed tuple using the given even_fnc function.\n    \"\"\"\n    def remove_uneven(nested_tuple):\n        \"\"\"\n        Helper function to remove uneven elements from the nested mixed tuple.\n        \"\"\"\n        uneven = []\n        for item in nested_tuple:\n            if even_fnc(item):\n                uneven.append(item)\n            else:\n                uneven.append(item)\n        return uneven\n    \n    def even_fnc(item):\n        \"\"\"\n        Helper function to check if an item is even.\n        \"\"\"\n        return isinstance(item, int)\n    \n    uneven_tuples = []\n    for nested_tuple in test_tuple:\n        uneven_tuple = remove_uneven(nested_tuple)\n        uneven_tuples.append(uneven_tuple)\n    \n    return uneven_tuples"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Finding the area of the pyramid base\n    base_area = b * b\n    \n    # Finding the area of the side\n    side_area = s * s\n    \n    # Finding the area of the entire pyramid\n    total_area = base_area + side_area\n    \n    # Returning the surface area of the pyramid\n    return total_area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*(b**2) + 2*b*s + 6*s**2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    base_area = b * b\n    \n    # Calculate the area of the top of the pyramid\n    top_area = s * s\n    \n    # Add the areas of the base and top to get the total surface area\n    surface_area = base_area + top_area\n    \n    # Return the total surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)*4 \n    print(\"Surface Area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes in the base edge and height of a square pyramid as input and returns the surface area of the pyramid.\n    '''\n    return 2 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*3 #formula for surface area of a square pyramid\n    \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes the base edge and the height of a square pyramid and returns the surface area of the pyramid.\n    The surface area of a square pyramid is the sum of the perimeter of the base and the perimeter of each\n    of the four sides of the pyramid.\n    '''\n    perimeter = 2 * (b + s)\n    area = (b * s) / 2\n    return perimeter + area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*(b**2) + 2*(b*s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s): \n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    \n    # Calculate the half-perimeter of the square pyramid\n    half_perimeter = 2 * b + 2 * s\n    \n    # Calculate the surface area of the square pyramid\n    area = 0.5 * b * s\n    \n    # Return the surface area of the square pyramid\n    return area, half_perimeter"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    return 2 * b * s + 2 * b + 2 * s + 6 * b * b + 6 * s * s + 6 * b + 6 * s\n"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty.\")\n    else:\n        print(\"Dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using the formula:\n\n    C(n,k) = (2n-1)!/(n-k)!*(n-1-k)!\n\n    Args:\n        n (int): The order of the Catalan number.\n\n    Returns:\n        float: The nth Catalan number.\n    \"\"\"\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    return (factorial(2*n-1) // (factorial(n-1) * factorial(n-2)))\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth Catalan number, which is defined as the sum of the binomial coefficients of 0 to n-1.\n    \"\"\"\n    if num < 0:\n        return None  # Catalan numbers are not defined for negative values of n\n    elif num == 0:\n        return 1  # The first Catalan number is 1\n    elif num == 1:\n        return 1  # The second Catalan number is 1\n    else:\n        return (factorial(2*num) // factorial(num) // factorial(num))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    '''\n    This function returns nth Catalan number.\n    '''\n    # Initialize the Catalan number\n    c = 1\n    \n    # Iterate from 0 to n-1\n    for i in range(n):\n        # Calculate the sum of the catalan numbers from 0 to i\n        # and subtract the sum of the catalan numbers from 0 to i+1\n        c = c*(4*i+2)/(i+1)*(4*i+2)/(i+2)\n    \n    return c"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize the two-dimensional array to store the catalan numbers\n    catalan_matrix = [[1, 1], [1, 0]]\n\n    # Calculate the catalan numbers recursively\n    for i in range(2, n+1):\n        catalan_matrix.append([4*catalan_matrix[i-1][0] - 2*catalan_matrix[i-1][1],\n                              2*catalan_matrix[i-1][0] - catalan_matrix[i-1][1]])\n\n    return catalan_matrix[n][0]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Negative values of n are not allowed.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    c = [0] * (n + 1)\n    c[0] = 1\n    for i in range(1, n + 1):\n        c[i] = (1.0 * i * (n - i + 1)) // i\n    return c[n]\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return (2 * n - 1) * catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    if n < 0:\n        raise ValueError(\"Catalan numbers are only defined for non-negative integers.\")\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_numbers = [0, 1]\n    for i in range(2, num + 1):\n        catalan_numbers.append(sum([catalan_numbers[j] * catalan_numbers[i - j - 1] for j in range(i)]))\n    return catalan_numbers[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth catalan number using the formula: C(n,r) = (n+1)!/(r!(n-r)!) for r=0,1,..,n.\n    '''\n    catalan = 1\n    for i in range(n+1):\n        catalan *= (i+1)\n    return catalan"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for finding adverbs ending with \"ly\"\n    pattern = r'\\b\\w*[aeiou]ly\\b'\n\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty dictionary to store the adverb positions and their lengths\n    adverb_positions = {}\n\n    # Loop through the matches and store the position and length of each adverb in the dictionary\n    for match in matches:\n        start = text.index(match)\n        end = start + len(match)\n        adverb_positions[start] = end - start\n\n    # Sort the dictionary by key (position) and return the list of adverb positions\n    return sorted(adverb_positions.keys())"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regex pattern for adverbs ending with ly\n    pattern = r'(?<![a-z])(ly)$'\n\n    # Search for all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize a list to store the adverb positions and their lengths\n    adverbs = []\n\n    # Loop through each match and extract the positions and lengths\n    for match in matches:\n        start = match.start()\n        end = match.end()\n\n        # Add the position and length of each match to the list\n        adverbs.append((start, end))\n\n    # Return the list of adverb positions and their lengths\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b[a-z]+ly\\b'\n    \n    # Use re.findall() to find all the positions where adverbs end with ly in the text\n    positions = re.findall(pattern, text)\n    \n    # Print the positions where adverbs end with ly in the text\n    print(positions)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regular expression pattern for adverbs ending with ly\n    pattern = r'\\b(?:ly|lys|lyse|lysed|lyses|lysing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysings|lysis|lyss|lysse|lyssed|lysses|lyssing|lysine|lysines|lysing"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[A-Za-z]+ly\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"Adverbs with 'ly' ending:\", matches)\n        for match in matches:\n            start_index = text.find(match)\n            end_index = start_index + len(match)\n            print(\"  Adverb found at index {} with length {}\".format(start_index, end_index))\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # create a regular expression pattern to match the adverbs ending with \"ly\"\n    pattern = r'\\bly\\b'\n    \n    # use the regular expression search() method to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # return a list of tuples containing the adverb and its position in the text\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r\"\\b[a-zA-Z]+ly\\b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regular expression pattern to match the adverb ending with ly\n    pattern = re.compile(r'(.*)\\b(ly)\\b(.*)')\n    \n    # Find all the matches using the regular expression pattern\n    matches = re.findall(pattern, text)\n    \n    # Return the matches and their positions in the string\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regex pattern for finding adverbs ending with \"ly\"\n    adverb_pattern = r\"\\b[a-z]+ly\\b\"\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = re.findall(adverb_pattern, text, re.IGNORECASE)\n\n    # Loop through the matches and print the position and adverb\n    for i, match in enumerate(matches):\n        print(f\"{i+1}. {match}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'[aeiouAEIOU][a-z]*ly'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Sort the items by their price in descending order\n    items.sort(key=lambda x: x[1], reverse=True)\n\n    # Extract the top n items from the sorted list\n    result = []\n    for _ in range(n):\n        result.append(items.pop(0))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    if not items:\n        return []\n\n    # Use a heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # If the heap has more than n items, remove the least expensive item\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n most expensive items in the heap\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a list of items and a number n,\n    return a list of the n most expensive items in the dataset.\n    '''\n    # Use a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    \n    # Return the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    - items (list): A list of items, where each item is a tuple of the form (price, item_name)\n    - n (int): The number of items to return\n\n    Returns:\n    - list: A list of the n most expensive items in the dataset\n    '''\n    # Initialize an empty heap to store the n most expensive items\n    heap = []\n    \n    # Iterate over the items and add each to the heap\n    for price, item in items:\n        heapq.heappush(heap, (-price, item))\n    \n    # Return the n most expensive items from the heap\n    return [heapq.heappop(heap)[1] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap to store the n most expensive items\n    heap = []\n    \n    # Iterate through the dataset and add each item to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n        \n        # If the heap size exceeds n, remove the smallest item from the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    # Return the n most expensive items in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items by price in ascending order\n    items.sort(key=lambda x: x[1])\n    # Create a min heap of size n\n    min_heap = []\n    # Loop through the sorted items\n    for item in items:\n        # If the heap is not full, add the item to the heap\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        # If the heap is full and the item is cheaper than the smallest item in the heap, remove the smallest item\n        elif item[1] < min_heap[0][1]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n    # Return the n most expensive items in the dataset\n    return [item[0] for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to store the top n items with the lowest prices\n    min_heap = []\n    \n    # Iterate through the dataset and add each item to the min-heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        \n        # If the heap size exceeds n, remove the least expensive item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # Return the n items in the heap with the lowest prices\n    return heapq.nsmallest(n, min_heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the dataset into a min heap\n    heap = [(-price, item) for item, price in items]\n    heapq.heapify(heap)\n\n    # Extract the n most expensive items\n    result = [heapq.heappop(heap)[1] for _ in range(n)]\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(n):\n        if i < len(l):\n            new_list.append(l[i])\n    for i in range(n, len(l)):\n        new_list.append(l[i])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    l = first_part + second_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        print(\"Error: Index out of range.\")\n    else:\n        l.insert(len(l), l[:n])\n        del l[:n+1]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # create a new list to store the first part of the list\n    part_1 = []\n    # loop through the list from start to n-1\n    for i in range(n):\n        part_1.append(l[i])\n    # add the first part to the end of the list\n    l.extend(part_1)\n    # return the modified list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[n-1]] + l[:n-1]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    This function takes a list 'l' and an integer 'n' as input and returns a new list with the first n elements of 'l' added to the end of 'l'.\n    \"\"\"\n    # Create a list to store the new list\n    new_list = []\n    # Loop through the list from the nth element to the end\n    for i in range(n, len(l)):\n        # Add each element to the new list\n        new_list.append(l[i])\n    # Add the first n elements of the original list to the end of the new list\n    new_list.extend(l[:n])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    return first_part + last_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 1:\n        return l\n    elif n > len(l):\n        return []\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        new_list = second_part + first_part\n        return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list into two parts at the nth index\n    part1 = l[:n]\n    part2 = l[n:]\n    \n    # Combine the two parts and return the combined list\n    return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n >= len(l):\n        return \"Invalid input\"\n    else:\n        return [l[-n-1]] + l[:-n]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # Create a new tuple with the same elements as the input list\n    new_tuple = tuple(listx)\n    return new_tuple"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # sort the list in descending order\n    nums.sort(reverse=True)\n    \n    # find the smallest value\n    smallest = nums[0]\n    \n    # find the largest value\n    largest = nums[-1]\n    \n    # calculate the difference\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"The list is empty!\"\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        diff = max_val - min_val\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # check if the list is empty\n    if len(nums) == 0:\n        return \"The list is empty\"\n    \n    # find the largest and smallest values in the list\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # calculate the difference between largest and smallest values\n    diff = largest - smallest\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    \n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n            \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Find the difference between the largest and smallest value\n    diff = nums[-1] - nums[0]\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        if i**2 == a:\n            return i**2\n        elif i**2 == b:\n            return i**2\n        else:\n            continue\n    return None"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(math.sqrt(a))+1):\n        for j in range(int(math.sqrt(b))+1):\n            if i**2+j**2==a or i**2+j**2==b:\n                print(i**2+j**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize variables\n    square_list = []\n    \n    # Loop through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        square_root = i ** 0.5\n        if square_root.is_integer():\n            square_list.append(i)\n    \n    # Return the list of perfect squares\n    return square_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two integers a and b as input and returns a list of the perfect squares between a and b.\n    \"\"\"\n\n    # Initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n\n    # Loop through all the numbers between a and b (inclusive)\n    for i in range(a, b+1):\n\n        # Check if the square of the current number is equal to the current number itself\n        if i*i == i:\n\n            # If it is, add it to the list of perfect squares\n            perfect_squares_list.append(i)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize variables\n    squares = []\n    \n    # loop through a range of integers between a and b\n    for i in range(a, b+1):\n        # check if the square root of i is an integer\n        if int(i**0.5) ** 2 == i:\n            # if it is, add it to the list of perfect squares\n            squares.append(i)\n    \n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize a variable to store the perfect squares\n    perfect_squares_list = []\n\n    # loop through the range of numbers between a and b\n    for i in range(a, b+1):\n        # check if the square of the current number is equal to b\n        if i*i == b:\n            perfect_squares_list.append(i)\n\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize variables\n    result = []\n    current = a\n    limit = b\n    \n    # loop through all possible perfect squares between the two numbers\n    while current <= limit:\n        square = current**2\n        # check if the square is a perfect square between the two numbers\n        if square >= a and square <= b:\n            result.append(square)\n        current += 1\n    \n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b < a:\n        a, b = b, a\n    \n    # Initialize two variables to store the lower and upper bounds of the range\n    lower = a\n    upper = int(b * b)\n    \n    # Iterate through the range until the upper bound becomes less than the lower bound\n    while upper >= lower:\n        # Calculate the midpoint of the current range\n        mid = (lower + upper) // 2\n        \n        # Check if the midpoint is a perfect square\n        if mid * mid == b:\n            print(mid)\n            return\n        \n        # If the midpoint is greater than the square root of b, update the lower bound\n        elif mid * mid > b:\n            lower = mid\n        \n        # If the midpoint is less than the square root of b, update the upper bound\n        else:\n            upper = mid\n    \n    # If the loop completes without finding a perfect square, print an error message\n    print(\"Error: no perfect square found\")"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    This function takes two arguments, x and y, which represent the polar coordinates of a point.\n    It converts the polar coordinates to rectangular coordinates and returns them as a tuple.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return (r.real, r.imag), (theta.real, theta.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n        r (float): The radius of the point.\n        theta (float): The angle in radians.\n\n    Returns:\n        tuple: The x and y coordinates of the point in the form (x, y).\n    '''\n\n    # Convert radius and angle to complex number\n    z = complex(r, theta)\n\n    # Calculate x and y components of the complex number\n    x = z.real\n    y = z.imag\n\n    # Return the point in rectangular coordinates\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r, theta = cmath.polar(x + y*1j)\n    return r * cmath.exp(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert angle from degrees to radians\n    theta = cmath.pi * theta / 180\n    \n    # Convert r from meters to units of the imaginary axis\n    r = r * cmath.sqrt(-1)\n    \n    # Calculate x and y components of the rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    # Return the rectangular coordinates\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    return r*cmath.exp(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return (r*cmath.cos(theta), r*cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    \n    Parameters:\n    r (float): radius\n    theta (float): angle in radians\n    \n    Returns:\n    x (float): x-coordinate\n    y (float): y-coordinate\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to Cartesian coordinates\n    r = abs(x)\n    theta = cmath.phase(x)\n    # Set the x and y variables\n    if theta < 0:\n        x = r * cmath.exp(-theta)\n    else:\n        x = r * cmath.exp(theta)\n    if y < 0:\n        y = r * cmath.exp(y)\n    else:\n        y = r * cmath.exp(-y)\n    return complex(x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    rect_x = r * cmath.cos(phi)\n    rect_y = r * cmath.sin(phi)\n    return rect_x, rect_y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    else:\n        # Interchange the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the input list has at least 2 elements\n    if len(newList) < 2:\n        print(\"The input list has less than 2 elements.\")\n    else:\n        # Swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    #swapping the first and last elements\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list is empty\n    if len(newList) == 0:\n        return newList\n    \n    # Check if the list has only one element\n    elif len(newList) == 1:\n        return [newList[0]]\n    \n    # Check if the list has two elements\n    elif len(newList) == 2:\n        return [newList[1], newList[0]]\n    \n    # If the list has three or more elements, swap the first and last elements\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list is empty or has only one element\n    if len(newList) < 2: \n        return newList\n    # Get the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    # Replace the last element with the first element and vice versa\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length < 2:\n        print(\"List should have at least 2 elements\")\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two parameters - n and k - which are the values for n and k in the binomial coefficient. \n    It returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    # To find the sum of the product of consecutive binomial co-efficients, we can use the formula:\n    # sum_i=n choose i (k choose 0) + n choose i (k choose 1) +... + n choose i (k choose i-1)\n    # where n choose i is the binomial coefficient.\n    sum_product = 0\n    for i in range(1, k+1):\n        sum_product += n//i * (n//i-1)//(i-1) * i # n choose i\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<k or k<0 or n<0: \n        return None \n    elif k==0 or k==n: \n        return 1 \n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize variables\n    sum = 0\n    factorial = 1\n    binomial = 1\n\n    # calculate factorial of n\n    for i in range(1,n+1):\n        factorial *= i\n\n    # calculate binomial coefficient\n    for i in range(1,k+1):\n        binomial *= i\n        binomial //= (n-i+1)\n\n    # find sum of product of consecutive binomial coefficients\n    for i in range(1,k+1):\n        sum += factorial // (factorial-2*i+1) * binomial\n\n    # return sum of product of consecutive binomial coefficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    sum = 0\n    for i in range(n, n - k + 1, -1):\n        coeff *= i\n        sum += coeff\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Find the sum of the first k co-efficients\n    sum_first_k = 0\n    for i in range(1, k+1):\n        sum_first_k += binomial(n, i)\n\n    # Find the product of the first k co-efficients\n    product_first_k = 1\n    for i in range(1, k+1):\n        product_first_k *= binomial(n, i)\n\n    # Calculate the sum of the remaining co-efficients\n    sum_remaining = 0\n    for i in range(k+1, n+1):\n        sum_remaining += binomial(n, i)\n\n    # Return the sum of the products\n    return sum_first_k * product_first_k + sum_remaining"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1 \n    sum = 0 \n    for i in range(1,k+1): \n        coeff = coeff * (n-i+1) // i\n        sum += coeff \n    return sum "
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n        n (int): Maximum value of n.\n        k (int): Maximum value of k.\n\n    Returns:\n        int: Sum of the product of consecutive binomial co-efficients.\n\n    \"\"\"\n\n    # Initialize the sum variable to 0\n    sum_prod = 0\n\n    # Check if the combination of n and k is valid\n    if n < k or n < 0 or k < 0:\n        print(\"Invalid combination of n and k.\")\n        return\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(n - k + 1):\n        # Calculate the product of the i'th co-efficient and (n - i)th co-efficient\n        prod_i = (n - i) * i / (i + 1)\n        # Add the product to the sum\n        sum_prod += prod_i\n\n    return sum_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    for i in range(1, k+1):\n        coeff *= n - i + 1\n        coeff /= i\n    return coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    elif k == 1 or k == n - 1:\n        return n\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+([1-9]|1[0-9]|2[0-4][0-9]|25[0-5])\\.', '', ip)\n    ip = re.sub('^0+([1-9]|1[0-9]|2[0-9]|3[0-2])\\.', '', ip)\n    ip = re.sub('^0+([1-9]|1[0-9]|2[0-9]|3[0-2])$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from ip address\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s*0+', '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        return re.sub(r'^(\\d+\\.\\d+\\.\\d+\\.\\d+)$', r'\\1', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # Remove leading zeroes from ip address\n    ip = re.sub(r'^(0{1,2})', '', ip)\n    # Remove trailing zeroes from ip address\n    ip = re.sub(r'(\\b0+\\b)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s+|\\s+$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\D*', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r\"^0*[1-9]\\d*\", \"\", ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2!= 0 and first_odd is None:\n            first_odd = num\n            \n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = list1[0]\n    odd_first = list1[1]\n    diff = even_first - odd_first\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    \n    if even_num % 2 == 0:\n        even_num_diff = even_num - odd_num\n    else:\n        even_num_diff = even_num + odd_num\n    \n    return even_num_diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    even_first = [x for x in lst if x % 2 == 0][0]\n    odd_first = [x for x in lst if x % 2!= 0][0]\n    return abs(even_first - odd_first)\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = 0\n    odd_index = 1\n    \n    while even_index < len(list1) and odd_index < len(list1):\n        if list1[even_index] % 2 == 0 and list1[odd_index] % 2 == 1:\n            return list1[even_index] - list1[odd_index]\n        elif list1[even_index] % 2 == 1 and list1[odd_index] % 2 == 0:\n            return list1[odd_index] - list1[even_index]\n        else:\n            even_index += 1\n            odd_index += 1\n    \n    return \"No even and odd numbers found\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and finds the difference of the first even and first odd number of the list.\n    \"\"\"\n\n    even_num = None\n    odd_num = None\n\n    for num in lst:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n\n        if even_num is not None and odd_num is not None:\n            break\n\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return 'The given list must have at least two elements.'\n    else:\n        for i in range(len(list1)):\n            if list1[i] % 2 == 0:\n                return list1[i] - list1[0]\n        return 'The first even number is not present in the list.'"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    # find the first even and odd numbers in the list\n    even_num = next(num for num in lst if num % 2 == 0)\n    odd_num = next(num for num in lst if num % 2 == 1)\n\n    # return the difference between the even and odd numbers\n    return even_num - odd_num"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the two binary strings to integers and check if they are equal\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    if num1 == num2:\n        return 0\n    \n    # Convert the two binary strings to lists of binary digits, where digits are 0 or 1\n    bin_list1 = [int(d) for d in str1]\n    bin_list2 = [int(d) for d in str2]\n    \n    # Create a dictionary to store the minimum number of swaps needed to convert each binary digit to 1\n    swap_dict = {0: 0, 1: 0}\n    \n    # Iterate over the lists of digits and update the swap_dict accordingly\n    for i, digit1 in enumerate(bin_list1):\n        for j, digit2 in enumerate(bin_list2):\n            if digit1!= digit2:\n                swap_dict[digit1] = min(swap_dict[digit1], swap_dict[digit2] + 1)\n    \n    # Find the minimum number of swaps needed to convert each digit to 1, and return the minimum value\n    min_swaps = float('inf')\n    for value in swap_dict.values():\n        min_swaps = min(min_swaps, value)\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert\n    one binary number to the other.\n\n    Example:\n    Input: \"0101\" and \"1110\"\n    Output: 2\n\n    The binary strings represent the numbers 2 and 9 respectively. We need to swap the 2 and the 9 in order to convert 2 to 9.\n    We can swap the 2 with the 9 to get 1, which is 5 in decimal. If we want to get 9 in binary, we need to swap the 9 with the 5.\n    We can swap the 1 with the 5 to get 0, which is 2 in decimal. Thus, there are 2 swaps required to convert 0101 to 1110.\n    \"\"\"\n    n = len(str1)\n    m = len(str2)\n\n    # initialize two lists to store the frequency of each binary digit in the input strings\n    freq1 = [0] * 2\n    freq2 = [0] * 2\n\n    # count the frequency of each binary digit in the input strings\n    for digit in str1 + str2:\n        freq1[int(digit)] += 1\n\n    # calculate the minimum number of swaps required to convert one binary number to the other\n    min_swaps = 0\n    for i in range(n):\n        diff = freq2[int(str1[i])] - freq1[int(str2[i])]\n        min_swaps += diff\n        freq2[int(str2[i])] += diff\n        freq1[int(str1[i])] += diff\n\n    # check if there is a difference in the frequency of each binary digit after swapping\n    if freq1!= freq2:\n        min_swaps += n - m\n\n    return min_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    n1, n2 = len(str1), len(str2)\n    dp = [[0]*(n1+1) for _ in range(n2+1)]\n    for i in range(n1):\n        for j in range(n2):\n            if str1[i] == str2[j]:\n                dp[j+1][i+1] = dp[j][i]\n            else:\n                dp[j+1][i+1] = min(dp[j][i+1], dp[j+1][i]) + 1\n    return dp[n2][n1]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0] * 3 for _ in range(n+1)]\n    dp[0][0] = 0\n    for i in range(1, n+1):\n        if str1[i-1] == '1':\n            dp[i][0] = dp[i-1][1]\n        else:\n            dp[i][0] = dp[i-1][0] + 1\n    for j in range(1, 3):\n        if str2[j-1] == '1':\n            dp[0][j] = dp[0][j-1]\n        else:\n            dp[0][j] = dp[0][j-1] + 1\n    for i in range(1, n+1):\n        for j in range(1, 3):\n            if str1[i-1] == '1':\n                if str2[j-1] == '1':\n                    dp[i][j] = min(dp[i-1][j], dp[i-1][j-1])\n                else:\n                    dp[i][j] = dp[i-1][j] + 1\n            else:\n                if str2[j-1] == '1':\n                    dp[i][j] = min(dp[i-1][j-1], dp[i-1][j])\n                else:\n                    dp[i][j] = dp[i-1][j]\n    return dp[n][2]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    # initialize variables\n    n = len(str1)\n    count = 0\n\n    # loop through each character in the strings\n    for i in range(n):\n        # compare characters and update count\n        if str1[i]!= str2[i]:\n            count += 1\n\n    # return the minimum count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    count = 0\n    i, j = 0, len(str1)-1\n    while i < j:\n        if str1[i]!= str2[j]:\n            # find the index of the last occurrence of str1[i] in str2[j:k]\n            k = j\n            while str1[i]!= str2[k]:\n                k -= 1\n            # swap the characters at positions i and k\n            str1[i], str1[k] = str1[k], str1[i]\n            str2[j], str2[k] = str2[k], str2[j]\n            # update the indices and count the number of swaps\n            count += j - i\n            i = k + 1\n            j = k + 1\n        else:\n            i += 1\n            j -= 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    \n    # initialize result variable\n    swaps = 0\n    \n    # iterate over characters of str1 and str2\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            # swap characters if they are different\n            str1 = swap(str1, i, n1)\n            str2 = swap(str2, i, n2)\n            swaps += 1\n            \n    # return the final result\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2):\n    # Convert both strings to lists of characters\n    list1 = list(str1)\n    list2 = list(str2)\n    \n    # Initialize the swap count and the length of the strings\n    swap_count = 0\n    len1 = len(str1)\n    len2 = len(str2)\n    \n    # Iterate through the strings and compare their characters\n    for i in range(len1):\n        if list1[i]!= list2[i]:\n            # If the characters are not equal, swap them and increment the swap count\n            list1[i], list2[i] = list2[i], list1[i]\n            swap_count += 1\n    \n    # If the strings have the same length, return 0 as no swaps are required\n    if len1 == len2:\n        return swap_count\n    \n    # Iterate through the strings and swap the characters such that their lengths are equal\n    for i in range(len1, len2):\n        list1[i], list2[i] = list2[i], list1[i]\n        swap_count += 1\n    \n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n\n    n = len(str1)\n\n    # find the length of the two binary numbers\n    len1, len2 = len(str1), len(str2)\n\n    # convert the binary numbers to integers\n    num1, num2 = int(str1, 2), int(str2, 2)\n\n    # initialize the variables for the minimum number of swaps required\n    min_swaps = float('inf')\n\n    # loop through all possible combinations of swapping positions\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                # swap the two numbers\n                num1_new, num2_new = num1, num2\n\n                # swap the i-th and j-th digits of num1 and num2\n                temp = num1_new // 2 ** i\n                num1_new = num1_new % 2 ** i\n                num1_new += temp * 2 ** j\n\n                temp = num2_new // 2 ** i\n                num2_new = num2_new % 2 ** i\n                num2_new += temp * 2 ** j\n\n                # if the swapped numbers are equal, swap the positions i and j\n                if num1_new == num2_new:\n                    num1_new, num2_new = num1_new + 2 ** j, num2_new + 2 ** i\n\n                # if the swapped numbers are not equal, check if they can be equal\n                if num1_new!= num2_new:\n                    # check if num1_new can be equal to num2_new\n                    for k in range(n):\n                        if i!= k:\n                            # swap the k-th and i-th digits of num1 and num2\n                            temp = num1_new // 2 ** k\n                            num1_new = num1_new % 2 ** k\n                            num1_new += temp * 2 ** i\n\n                            temp = num2_new // 2 ** k\n                            num2_new = num2_new % 2 ** k\n                            num2_new += temp * 2 ** i\n\n                            # if the swapped numbers are equal, swap the positions i and k\n                            if num1_new == num2_new:\n                                num1_new, num2_new = num1_new + 2 ** i, num2_new + 2 ** k\n\n                            # if the swapped numbers are not equal, the swaps are not possible\n                            if num1_new!= num2_new:\n                                break\n\n                    # if the swaps are possible, check if they are lesser than the current minimum\n                    if num1_new < num2_new:\n                        min_swaps = min(min_swaps, abs(num1_new - num2_new))\n\n    # if no swaps are possible, return the length of the longer binary number\n    if min_swaps == float('inf'):\n        return len1 if len1 > len2 else len2\n\n    # if swaps are possible, return the minimum number of swaps required\n    else:\n        return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # convert the binary strings to lists of digits\n    list1 = [int(digit) for digit in str1]\n    list2 = [int(digit) for digit in str2]\n\n    # calculate the length of the longer list\n    length = max(len(list1), len(list2))\n\n    # create a list to store swaps required for each digit\n    swaps = [0] * length\n\n    # create a list to store the indices of digits that can be swapped\n    swap_indices = []\n\n    # loop through the digits\n    for i in range(length):\n        # check if digit i in list1 and digit i in list2\n        if i < len(list1) and i < len(list2) and list1[i]!= list2[i]:\n            # calculate the index of the digit in list2 that can be swapped with digit i\n            swap_index = list2.index(list1[i])\n            # add the swap index to the swap_indices list\n            swap_indices.append(swap_index)\n            # update the swaps required for the digit i\n            swaps[i] = swap_index - i\n            # set the swap index for digit i to 0 so that it is not included in any swap later\n            list2[swap_index] = 0\n        # if digit i is not present in either list, set the swap index for digit i to 0\n        else:\n            swap_indices.append(0)\n            swaps[i] = 0\n\n    # calculate the minimum swaps required\n    min_swaps = sum(swaps)\n\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size\n\nif __name__ == '__main__':\n    # Test cases\n    tuple_list1 = (1, 'hello', 3.14, (1, 2, 3), ['a', 'b', 'c'])\n    tuple_list2 = (1, 'hello', 3.14, (1, 2, 3), ['a', 'b', 'c'], 10)\n    \n    print(\"Size of tuple_list1:\", tuple_size(tuple_list1))\n    print(\"Size of tuple_list2:\", tuple_size(tuple_list2))"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # Get the size of each element in the tuple\n    element_sizes = [sys.getsizeof(x) for x in tuple_list]\n\n    # Calculate the total size of the tuple\n    total_size = sum(element_sizes)\n\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    total_size = 0\n    for t in tuple_list:\n        total_size += sys.getsizeof(t)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Function to convert a tuple to bytes\n    def tuple_to_bytes(t):\n        return bytes(t)\n\n    # Function to find the size of a byte array\n    def byte_array_size(arr):\n        return len(arr) * sys.getsizeof(arr[0])\n\n    # Convert each tuple in the list to bytes\n    byte_arrays = [tuple_to_bytes(t) for t in tuple_list]\n\n    # Find the total size of the byte arrays\n    total_size = sum(byte_array_size(arr) for arr in byte_arrays)\n\n    # Return the total size in bytes\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = sys.getsizeof(tuple_list)\n    return size_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize the size of the tuple\n    size = sys.getsizeof(tuple_list)\n    # Return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for element in tuple_list:\n        if isinstance(element, tuple):\n            total_size += tuple_size(element)\n        else:\n            total_size += sys.getsizeof(element)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # initialize two pointers\n    i, j = 0, 0\n    \n    # find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    # loop until we find the kth element\n    while i < n1 and j < n2:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n            \n        # if we have found the kth element, break out of the loop\n        if i == n1 or j == n2:\n            break\n            \n    # if we have not found the kth element, return None\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    # check if both arrays are sorted in non-decreasing order\n    if arr1[-1] >= arr2[0]:\n        # if arr1 is sorted, append its last element to arr2\n        arr2.append(arr1.pop())\n        # if arr2 has less elements than k, append the last element of arr1 to arr2\n        if len(arr2) < k:\n            arr2.append(arr1.pop())\n    else:\n        # if arr2 is sorted, append its first element to arr1\n        arr1.append(arr2.pop(0))\n        # if arr1 has less elements than k, append the first element of arr2 to arr1\n        if len(arr1) < k:\n            arr1.append(arr2.pop(0))\n    # check if arr1 has k elements and if arr2 has k-arr1 elements\n    if len(arr1) == k and len(arr2) == k-len(arr1):\n        # return the kth element from both arrays\n        return max(arr1[-1], arr2[-1])\n    else:\n        # if kth element is not found, return -1\n        return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    # Merge the two sorted arrays\n    merged_arr = arr1 + arr2\n    # Sort the merged array\n    sorted_arr = sorted(merged_arr)\n    # Return the kth element of the sorted array\n    return sorted_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three arguments: two sorted arrays and an integer k. \n    The function returns the kth smallest element from the two arrays.\n    \"\"\"\n    i = j = 0  # initialize pointers for both arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # if the elements are equal, compare their indices\n            if k == 0:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1  # move i pointer to the next element in arr1\n                j += 1  # move j pointer to the next element in arr2\n\n    # if arr1 is still less than arr2, the remaining elements in arr1 are the kth smallest\n    if i < len(arr1):\n        return arr1[i]\n\n    # if arr2 is still less than arr1, the remaining elements in arr2 are the kth smallest\n    if j < len(arr2):\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # get the length of both arrays\n    n1, n2 = len(arr1), len(arr2)\n    # initialize two pointers for arr1 and arr2\n    i, j = 0, 0\n    # initialize the result variable\n    result = None\n    # loop while i and j are less than or equal to the length of both arrays\n    while i <= n1 and j <= n2:\n        # if arr1[i] is less than arr2[j], increment i\n        if arr1[i] < arr2[j]:\n            i += 1\n        # if arr1[i] is greater than arr2[j], decrement j\n        else:\n            j += 1\n        # if i is greater than j, we have found the kth element\n        if i > j:\n            result = arr1[i-1]\n            break\n        # if we have found the kth element, return it\n        if i == j and k == 1:\n            return arr1[i-1]\n        # if we have found the kth element, decrement k and return it\n        if i == j and k > 1:\n            k -= 1\n            return arr1[i-1]\n    # if we have not found the kth element, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Check if both arrays have the same number of elements\n    if len(arr1)!= len(arr2):\n        return \"Both arrays must have the same number of elements\"\n\n    # Find the middle index of the two arrays\n    middle_index = len(arr1) // 2\n\n    # Find the kth element in the first array\n    if k <= middle_index:\n        return find_kth(arr1[:middle_index+1], arr2, k)\n    else:\n        return find_kth(arr1, arr2[middle_index:], k-middle_index-1)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n\n    # If either of the array is empty, return None\n    if len(arr1) == 0 or len(arr2) == 0:\n        return None\n\n    # Initialize pointers for arr1 and arr2\n    i = j = 0\n\n    # Initialize a variable to store the kth smallest element\n    kth_smallest = float('inf')\n\n    # Loop through arr1 and arr2 until we find the kth smallest element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if arr1[i] < kth_smallest:\n                kth_smallest = arr1[i]\n                k -= 1\n            i += 1\n        else:\n            if arr2[j] < kth_smallest:\n                kth_smallest = arr2[j]\n                k -= 1\n            j += 1\n\n    # Return the kth smallest element if it exists\n    if k == 0:\n        return kth_smallest\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            if k < 0:\n                i += 1\n\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digits_sum = 0\n    temp_number = number\n    while temp_number > 0:\n        digit = temp_number % 10\n        digits_sum += digit ** 3\n        temp_number //= 10\n\n    if digits_sum == number:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Check if the number is an integer\n    if not isinstance(number, int):\n        return False\n    \n    # Initialize a variable to store the sum of the cubes of each digit\n    sum = 0\n    \n    # Loop through each digit of the number\n    for digit in str(number):\n        # Convert the digit to an integer and square it\n        digit_squared = int(digit) ** 2\n        \n        # Add the squared digit to the sum\n        sum += digit_squared\n    \n    # Check if the sum of the cubes of each digit is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Take the input number as an integer and initialize a variable to store the sum of its digits raised to the power of the number of digits\n    sum_of_digits = 0\n    num_of_digits = len(str(number))\n    while number > 0:\n        digit = number % 10\n        sum_of_digits += digit ** num_of_digits\n        number //= 10\n    # If the sum of the digits raised to the power of the number of digits is equal to the original number, then it is an armstrong number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(num, base=10):\n    \"\"\"\n    Helper function to check if a number is an Armstrong number or not.\n    \"\"\"\n    num = str(num)\n    return sum([int(digit)**base for digit in num]) == int(num)\n\ndef armstrong_number(number):\n    \"\"\"\n    Function to check whether the given number is an Armstrong number or not.\n    \"\"\"\n    if len(str(number)) < 4:\n        return False\n\n    armstrong_numbers = [i for i in range(10, 100) if is_armstrong(i) and i!= number]\n    if armstrong_numbers:\n        return str(armstrong_numbers[0])\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize the variable to store the sum of squares of digits\n    sum_of_squares = 0\n    # Convert the given number to a string and split it into digits\n    digits = [int(digit) for digit in str(number)]\n    # Loop through the digits of the number\n    for digit in digits:\n        # Add the square of the digit to the sum of squares\n        sum_of_squares += digit ** 3\n    # Return True if the sum of squares is equal to the original number\n    return sum_of_squares == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize the variable to store the sum of cubes of digits\n    cube_sum = 0\n\n    # Convert the given number to a string\n    number_str = str(number)\n\n    # Iterate over each digit of the number\n    for digit in number_str:\n        # Calculate the cube of the digit\n        cube = int(digit) ** 3\n\n        # Add the cube of the digit to the cube_sum\n        cube_sum += cube\n\n    # Return whether the given number is armstrong or not\n    return number == cube_sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Remove all non-numeric characters from the number\n    number = ''.join(filter(str.isdigit, str(number)))\n\n    # Convert the number to a list of digits\n    number_list = [int(digit) for digit in number]\n\n    # Calculate the sum of the cubes of the digits in the number\n    total_sum = sum([digit**3 for digit in number_list])\n\n    # Return whether the number is armstrong or not based on the total sum\n    if total_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string and remove any non-numeric characters\n    number_str = ''.join(filter(str.isdigit, str(number)))\n    \n    # Calculate the sum of the cube of each digit in the number\n    sum_of_cubes = sum(int(digit) ** 3 for digit in number_str)\n    \n    # Check if the sum of the cubes equals the original number\n    if sum_of_cubes == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # calculate the sum of the cubes of the digits of the number\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == number"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, number + 1):\n        total += i\n    average = total / number\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total/n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    print(\"The sum of the first\", number, \"natural numbers is\", sum)\n    print(\"The average of the first\", number, \"natural numbers is\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count to zero\n    total = 0\n    count = 0\n    # loop through the first n natural numbers\n    for i in range(1, number+1):\n        # add the current number to the sum\n        total += i\n        # increment the count\n        count += 1\n    # calculate the average and print the result\n    average = total / count\n    print(\"Sum:\", total)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initializing variables\n    sum_list = []\n    sum_total = 0\n    count = 0\n\n    # adding first number to sum_list\n    sum_list.append(1)\n    sum_total += 1\n\n    # iterating over the numbers from 2 to number\n    while count < number:\n        count += 1\n        sum_total += count\n        sum_list.append(count)\n\n    # calculating the average\n    average = sum_total / number\n\n    # printing the results\n    print(\"Sum of the first\", number, \"natural numbers:\", sum_total)\n    print(\"Average of the first\", number, \"natural numbers:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables\n    total = 0\n    count = 0\n    # loop through the numbers and add them to the total and count variables\n    for i in range(number):\n        total += i+1\n        count += 1\n    # calculate the average and return the result\n    average = total/count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return (sum, average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The given number is even.\")\n    else:\n        print(\"The given number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer argument n and returns True if it is even, and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even, False otherwise.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the frequency of each character in the string\n    char_freq = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in char_freq:\n            char_freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            char_freq[char] = 1\n    \n    # Initialize a variable to store the first repeated character\n    first_rep_char = ''\n    \n    # Loop through each character in the dictionary\n    for char in char_freq:\n        # If the character has a frequency of 2 or more, set it as the first repeated character\n        if char_freq[char] >= 2:\n            first_rep_char = char\n    \n    # Return the first repeated character\n    return first_rep_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate through the dictionary and return the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    # return an empty string if no repeated character is found\n    return ''"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through the string and update the count of each character in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the dictionary and find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated character found.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the character frequencies\n    freq_dict = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return it\n        if char in freq_dict:\n            return char\n        # Otherwise, add it to the dictionary with a frequency of 1\n        else:\n            freq_dict[char] = 1\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    '''\n    return all(n % i!= 0 for i in range(2, int(n**0.5)+1))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n):\n        if i*i == 1:\n            lucid_numbers.append(i)\n        elif i*i == n:\n            lucid_numbers.append(i)\n        elif i*i > n:\n            break\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = []\n    for i in range(n + 1):\n        lucid.append(lucid_number(i))\n    return lucid\n\ndef lucid_number(n):\n    \"\"\"\n    Returns the lucid number for a given integer n.\n    \"\"\"\n    lucid = 1\n    while n >= 1:\n        lucid = lucid * n\n        n -= 1\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i >= 2 and any(i%j == 0 for j in range(2, int(i**0.5)+1)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n + 1):\n\n        # Check if the number is a lucid number\n        is_lucid = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_lucid = False\n                break\n\n        # If the number is a lucid number, append it to the lucid_numbers list\n        if is_lucid:\n            lucid_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i > 1:\n            for j in range(1, i):\n                if i % j == 0:\n                    break\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n + 1):\n        if i < 10:\n            lucid_numbers.append(f\"0{i}\")\n        else:\n            lucid_numbers.append(str(i))\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_list = []\n    for i in range(1, n+1):\n        ludic = i\n        while True:\n            if ludic < i:\n                break\n            if ludic % i == 0:\n                ludic = ludic // i + i\n            else:\n                ludic += 1\n        ludic_list.append(ludic)\n    return ludic_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize an empty list to store lucid numbers\n    lucid_numbers = []\n    # Loop through all numbers from 1 to n-1\n    for i in range(1, n):\n        # Check if the current number is a lucid number\n        is_lucid = True\n        # Loop through all factors of the current number\n        for factor in range(2, int(i**0.5)+1):\n            # If the factor divides the current number, it is not a lucid number\n            if i % factor == 0:\n                is_lucid = False\n                break\n        # If the current number is a lucid number, add it to the list\n        if is_lucid:\n            lucid_numbers.append(i)\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                lucid = False\n                break\n        if lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Convert the string to a list of words\n    words = s.split()\n\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # Join the words back into a string\n    s =''.join(words)\n\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()  # split the string into words\n    reversed_words = words[::-1]  # reverse the order of the words\n    reversed_string =''.join(reversed_words)  # join the reversed words into a string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = [word[::-1] for word in words]\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the reversed words back into a string\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    '''\n    This function checks if a given integer is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\n\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # check if the number is less than or equal to 1\n    if num <= 1:\n        return False\n\n    # check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # if the loop completes without finding any divisor, then the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # check if the number is less than 2\n    if num < 2:\n        return False\n\n    # check if the number is divisible by 1 or by 2\n    if num == 1 or num == 2:\n        return True\n\n    # check if the number is divisible by any number between 3 and the square root of the number\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi/180*degree"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n\n    # Convert degree to radian\n    radian = degree * math.pi / 180\n\n    # Return the result\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(0), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # compile regex pattern\n    pattern = re.compile(pattern)\n\n    # search the text for the pattern and return the matching substrings, start and end indices\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        return matches[0], pattern.search(text).start(), pattern.search(text).end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], matches[0][1] + len(matches[0][0])\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        start = matches[0].start()\n        end = matches[0].end()\n        return matches[0], start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = text.find(matches[0])\n        end_index = start_index + len(matches[0])\n        return matches[0], start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return 2 * bell_Number(n-1)\n    else:\n        return 2 * bell_Number(n-1) + bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * (n + 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize a variable to store the bell number\n    bell = 0\n    # Initialize a variable to store the sum of the previous bell numbers\n    sum_of_previous_bells = 0\n    # Loop through the number of iterations required\n    for i in range(n):\n        # Calculate the bell number by adding the previous bell number and the sum of previous bell numbers\n        bell = i * (i+1) + sum_of_previous_bells\n        # Update the sum of previous bell numbers\n        sum_of_previous_bells = bell\n    # Return the bell number\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        for i in range(3, n+1): \n            bell = 0\n            for j in range(1, i): \n                if j % 2 == 0: \n                    bell += 2**((j-1)//2)\n            bell_list.append(bell)\n            return bell_list[-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Define the bell sequence\n    bell = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676211, 23416728348467675, 37889062373143886, 61305790721611561, 99194853094755447, 160500643816367008, 259695496911122455, 420196140727489463, "
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [0, 1]\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[n]\n\nn = int(input(\"Enter a number: \"))\nprint(f\"The {n}th Bell number is: {bell_Number(n)}\")"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1 or n == 2:\n        return 2\n    else:\n        return (n * (n-1) * (10**n-1)) // 10**n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    i = 0\n    j = 0\n\n    # Loop through the list to copy all elements except the k'th\n    while i < len(list1):\n        if i!= L-1:\n            list2.append(list1[i])\n        i += 1\n\n    # Return the list with the k'th element removed\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and the value of k, and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    list2.pop(L-1)\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L-1\n    for i in range(len(list1)-1, -1, -1):\n        if k == 0:\n            list1.pop(i)\n            break\n        elif i == k-1:\n            k -= 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        if i < L:\n            list2.append(list1[i])\n        elif i > L:\n            list2.append(list1[i-1])\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L\n    new_list = []\n    for i in range(n):\n        if i < k-1:\n            new_list.append(list1[i])\n        elif i == k-1:\n            continue\n        else:\n            new_list.append(list1[i+1])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L\n    if k > n:\n        return \"The given value of k is greater than the length of the list\"\n    elif k == 1:\n        return list1[1:]\n    else:\n        return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # create a copy of the list to avoid modifying the original list\n    list2 = list1.copy()\n    # check if k is less than 1 or greater than the length of the list\n    if L < 1 or L > len(list2):\n        return None\n    # remove the k'th element from the list using slicing\n    del list2[L-1]\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Loop through the list and remove the k'th element\n    for i in range(L):\n        list1.pop(0)\n    # Return the modified list\n    return list1\n"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of rows and columns in the matrix\n    rows = len(test_list)\n    cols = len(test_list[0])\n\n    # Check if the column index is valid\n    if N > cols:\n        print(\"Error: Column index is invalid.\")\n        return\n\n    # Initialize the maximum value of then'th column to the first element of the first row\n    max_value = test_list[0][N-1]\n\n    # Loop through the remaining rows and compare then'th column to the maximum value found so far\n    for i in range(1, rows):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i % N == 0:\n            max_val = max(test_list[i], max_val)\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the list is empty\n    if not test_list:\n        return None\n    \n    # Check if the number of columns is 0\n    if not test_list[0]:\n        return None\n    \n    # Check if then'th column exists\n    if N < 1 or N > len(test_list[0]):\n        return None\n    \n    # Initialize the maximum value to the first value in then'th column\n    max_val = test_list[0][N-1]\n    \n    # Iterate through the remaining columns\n    for row in test_list[1:]:\n        # Check if the column exists\n        if N < 1 or N > len(row):\n            return None\n        # Update the maximum value if the current value is greater\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = -float('inf')\n    for row in test_list:\n        if N-1 < len(row):\n            if row[N-1] > max_value:\n                max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if not matrix or not matrix[0]:\n        return None\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if N >= cols:\n        return None\n    max_val = None\n    for i in range(rows):\n        val = matrix[i][N-1]\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if len(test_list) == 0:\n        return None\n    else:\n        # get the length of the first row\n        row_len = len(test_list[0])\n        # check if N is valid\n        if N < 1 or N > row_len:\n            return None\n        else:\n            # initialize the max value to the first element in the first row\n            max_val = test_list[0][0]\n            # loop through the rest of the matrix and update the max value for eachn'th column\n            for i in range(1, len(test_list)):\n                if N > 1:\n                    for j in range(N):\n                        max_val = max(max_val, test_list[i][j])\n                else:\n                    max_val = max(max_val, test_list[i][0])\n            return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Calculate the total number of rows in the matrix\n    total_rows = len(test_list)\n\n    # Calculate the maximum value of then'th column\n    max_val = max(test_list[i][N-1] for i in range(total_rows))\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_value = -1000\n    for row in test_list:\n        value = row[N-1]\n        if value > max_value:\n            max_value = value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize the max value to be the first element of the list\n    max_val = test_list[0][N-1]\n    \n    # loop through the list of lists\n    for i in range(1, len(test_list)):\n        # check if the value at the nth position is greater than the current max value\n        if test_list[i][N-1] > max_val:\n            # if it is, update the max value to be that value\n            max_val = test_list[i][N-1]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_num:\n            max_num = test_list[i][N-1]\n    return max_num"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        first_element = sublist[0]\n        second_element = sublist[1]\n        merged_list.append([first_element, second_element])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        first_element = sublist[0]\n        second_element = sublist[1]\n        result.append([first_element, second_element])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    # Create empty lists for the merged sublists\n    merged_sublists = [[] for i in range(len(lst))]\n    \n    # Iterate over the sublists\n    for sublist in lst:\n        # Append the first and second elements of the sublist to the corresponding positions in the merged sublists\n        merged_sublists[sublist[0]].append(sublist[1])\n        merged_sublists[sublist[1]].append(sublist[0])\n    \n    # Create the final merged list by concatenating the first elements of each merged sublist with their corresponding second elements\n    final_merged_list = [lst[0] for sublist in merged_sublists for lst in sublist]\n    \n    return final_merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for num in test_list:\n        cumsum += num\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i][1], float):\n            total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for tup in test_list:\n        cumulative_sum += tup[0]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], int):\n            cum_sum += test_list[i]\n        elif isinstance(test_list[i], tuple):\n            for j in range(len(test_list[i])):\n                if isinstance(test_list[i][j], int):\n                    cum_sum += test_list[i][j]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n\n    # Iterate through the tuple list\n    for tup in test_list:\n\n        # If the tuple contains only one value, add it to the cumulative sum\n        if len(tup) == 1:\n            cum_sum += tup[0]\n\n        # If the tuple contains more than one value, add the first value to the cumulative sum and then add the sum of all the subsequent values to the cumulative sum\n        else:\n            cum_sum += tup[0]\n            for i in range(1, len(tup)):\n                cum_sum += tup[i]\n\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    # Initialize a list to store the averages\n    avg_list = []\n\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Initialize a variable to store the sum of the elements in the tuple\n        sum_tup = 0\n        # Loop through each element in the tuple and add it to the sum_tup variable\n        for elem in tup:\n            sum_tup += elem\n        # Calculate the average value of the tuple by dividing the sum_tup by the number of elements in the tuple\n        avg = sum_tup / len(tup)\n        # Append the average value of the tuple to the avg_list variable\n        avg_list.append(avg)\n\n    # Return the avg_list variable which contains the average values for each tuple in the input tuple of tuples\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the average values\n    avg_list = []\n\n    # iterate over each tuple in the input tuple of tuples\n    for tup in nums:\n        # initialize an empty list to store the values in this tuple\n        tup_list = []\n\n        # iterate over each value in this tuple\n        for val in tup:\n            # add the value to the list of values in this tuple\n            tup_list.append(val)\n\n        # calculate the average value for this tuple\n        avg = sum(tup_list) / len(tup_list)\n\n        # add the average value to the list of average values\n        avg_list.append(avg)\n\n    # return the list of average values\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to hold the averages\n    avg_list = []\n    # Iterate through each tuple in the input list\n    for tup in nums:\n        # Calculate the average of the tuple and add it to the list of averages\n        avg_list.append(sum(tup)/len(tup))\n    # Return the list of averages\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        avg = total / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        avg = sum(nums[i]) / len(nums[i])\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t) / len(t) for t in nums]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        avg = sum(nums[i])/len(nums[i])\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        average = sum(i)/len(i)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        sum = 0\n        for num in tup:\n            sum += num\n        avg = sum / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # checking if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are not of the same length.\")\n        return None\n    # element wise modulo operation\n    result = tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The tuples must have the same length.')\n    # Perform element-wise modulo\n    result = [x % y for x, y in zip(test_tup1, test_tup2)]\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_result = []\n    for i in range(len(test_tup1)):\n        modulo_result.append(test_tup1[i] % test_tup2[i])\n    return modulo_result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    # Initialize the result tuple with zeros\n    result_tup = (0,) * len(test_tup1)\n    \n    # Perform the element wise modulo operation\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] % test_tup2[i]\n        \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples must have the same length.\")\n        return\n\n    # Perform element wise modulo using tuple unpacking\n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have same length\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    count = 0\n    end_point = d\n    \n    # iterate through all possible jumps\n    for i in range(1, steps+1):\n        # calculate the next point\n        next_point = end_point - i\n        \n        # check if the point is valid\n        if next_point >= 0:\n            end_point = next_point\n            count += 1\n    \n    # return the count of jumps\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    max_height = 0\n    for i in range(len(steps)-1):\n        if steps[i][1] > max_height:\n            max_height = steps[i][1]\n\n    jumps = 0\n    current_height = max_height\n    index = len(steps)-2\n    \n    while current_height!= 0 and index >= 0:\n        if steps[index][1] > current_height:\n            current_height = steps[index][1]\n            jumps += 1\n        else:\n            break\n        index -= 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    steps = steps if steps % 2 == 0 else steps + 1 # if steps is odd, then we need to add 1 to it to make it even\n    for i in range(1, steps):\n        if i == steps - 1:\n            jumps += 1\n            break\n        if i == steps - 2:\n            jumps += 2\n            break\n        if i == steps - 3:\n            jumps += 3\n            break\n        jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    current_height = 0\n    max_height = 0\n    jumps = 0\n    \n    for i in range(steps):\n        if current_height > max_height:\n            max_height = current_height\n        if current_height == d:\n            return i\n        \n        current_height += 1\n        jumps += 1\n    \n    return jumps - 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    rows = len(steps)\n    jumps = 0\n    current_row = 0\n    current_col = 0\n\n    # Check if we can reach the target from the current position\n    while steps[current_row][current_col] < d:\n        current_row += 1\n        if current_row == rows:\n            return jumps\n        current_col += 1\n        if current_col == len(steps[current_row]):\n            return jumps\n        jumps += 1\n\n    # Check if we can reach the target from the bottom row\n    while steps[rows-1][current_col] < d:\n        current_col += 1\n        if current_col == len(steps[rows-1]):\n            return jumps\n        jumps += 1\n\n    # If we cannot reach the target, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    i = 0  # Start from 0th step\n    j = 0  # Start from 0th point (0, 0)\n    count = 0  # Count the number of jumps\n    \n    # Check if the starting point is (0, d)\n    if j == d:\n        return 1  # Return 1 if the starting point is (0, d)\n        \n    # Iterate until the starting point is (0, d)\n    while True:\n        count += 1\n        i += 1  # Move to the next step\n        j = 0  # Reset the point to (0, 0)\n        \n        # Check if the point is out of bounds or if we have reached the destination point\n        if i >= steps:\n            break\n        if (i, j) == (steps-1, d):\n            return count  # Return the number of jumps required\n        \n        # Check if we can move to the left\n        if j > 0:\n            j -= 1  # Move to the left\n        \n        # Check if we can move to the right\n        if j < d:\n            j += 1  # Move to the right\n            \n    return -1  # Return -1 if the starting point is out of bounds"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize the variables\n    x, y = 0, 0\n    jumps = 0\n    max_jumps = 0\n\n    # Loop through the steps\n    for i in range(steps):\n        # Check if the point at the current position is at the destination\n        if x == d and y == 0:\n            # If yes, return the number of jumps\n            return jumps\n        # Check if the point is out of bounds\n        if x > d or y > d:\n            # If yes, return -1 as the number of jumps is not possible\n            return -1\n        # Check if the point is reachable\n        if y < d - x:\n            # If yes, update the variables\n            x += 1\n            y += 1\n            jumps += 1\n            max_jumps = max(max_jumps, jumps)\n        # If not reachable, move to the right\n        else:\n            x += 1\n            y += 1\n            max_jumps += 1\n\n    # If the point is not reachable after reaching the destination, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    current_x = 0\n    current_y = 0\n    jumps = 0\n    \n    # Check if starting point (0, 0) is reachable\n    if current_x == 0 and current_y == 0:\n        return jumps\n    \n    # Check if steps are not enough to reach (d, 0) from origin\n    if steps < abs(current_x) + abs(current_y):\n        return -1\n    \n    # Perform jumps till we reach the destination\n    while current_x!= d or current_y!= 0:\n        if current_x!= d:\n            current_x += 1\n            jumps += 1\n        elif current_y!= 0:\n            current_y -= 1\n            jumps += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    :param steps: number of steps in the plan\n    :param d: distance to reach the destination point\n    :return: number of jumps required to reach the destination\n    \"\"\"\n\n    # calculating the minimum number of jumps required to reach the destination\n    n = (steps - 1) // d\n    # adding one more jump to reach the destination\n    n += 1\n\n    return n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables to keep track of the distance and the number of jumps required\n    distance = 0\n    jumps = 0\n    \n    # Iterate through the steps and perform the necessary calculations\n    for i in range(steps):\n        # Calculate the new distance by adding the current distance and the current step size\n        distance += d\n        \n        # If the new distance is greater than the destination, update the number of jumps and set the distance to the destination\n        if distance > d:\n            jumps += 1\n            distance = d\n    \n    # Return the number of jumps required to reach the destination\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        return \"The lists have different lengths\"\n    \n    # Divide the two lists element wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must be of equal length.')\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError('Cannot divide by zero.')\n        result.append(nums1[i] // nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the lists are of equal length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must be of equal length\")\n        return None\n    else:\n        # Divide each element of the lists\n        for i in range(len(nums1)):\n            nums1[i] = nums1[i] / nums2[i]\n        return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the input lists are of equal length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length\")\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over both lists and divide the elements\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as arguments, nums1 and nums2, and returns a new list of their element-wise divisions.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''.join(filter(str.isdigit, test_str))\n    if num_str:\n        return test_str + num_str\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n\n    # Remove all non-numeric characters from the string\n    test_str = ''.join(filter(str.isdigit, test_str))\n\n    # Initialize an empty list to store the numbers\n    nums = []\n\n    # Iterate through the string and append each number to the list\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n\n    # Reverse the list of numbers and join them back into a string\n    return ''.join(reversed(nums))"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    numbers = \"\"\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n    for char in test_str:\n        if not char.isdigit():\n            numbers += char\n    return numbers"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty string to store the numbers\n    numbers = ''\n\n    # Loop through the characters of the input string\n    for char in test_str:\n        # If the character is a number, add it to the numbers string\n        if char.isdigit():\n            numbers += char\n        # If the character is not a number, add it to the end of the string\n        else:\n            test_str = test_str[:test_str.index(char)] + numbers + test_str[test_str.index(char):]\n            numbers = ''\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    # iterate through the string and remove any non-digit character\n    test_str = ''.join(filter(str.isdigit, test_str))\n    # remove any leading zeros\n    test_str = test_str.lstrip('0')\n    # split the string into a list of digits and a list of non-digits\n    digit_list = list(filter(str.isdigit, test_str))\n    non_digit_list = list(set(test_str) - set(digit_list))\n    # join the digits and non-digits back together and return the result\n    return ''.join(digit_list + non_digit_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    new_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            new_str += char\n    for num in num_list:\n        new_str = num + new_str\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            num_count += 1\n    num_start = i\n    num_end = i + num_count - 1\n    num_str = test_str[num_start:num_end]\n    return test_str[:num_start] + num_str + test_str[num_end:]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # create a list to hold the numbers\n    numbers = []\n\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the list\n        if char.isdigit():\n            numbers.append(char)\n\n    # sort the list in descending order\n    numbers.sort(reverse=True)\n\n    # join the sorted list into a string and return it\n    return ''.join(numbers)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    return ''.join(nums) + test_str[nums[0]:]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_pattern = r'\\d+'\n    num_list = re.findall(num_pattern, test_str)\n\n    for num in num_list:\n        test_str = re.sub(num, '', test_str)\n\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the input list in ascending order\n    a = sorted(a)\n\n    # Initialize a variable to store the largest subset size found so far\n    largest = 0\n\n    # Initialize two pointers, left and right, at the beginning of the list\n    left = 0\n    right = 0\n\n    # Loop through the sorted list\n    while right < len(a):\n        # Calculate the size of the current subset\n        subset_size = right - left + 1\n\n        # Check if the current subset is divisible by every pair of consecutive elements in the list\n        is_divisible = True\n        for i in range(subset_size):\n            if a[left+i] % a[right-i]!= 0:\n                is_divisible = False\n                break\n\n        # If the current subset is divisible, update the largest subset size if necessary\n        if is_divisible:\n            largest = max(largest, subset_size)\n\n        # Move the right pointer to the next element\n        right += 1\n\n    # Return the largest subset size found\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    max_size = 1\n    i = 0\n    \n    while i < n-1:\n        if a[i] % a[i+1] == 0:\n            max_size += 1\n        else:\n            break\n        i += 1\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Define the maximum subset size\n    max_size = 0\n\n    # Sort the input list\n    a.sort()\n\n    # Iterate over all possible pairs of numbers in the list\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            # Calculate the size of the current subset\n            current_size = j - i + 1\n            # Check if the current subset is larger than the maximum subset found so far\n            if current_size > max_size:\n                max_size = current_size\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    pairs = {}\n\n    for num in a:\n        remainder = num % 2\n        if remainder in pairs:\n            pairs[remainder].append(num)\n        else:\n            pairs[remainder] = [num]\n\n    largest_set = []\n    max_length = 0\n\n    for remainder in pairs:\n        if len(pairs[remainder]) > max_length:\n            max_length = len(pairs[remainder])\n            largest_set = pairs[remainder]\n\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    mod = 10**9 + 7\n\n    dp = [1] * n\n    max_size = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n        max_size = max(max_size, dp[i])\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # create a set of all possible pairs\n    pairs = set()\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            pairs.add((a[i], a[j]))\n    \n    # find the largest subset using dynamic programming\n    dp = [1] * len(a)\n    max_size = 1\n    \n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if (a[i] % a[j]) == 0:\n                dp[j] += dp[i]\n                if dp[j] > max_size:\n                    max_size = dp[j]\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    # create a dictionary to store the counts of the numbers in the list\n    count_dict = {}\n    for num in a:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # sort the count dictionary by value in descending order\n    sorted_count_dict = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)\n\n    # initialize variables to store the largest subset size and the largest pair that is divisible\n    largest_subset_size = 0\n    current_subset_size = 0\n    largest_divisible_pair = (0, 0)\n\n    # loop through the sorted count dictionary\n    for i, (num, count) in enumerate(sorted_count_dict):\n        current_subset_size += count\n\n        # check if the current subset size is greater than the largest subset size so far\n        if current_subset_size > largest_subset_size:\n            largest_subset_size = current_subset_size\n            largest_divisible_pair = (num, current_subset_size)\n\n        # check if the current subset size is divisible by the sum of all the numbers in the list\n        if current_subset_size % sum(a) == 0:\n            return largest_subset_size\n\n    # if no pair is divisible, return 0\n    return 0"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    # Create a list to store the factors of each number\n    factors = [[] for _ in range(n)]\n    # Iterate over the numbers and find their factors\n    for num in a:\n        for i in range(2, num // 2 + 1):\n            if num % i == 0:\n                factors[i - 1].append(num)\n    # Initialize a set to store the factors of the largest subset\n    max_factors = set()\n    # Iterate over the factors and add them to the set\n    for factor in factors[0]:\n        max_factors.add(factor)\n    for i in range(1, n):\n        # Check if the current factor is a factor of the largest subset\n        for factor in factors[i]:\n            if factor in max_factors:\n                # If it is, add it to the set and break out of the inner loop\n                max_factors.add(factor)\n                break\n    # Return the size of the largest subset\n    return len(max_factors)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    max_size = 0\n    start = 0\n\n    for end in range(1, n):\n        while a[end] % a[start]!= 0:\n            if end - start + 1 > max_size:\n                max_size = end - start + 1\n            start += 1\n\n        dp[end] = end - start + 1\n        max_size = max(max_size, dp[end])\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in descending order\n    a.sort(reverse=True)\n    # Initialize a variable to store the size of the largest subset\n    largest_size = 0\n    # Initialize two pointers, i and j, pointing to the beginning and end of the list respectively\n    i = 0\n    j = len(a) - 1\n    # Loop while i is less than j\n    while i < j:\n        # Check if the difference between the two numbers is divisible by 2\n        if (a[i] - a[j]) % 2 == 0:\n            # If it is, increment the size of the largest subset and move the pointers towards each other\n            largest_size += 2\n            i += 1\n            j -= 1\n        # If the difference is not divisible by 2, move the pointer towards the smaller number\n        else:\n            if a[i] < a[j]:\n                i += 1\n            else:\n                j -= 1\n    return largest_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # sort both arrays\n    arr1.sort()\n    arr2.sort()\n\n    # find the indices of the midpoint of both arrays\n    mid1 = n // 2\n    mid2 = n // 2 + n % 2\n\n    # if the total number of elements is odd, the median is the middle element of the two middle arrays\n    if n % 2 == 1:\n        return (arr1[mid1] + arr2[mid2]) / 2\n\n    # if the total number of elements is even, the median is the average of the middle elements of both middle arrays\n    else:\n        return (arr1[mid1] + arr2[mid2 - 1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n\n    # Merge the two sorted arrays into a single sorted array\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    merged_arr.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        median = (merged_arr[n // 2 - 1] + merged_arr[n // 2]) / 2\n    else:\n        median = merged_arr[n // 2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # concatenate the two arrays into a single array\n    arr = arr1 + arr2\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # get the length of the array\n    length = len(arr)\n\n    # find the index of the middle element\n    middle = length // 2\n\n    # if the length is odd, then the middle element is the median\n    if length % 2 == 1:\n        return arr[middle]\n\n    # if the length is even, then the median is the average of the middle two elements\n    else:\n        # calculate the indices of the middle two elements\n        index1 = middle - 1\n        index2 = middle\n\n        # return the average of the middle two elements\n        return (arr[index1] + arr[index2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge both arrays into one\n    merged = merge(arr1, arr2)\n\n    # Find the middle index\n    mid = n // 2\n\n    # Find the median\n    if n % 2 == 0:\n        # If the length of the array is even, the median is the average of middle two elements\n        median = (merged[mid - 1] + merged[mid]) / 2\n    else:\n        # If the length of the array is odd, the median is the middle element\n        median = merged[mid]\n\n    return median\n\ndef merge(arr1, arr2):\n    '''\n    Merge two sorted arrays into one sorted array.\n    '''\n    merged = []\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    # Append any remaining elements from the arrays\n    merged += arr1[i:]\n    merged += arr2[j:]\n\n    return merged"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        mid1 = n//2\n        mid2 = n//2\n        # Find the two middle elements\n        mid1_1 = arr1[mid1-1] if mid1 > 1 else float('-inf')\n        mid1_2 = arr1[mid1]\n        mid2_1 = arr2[mid2-1] if mid2 > 1 else float('-inf')\n        mid2_2 = arr2[mid2]\n        \n        # Find the median of the two middle elements\n        median1 = (mid1_1 + mid1_2) / 2\n        median2 = (mid2_1 + mid2_2) / 2\n        \n        return (median1 + median2) / 2\n    else:\n        # Find the middle element\n        mid = n//2\n        mid_1 = arr1[mid-1] if mid > 1 else float('-inf')\n        mid_2 = arr1[mid]\n        \n        return mid_1"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 1:\n        # if n is odd, take the middle element\n        return sorted(arr1 + arr2)[n//2]\n    else:\n        # if n is even, take the average of middle two elements\n        return (sorted(arr1 + arr2)[n//2 - 1] + sorted(arr1 + arr2)[n//2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate both lists\n    arr = arr1 + arr2\n    \n    # Sort the concatenated list\n    arr.sort()\n    \n    # Get the median\n    mid = n // 2\n    \n    if n % 2 == 0:\n        # If the length of the array is even, the median is the average of the middle two elements\n        return (arr[mid-1] + arr[mid]) / 2\n    else:\n        # If the length of the array is odd, the median is simply the middle element\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in three sorted lists of same size and finds their median.\n    \"\"\"\n    # Find the median of the first list\n    median1 = get_median_helper(arr1, n//2)\n    # Find the median of the second list\n    median2 = get_median_helper(arr2, n//2)\n    # Merge the two medians and return the result\n    return merge_medians(median1, median2)\n\n\ndef get_median_helper(arr, k):\n    \"\"\"\n    Helper function to find the kth smallest element in the array.\n    \"\"\"\n    # Find the kth smallest element in the array\n    arr.sort()\n    return arr[k-1]\n\n\ndef merge_medians(median1, median2):\n    \"\"\"\n    Helper function to merge the two medians.\n    \"\"\"\n    # If either of the medians are equal, return the other median\n    if median1 == median2:\n        return median1\n    # If one of the medians is less than the other, add the value from the other median to the end of the first median\n    elif median1 < median2:\n        return median1 + median2\n    else:\n        return median1 + median2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge two sorted arrays into one\n    merged = arr1 + arr2\n    merged.sort()\n    \n    # Find the midpoint of the merged array\n    mid = n // 2\n    \n    # Return the median\n    return merged[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge both lists into a single list\n    merged_list = arr1 + arr2\n\n    # Calculate the total number of elements in the merged list\n    total_elements = n * 2\n\n    # Sort the merged list in ascending order\n    sorted_list = sorted(merged_list)\n\n    # Find the middle element of the sorted list\n    middle_element = sorted_list[total_elements // 2]\n\n    # Return the median element\n    return middle_element\n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Loop through each number in the list and compute its nth power\n    for i in range(len(nums)):\n        nums[i] **= n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function checks if a given string is in uppercase or not.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    str: The input string in uppercase.\n\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns the uppercase version of the string.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are uppercase and False otherwise.\n    '''\n    for char in string:\n        if char.islower():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns the uppercase version of the string.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function converts a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return None\n    else:\n        firstElement = newList[0]\n        lastElement = newList[-1]\n        newList[0] = lastElement\n        newList[-1] = firstElement\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check that the input is a list\n    if not isinstance(newList, list):\n        raise TypeError(\"Input is not a list\")\n    # Check that the list has at least two elements\n    elif len(newList) < 2:\n        raise ValueError(\"Input list should have at least two elements\")\n    else:\n        # Interchange the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Check if the length of the list is 2 or greater\n    if len(newList) < 2:\n        return \"The list must have at least 2 elements.\"\n    \n    # Assign the first and last elements of the list to variables\n    first = newList[0]\n    last = newList[-1]\n    \n    # Assign the second and second-to-last elements of the list to variables\n    second = newList[1]\n    second_last = newList[-2]\n    \n    # Interchange the first and second elements\n    newList[0] = second\n    newList[1] = first\n    \n    # Interchange the last and second-to-last elements\n    newList[-1] = second_last\n    newList[-2] = last\n    \n    # Return the updated list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) > 1:\n        # get the first and last elements of the list\n        first = newList[0]\n        last = newList[-1]\n        # swap the first and last elements\n        newList[0] = last\n        newList[-1] = first\n        # return the modified list\n        return newList\n    else:\n        # return the original list if it's only one element long\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    # check if the list has at least 2 elements\n    if len(newList) < 2:\n        print(\"List should have at least 2 elements\")\n        return None\n    \n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # print the updated list\n    print(\"Updated list:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least 2 elements\n    if len(newList) >= 2:\n        # Interchange the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"The list must have at least 2 elements.\")\n        return None"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1: \n        # Store the first and last element of the list\n        first = newList[0]\n        last = newList[-1]\n        # Interchange the first and last elements\n        newList[0] = last\n        newList[-1] = first\n    else: \n        print(\"List must have at least two elements\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # initializing variables\n    temp = None\n\n    # swapping first and last element of the list\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    \n    # loop through all possible angles and find the area of the triangle with that angle\n    for i in range(360):\n        # angle in degrees\n        angle = i\n        \n        # convert angle to radians\n        angle = math.radians(angle)\n        \n        # area of the triangle\n        s = 1/2 * r * r * (1 - math.cos(angle))\n        \n        # check if the triangle is larger than the current largest triangle\n        if s > area:\n            area = s\n            \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = r / math.sin(math.pi / 3)\n    b = r / math.sin(math.pi / 6)\n    c = r / math.sin(math.pi / 12)\n    area = max(a, b, c)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes a radius r and returns the area of the largest triangle that can be inscribed in a semicircle with the radius r.\n    '''\n    h = math.sin(math.pi/3) * r  # height of the largest triangle\n    area = math.pi * (r**2 - h**2) / 4  # area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Formula for the area of the largest triangle inscribed in a semicircle\n    a = 2 * r\n    b = 4 * r**2\n    c = 2 * r**3\n\n    # Using the formula for the area of a triangle, we can find the largest triangle that can be inscribed in the semicircle.\n    # We can start by finding the triangle with the largest area, which is the one with the longest side.\n    longest_side = max(a, b, c)\n    area = longest_side / 2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a Python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Formula for the area of a triangle with sides of length s, base b and height h\n    # A = (1/2)bh\n    #\n    # Substituting s = sqrt(r^2 - b^2) and h = sqrt(r^2 - b^2 - 2Br), we get\n    # A = (1/2)bh\n    # A = (1/2)(r^2 - b^2) = (r^2 - b^2)^(1/2)\n    # A = (r^2 - b^2)^(1/2)\n    # A = (r^2 - b^2)^(1/2) * (b^2 + r^2)\n    # A = (r^2 - b^2)^(1/2) * (b^2 + r^2) + (r^2 - b^2)^(1/2) * b^2\n    # A = (r^2 - b^2)^(1/2) * (b^2 + r^2) + (r^2 - b^2)^(1/2) * (b^2 + r^2 + 2Br)\n    # A = (r^2 - b^2)^(1/2) * (b^2 + r^2 + 2Br)\n    #\n    # Substituting b^2 = r^2, we get\n    # A = (1/2)(r^2 - r^2) = 0\n    # A = (1/2)(r^2) = r^2\n    #\n    # Substituting b = sqrt(r^2), we get\n    # A = (1/2)r^2 = r^2\n    #\n    # Therefore, the area of the largest triangle that can be inscribed in a semicircle with a given radius is r^2.\n\n    return r**2"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    s = 2 * math.pi * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = math.sqrt(s * (s - 3) * (s - 4) * (s - 5)) / 12\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate semi-perimeter\n    semi_perimeter = 2*math.pi*r\n    \n    # calculate area of largest triangle\n    area_max = math.sqrt(semi_perimeter**2 - 3*math.sqrt(semi_perimeter**2 - 10))\n    \n    return area_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-circle's diameter\n    d = 2*r\n\n    # calculate the angle that the longest side of the triangle should have\n    a = math.asin(d/2)\n\n    # calculate the area of the triangle\n    s = (1/2)*(r**2)\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (s*(1-math.cos(a)))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = r * 0.5\n    return (3 * a**2) / (4 * math.tan(math.pi/3))"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    # Check if the array is sorted\n    if not sorted(array) == array:\n        print(\"The array must be sorted.\")\n        return -1\n\n    # Initialize the start and end points\n    if end == None:\n        end = max(array)\n\n    # Iterate through the array and find the smallest missing number\n    for i in range(start,end+1):\n        if i not in array:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = max(array)\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    if end < 0:\n        return None\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if mid > 0 and array[mid] - array[mid - 1]!= 1:\n            start = mid + 1\n        elif mid < len(array) - 1 and array[mid + 1] - array[mid]!= 1:\n            end = mid - 1\n        else:\n            return array[mid] + 1\n    \n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = max(array)\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if not i in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the first missing number in a sorted list of natural numbers.\n    \n    :param array: a list of natural numbers sorted in ascending order\n    :param start: the starting index of the array, default is 0\n    :param end: the ending index of the array, default is the length of the array minus one\n    :return: the first missing number in the array\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # If the list is not sorted, sort it using the built-in sort() function\n    if start == 0:\n        array.sort()\n        start = 1\n    # Initialize the minimum missing number to the first element in the array\n    min_missing = array[0]\n    # Iterate over the array, updating the minimum missing number as needed\n    for i in range(1,len(array)):\n        if array[i]!= i:\n            if array[i] - i > 1:\n                min_missing = i + 1\n            else:\n                min_missing = array[i]\n    # If the end index is not specified, set it to the last index of the array\n    if end is None:\n        end = len(array) - 1\n    # Iterate over the array from the end until the minimum missing number is found\n    for i in range(end,start-1,-1):\n        if i == array[i]:\n            return i\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Binary search to find the first missing number\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid == 0 or array[mid - 1]!= mid:\n            return mid\n        if mid == len(array) or array[mid]!= mid:\n            return mid + 1\n        if array[mid - 1] < array[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    # If the list is sorted in ascending order, there should be no missing numbers\n    return None"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    even_list = [] \n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers.\n    '''\n    even_list = []\n    for i in lst:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    # base case: if element is a tuple, return the element itself\n    if isinstance(ele, tuple):\n        return [ele]\n    # recursive case: if element is a list, return the element and all its sublists recursively\n    elif isinstance(ele, list):\n        result = []\n        for i in ele:\n            result += adjac(i, sub=sub+[i])\n        return result\n    # otherwise, return the element itself\n    else:\n        return [ele]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    if x - 1 >= 0: \n        sub.append((x - 1, y)) \n    if x + 1 < len(grid): \n        sub.append((x + 1, y)) \n    if y - 1 >= 0: \n        sub.append((x, y - 1)) \n    if y + 1 < len(grid[0]): \n        sub.append((x, y + 1)) \n    return sub "
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = []\n    #iterate through all the adjacent elements in a clockwise direction\n    for i in range(4):\n        new_x, new_y = x+x_adj[i], y+y_adj[i]\n        if (new_x, new_y) not in sub:\n            sub.append((new_x, new_y))\n            result.append((new_x, new_y))\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Extract the coordinates of the given element\n    x, y = ele\n\n    # Define a set to store the adjacent coordinates\n    adj = set()\n\n    # Define a set to store the visited coordinates\n    vis = set()\n\n    # Check all the four adjacent coordinates\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # Ignore the current coordinate\n            if i == 0 and j == 0:\n                continue\n            # Check if the adjacent coordinate is within the range of the matrix\n            if 0 <= x + i < n and 0 <= y + j < m:\n                # Check if the adjacent coordinate is not visited yet\n                if (x + i, y + j) not in vis:\n                    # Check if the adjacent coordinate is not equal to the given element\n                    if (x + i, y + j)!= ele:\n                        # Add the adjacent coordinate to the set of visited coordinates\n                        vis.add((x + i, y + j))\n                        # Add the adjacent coordinate to the set of adjacent coordinates\n                        adj.add((x + i, y + j))\n\n    # Return the set of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i, j = ele\n    sub.append(ele)\n    if j < len(grid) - 1:\n        sub.append((i, j+1))\n    if i < len(grid[0]) - 1:\n        sub.append((i+1, j))\n    if j > 0:\n        sub.append((i, j-1))\n    if i > 0:\n        sub.append((i-1, j))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a tuple of coordinates as input and returns a list of all the adjacent coordinates.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < len(sub) - 1:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < len(sub[0]) - 1:\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a tuple representing the coordinates and returns a list of all the adjacent coordinates.\n    If a sublist is passed as an argument, it will recursively check all adjacent coordinates for the tuple in that sublist.\n    '''\n    x, y = ele\n    adj = []\n    \n    # check all adjacent cells horizontally\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (x + i, y + j)!= ele:\n                adj.append((x + i, y + j))\n    \n    # check all adjacent cells vertically\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (x + j, y + i)!= ele:\n                adj.append((x + j, y + i))\n    \n    # check all adjacent cells diagonally\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (x + i + j, y + i - j)!= ele:\n                adj.append((x + i + j, y + i - j))\n    \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)):\n        for j in range(len(ele)):\n            if i == j:\n                continue\n            adj_ele = tuple(ele)\n            adj_ele[i], adj_ele[j] = adj_ele[j], adj_ele[i]\n            sub.append(adj_ele)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Extracting all the adjacent elements of the current element\n    adjacent = [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]\n\n    # Adding the adjacent elements to the current sub list\n    sub.extend(adjacent)\n\n    # Recursively calling the function for all the adjacent elements\n    for i in adjacent: \n        adjac(i, sub)\n\n    # Removing duplicates from the sub list\n    sub = list(dict.fromkeys(sub))\n\n    # Returning the sub list of adjacent elements\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char.isspace():\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    # Split the text into words\n    words = text.split()\n\n    # Iterate over each word and replace spaces with underscores\n    for i in range(len(words)):\n        if \" \" in words[i]:\n            words[i] = words[i].replace(\" \", \"_\")\n\n    # Iterate over each word and replace underscores with spaces\n    for i in range(len(words)):\n        if \"_\" in words[i]:\n            words[i] = words[i].replace(\"_\", \" \")\n\n    # Join the words back into a string and return it\n    return \" \".join(words)\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace all underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Replace spaces with underscores and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n    if zero_count > 0:\n        num_list.pop(len(num_list)-1)\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1-zero_count] = num_list[len(num_list)-1-zero_count], num_list[i]\n            zero_count -= 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # loop through the list\n    for i in range(len(num_list)-1, -1, -1):\n        # if the element is zero, move it to the end\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Find all the indices of zeroes in the list\n    zero_indices = [i for i, x in enumerate(num_list) if x == 0]\n    # Reverse the order of the zeroes indices to find the final indices\n    final_indices = zero_indices[::-1]\n    # Swap the elements at the final indices with the elements at the original indices\n    for i, j in zip(final_indices, range(len(num_list))):\n        if i < j:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    return [num for num in num_list if num!= 0] + [0] * (len(num_list) - sum([num == 0 for num in num_list]))"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers i and j, where i is the index of the first non-zero element and j is the index of the current element.\n    i = 0\n    j = 0\n    \n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # loop through the list\n    for i in range(len(num_list)):\n        # if the current number is zero, move it to the end of the list\n        if num_list[i] == 0:\n            temp = num_list[i]\n            num_list[i] = num_list[len(num_list) - 1]\n            num_list[len(num_list) - 1] = temp\n            # decrement the length of the list since we're moving an element to the end\n            len(num_list) -= 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers to keep track of the start and end of the list\n    start = 0\n    end = len(num_list) - 1\n\n    # Move all zeroes to the end of the list\n    while start < end:\n        if num_list[start] == 0:\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            start += 1\n            end -= 1\n        else:\n            end -= 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1-zero_count] = num_list[len(num_list)-1-zero_count], num_list[i]\n            zero_count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize variables\n    zero_count = 0  # Count of zeroes\n    new_list = []  # New list with non-zeroes\n    \n    # Loop through the list\n    for i in range(len(num_list)):\n        # If the current number is not zero, append it to the new list\n        if num_list[i]!= 0:\n            new_list.append(num_list[i])\n        # If the current number is zero, increment the zero count\n        else:\n            zero_count += 1\n    \n    # Loop through the new list and append the zeroes to the end of the list\n    for i in range(zero_count):\n        new_list.append(0)\n    \n    return new_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of n numbers and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    if n % 2 == 0:\n        return pair_xor_Sum(arr, n // 2)\n    else:\n        xor_sum = arr[0]\n        for i in range(1, n):\n            xor_sum ^= arr[i]\n        return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes an array arr of size n and returns the sum of xor of all pairs of numbers in the array.\n\n    :param arr: list of size n\n    :param n: size of the array\n    :return: integer representing the sum of xor of all pairs of numbers in the array\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    if len(arr)!= n:\n        print(\"The length of the array does not match the input size.\")\n        return\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    This function takes an array of n integers and returns the sum of xor of all pairs of numbers in the array.\n    '''\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Loop through the array\n    for i in range(n) : \n        for j in range(i+1,n) : \n            # XOR the two numbers and add it to the sum variable\n            sum += arr[i] ^ arr[j]\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    if n <= 1:\n        return 0\n    \n    # XOR of first two elements of the array\n    xor_sum = arr[0] ^ arr[1]\n    \n    # XOR of rest of the array\n    for i in range(2, n):\n        xor_sum = xor_sum ^ arr[i]\n        \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n        for j in range(i+1, n):\n            xor_sum ^= arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    # XOR of two numbers is the result of applying XOR operator to their bits\n    # We can find the XOR of all pairs of numbers by iterating over the list and applying XOR operator on each pair\n    # The XOR of two numbers is the same as their sum of two 1's and two 0's\n\n    # XOR of 0 and any number is always 0\n    # XOR of any number and 0 is always 0\n    # XOR of 1 and any number is the same as the number itself\n    # XOR of any number and 1 is the same as the number itself\n\n    # Let's initialize the sum of xor of all pairs to 0\n    sum_xor = 0\n\n    # Iterate over the list\n    for i in range(n):\n        for j in range(i+1,n):\n            # XOR of two numbers is the same as their sum of two 1's and two 0's\n            xor = arr[i] ^ arr[j]\n            sum_xor = sum_xor ^ xor\n\n    # Return the sum of xor of all pairs\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor ^= arr[i] ^ arr[j]\n    return xor"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n\n    heap = []\n    for num in iterable:\n        heapq.heappush(heap, num)\n\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heappushpop(iterable)\n    while iterable:\n        yield heapq.heappop(iterable)\n        heap = hq.heappushpop(iterable)\n    return list(iterable)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Converting the list to a heap\n    hq.heapify(iterable)\n    # Sorting the list using the heap sort algorithm\n    while hq.heapify(iterable) > 0:\n        pass\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list(iterable)\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    heap = hq.heapify(iterable)\n    \n    # Iterate over the heap and append elements to the output list\n    output = []\n    while heap:\n        output.append(hq.heappop(heap))\n    \n    return output"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)  # Build a max heap from the list\n    sorted_list = []\n    while hq.heapq():  # Iterate over the heap until it's empty\n        sorted_list.append(hq.heappop(iterable))  # Pop the largest element and append it to the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the iterable to a list\n    l = list(iterable)\n\n    # create a min heap from the list\n    hq.heapify(l)\n\n    # extract the minimum element from the heap\n    result = []\n    while l:\n        result.append(heapq.heappop(l))\n\n    # convert the result back to an iterable\n    result = iter(result)\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a max heap\n    hq.heapify(iterable)\n    \n    # Pop the maximum elements and append them to a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable.pop())\n        \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    arr = list(iterable)\n    # Create a max-heap\n    hq.heapify(arr)\n    # Sort the list using heapsort algorithm\n    heapq.heapify(arr)\n    for i in range(len(arr)):\n        # Extract the maximum element from the heap and append to the sorted list\n        arr[i], arr[0] = arr[0], arr[i]\n        heapq.heapify(arr[:i] + arr[i+1:])\n    return arr"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Args:\n        actual_cost (float): The actual cost of the sale\n        sale_amount (float): The amount of sale\n\n    Returns:\n        bool: True if the sale has no profit and no loss, else False\n    \"\"\"\n\n    # check if actual cost is greater than or equal to sale amount\n    if actual_cost >= sale_amount:\n        return False\n    # if actual cost is less than sale amount, check if actual cost is equal to profit or loss\n    else:\n        return actual_cost == sale_amount - actual_cost"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # Calculate profit and loss\n    profit_loss = actual_cost - sale_amount\n    \n    # Check if there is any profit or loss\n    if profit_loss >= 0:\n        # If there is profit, it is not a loss\n        return False, False\n    \n    # Check if there is any loss\n    elif profit_loss < 0:\n        # If there is no profit, it is a loss\n        return True, False\n    \n    # If there is neither profit nor loss, it is neither\n    else:\n        return True, True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Calculate profits and losses\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # Check if profit is positive or negative and loss is zero\n    if profit >= 0 or loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost < sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost - sale_amount == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost >= sale_amount:\n        return \"No Profit and No Loss\"\n    else:\n        return \"Profit or Loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    profit = actual_cost - sale_amount\n    if profit > 0:\n        return False\n    elif profit == 0:\n        return True\n    else:\n        loss = sale_amount - actual_cost\n        return False if loss > 0 else True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount >= 0: \n        return False \n    elif actual_cost - sale_amount < 0: \n        return True \n    else: \n        return True"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -10:\n        return None\n    elif v < 1:\n        return None\n    else:\n        t = t - 273.15\n        if v < 3.5:\n            return round(t / 1.85)\n        elif v < 7.5:\n            return round(t / 1.35)\n        elif v < 12.5:\n            return round(t / 0.75)\n        elif v < 18.5:\n            return round(t / 0.5)\n        else:\n            return round(t / 0.35)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t <= 0 or v <= 0:\n        return \"Invalid input. Please enter a positive temperature and wind velocity.\"\n    elif t >= 100:\n        return \"Invalid input. Temperature cannot be greater than 100 degrees Celsius.\"\n    elif v >= 20:\n        return \"Invalid input. Wind velocity cannot be greater than 20 km/h.\"\n    else:\n        f = 1.8*t\n        c = 23*f/(t + 273.15)\n        a = 6.112 * math.exp(17.67*t/(t + 243.5))\n        wc = 35.74 + 0.6215*v + 17.62*f/(v + 4.87) - 0.3965*c\n        chill_index = round(wc)\n        return chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Converting wind speed to m/s\n    v_ms = v * 1000\n    \n    # Calculating dew point temperature\n    dp = 243.04 * (math.exp((17.625 * t) / (t + 243.04)) - math.exp((17.625 * t) / (t + 237.3)))\n    \n    # Calculating wind chill temperature\n    wct = 0.5 * v_ms + 30.0\n    \n    # Calculating wind speed at dew point temperature\n    wv_dp = math.sqrt(v_ms * dp / dp)\n    \n    # Calculating wind speed at wind chill temperature\n    wv_wct = math.sqrt(v_ms * wct / wct)\n    \n    # Calculating the relative humidity\n    rh = 100 * dp / (dp + 25)\n    \n    # Calculating the wind chill index\n    wci = 13.12 + 0.6215 * wv_dp - 11.37 * math.log(wv_dp) + 0.3965 * wv_wct - 5.887 * math.log(wv_wct) + 0.14 * rh\n    \n    # Rounding the wind chill index to the nearest integer\n    wci_rounded = math.ceil(wci)\n    \n    return wci_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # Calculate the wind chill index using the formula\n    # wc = 13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.3965 * t * math.log(v)\n    wc = 13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.3965 * t * math.log(v)\n    # Round the wind chill index to the nearest integer\n    wc = math.ceil(wc)\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert temperature to kelvin\n    temp_k = (t + 273.15) * (9/5) + 32\n    \n    # Calculate the wind chill index using the formulae given in the problem statement\n    chill_index = round(35.74 + 0.6215*v + 17.624*math.log(v) - 0.3965*temp_k)\n    \n    return chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    k = t + 273.15\n    \n    # Calculate the air density at sea level\n    rho = 1.225  # kg/m^3\n\n    # Calculate the constant for the calculation of the wind chill index\n    gamma = 7.5 * 10**(-6) * rho ** 0.25 * (1 - 0.225 * math.pow(rho, -0.13333))\n    \n    # Calculate the wind chill index\n    wc = math.sqrt(2 * k / (v ** 2 * gamma))\n    \n    # Round the wind chill index to the nearest integer\n    wci = round(wc)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature to Fahrenheit\n    t_f = (t * 9/5) + 32\n\n    # Calculate the wind chill index\n    if v <= 2.5:\n        wc_index = 25.0 + (0.14 * t_f) - (35.75 * (v/2.5)) + (0.072 * (v/2.5)**2)\n    elif v > 2.5 and v <= 6.5:\n        wc_index = 25.0 + (0.14 * t_f) - (35.75 * (v/6.5)) + (0.072 * (v/6.5)**2)\n    elif v > 6.5 and v <= 11.5:\n        wc_index = 25.0 + (0.14 * t_f) - (35.75 * (v/11.5)) + (0.072 * (v/11.5)**2)\n    elif v > 11.5 and v <= 16.5:\n        wc_index = 25.0 + (0.14 * t_f) - (35.75 * (v/16.5)) + (0.072 * (v/16.5)**2)\n    elif v > 16.5:\n        wc_index = 25.0 + (0.14 * t_f) - (35.75 * (v/22.5)) + (0.072 * (v/22.5)**2)\n\n    # Round the wind chill index to the nearest integer\n    wc_index = round(wc_index)\n\n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # calculate the wind chill index\n    wci = 35.74 + 0.6215*v - 35.75*t_f + 0.4275*v*t_f\n    \n    # round the wind chill index to the nearest integer\n    wci = math.ceil(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index for a given wind velocity and temperature.\n    '''\n    # Convert temperature to Fahrenheit\n    t = (t * 9/5) + 32\n\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * v + 35.75 * (t - 32)\n    wc = round(wc)\n\n    # Return the wind chill index\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < 0:\n        print(\"Error: temperature cannot be less than zero.\")\n        return None\n    elif t >= 20:\n        print(\"Error: temperature cannot be greater than or equal to 20 degrees Celsius.\")\n        return None\n    else:\n        if v >= 0:\n            w = 35.74 + 0.6215 * v - 35.757 * math.log(t) + 0.4275 * v**2\n            w_c = round(w)\n        else:\n            print(\"Error: wind velocity cannot be negative.\")\n            return None\n        return w_c"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_lengths = []\n    for name in sample_names:\n        if not name[0].islower():\n            name_lengths.append(len(name))\n    return sum(name_lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of names\n    total_length = 0\n\n    # Iterate over the names in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If the name starts with a lowercase letter, skip it\n            continue\n        # Otherwise, add the length of the name to the total length\n        total_length += len(name)\n\n    # Return the total length of the names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Filter the list of names to keep only those with uppercase letters\n    uppercase_names = [name for name in sample_names if name.isupper()]\n\n    # Sum the length of the names in the filtered list\n    sum_length = sum([len(name) for name in uppercase_names])\n\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # Initialize a variable to store the sum of names' lengths\n    sum_len = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip to the next name\n            continue\n        # Otherwise, add the length of the name to the sum\n        sum_len += len(name)\n    \n    # Return the sum of all names' lengths\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # loop through the list of names\n    total_length = 0\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # skip this name and move to the next one\n            continue\n        # add the length of the name to the running total\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # initialize the sum variable to zero\n    sum_len = 0\n\n    # iterate over the names in the list\n    for name in sample_names:\n        # check if the first character of the name is lowercase\n        if name[0].islower():\n            # remove the name from the list\n            sample_names.remove(name)\n        # add the length of the name to the sum variable\n        else:\n            sum_len += len(name)\n\n    # return the sum of the lengths of the names that start with a lowercase letter\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum_length = 0\n    for name in sample_names:\n        if name.isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names with uppercase letters\n    upper_names = []\n    # loop through the list of names and add names with uppercase letters to the list\n    for name in sample_names:\n        if name[0].isupper():\n            upper_names.append(name)\n    # initialize a variable to store the sum of the lengths of the names in the list\n    sum_length = 0\n    # loop through the list of names and add their length to the sum\n    for name in upper_names:\n        sum_length += len(name)\n    # return the sum of the lengths of the names in the list after removing those with lowercase letters\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string of items separated by commas and removes the parenthesis and what is inbetween them.\n    '''\n    # Find all the parenthesis and their contents\n    parentheses = re.findall(r'\\((.*?)\\)', items)\n    \n    # Loop through each parenthesis and find its contents\n    for parenthesis in parentheses:\n        # Find all the commas in the parenthesis\n        commas = re.findall(r',', parenthesis)\n        \n        # Loop through each comma and find its contents\n        for comma in commas:\n            # Remove the comma and its contents from the parenthesis\n            parenthesis = re.sub(r',(.*?)$', '', parenthesis)\n            \n            # Remove the comma and its contents from the items list\n            items = [item.replace(comma, '') for item in items]\n    \n    # Return the modified items list with no parenthesis\n    return [item for item in items if item.count('(') == item.count(')')]"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function will remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*)\\)')\n    result = re.sub(pattern, r'\\1', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'(\\(.*?\\))'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)' # match any sequence of zero or more parentheses\n    items = re.sub(pattern, '', items) # remove the matched parentheses\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes in a string and removes the parenthesis and what is inbetween them.\n    '''\n\n    # Remove any parenthesis that are in the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n\n    # Return the string without parenthesis\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)' # regular expression pattern for matching parenthesis\n    items = re.sub(pattern, '', items) # remove parenthesis from the string using re.sub()\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 0\n    j = n\n    nonagonal_number = 0\n\n    while i < j:\n        nonagonal_number += i + j\n        i += 1\n        j -= 1\n\n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return ((n * (n + 1)) // 2) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Calculate the first term of the sequence\n    a = 1\n    \n    # Calculate the second term of the sequence\n    b = 2\n    \n    # Calculate the nth term of the sequence\n    for i in range(2, n+1):\n        c = (a + b) * (2*i - 1) // 2\n        a = b\n        b = c\n    \n    # Return the nth term of the sequence\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    sum1 = 1\n    sum2 = 0\n\n    # Calculate sum of nonagonal numbers\n    for i in range(2, n+1):\n        sum2 += i * (2*i - 1)\n\n    # Return the sum of nonagonal numbers\n    return sum2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        count += 1\n        num = 4 * num - 1\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n - 1) + is_nonagonal(n - 2) + 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (2 * n) ** 2 - (2 * n - 1) ** 2 + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            nonagonal_numbers.append(i*(3*i-1)/2)\n        else:\n            nonagonal_numbers.append(i*(3*i-1)/2+1)\n    return nonagonal_numbers[-1]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n < 1:\n        return \"n must be greater than or equal to 1\"\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n + 1)) / 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the sum of the first n terms to 0\n    sum_nonagonal = 0\n    # Loop through the first n terms of the Fibonacci sequence\n    for i in range(n):\n        # Calculate the sum of the first n terms\n        sum_nonagonal += 1\n        # Check if the sum is greater than or equal to the square of the current term\n        if sum_nonagonal >= i*i:\n            # If it is, return the current term as the nth nonagonal number\n            return i\n        else:\n            # If it's not, update the sum of the first n terms to be the sum of the previous two terms\n            sum_nonagonal -= 2\n    # If the loop completes without returning, it means that the nth nonagonal number doesn't exist\n    return None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-word characters from the text\n    text = re.sub(r'[^a-zA-Z0-9_]+','', text)\n    # Split the text into words\n    words = text.split()\n    # Check if the first and last words contain 'z'\n    if words[0][-1] == 'z':\n        first_word = words[0][:-1]\n    else:\n        first_word = words[0]\n    if words[-1][0] == 'z':\n        last_word = words[-1][1:]\n    else:\n        last_word = words[-1]\n    # Check if the first and last words have 'z' in the middle\n    if 'z' in first_word and 'z' in last_word:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<=[^\\w\\s])z(?=[^\\w\\s])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+[zZ][a-zA-Z]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<=[^\\w\\s])z(?=[^\\w\\s])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![\\w])(z)([^\\s])(?![\\w])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regular expressions to split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Iterate over the words and check if 'z' appears at the start and end of a word\n    for word in words:\n        # Check if the word starts with 'z' and ends with 'z'\n        if word[0] == 'z' and word[-1] == 'z':\n            # If 'z' appears at the start and end of a word, return True\n            return True\n    # If no 'z' appears at the start and end of a word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-word characters from the text\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    # Split the text into words\n    words = text.split()\n    # Loop through each word\n    for word in words:\n        # Check if the word ends with 'z' and if it's not at the start or end of the word\n        if word.endswith('z') and (word!= 'z' or len(word) > 1):\n            return True\n    # If no word ends with 'z' or it's at the start or end of the word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w+\\b'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Initialize the first k elements of the reversed array to the original array\n    for i in range(k):\n        input[i] = input[i]\n\n    # Reverse the remaining elements of the array\n    for i in range(k, len(input)):\n        input[i] = input[i]\n\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k>n:\n        k=n\n    temp = input[0:k]\n    input[0:k] = input[k:n]\n    input[k:n] = temp"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n\n    # Find the length of the array\n    n = len(input)\n\n    # If k is not within range of 0 to n-1, return the array as it is\n    if k < 0 or k > n-1:\n        return input\n\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # create a copy of the input array\n    input_copy = input.copy()\n    \n    # reverse the input array from position 0 to k-1\n    input_copy[0:k] = input_copy[0:k][::-1]\n    \n    # return the reversed input array\n    return input_copy"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    def reverse(arr, start, end):\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n    \n    arr = input[:]\n    reverse(arr, 0, k-1)\n    reverse(arr, k, len(arr)-1)\n    reverse(arr, 0, len(arr)-1)\n    return arr"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k and returns a new array with the elements from the input array upto the kth position in reverse order.\n    '''\n    new_array = []\n    for i in range(len(input)):\n        if i < k:\n            new_array.append(input[i])\n        else:\n            new_array.append(input[len(input)-i-1])\n    return new_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position as input and returns the reversed array upto the given position.\n    '''\n\n    # checking if the position is valid or not\n    if k <= 0 or k > len(input):\n        return \"Invalid position\"\n\n    # reversing the array\n    for i in range(k-1, len(input)):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize a temporary array to store the reversed elements\n    temp = []\n    # Initialize two pointers, one at the beginning of the array and the other at the end of the array\n    i = 0\n    j = len(input) - 1\n    # Reverse the array upto the position k-1\n    while i <= k-1:\n        temp.append(input[i])\n        i += 1\n    # Reverse the remaining elements of the array from k to the end\n    while j >= k-1:\n        temp.append(input[j])\n        j -= 1\n    # Append the reversed elements of the array from k to the end to the input array\n    for i in range(k, len(input)):\n        input[i] = temp[i-k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the entire array\n    input.reverse()\n    \n    # Reverse the array upto k position\n    for i in range(k-1):\n        temp = input[i]\n        input[i] = input[len(input)-i-1]\n        input[len(input)-i-1] = temp\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    k = k - 1\n    if k < 0 or k >= n:\n        return input\n    start = 0\n    end = k\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    for key, value in test_dict.items():\n        new_tup += (value,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup = test_tup + (test_dict[key],)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the tuple to a dictionary\n    test_dict = dict(test_dict)\n    # Add the dictionary to the tuple\n    test_tup = (test_tup, test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # creating a new dictionary with key-value pairs of the test_dict\n    new_dict = dict(test_dict)\n    # adding the new_dict to the test_tup\n    new_tup = tuple(test_tup + new_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {**test_dict}\n    return (test_tup, new_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup) # convert tuple to list\n    test_tup.extend(test_dict.items()) # add items from dictionary to tuple\n    return tuple(test_tup) # convert tuple back to tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert the dictionary to a list of tuples\n    dict_list = list(test_dict.items())\n    # add the list of tuples to the tuple\n    new_tup = tuple(test_tup + dict_list)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary with the same keys as the test_dict\n    new_dict = {key: test_dict[key] for key in test_dict}\n    # Add the new dictionary to the test_tup\n    test_tup += (new_dict,)\n    # Return the modified test_tup\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Find the number of rows and columns in the matrix\n    N = len(cost)\n    if N == 0:\n        return 0.0\n    \n    # Initialize a 2D array to store the max sum of averages and visited cells\n    dp = [[0 for j in range(N)] for i in range(N)]\n    \n    # Initialize the bottom right cell\n    dp[N-1][N-1] = cost[N-1][N-1]\n    \n    # Fill in the rest of the matrix using dynamic programming\n    for i in range(N-2, -1, -1):\n        for j in range(N-2, -1, -1):\n            # If the cell is an obstacle, skip it and move on\n            if cost[i][j] == float('inf'):\n                dp[i][j] = dp[i+1][j+1]\n                continue\n            \n            # Compute the sum of averages for each cell in the path up to and including the current cell\n            up = dp[i+1][j] + cost[i][j]\n            down = dp[i+1][j+1] + cost[i][j]\n            \n            # Update the maximum sum of averages and visited cells if the current cell is the top-left cell\n            if i == 0 and j == 0:\n                dp[i][j] = max(up, down)\n            else:\n                # Compute the sum of averages for each cell in the path up to the current cell\n                left = dp[i][j+1] + cost[i][j]\n                right = dp[i+1][j] + cost[i][j]\n                \n                # Update the maximum sum of averages and visited cells\n                dp[i][j] = max(up, down, left, right)\n    \n    # Return the maximum sum of averages\n    return dp[0][0] / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n        if i == 0:\n            dp[i][i+1] = cost[i][i+1]\n            dp[i+1][i] = cost[i+1][i]\n        else:\n            dp[i][i+1] = dp[i][i-1] + cost[i][i+1]\n            dp[i+1][i] = dp[i-1][i] + cost[i+1][i]\n    for k in range(N):\n        for i in range(N-k-1):\n            j = i+k+1\n            if j == N:\n                dp[i][j] = max(dp[i][j], dp[i][j-1])\n            else:\n                dp[i][j] = max(dp[i][j], dp[i][j-1], dp[i+1][j])\n    for i in range(N):\n        for j in range(N):\n            if i == 0:\n                max_avg = max(max_avg, dp[i][j])\n            elif j == N-1:\n                max_avg = max(max_avg, dp[i][j])\n            else:\n                max_avg = max(max_avg, dp[i][j], dp[i][j-1], dp[i+1][j])\n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    max_path = []\n    visited = set()\n\n    def dfs(r, c, path, path_avg):\n        if r == N-1 and c == N-1:\n            visited.add(path)\n            nonlocal max_avg, max_path\n            avg = sum(cost[i][j] for i in range(N) for j in range(N)) / len(visited)\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path\n            return\n        \n        if (r, c) not in visited:\n            visited.add((r, c))\n            \n            if r < N-1:\n                dfs(r+1, c, path+[(r, c)], path_avg)\n            if c < N-1:\n                dfs(r, c+1, path+[(r, c)], path_avg)\n                \n            visited.remove((r, c))\n\n    dfs(0, 0, [], 0)\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def dfs(i, j, visited, current_cost):\n        nonlocal max_avg\n        nonlocal max_path_avg\n        \n        if i == N-1 and j == N-1:\n            max_avg = max(max_avg, current_cost)\n            max_path_avg = max(max_path_avg, current_cost/len(visited))\n            return\n        \n        if i < 0 or i >= N or j < 0 or j >= N or (i, j) in visited:\n            return\n        \n        visited.add((i, j))\n        \n        dfs(i+1, j, visited, current_cost+cost[i][j])\n        dfs(i, j+1, visited, current_cost+cost[i][j])\n        \n        visited.remove((i, j))\n    \n    max_avg = 0\n    max_path_avg = 0\n    \n    N = len(cost)\n    dfs(0, 0, set(), 0)\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(i, j, total_cost, total_cells, visited):\n        if i == N - 1 and j == N - 1:\n            max_avg = max(max_avg, total_cost / total_cells)\n            return\n\n        if i < N and j < N and not visited[i][j]:\n            visited[i][j] = True\n            dfs(i + 1, j, total_cost + cost[i][j], total_cells + 1, visited)\n            dfs(i, j + 1, total_cost + cost[i][j], total_cells + 1, visited)\n            visited[i][j] = False\n\n    N = len(cost)\n    max_avg = float('-inf')\n    visited = [[False] * N for _ in range(N)]\n    dfs(0, 0, 0, 1, visited)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                if cost[i][j] > max_avg:\n                    max_avg = cost[i][j]\n            elif i == N-1:\n                if cost[i][j] > max_avg:\n                    max_avg = cost[i][j]\n            elif j == N-1:\n                if cost[i][j] > max_avg:\n                    max_avg = cost[i][j]\n            elif i < N-1 and j < N-1:\n                if cost[i][j] > max_avg:\n                    max_avg = cost[i][j]\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # find the maximum cost path\n    max_cost = float('-inf')\n    max_path = []\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if cost[i][j] > max_cost:\n                max_cost = cost[i][j]\n                max_path = [[i, j]]\n            elif cost[i][j] == max_cost:\n                max_path.append([i, j])\n    \n    # compute the average cost of the maximum path\n    total_cost = 0\n    for cell in max_path:\n        total_cost += cost[cell[0]][cell[1]]\n    avg_cost = total_cost / len(max_path)\n\n    return avg_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(start, path, visited):\n        if start[0] == len(cost) - 1 and start[1] == len(cost[0]) - 1:\n            total_cost = sum(cost[row][col] for row in path for col in path)\n            if visited == len(path) + 1:\n                return max(max_avg, total_cost / len(path))\n            return 0\n\n        max_avg = float('-inf')\n        for i in range(2):\n            row = start[0]\n            col = start[1] + i\n\n            if 0 <= row < len(cost) and 0 <= col < len(cost[0]):\n                if (row, col) not in visited:\n                    visited.add((row, col))\n                    path.append((row, col))\n                    avg = dfs((row, col), path, visited)\n                    path.pop()\n                    visited.remove((row, col))\n                    max_avg = max(max_avg, avg)\n\n        return max_avg\n\n    max_avg = 0\n    visited = set()\n    dfs((0, 0), [(0, 0)], visited)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # get the size of the matrix\n    n = len(cost)\n\n    # initialize variables to store the maximum average and the total cost\n    max_avg = 0\n    total_cost = 0\n\n    # loop through all possible paths\n    for i in range(n):\n        for j in range(n):\n\n            # check if this cell is already visited or not\n            if i == n-1 and j == n-1:\n                continue\n\n            # calculate the cost of the current cell\n            current_cost = cost[i][j]\n\n            # if this is the top-left cell, skip it\n            if i == 0 and j == 0:\n                continue\n\n            # if this is the bottom-right cell, skip it\n            elif i == n-1 and j == n-1:\n                continue\n\n            # if this is not the bottom-right cell, calculate the path cost using recursive function\n            else:\n                top_left_cost = cost[i-1][j]\n                top_cost = cost[i-1][j+1]\n                left_cost = cost[i][j-1]\n                path_cost = current_cost + top_left_cost + top_cost + left_cost\n\n            # update the total cost and maximum average\n            total_cost += path_cost\n            max_avg = max(max_avg, path_cost/4)\n\n    # return the maximum average of all paths\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                max_avg = max(max_avg, cost[i][j] + maxAverageOfPath(cost[:i] + [[cost[i][j]]*N] + cost[i+1:]))\n            elif j == 0:\n                max_avg = max(max_avg, cost[i][j] + maxAverageOfPath(cost[:N] + [[cost[i][j]]] + cost[1:i+1]))\n            else:\n                max_avg = max(max_avg, cost[i][j] + maxAverageOfPath(cost[:i] + [[cost[i][j]]] + cost[i+1:i+1]) + maxAverageOfPath(cost[:j] + [[cost[i][j]]] + cost[j+1:j+1]))\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height >= h and weight >= w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create a new dictionary to store the filtered data\n    filtered_students = {}\n    \n    # iterate over all the students in the original dictionary\n    for name, info in students.items():\n        # unpack the height and weight from the tuple\n        height, weight = info\n        \n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # add the student to the filtered dictionary\n            filtered_students[name] = info\n            \n    # return the filtered dictionary\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students.items():\n        student_height, student_weight = student[1]\n        if student_height > h and student_weight > w:\n            filtered_students[student[0]] = student[1]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            result[name] = data\n    return result\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    # Using the eq operator to compare two lists\n    if all(eq(nums1, nums2)):\n        # Counting the number of times the first list appears in the second list\n        count = sum(1 for i in range(len(nums1)) if nums1[i] == nums2[i])\n        return count\n    else:\n        return -1"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # create a dictionary to store the count of each value in the first list\n    count_dict = {}\n    for i in range(len(nums1)):\n        if nums1[i] in count_dict:\n            count_dict[nums1[i]] += 1\n        else:\n            count_dict[nums1[i]] = 1\n    \n    # iterate through the second list and count the occurrences of each value in the dictionary\n    count_list = []\n    for i in range(len(nums2)):\n        if nums2[i] in count_dict:\n            count_list.append(count_dict[nums2[i]])\n        else:\n            count_list.append(0)\n    \n    # iterate through the third list and count the indices where the values in the first list are equal to the values in the second list\n    count = 0\n    for i in range(len(count_list)):\n        if count_list[i] == nums1[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have the same length\")\n        return\n    \n    # Initialize a dictionary to store the count of each value in the lists\n    count_dict = {}\n    \n    # Iterate through the first list\n    for i, num1 in enumerate(nums1):\n        # If the current value is already in the dictionary, increment its count\n        if num1 in count_dict:\n            count_dict[num1] += 1\n        # If the current value is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num1] = 1\n    \n    # Iterate through the second list\n    for i, num2 in enumerate(nums2):\n        # If the current value is already in the dictionary and has the same count as in the first list, increment its count\n        if num2 in count_dict and count_dict[num2] == count_dict[nums1[i]]:\n            count_dict[num2] += 1\n    \n    # Iterate through the dictionary and count the number of pairs where the values are the same\n    same_count = 0\n    for value, count in count_dict.items():\n        if count > 1:\n            same_count += 1\n    \n    # Print the result\n    print(\"The number of pairs where the values are the same is:\", same_count)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through each digit of the base\n    while base > 0:\n        # add the last digit of the base to the sum\n        sum += base % 10\n        \n        # divide the base by 10 and remove the last digit\n        base = base // 10\n    \n    # multiply the sum by the power and return the result\n    return sum * power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Calculate the sum of all digits of the base to the specified power\n    sum_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_digits += digit * (base // 10) ** power\n        base //= 10\n        power -= 1\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(power):\n        digit = base % 10\n        total += digit\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Initialize a variable to store the sum\n    sum = 0\n    \n    # Loop through each character in the base string\n    for char in base_str:\n        # Convert the character to an integer\n        digit = int(char)\n        \n        # Calculate the sum of the digits to the power specified\n        digit_sum = digit ** power\n        \n        # Add the sum of digits to the sum variable\n        sum += digit_sum\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        base_sum += base % 10\n        power //= 10\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string so we can iterate over its digits\n    base_str = str(base)\n    \n    # Initialize a variable to hold the sum of digits\n    sum_digits = 0\n    \n    # Iterate over the digits of the base\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum of digits\n        sum_digits += int(digit)\n    \n    # Return the sum of digits raised to the specified power\n    return sum_digits ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    num = base\n    while power > 0:\n        sum += num % 10\n        power -= 1\n        num //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # initialize sum variable to zero\n    total = 0\n    \n    # loop through each digit of the base\n    for digit in str(base):\n        # convert digit to integer and add it to the sum\n        total += int(digit) ** power\n    \n    # return the final sum\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base):\n        total += int(digit) ** power\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"' # Find values between double quotation marks\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define a pattern to match quotation marks\n    pattern = r'(?<=^|\\W)(\".*?\")(?=$|\\W)'\n\n    # Use re.findall() to extract all values between the pattern\n    matches = re.findall(pattern, text1)\n\n    # Remove the outer quotes\n    extracted_values = [match.strip('\"') for match in matches]\n\n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?P<quotation>\"[^\"]*\")'\n    match = re.search(pattern, text)\n    if match:\n        return match.group('quotation').strip('\"')\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function takes a string as input and returns a list of all the values between quotation marks.\n    '''\n    # define a regular expression pattern to match between quotation marks\n    pattern = r'(?<=^|\\s)(?:\"(?:\\\\.|[^\"])*\")(?=\\s|$)'\n    \n    # use the re.findall() function to find all the matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n    \n    # return a list of all the values between quotation marks\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define the pattern to match quotation marks\n    pattern = r'\"([^\"]+)\"'\n    # use re.findall to extract all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # remove any empty strings\n    matches = [match for match in matches if match]\n    # join all the matches into a single string\n    extracted_text =''.join(matches)\n    return extracted_text"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Regular expression to match quotes\n    pattern = re.compile(r'(?<!\\\\)\"([^\"]*)\"(?!\\\\)')\n    # Use the pattern to find all matches of the pattern in the given string\n    matches = re.findall(pattern, text1)\n    # Extract all the values between the quotes and return them as a list\n    return [match[1].strip() for match in matches]"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expressions to extract values between quotation marks\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n\n    # Appending all the extracted values into a list\n    all_values = []\n    for match in matches:\n        all_values.append(match)\n\n    # Joining all the values into a single string\n    final_value =''.join(all_values)\n\n    return final_value"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function takes a string as input and returns a list of all the values between quotation marks \" \".\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    This function takes a string as input and extracts values between quotation marks \" \"\n    \"\"\"\n    pattern = re.compile(r'\"(.+?)\"') #regular expression pattern to match quotation marks\n    matches = pattern.findall(text1) #matches all occurrences of the pattern in the input string\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1 # find the length of the tuple excluding the first element (which is always 1)\n    result = [] # create an empty list to store the result\n    \n    for i in range(N): # iterate over the first N-1 elements of the tuple\n        result.append(test_tup[i] * test_tup[i+1]) # append the product of the current element and the next element to the result list\n        \n    return tuple(result) # return the result as a tuple"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0],) * N\n    for i in range(1, N):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup)\n    result = []\n    for i in range(n-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1] * test_tup[0])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2 # Assuming test_tup contains odd number of elements\n    result = (test_tup[0] * test_tup[1], test_tup[2] * test_tup[3]) # First two elements of the tuple are same\n    for i in range(2, N): # For each remaining pair of elements\n        result = (result[0] * test_tup[i+1], result[1] * test_tup[i+2])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"Input tuple should contain at least two numbers\")\n    N = len(test_tup) - 1\n    multiplied_tup = []\n    for i in range(N):\n        multiplied_tup.append(test_tup[i] * test_tup[i+1])\n    return multiplied_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple([test_tup[i]*test_tup[i+1] for i in range(N)])\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use the groupby function to group the numbers by their previous value\n    grouped = groupby(enumerate(nums), lambda x: x[0] - x[1])\n    # Loop through each group and remove consecutive duplicates\n    for key, group in grouped:\n        if key == 0:\n            # The first group is a consecutive sequence of duplicates\n            yield group\n        elif key == 1:\n            # The second group is a consecutive sequence of duplicates\n            yield from group\n        elif key == 2:\n            # The third group is a consecutive sequence of duplicates\n            yield from group\n        else:\n            # The last group is a consecutive sequence of duplicates\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Use itertools groupby function to group consecutive duplicates\n    grouped = groupby(nums)\n\n    # Remove consecutive duplicates by iterating over each group\n    result = []\n    for _, group in grouped:\n        # Check if the length of the group is greater than 1\n        if len(list(group)) > 1:\n            # If the group has more than 1 element, append the first element\n            result.append(next(group))\n        else:\n            # If the group has only 1 element, append the group\n            result.extend(group)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    prev_num = None\n    for num in nums:\n        if prev_num is None or num!= prev_num + 1:\n            yield num\n        prev_num = num"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Define a generator expression to iterate through the list\n    g = (k for k, g in groupby(enumerate(nums), lambda x: x[1] == x[0] + 1))\n    \n    # Remove the consecutive duplicates from the generator\n    result = []\n    for item in g:\n        result += [item[0]]\n    \n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the numbers by their keys (i.e. their values)\n    grouped_nums = groupby(nums)\n    # initialize the result list\n    result = []\n    # iterate over the grouped numbers\n    for key, group in grouped_nums:\n        # check if the next number in the group is equal to the current number\n        if next(group, None) == key:\n            # if it is, ignore the current group\n            continue\n        else:\n            # if it is not, add the current group to the result list\n            result.append(list(group))\n    # return the result list\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    return [num for num in nums if not (num in seen or (seen.add(num) and False))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    nums_set = set(nums)\n    # Iterate through the set and find consecutive duplicates\n    consecutive_duplicates_list = []\n    for key, group in groupby(nums_set):\n        if len(list(group)) > 1:\n            consecutive_duplicates_list.append(key)\n    # Remove consecutive duplicates from the original list\n    nums_set.difference_update(consecutive_duplicates_list)\n    # Convert the set back to a list and return it\n    return list(nums_set)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Define a generator expression to split the list into groups of consecutive duplicates\n    groups = groupby(enumerate(nums), lambda x: x[0] == x[1])\n\n    # Use a list comprehension to extract the unique consecutive duplicates from each group\n    return list(set(group for _, group in groups if next(group, False)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi * r**2 * h  # using formula for lateral surface\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    LSA = 2/3 * math.pi * r**2 * h\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # formula for lateral surface area of a cone\n    # s = pi * r^2 * h\n    # where pi is a mathematical constant equal to 3.14\n    s = math.pi * r ** 2 * h\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Using the formula for the lateral surface area of a cone:\n    # A = pi * r^2 * h / 3\n    # where pi is the mathematical constant pi and A is the lateral surface area.\n    pi = math.pi\n    A = pi * r**2 * h / 3\n    return A\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (1/3) * math.pi * r * r * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area using the formula\n    # lateral surface area = 1/2 * pi * r^2 * h\n    lateral_surface_area = 0.5 * math.pi * r**2 * h\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #calculating the lateral surface area using the formula\n    #A = 2 * math.pi * r * (h/2)**2\n    #returning the value of A\n    return 2 * math.pi * r * (h/2)**2"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * (r ** 2)\n    return s * h"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+',':', text)\n    text = re.sub(r',+',':', text)\n    text = re.sub(r'\\.\\.+',':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[^\\w\\s]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r',+', ':', text)\n    text = re.sub(r'\\.+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = re.compile(r'[^\\w\\s]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern to match spaces, commas, or dots\n    pattern = r'\\s|,|.|'\n\n    # Use the re.sub() method to replace all occurrences of pattern with a colon\n    text = re.sub(pattern, ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[\\s,\\.]+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = ',. '\n    colon = ':'\n    return re.sub(special_chars, colon, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s+|\\.\\s+|,+|\\s+|,+|^\\.|\\.$')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Use regex to replace all special characters with a colon\n    text = re.sub(r'[^\\w\\s]', '', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the first occurrence index to None\n    first_occurrence_index = None\n    \n    # iterate through the array and check if the current element is equal to the search element\n    for i in range(len(A)):\n        if A[i] == x:\n            # if the current element is equal to the search element, update the first occurrence index\n            if first_occurrence_index is None:\n                first_occurrence_index = i\n            # if the current element is equal to the search element and the previous element is not equal to the search element, update the first occurrence index\n            elif A[i-1]!= x:\n                first_occurrence_index = i\n    \n    # return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # binary search algorithm\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            right = mid - 1  # if x is present in the array, then the leftmost occurrence is mid+1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left  # if x is not present in the array, then the leftmost occurrence is left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n\n    left, right = 0, len(A) - 1\n    first_occurrence = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            first_occurrence = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    if len(A) == 0:\n        return -1\n    \n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            # check if mid element is the first occurrence of x\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            \n            # update low index to mid + 1\n            low = mid + 1\n            \n        elif A[mid] < x:\n            # check if mid element is the first occurrence of x\n            if mid == len(A)-1 or A[mid+1]!= x:\n                return mid\n            \n            # update high index to mid - 1\n            high = mid - 1\n            \n        else:\n            # mid element is greater than x, so x must be in the left half of A\n            high = mid - 1\n            \n    # x not found in A\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if i < len(A) and A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in a sorted array A and a number x and returns the index of the first occurrence of x in A.\n    If x is not found in A, it returns -1.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the index to the first element of the array\n    i = 0\n    \n    # loop through the array until we find the first occurrence of the target number\n    while i < len(A) and A[i]!= x:\n        i += 1\n    \n    # return the index of the first occurrence of the target number, or -1 if it was not found\n    return i if i < len(A) and A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if A[0] == x:\n        return 0\n    \n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum_of_products_of_all_possible_subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(1, n):\n        for j in range(i):\n            sub_arr = arr[j:i]\n            prod = 1\n            for num in sub_arr:\n                prod *= num\n            res += prod\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            dp[j] = max(dp[j], dp[i] + prod)\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize variables\n    products = [0] * (n + 1)\n    products[0] = 1\n\n    # Calculate products for all sublists\n    for i in range(1, n + 1):\n        products[i] = products[i - 1] * arr[i - 1]\n\n    # Calculate sum of products for all possible sublists\n    sum_of_products = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            sum_of_products += products[j]\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0]*(n+1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    dp[2] = arr[0]*arr[1]\n\n    for i in range(3, n+1):\n        dp[i] = max(dp[i-1], dp[i-2]+arr[i-1], dp[i-3]+arr[i-1]*arr[i-2])\n\n    return dp[n]\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize the sum and the product variables to 0\n    sum_prod = 0\n    prod = 1\n\n    # Iterate over the list\n    for i in range(len(arr)):\n        # Increment the product by the current element\n        prod *= arr[i]\n        # If the product is 0, set it to 1 as it cannot have been a sublist product\n        if prod == 0:\n            prod = 1\n        # Calculate the sum of the products of the sublists of length i+1 to the end of the array\n        sublist_sum = sum(prod for prod in arr[i+1:])\n        # Add the sum of the products of the sublists of length i+1 to the sum_prod variable\n        sum_prod += sublist_sum\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize the sum of products to 0\n    sum_products = 0\n\n    # Iterate through the list and generate all possible sublists\n    for i in range(len(arr)):\n        # Generate the sublist from the current index to the end of the list\n        sublist = arr[i:]\n\n        # Calculate the product of the sublist and add it to the sum of products\n        sum_products += 1\n        for j in range(len(sublist)):\n            sum_products *= sublist[j]\n\n    return sum_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # To store the sum of products of sublists\n    sublist_sum = [0] * n\n\n    # To store the products of sublists\n    sublist_prod = [0] * n\n\n    # Calculate the sum of products of sublists\n    for i in range(n):\n        sublist_sum[i] = arr[i] * (i+1)\n\n    # Calculate the products of sublists\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sublist_prod[i] += arr[j-1] * (j-i)\n\n    # Calculate the sum of products of all sublists\n    sublist_prod_sum = 0\n    for i in range(n):\n        sublist_prod_sum += sublist_prod[i]\n\n    # Calculate the sum of products of all sublists\n    # sublist_prod_sum = sum(sublist_prod)\n\n    # Return the sum of products of all sublists\n    return sublist_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[0]*n for i in range(n)]\n\n    # Initialize first row\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    # Fill rest of the dp table\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            dp[i][j] = sum(arr[i:j+1]) * dp[i][j-1]\n\n    return dp[0][n-1]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n\n    # initialize the cumulative product array and the prefix sum array\n    c_product = [1] * (n + 1)\n    prefix_sum = [0] * (n + 1)\n\n    # calculate the cumulative product array and prefix sum array\n    for i in range(1, n + 1):\n        c_product[i] = c_product[i - 1] * arr[i - 1]\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    # find the maximum product subarray\n    max_product = float('-inf')\n    max_subarray = []\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if j - i + 1 > 1:\n                # calculate the sum of products of the subarray\n                subarray_prod = c_product[j] / c_product[i - 1]\n                for k in range(i, j):\n                    subarray_prod *= c_product[k] / c_product[i - 1]\n                subarray_sum = prefix_sum[j] - prefix_sum[i - 1]\n                subarray_sum -= prefix_sum[i - 1]\n                for k in range(j, n + 1):\n                    subarray_sum -= arr[k - 1]\n                subarray_sum = max(subarray_sum, 0)\n                subarray_prod *= subarray_sum\n                # update the maximum product subarray\n                if subarray_prod > max_product:\n                    max_product = subarray_prod\n                    max_subarray = [arr[i - 1]]\n                    for k in range(i, j):\n                        max_subarray.append(arr[k])\n    return max_subarray"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = []\n\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n        result.append(product)\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Set the mask for first and last bit\n    mask1 = 1 << 0\n    mask2 = 1 << 31\n\n    # Extract the first and last bits\n    first_bit = (n & mask1) >> 0\n    last_bit = (n & mask2) >> 31\n\n    # Set the middle bits to toggle\n    middle_bits = n & ~(mask1 | mask2)\n    middle_bits = middle_bits ^ (last_bit ^ first_bit)\n\n    # Combine the first and last bits with middle bits\n    final_bits = (first_bit << 0) | (middle_bits << 1) | (last_bit << 31)\n\n    return final_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initializing the number with all bits as 1\n    result = n ^ ((1 << len(bin(n)[2:])) - 1)\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n\n    # Initialize a variable to keep track of the middle bits\n    middle_bits = 0\n\n    # Loop through each bit of the number\n    for i in range(31, -1, -1):\n\n        # Check if the current bit is 0\n        if ((n >> i) & 1) == 0:\n\n            # If the current bit is 0, set the middle bit to 1\n            middle_bits |= (1 << i)\n\n        # If the current bit is 1, set the middle bit to 0\n        else:\n\n            # If the current bit is 1, set the middle bit to 0\n            middle_bits &= ~(1 << i)\n\n    # Return the number with the middle bits toggled\n    return n ^ middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1   # Extract the first bit\n    last_bit = n >> 1 & 1   # Extract the last bit\n    n = n ^ (first_bit ^ last_bit)   # XOR the first and last bits\n    return n  "
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n_first = n & ~(1 << (n.bit_length()-2)) # remove the last and first bits\n    n_middle = n & ~((1 << (n.bit_length()-1)) | (1 << (n.bit_length()-2))) # remove middle bits\n    n_last = n & ~(1 << n.bit_length()-1) # remove the last bit\n    n_result = n_first | n_middle | n_last # combine the modified parts\n    return n_result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes an integer n and returns an integer where the bits of the number except the first and last bit are toggled.\n    For example, if the input is 25, the output will be 16.\n\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n\n    \"\"\"\n    first_bit = n & 1\n    last_bit = n & (1 << 31)\n\n    toggled_bits = first_bit | last_bit\n\n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the position of the first and last bits\n    first_bit = bin(n).count('1')\n    last_bit = len(bin(n)) - bin(n).count('1') - 1\n\n    # Toggle the middle bits\n    toggled_n = n ^ (1 << (first_bit + last_bit))\n\n    # Return the toggled number\n    return toggled_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # initialize the first two bits to 1\n    n |= n >> 1\n    # shift the last two bits to the beginning\n    n <<= 1\n    # clear the first two bits\n    n &= 0x5555555555555555\n    # set the last two bits\n    n |= n >> 1\n    # reverse the last two bits\n    n = ((n & 0xaaaaaaaaaaaaaaaa) << 1) | ((n & 0x5555555555555555) >> 1)\n    # shift the first two bits to the end\n    n <<= 2\n    # clear the last two bits\n    n &= 0x3333333333333333\n    # set the first two bits\n    n |= n >> 1\n    # reverse the first two bits\n    n = ((n & 0xcccccccccccccccc) << 2) | ((n & 0x3333333333333333) >> 2)\n    # shift the last two bits to the beginning\n    n <<= 1\n    # clear the first two bits\n    n &= 0x5555555555555555\n    # set the last two bits\n    n |= n >> 1\n    # reverse the last two bits\n    n = ((n & 0xaaaaaaaaaaaaaaaa) << 1) | ((n & 0x5555555555555555) >> 1)\n    # shift the first two bits to the end\n    n <<= 2\n    # clear the last two bits\n    n &= 0x3333333333333333\n    # set the first two bits\n    n |= n >> 1\n    # reverse the first two bits\n    n = ((n & 0xcccccccccccccccc) << 2) | ((n & 0x3333333333333333) >> 2)\n    # reverse the final result\n    n = ~n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the first and last bits\n    first_bit = n & 1\n    last_bit = n >> 31\n\n    # Toggle the middle bits\n    n ^= (first_bit << 31) | (last_bit << 31)\n\n    # Set the first and last bits\n    n = n | (first_bit << 31) | (last_bit << 31)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = ~(1 << 1) # XOR with 1 to toggle bits other than the first and last bit\n    return (n ^ mask)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # bisect_left function returns the index where the value x needs to be inserted, \n    # which is the index where x should be inserted in sorted order. \n    index = bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Create an empty list to store the indices of the elements\n    indices = []\n    # Iterate through the sorted array and append the indices of each element\n    for i in range(len(a)):\n        indices.append(i)\n\n    # Use the bisect_left function to find the left insertion point\n    left_index = bisect.bisect_left(indices, x)\n    # Return the left index\n    return left_index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n\n    left = bisect.bisect_left(a, x)\n    if left!= len(a) and a[left] == x:\n        return left\n    else:\n        return bisect.bisect_left(a, x-1)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the index where the value should be inserted in sorted order\n    index = bisect.bisect_left(a, x)\n\n    # Check if the value already exists in the array\n    if index!= len(a) and a[index] == x:\n        return index\n\n    # If the value does not exist in the array, insert it before the index and return the index of the new insertion point\n    return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the index of the first element greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    # If x is greater than all elements in the list, return len(a)\n    if index == len(a):\n        return len(a)\n    # Otherwise, return the index of the element to the left of x\n    return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x - 1)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Initialize a variable to keep track of the index of the leftmost element that is greater than or equal to x.\n    index = bisect.bisect_left(a, x)\n    # If x is already in the list, then the index will be equal to the length of the list, so we return the index.\n    if index == len(a):\n        return index\n    # If x is greater than the leftmost element, then we return index-1, since the x should be inserted after the leftmost element.\n    elif x > a[index-1]:\n        return index-1\n    # If x is greater than or equal to the leftmost element, then we need to search for the correct insertion point.\n    else:\n        # If the leftmost element is greater than x, then we need to search for the correct insertion point.\n        while index > 0 and a[index-1] > x:\n            index -= 1\n        # If the leftmost element is less than or equal to x, then we return the index.\n        if a[index-1] <= x:\n            return index\n        # If the leftmost element is greater than x, then we need to search for the correct insertion point.\n        while index < len(a) and a[index] <= x:\n            index += 1\n        # If the rightmost element is greater than x, then we return the index.\n        if a[index-1] > x:\n            return index\n        # If the rightmost element is less than or equal to x, then we need to search for the correct insertion point.\n        while index > 0 and a[index-1] > x:\n            index -= 1\n        # If the rightmost element is greater than or equal to x, then we return the index.\n        else:\n            return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the index where the value should be inserted using bisect.bisect_left()\n    index = bisect.bisect_left(a, x)\n    # If the value is already present in the array, return the index\n    if index!= len(a) and a[index] == x:\n        return index\n    # If the value is greater than all the elements to the left of the index, return the index\n    elif index == 0 or a[index - 1] < x:\n        return index\n    # If the value is between two elements, find the nearest left element\n    elif x < a[index - 1]:\n        return index - 1\n    # If the value is greater than all elements in the array, return the index\n    else:\n        return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        print(f\"{string} is a valid starting string.\")\n    else:\n        print(f\"{string} is not a valid starting string.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*' \n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(string, \"starts with a vowel\")\n    else:\n        print(string, \"does not start with a vowel\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    return pattern.match(string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return geometric_sum(n - 1) + n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n\n    if n <= 0:\n        return None\n\n    if n == 1:\n        return 0\n\n    index = 0\n    triangular_number = 1\n    number_of_digits = 1\n\n    while number_of_digits < n:\n        index += 1\n        triangular_number *= 10\n        number_of_digits += 1\n\n    if triangular_number >= 10 ** n:\n        return None\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the smallest triangular number with n digits\n    triangular_num = int(''.join(map(str, range(n+1))))\n    # Check if the smallest triangular number is 10^n-1\n    if triangular_num == 10**n-1:\n        return n\n    # If not, calculate the index of smallest triangular number with n digits\n    else:\n        # Calculate the number of digits of the smallest triangular number\n        n1 = int(math.log10(triangular_num)) + 1\n        # Calculate the number of digits of the next smallest triangular number\n        n2 = n1 + 1\n        # Calculate the difference in digits of the smallest and next smallest triangular numbers\n        diff = n2 - n1\n        # Calculate the index of the smallest triangular number with n digits\n        index = n1 - diff\n        # Check if the next smallest triangular number is 10^n-1\n        if int(triangular_num/10**diff) == 10**n-1:\n            return index\n        # If not, calculate the index of the next smallest triangular number with n digits\n        else:\n            # Calculate the number of digits of the next smallest triangular number\n            n3 = n2 + 1\n            # Calculate the difference in digits of the next smallest triangular number and the smallest triangular number with n digits\n            diff = n3 - n1\n            # Calculate the index of the next smallest triangular number with n digits\n            index = n1 + diff\n            # Check if the next smallest triangular number is 10^n-1\n            if int(triangular_num/10**diff) == 10**n-1:\n                return index\n            # If not, repeat the process until the smallest triangular number is 10^n-1\n            else:\n                while True:\n                    # Calculate the smallest triangular number with n digits\n                    triangular_num = int(''.join(map(str, range(n+1))))\n                    # Check if the smallest triangular number is 10^n-1\n                    if triangular_num == 10**n-1:\n                        return n\n                    # If not, calculate the index of smallest triangular number with n digits\n                    else:\n                        # Calculate the number of digits of the smallest triangular number\n                        n1 = int(math.log10(triangular_num)) + 1\n                        # Calculate the number of digits of the next smallest triangular number\n                        n2 = n1 + 1\n                        # Calculate the difference in digits of the smallest and next smallest triangular numbers\n                        diff = n2 - n1\n                        # Calculate the index of the smallest triangular number with n digits\n                        index = n1 - diff\n                        # Check if the next smallest triangular number is 10^n-1\n                        if int(triangular_num/10**diff) == 10**n-1:\n                            return index\n                        # If not, calculate the index of the next smallest triangular number with n digits\n                        else:\n                            # Calculate the number of digits of the next smallest triangular number\n                            n3 = n2 + 1\n                            # Calculate the difference in digits of the next smallest triangular number and the smallest triangular number with n digits\n                            diff = n3 - n1\n                            # Calculate the index of the next smallest triangular number with n digits\n                            index = n1 + diff"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 2\n    while i*i < 10**n:\n        i += 1\n    return i-1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Find the number of digits in the input number\n    num_digits = int(math.log10(n)) + 1\n    \n    # Initialize variables\n    i = 0\n    j = num_digits - 1\n    k = 0\n    \n    # Initialize the matrix\n    matrix = [[0 for _ in range(num_digits)] for _ in range(num_digits)]\n    \n    # Fill the matrix with the values\n    matrix[0][0] = 1\n    for i in range(1, num_digits):\n        matrix[i][0] = i + 1\n    for i in range(1, num_digits):\n        matrix[0][i] = 1\n    for i in range(1, num_digits):\n        for j in range(1, i+1):\n            matrix[i][j] = matrix[i-1][j-1] + matrix[i-1][j]\n    \n    # Find the index of the smallest triangular number\n    while j > 0 and k < n-1:\n        while k < n-1:\n            if matrix[i][j] >= n:\n                k += 1\n            else:\n                i += 1\n                k = 0\n        j -= 1\n        k = 0\n    \n    # Return the index\n    return j"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # define the max value of n digits\n    max_n = 30\n    \n    # check if n is within the max value\n    if n > max_n:\n        print(\"Error: n is greater than the maximum value of n =\", max_n)\n        return None\n    \n    # define the triangle numbers and their indices\n    triangle_numbers = [1]\n    indices = [0]\n\n    # calculate the sum of first n digits of each triangle number\n    for i in range(1, n+1):\n        triangle_sum = 0\n        for j in range(1, i+1):\n            triangle_sum += j\n        triangle_numbers.append(triangle_sum)\n        indices.append(i-1)\n\n    # find the index of the smallest triangular number\n    smallest_triangular_number = math.factorial(n+1)\n    smallest_triangular_index = 0\n    for i in range(1, len(triangle_numbers)):\n        if triangle_numbers[i] < smallest_triangular_number:\n            smallest_triangular_number = triangle_numbers[i]\n            smallest_triangular_index = i\n\n    # return the index\n    return smallest_triangular_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # find the largest prime number with n digits\n    prime = 10**(n-1)\n    while not is_prime(prime):\n        prime += 1\n\n    # find the index of the smallest triangular number with n digits\n    i = 1\n    while prime**i <= 10**n:\n        i += 1\n\n    return i-1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    max_n = 10 ** n\n    triangular_numbers = [0] * max_n\n    triangular_numbers[0] = 1\n\n    # generate triangular numbers\n    for i in range(1, max_n):\n        triangular_numbers[i] = triangular_numbers[i-1] + triangular_numbers[i-2]\n\n    # find index of smallest triangular number\n    min_triangular_number = float('inf')\n    index = -1\n    for i in range(max_n):\n        if triangular_numbers[i] < min_triangular_number:\n            min_triangular_number = triangular_numbers[i]\n            index = i\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initialize variables\n    triangular_sum = 0\n    triangular_number = 0\n    index = 0\n\n    # loop through the digits\n    for digit in range(1, n+1):\n        # calculate the sum of the previous n digits\n        triangular_sum = triangular_sum + math.factorial(n-digit)\n\n        # if the sum is less than or equal to the current digit, increment the index\n        if triangular_sum <= digit:\n            index += 1\n            triangular_number = digit\n\n    return index, triangular_number"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = []\n    for i in range(2, n+1):\n        triangular_numbers.append(i * (i - 1) * (2 * i - 1))\n\n    smallest_triangular_number = min(triangular_numbers)\n    index = triangular_numbers.index(smallest_triangular_number)\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    # Function to calculate triangular number of n digits\n    def triangular_num(n):\n        triangular = 0\n        for i in range(1, n+1):\n            triangular += i\n        return triangular\n    \n    # Function to find the index of smallest triangular number with n digits\n    def smallest_Index(n):\n        triangular = triangular_num(n)\n        index = math.log10(triangular) + 1\n        return index\n    \n    # Call the function to find the index of smallest triangular number with n digits\n    return smallest_Index(n)"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)-1):\n        key = tuple([test_tup[i], test_tup[i+1]])\n        value = test_tup[i+1]\n        d[key] = value\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        val = test_tup[i+1]\n        result[key] = val\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # initializing an empty dictionary\n    result = {}\n    # iterating over the tuple elements\n    for i in range(0, len(test_tup), 2):\n        # adding the current element as a key and the next element as a value in the dictionary\n        result[test_tup[i]] = test_tup[i+1]\n    # returning the final dictionary\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # initialize an empty dictionary\n    dict_obj = {}\n    # iterate through the tuple and create a key-value pair for each adjacent pair of elements\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    dict_data = {}\n    # loop through the tuple\n    for i in range(len(test_tup)):\n        # check if the current element is not the last element\n        if i < len(test_tup) - 1:\n            # add the current element and the next element as a key-value pair in the dictionary\n            dict_data[test_tup[i]] = test_tup[i+1]\n        # if the current element is the last element, add the element as a key-value pair in the dictionary\n        else:\n            dict_data[test_tup[i]] = None\n    # return the dictionary\n    return dict_data"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return {test_tup[i]:test_tup[i+1] for i in range(0, len(test_tup)-1, 2)}"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_ = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_[key] = value\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value_dict = {}\n    i = 0\n    while i < len(test_tup):\n        key_value_dict[test_tup[i]] = test_tup[i + 1]\n        i += 2\n    return key_value_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 2 :\n        return True\n\n    for i in range(1, len(s)) :\n        if s[0]!= s[i] :\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are same, False otherwise.\n    \"\"\"\n    # Checking if the length of the string is equal to 1\n    if len(s) == 1:\n        return True\n    # Initializing the first character of the string\n    first_char = s[0]\n    # Iterating through the string\n    for char in s[1:]:\n        # Checking if the current character is not equal to the first character\n        if char!= first_char:\n            # If the current character is not equal to the first character, the function returns False\n            return False\n    # If all the characters are same, the function returns True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Initialize the variable to store the length of the string\n    length = len(s)\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n    # Loop through the string and compare each character to the first character\n    for char in s:\n        if char!= first_char:\n            # If any character is not equal to the first character, return False\n            return False\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    elif len(s) > 1:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether all the characters are same or not.\n    '''\n    # Convert the string to lowercase\n    s = s.lower()\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n    # Loop through the rest of the string\n    for i in range(1, len(s)):\n        # If the current character is not equal to the first character, return False\n        if s[i]!= first_char:\n            return False\n    # If the loop completes without returning False, then all characters are same and the function returns True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    \n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 12\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2) * math.sqrt(5) / 2\n    return 1/3 * s * s * s"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.25\n    area = (4/3) * math.pi * side ** 3\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    s = (side + math.sqrt(3) * side + math.sqrt(3) * side) / 4\n\n    # Calculate the area of the tetrahedron\n    area = math.sqrt(s * (s - side) * (s - 2 * side) * (s - 3 * side))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.25\n\n    # Calculate the area using Heron's formula\n    area = (4 * semi_perimeter) ** 0.5\n\n    # Return the area of the tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/3 * side**2\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2)/2\n    return 6*math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side * side * side\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # If list is already empty or m is equal to n, nothing to do\n    if n == 0 or m == n:\n        return list\n\n    # Find the starting index of the sublist to be rotated\n    start = n - m\n\n    # Reverse the sublist to be rotated\n    list = list[start:] + list[:start]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = list[m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m %= n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Initialize the length of the list\n    length = len(list)\n    # Check if the rotation number is greater than the length of the list\n    if m > length:\n        # If the rotation number is greater than the length of the list, rotate to the left\n        m = m % length\n    # Check if the rotation number is zero\n    if m == 0:\n        # If the rotation number is zero, return the original list\n        return list\n    # Initialize two pointers to the start and end of the list\n    start, end = 0, length - 1\n    # Move the start pointer by the rotation number\n    while start < end:\n        start += 1\n        end -= 1\n    # Move the start pointer to the end of the list\n    while start < length:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    # print(n, m)\n    for i in range(m):\n        last = list[-1]\n        list.remove(last)\n        list.insert(0, last)\n    # print(list)\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    if m >= n:\n        print(\"List can't be rotated.\")\n        return list\n    \n    # Find the index of the first element to be moved\n    first_index = m - 1\n    \n    # Move the last m elements to the beginning of the list\n    for i in range(n - m, first_index, -1):\n        list[i] = list[i - m]\n    \n    # Move the first m elements to the end of the list\n    for i in range(first_index, n - m, 1):\n        list[i] = list[i + m]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Initialize the length of the list\n    n = len(list)\n    # Initialize the new list with the first m elements of the original list\n    new_list = list[:m]\n    # Append the remaining elements of the original list to the end of the new list\n    new_list.extend(list[m:])\n    # Return the new list\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # If list length is less than m, then m becomes the difference between n and m\n    m = m % n if n < m else m\n    # Reverse the list from 0 to m-1\n    list[:m] = list[:m][::-1]\n    # Reverse the list from m to n-1\n    list[m:] = list[m:][::-1]\n    # Reverse the entire list\n    list[:] = list[::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and the number of items to be rotated to the right direction.\n    It rotates the list by m number of items to the right.\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        list[i], list[n-1-i] = list[n-1-i], list[i]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for elem in test_tup:\n        if elem is None:\n            none_count += 1\n    if none_count == len(test_tup):\n        print(\"The tuple has no none value.\")\n    else:\n        print(f\"The tuple has {none_count} none value(s).\")"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes in a tuple and returns True if it has any none value or False otherwise.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    def is_divisible_by_digits(num):\n        return all(int(d) in str(num) for d in str(num))\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        return all(int(digit) % 10 == 0 for digit in str(num))\n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(d) % int(d) for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    return list(filter(lambda x: all(int(digit) % 10 == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    Args:\n        startnum (int): The starting number of the range.\n        endnum (int): The ending number of the range.\n\n    Returns:\n        A list of integers where every number is divisible by every digit it contains.\n    \"\"\"\n\n    # Use a lambda function to filter out all the numbers that don't satisfy the condition.\n    # This lambda function takes a number as input and returns True if the number is divisible by every digit.\n    divisible_by_digits_filter = lambda x: all(int(digit) in str(x) for digit in str(x))\n\n    # Use a list comprehension to create a new list of numbers that satisfy the filter.\n    divisible_numbers = [x for x in range(startnum, endnum+1) if divisible_by_digits_filter(x)]\n\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(int(d) % x == 0 for d in str(x))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a lambda function that returns True if the given number is divisible by every digit it contains\n    is_divisible_by_digits = lambda num: all(d in str(num) for d in str(num))\n    \n    # Use a list comprehension to create a list of numbers within the given range that are divisible by every digit it contains\n    divisible_by_digits_numbers = [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n    \n    return divisible_by_digits_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digit_count = lambda num: len([digit for digit in str(num)])\n    filter_func = lambda num: all(digit in str(num) for digit in str(num)) and digit_count(num) == len(str(num))\n    return list(filter(filter_func, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Define a lambda function that checks if a number is divisible by a digit\n    is_divisible = lambda n: all(d in str(n) for d in '0123456789')\n    \n    # Filter out numbers that are not divisible by every digit in the range\n    result = list(filter(is_divisible, range(startnum, endnum+1)))\n    \n    # Return the filtered list of numbers\n    return result"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi * r**2 * a / 360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if the angle is within the acceptable range (0 to 360 degrees)\n    if a > 360 or a < 0:\n        return None\n    \n    # Calculate the area of the sector using the formula\n    area = math.pi * r * r * math.sin(a/180 * math.pi)\n    \n    # Return the area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if the angle is valid\n    if a > 360:\n        return None\n\n    # Calculate the area of the sector\n    area = math.pi * r ** 2 * a / 360\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r*r*math.sin(math.radians(a))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is within acceptable range\n    if a > 360:\n        return None\n    \n    # calculate area of sector using Heron's formula\n    area = 0.5 * r * r * math.sin(math.radians(a))\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    # calculate the area of the sector using the formulas\n    area = math.pi * r**2 * a / 360\n\n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store the length of LCS of all prefixes of X, Y, Z\n    L = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # Build LCS table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif L[i-1][j][k] >= L[i][j-1][k]:\n                    L[i][j][k] = L[i-1][j][k]\n                else:\n                    L[i][j][k] = L[i][j-1][k]\n\n    # Extract the LCS from the LCS table\n    lcs = ''\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] >= L[i][j-1][k]:\n            i -= 1\n        else:\n            j -= 1\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize LCS table \n    L = [[0 for j in range(len(Z) + 1)] for i in range(len(X) + 1)] \n\n    # Fill the LCS table in bottom up manner \n    for i in range(1, len(X) + 1): \n        for j in range(1, len(Z) + 1): \n            if X[i - 1] == Z[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n            else: \n                L[i][j] = max(L[i - 1][j], L[i][j - 1]) \n\n    # Traverse the LCS table to find the longest common subsequence \n    i = len(X) \n    j = len(Z) \n    lcs = '' \n    while i > 0 and j > 0: \n        if X[i - 1] == Z[j - 1]: \n            lcs = X[i - 1] + lcs \n            i -= 1 \n            j -= 1 \n        elif L[i - 1][j] > L[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    return lcs "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # creating a table to store LCS of all possible subsequences\n    LCS = [[[0] * (o + 1) for j in range(m + 1)] for i in range(n + 1)]\n\n    # filling the table in bottom up manner\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[j - 1] == Y[i - 1]:\n                LCS[i][j][0] = LCS[i - 1][j - 1][0] + 1\n            else:\n                LCS[i][j][0] = max(LCS[i - 1][j][0], LCS[i][j - 1][0], LCS[i - 1][j - 1][0])\n\n            for k in range(1, o + 1):\n                if X[j - 1] == Z[k - 1]:\n                    LCS[i][j][k] = LCS[i - 1][j - 1][k - 1] + LCS[i][j][0]\n                else:\n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i - 1][j - 1][k])\n\n    # backtracking to get the LCS\n    i = n\n    j = m\n    k = o\n    LCS_sequence = []\n\n    while i!= 0 and j!= 0 and k!= 0:\n        if X[j - 1] == Y[i - 1]:\n            i -= 1\n            j -= 1\n        elif X[j - 1] == Z[k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n        LCS_sequence.append(X[j - 1])\n\n    return LCS_sequence[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n  \n    # creating a table to store lengths of LCS for three strings \n    table = [[0] * (o + 1) for i in range(m + 1)] \n  \n    # Fill in LCS lengths in table[][] in bottom up manner \n    for i in range(1, m + 1): \n        for j in range(1, o + 1): \n            if X[i-1] == Y[j-1]: \n                table[i][j] = table[i-1][j-1] + 1 \n            else: \n                table[i][j] = max(table[i-1][j], table[i][j-1]) \n  \n    # The LCS is stored in a list which will be reversed to get the original string \n    lcs = [] \n    i = m \n    j = o \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif table[i-1][j] > table[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    # Reverse the list to get the original string \n    lcs.reverse() \n  \n    return lcs "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n\n    :param X: String sequence 1\n    :type X: str\n    :param Y: String sequence 2\n    :type Y: str\n    :param Z: String sequence 3\n    :type Z: str\n    :return: LCS of three sequences\n    :rtype: str\n    \"\"\"\n    M = len(X)\n    N = len(Y)\n    O = len(Z)\n\n    # creating a 2D table to store lengths of LCS of substring of X[0...i] and Y[0...j] and Z[0...k]\n    dp = [[[0 for j in range(O+1)] for k in range(N+1)] for i in range(M+1)]\n\n    # length of LCS of empty string and any string is 0\n    for i in range(M+1):\n        for j in range(N+1):\n            for k in range(O+1):\n                dp[i][j][k] = 0\n\n    # length of LCS of any string and empty string is 0\n    for i in range(M+1):\n        dp[i][0][0] = 0\n        dp[0][i][0] = 0\n        dp[0][0][i] = 0\n\n    # filling the table in bottom up manner\n    for i in range(1, M+1):\n        for j in range(1, N+1):\n            for k in range(1, O+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    # reconstructing the LCS by using the table\n    lcs = \"\"\n    i, j, k = M, N, O\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i-1][j][k-1]:\n            i -= 1\n        elif dp[i][j-1][k] == dp[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # returning the LCS\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    #creating a table to store lengths of LCS for subproblems\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                else:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1], L[i - 1][j - 1])\n\n    #backtracking to find the LCS\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j] > L[i][j - 1] and L[i - 1][j] > L[i][j]:\n            i -= 1\n        else:\n            j -= 1\n\n    lcs.reverse()\n    return \"\".join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    # create a table to store the length of the longest common subsequence ending at each position in the three strings\n    T = [[0] * (p + 1) for _ in range(m + 1)]\n    \n    # iterate over the three strings\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                # if all three strings are empty, return an empty sequence\n                if i == 0 and j == 0 and k == 0:\n                    T[i][j][k] = 0\n                # if the three strings differ at this position, take the maximum value from the three previous positions\n                elif X[i-1]!= Y[j-1] and X[i-1]!= Z[k-1] and Y[j-1]!= Z[k-1]:\n                    T[i][j][k] = max(T[i-1][j][k], T[i][j-1][k], T[i-1][j-1][k-1]) + 1\n                # if the three strings are identical at this position, take the maximum value from the two previous positions\n                else:\n                    T[i][j][k] = max(T[i-1][j][k], T[i][j-1][k]) + 1\n    \n    # create a list to store the characters of the longest common subsequence\n    L = []\n    i = m\n    j = n\n    k = p\n    \n    # backtrack to find the characters of the longest common subsequence\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            L.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif Y[j-1] == Z[k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    L.reverse()\n    \n    return ''.join(L)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Base case for empty strings\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return []\n\n    # Initialize DP table\n    dp = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]\n\n    # Fill DP table using Dynamic Programming approach\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # Find the longest common subsequence using Backtracking\n    i = len(X)\n    j = len(Y)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the lcs\n    lcs = lcs[::-1]\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n    \n    # create a 3D table to store the lengths of LCS for all possible prefixes of X, Y and Z\n    L = [[[0] * (p+1) for j in range(m+1)] for i in range(n+1)]\n    \n    # fill the table in bottom-up manner\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n    \n    # backtrack to find the longest common subsequence\n    i = n\n    j = m\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i-1][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n    \n    # reverse the order of the subsequence to get the correct result\n    lcs.reverse()\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m+1) for i in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n        \n    return p[n][m]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<![A-Z]\\.)(?<=\\.|\\?)\\b([A-Z])'\n    words = re.findall(pattern, str1)\n    for i, word in enumerate(words):\n        words[i] ='' + word\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Use the regular expression pattern to find all the words in the given string\n    words = re.findall(pattern, str1)\n    # Create a new string by joining the words with spaces\n    new_str =''.join(words)\n    # Return the modified string\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern for matching capital words\n    pattern = r'\\b[A-Z][a-z]+\\b'\n\n    # Use the re.sub() function to replace all matches of the pattern with a space\n    return re.sub(pattern,'', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    # Define a regular expression pattern to find capital words\n    pattern = r'^[A-Z][a-z]*'\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the word starts with capital letter\n        if re.match(pattern, words[i]):\n            # If yes, add a space before the word\n            words[i] ='' + words[i]\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regex to match all capital words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Iterate over the matched words and add spaces before them\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Iterate through the words and capitalize the first letter\n    capitalized_words = [word.capitalize() for word in words]\n\n    # Join the capitalized words with spaces and return the result\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Define a regular expression pattern to find words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n\n    # Use the pattern to find all the words in the string\n    matches = re.findall(pattern, string)\n\n    # Iterate over each word and insert a space before the capital letter\n    for i in range(len(matches)):\n        if i > 0:\n            # Check if the previous word ended with a space\n            if matches[i-1][-1] =='':\n                # If yes, replace the last character with a space and insert a new space\n                matches[i] = matches[i][:-1] +'' + matches[i][-1]\n            else:\n                # If not, insert a space before the capital letter\n                matches[i] = matches[i] +'' + matches[i][0]\n        else:\n            # If the word is the first one, insert a space before the capital letter\n            matches[i] ='' + matches[i][0]\n\n    # Join the words back into a string and return it\n    return ''.join(matches)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove any non-word characters from the string\n    str1 = re.sub(r'[^a-zA-Z0-9]+','', str1)\n\n    # Split the string into words using the whitespace as the separator\n    words = str1.split()\n\n    # Loop through the words and capitalize the first letter of each word\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n\n    # Join the words back into a string with spaces between them\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Remove all non-alphanumeric characters except for spaces and hyphens\n    str1 = re.sub(r'[^a-zA-Z0-9\\s-]+', '', str1)\n\n    # Split the string into words\n    words = str1.split()\n\n    # Iterate through each word\n    for i in range(len(words)):\n        # Check if the word starts with a capital letter\n        if words[i][0].isupper() and i!= 0:\n            # Add a space before the word\n            words[i] ='' + words[i]\n\n    # Join the words with spaces\n    capitalized_words =''.join(words)\n\n    return capitalized_words"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # Define a regular expression pattern to match capitalized words\n    pattern = r'\\b\\w*[A-Z]\\w*\\b'\n    \n    # Use the `re.sub()` function to replace all matches with spaces\n    return re.sub(pattern, r'\\1 \\2', string)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums = [float(num) for num in nums_str]\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [float(num) for num in nums_str]\n    nums.sort()\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # convert all strings to float\n    nums_float = [float(x) for x in nums_str]\n    # sort the float list in numeric order\n    nums_float.sort()\n    # convert sorted float list back to strings\n    nums_str = [str(x) for x in nums_float]\n    # return sorted string list\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: [int(c) for c in x])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # create a list of tuples containing the string and the numerical value\n    lst = [(s, int(s.replace(',', ''))) for s in nums_str if s.replace(',', '').isdigit()]\n    # sort the list by numerical value\n    lst.sort(key=lambda x: x[1])\n    # convert back to a list of strings\n    sorted_lst = [str(x[0]) for x in lst]\n    return sorted_lst"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for num_str in nums_str:\n        num = float(num_str)\n        nums.append(num)\n    nums.sort()\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            continue  # skip non-numeric strings\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(float(num))\n        except ValueError:\n            nums.append(num)\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    # Splitting the list into individual strings\n    nums = [str(num) for num in nums_str]\n\n    # Converting the strings to integers\n    nums = [int(num) for num in nums]\n\n    # Sorting the list numerically using the built-in `sort` function\n    nums.sort()\n\n    # Re-converting the sorted list of integers back to strings and returning it\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda s: [int(x) for x in s])\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Append the tuple to the list\n    test_list.append(test_tup)\n    # Return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    smaller = -1\n    \n    if left < len(arr) and arr[left] < arr[i]:\n        smaller = left\n    \n    if right < len(arr) and arr[right] < arr[smaller]:\n        smaller = right\n    \n    if smaller == -1:\n        return True\n    \n    arr[i], arr[smaller] = arr[smaller], arr[i]\n    return not check_min_heap_helper(arr, smaller)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)\n\narr = [12, 11, 13, 5, 6, 7]\nprint(check_min_heap(arr))"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n\n    if arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0:\n        return True\n    elif i == len(arr) - 1:\n        return False\n    elif arr[i] >= arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # Base case: If i is at the end of the array, it means we have checked all elements in the array\n    if i == len(arr):\n        return True\n\n    # If the left child of i is greater than or equal to the length of the array, it means there is no left child\n    if 2 * i + 1 >= len(arr):\n        return False\n\n    # If the left child of i is greater than the right child of i, it means the left child is smaller than the right child, so the array is not a min heap\n    if arr[2 * i + 1] < arr[2 * i]:\n        return False\n\n    # If the left child of i is smaller than the parent of i, it means the array is not a min heap\n    if arr[i] < arr[2 * i]:\n        return False\n\n    # Recursively check the left and right children of i\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return True\n\n    # Recursively check the array\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Get the left child index\n    left_child_index = 2 * i + 1\n    \n    # If the left child index is less than the length of the array and the left child is greater than the parent, return False\n    if left_child_index < len(arr) and arr[left_child_index] > arr[i]:\n        return False\n    \n    # Get the right child index\n    right_child_index = 2 * i + 2\n    \n    # If the right child index is less than the length of the array and the right child is greater than the parent, return False\n    if right_child_index < len(arr) and arr[right_child_index] > arr[i]:\n        return False\n    \n    # If both children are less than or equal to the parent, return True\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            return False\n    return True\n\ndef build_min_heap(arr):\n    '''\n    Build a min heap from the given array.\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        heapify(arr, n, i)\n\ndef heapify(arr, n, i):\n    '''\n    Heapify the given array.\n    '''\n    smallest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and arr[left] < arr[smallest]:\n        smallest = left\n    if right < n and arr[right] < arr[smallest]:\n        smallest = right\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        heapify(arr, n, smallest)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= 1:\n        if arr[i] > arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)\n    else:\n        return True\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n    if arr[i] < arr[parent]:\n        return False\n\n    return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i // 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # initialize the first two jacobsthal numbers\n    a, b = 0, 1\n\n    # loop through the numbers to find the nth jacobsthal number\n    for i in range(2, n+1):\n        # calculate the next jacobsthal number using the formula a(i) = (a(i-1) + b(i-1))\n        c = a + b\n        # update the values for the next iteration\n        a = b\n        b = c\n\n    # return the nth jacobsthal number\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + 1\n    else:\n        return jacobsthal_num(n//2) * 3"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n\n    # Initialize the jacobsthal number and the number of multiplications\n    j = 0\n    count = 0\n\n    # Use the Jacobsthal-Lucas theorem to generate the nth jacobsthal number\n    while count < n:\n        # If the count is even, multiply the jacobsthal number by 2\n        if count % 2 == 0:\n            j = 2 * j\n\n        # If the count is odd, multiply the jacobsthal number by 4\n        else:\n            j = 4 * j\n\n        count += 1\n\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacob = 0\n    while n > 0:\n        jacob = (jacob * (4*jacob + 1) // (1 + jacob)) % 7\n        n -= 1\n    return jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    jacob_nums = [0, 1, 1]\n    for i in range(2, n):\n        jacob_nums.append(jacob_nums[i-1] + jacob_nums[i-2])\n    return jacob_nums[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    # Initialize the first two jacobsthal numbers\n    jacobsthal_0 = 0\n    jacobsthal_1 = 1\n    \n    # Loop through the remaining jacobsthal numbers\n    for i in range(2, n+1):\n        # Compute the next jacobsthal number\n        next_jacobsthal = (jacobsthal_0 + jacobsthal_1) % 10**9\n        \n        # Update the jacobsthal numbers\n        jacobsthal_0 = jacobsthal_1\n        jacobsthal_1 = next_jacobsthal\n    \n    return jacobsthal_1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n - 1) - jacobsthal_num(n - 2)) % 1000000"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_lst = [0, 1, 1]\n        for i in range(3, n+1):\n            jacobsthal_lst.append(jacobsthal_lst[i-1] + jacobsthal_lst[i-2])\n        return jacobsthal_lst[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    # Initialize variables\n    jacobsthal_nums = [1]\n    jacobsthal_prev = 1\n    jacobsthal_curr = 1\n    \n    # Iterate over jacobsthal_nums until n is reached\n    for i in range(2, n+1):\n        # Calculate the next jacobsthal number\n        jacobsthal_next = jacobsthal_prev + jacobsthal_curr\n        \n        # Update jacobsthal_nums and update prev and curr\n        jacobsthal_nums.append(jacobsthal_next)\n        jacobsthal_prev = jacobsthal_curr\n        jacobsthal_curr = jacobsthal_next\n    \n    # Return the nth jacobsthal number\n    return jacobsthal_nums[n-1]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    # find the minimum K records from the list\n    min_list = sorted(test_list)[0:K]\n\n    # find the minimum number of K records in the list\n    min_count = len(min_list)\n\n    # return the minimum number of K records\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize a variable to store the minimum k records\n    min_k_list = []\n\n    # Traverse the sorted list and append the minimum k records\n    for i in range(K):\n        min_k_list.append(sorted_list[i])\n\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    min_list = sorted(test_list, key=lambda x: x[1])\n    min_list = min_list[:K]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the test_list in ascending order based on the last element\n    test_list.sort(key=lambda x: x[2])\n\n    # Initialize minimum_k to a large integer\n    minimum_k = float('inf')\n\n    # Iterate over the first K elements of the sorted list\n    for i in range(K):\n        # If the current element is smaller than minimum_k, update minimum_k\n        if test_list[i][2] < minimum_k:\n            minimum_k = test_list[i][2]\n\n    # Return the minimum_k\n    return minimum_k"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a tuple list and an integer K as input,\n    and returns a list of the K smallest elements from the tuple list.\n    \"\"\"\n    # First, we sort the tuple list by their first element\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    \n    # Then, we extract the first K elements from the sorted list\n    result = sorted_list[:K]\n    \n    # Finally, we return the result list\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # initialize variables\n    min_value = float('inf')\n    min_index = -1\n    \n    # loop through the list\n    for index, value in enumerate(test_list):\n        # check if the value is smaller than the minimum value\n        if value < min_value:\n            # update minimum value and index\n            min_value = value\n            min_index = index\n        # check if the index is less than k and the value is smaller than the minimum value\n        elif index < K and value < min_value:\n            # update minimum value and index\n            min_value = value\n            min_index = index\n            \n    # check if minimum value is equal to infinity\n    if min_value == float('inf'):\n        # print error message\n        print(\"Error: There are not enough elements in the list to satisfy k.\")\n    else:\n        # print the minimum value and its index\n        print(\"The minimum value is:\", min_value, \"at index:\", min_index)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n        test_list: A list of tuples. Each tuple contains data for one record.\n        K: An integer value. The number of records to be returned.\n        \n    Returns:\n        A list of K records. The records are returned in ascending order of their first value.\n        \n    Example:\n        test_list = [(3, 'a'), (1, 'b'), (2, 'c'), (5, 'd'), (4, 'e')]\n        K = 3\n        Output: ['a', 'b', 'c']\n    '''\n    \n    # Sort the list of tuples by their first value in ascending order\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    \n    # Find the minimum K records\n    min_records = [sorted_list[i][1] for i in range(K)]\n    \n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    min_value = sorted_list[0][1]\n    min_index = 0\n    count = 0\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i][1] < min_value:\n            min_value = sorted_list[i][1]\n            min_index = i\n        count += 1\n        if count == K:\n            break\n    result = []\n    for j in range(min_index, len(sorted_list)):\n        result.append(sorted_list[j])\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Find the minimum K records from a list of tuples.\n\n    :param test_list: List of tuples, where each tuple represents a record.\n    :param K: Integer, the number of records we want to find.\n    :return: A list of tuples, where each tuple represents a record, and the length of the list is equal to K.\n    \"\"\"\n    min_records = []\n    for i in range(len(test_list)):\n        min_records.append(test_list[i])\n        if len(min_records) == K:\n            break\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # sort the list based on the first element of each tuple\n    test_list = sorted(test_list, key=lambda x: x[0])\n\n    # create a list of tuples containing the minimum k records\n    min_k_records = []\n\n    # iterate over the sorted list and add k records to the list\n    for i in range(K):\n        min_k_records.append(test_list[i])\n\n    # return the list of minimum k records\n    return min_k_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(set(len(l1), len(l2), len(l3)))!= 1:\n        raise ValueError(\"All lists must have the same length\")\n\n    # Initialize the result list\n    result = []\n\n    # Loop over the indices of the first list\n    for i in range(len(l1)):\n        # Check if the element at this index is in all the lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            # If it is, add it to the result list\n            result.append(l1[i])\n\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    for i in range(len(l2)):\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n    for i in range(len(l3)):\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Create a set to store common elements\n    common_elements = set()\n\n    # Loop through each list and compare the elements at each index\n    for i in range(len(l1)):\n        # Check if the element at the current index is in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            # Add the element to the set of common elements\n            common_elements.add(l1[i])\n        elif l2[i] in l1 and l2[i] in l3 and l2[i] in l2:\n            # Add the element to the set of common elements\n            common_elements.add(l2[i])\n        elif l3[i] in l1 and l3[i] in l2 and l3[i] in l3:\n            # Add the element to the set of common elements\n            common_elements.add(l3[i])\n\n    # Convert the set of common elements to a list\n    return list(common_elements)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_indices = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_indices.append(i)\n    return common_indices"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_indices = set()\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_indices.add(i)\n    return list(common_indices)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty list to store the common elements\n    common_elements = []\n    # loop through the indices of the lists\n    for i in range(len(l1)):\n        # check if the element at the current index is present in all three lists\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            # if it is, append it to the common_elements list\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    if len(numbers) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"List must have at least 2 numbers to find the second smallest.\"\n\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()  # sort the list in ascending order\n    return numbers[1]  # return the second element of the sorted list\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        \n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n                \n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        return second_smallest(numbers[1:])"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[-2]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'\\ba.*b\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"This is a test of regular expressions. It should match the pattern 'a.*b'.\"\nmatches = text_match_zero_one(text)\nprint(matches)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\w+b+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The text '{}' matches the pattern '{}'\".format(text, pattern))\n    else:\n        print(\"The text '{}' does not match the pattern '{}'\".format(text, pattern))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"ab{1,}\"\n    result = re.search(pattern, text)\n    if result:\n        return \"Match found: {}\".format(result.group())\n    else:\n        return \"Match not found\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(?=[b]*b)')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)'\n    matches = re.findall(pattern, text)\n    return matches\n\nif __name__ == '__main__':\n    text = \"This is a string with an 'a' followed by one or more 'b's\"\n    matches = text_match_zero_one(text)\n    print(matches)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def text_match_zero_one(text):\n    pattern = r'a(?=b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function takes a list of strings as input and returns the number of pairs of reverse strings in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    # Iterate through the list and check if the current string is a reverse of the previous string\n    count = 0\n    prev_str = None\n    for curr_str in test_list:\n        if curr_str == prev_str[::-1]:\n            count += 1\n        prev_str = curr_str\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # create a dictionary to store the count of pairs of reverse strings\n    count_dict = {}\n    # iterate through the list of strings\n    for string in test_list:\n        # create two reverse strings\n        reverse_string = string[::-1]\n        # check if the reverse string is already in the dictionary\n        if reverse_string in count_dict:\n            # if it is, increment the count of pairs of reverse strings\n            count_dict[reverse_string] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            count_dict[reverse_string] = 1\n    # return the count of pairs of reverse strings\n    return sum(count_dict.values())"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    reverse_dict = {}\n\n    for word in test_list:\n        reversed_word = word[::-1]\n        if reversed_word in reverse_dict:\n            count += reverse_dict[reversed_word]\n        reverse_dict[word] = reverse_dict.get(word, 0) + 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for string in test_list:\n        # Convert the string to a list of characters\n        char_list = list(string)\n        # Sort the characters in reverse order\n        char_list.sort(reverse=True)\n        # Convert the sorted list back to a string\n        sorted_string = ''.join(char_list)\n        # Compare the original string with its sorted string\n        if string!= sorted_string:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    # Iterate through the list and compare each element to its reverse\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # If the elements are reversed, add a pair to the count\n            if test_list[i][::-1] == test_list[j][::-1]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n\n    Args:\n    test_list (list): A list of strings.\n\n    Returns:\n    int: The number of pairs of reverse strings in the list.\n    \"\"\"\n    count = 0\n    for string1 in test_list:\n        for string2 in test_list:\n            if string1!= string2 and string1[::-1] == string2:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    # Create a dictionary to store the frequency of each string in the list\n    freq = {}\n    for string in test_list:\n        freq[string] = freq.get(string, 0) + 1\n\n    # Create a list of tuples where each tuple contains a string and its frequency\n    freq_list = [(string, freq[string]) for string in freq]\n\n    # Sort the list of tuples based on the frequency of the strings\n    freq_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Initialize variables to keep track of the count and the last string that was processed\n    count = 0\n    last_string = \"\"\n\n    # Iterate through the sorted list of tuples\n    for string, freq in freq_list:\n        # Check if the last string and the current string are in the correct order\n        if string[::-1] == last_string:\n            # If they are, increment the count\n            count += 1\n\n        # Update the last string\n        last_string = string\n\n    # Return the count of reverse pairs\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple in count_dict:\n                count_dict[sublist_tuple] += 1\n            else:\n                count_dict[sublist_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple in count_dict:\n                count_dict[sublist_tuple] += 1\n            else:\n                count_dict[sublist_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    list1_count = {}\n    for item in list1:\n        if item not in list1_count:\n            list1_count[item] = 1\n        else:\n            list1_count[item] += 1\n    return list1_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store counts\n    counts = {}\n    # iterate through the list\n    for lst in list1:\n        # convert each list to a tuple and increment its count in the dictionary\n        counts[tuple(lst)] = counts.get(tuple(lst), 0) + 1\n    # return the dictionary\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    counts = {}\n\n    # Iterate through each element in the list1\n    for element in list1:\n        # Convert the element to a tuple\n        tuple_element = tuple(element)\n        # Check if the tuple is already in the dictionary\n        if tuple_element in counts:\n            # If it is, increment the count by 1\n            counts[tuple_element] += 1\n        else:\n            # If it is not, add it to the dictionary with a count of 1\n            counts[tuple_element] = 1\n\n    # Return the final dictionary with counts of unique sublists\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for item in list1:\n        sublist = tuple(item)\n        if sublist in sublists:\n            sublists[sublist] += 1\n        else:\n            sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    sublist_count = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist not in sublist_count:\n            sublist_count[tuple_sublist] = 1\n        else:\n            sublist_count[tuple_sublist] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    sublists = {}\n    # loop through the original list\n    for item in list1:\n        # if the item is a list, convert it to a tuple and count its occurencies in the original list\n        if isinstance(item, list):\n            tuple_item = tuple(item)\n            if tuple_item in sublists:\n                sublists[tuple_item] += 1\n            else:\n                sublists[tuple_item] = 1\n    # return the dictionary\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple not in count_dict:\n                count_dict[sublist_tuple] = sublist.count(sublist[0])\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary to store the counts of unique sublists\n    counts = {}\n    \n    # Iterate through each element in the list\n    for element in list1:\n        # Convert the element to a tuple to make it unique\n        unique_element = tuple(sorted(element))\n        \n        # Check if the tuple is already in the dictionary\n        if unique_element in counts:\n            # If it is, increment its count by 1\n            counts[unique_element] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            counts[unique_element] = 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    if \".\" not in num:\n        return False\n    if len(num.split(\".\")[1]) > 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n\n    parts = num.split('.')\n    if len(parts)!= 2 or len(parts[0]) > 1 or len(parts[1]) > 2:\n        return False\n\n    try:\n        float(parts[0])\n        float(parts[1])\n    except ValueError:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    if '.' in num and num.count('.')!= 1:\n        return False\n    parts = num.split('.')\n    if len(parts[0]) > 2 or len(parts[1]) > 2:\n        return False\n    for digit in parts[0]:\n        if not digit.isdigit():\n            return False\n    for digit in parts[1]:\n        if not digit.isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    try:\n        # check if the number is a float with 2 decimal places\n        float_num = float(num)\n        if str(float_num).split('.')[1].endswith('0'*(2-len(str(float_num).split('.')[1]))):\n            return True\n    except ValueError:\n        # if the number is not a float, it cannot be a decimal\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return round(float_num, 2) == float_num\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.replace(',', '')  # Remove commas from the string\n    num = num.replace('.', '')  # Remove periods from the string\n    num = num.replace('-', '')  # Remove hyphens from the string\n    if not (num.isdigit() or '.' in num):  # Check if the string contains only digits or a decimal point\n        return False\n    try:\n        float(num)  # Try to convert the string to a float\n    except ValueError:  # If the conversion fails, the string is not a valid decimal number\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    for char in num:\n        if char.isdigit() or char == '.':\n            continue\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the string only contains digits and a decimal point\n    if any(char not in '0123456789.' for char in num) or '.' not in num:\n        return False\n    # check if the decimal point is followed by exactly two digits\n    if num.count('.') > 1 or len(num.split('.')[-1])!= 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    # check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # remove any non-numeric characters from the input\n    num = ''.join(filter(str.isdigit, num))\n    \n    # check if the input has 2 or fewer digits\n    if len(num) < 2:\n        return False\n    \n    # check if the input is a decimal number with a precision of 2\n    if num.count('.')!= 1:\n        return False\n    \n    # check if the input is a valid decimal number\n    try:\n        decimal.Decimal(num)\n    except ValueError:\n        return False\n    \n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the list is empty or not\n    if not arr:\n        return False\n\n    # Store the unique elements in a set\n    unique = set(arr)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique) == len(arr):\n        return True\n\n    # If the length is not equal, the list contains more than one distinct element\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes an array of numbers as input and returns True if it contains only one distinct element and False otherwise.\n    \"\"\"\n    # create a set from the input array to remove duplicates\n    unique_set = set(arr)\n    # if the length of the set is 1, then all the elements in the array are distinct\n    if len(unique_set) == 1:\n        return True\n    # if the length of the set is greater than 1, then the array contains more than one distinct element\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == len(arr):\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains more than one distinct element\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function checks whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = set(arr)\n    if len(unique) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = monthnum3 % 13  # to keep it within range of 1 to 12\n    \n    if monthnum3 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    return days[monthnum3-1]"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13) and monthnum3 % 2 == 0:\n        if monthnum3 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                days[2] = 29\n            else:\n                days[2] = 28\n        return days[monthnum3 - 1]\n    elif monthnum3 in range(1, 13) and monthnum3 % 2!= 0:\n        if monthnum3 == 2:\n            days[2] = 29\n        return days[monthnum3 - 1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum3 == 2 and year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n\n    if monthnum % 10 == 2 and monthnum % 12!= 0:\n        return True\n    elif monthnum % 10 == 4 and monthnum % 12!= 0:\n        return True\n    elif monthnum % 10 == 6 and monthnum % 12!= 0:\n        return True\n    elif monthnum % 10 == 7 and monthnum % 12!= 0:\n        return True\n    elif monthnum % 10 == 9 and monthnum % 12!= 0:\n        return True\n    elif monthnum % 10 == 11 and monthnum % 12!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if 1 <= monthnum <= 12:\n        return monthnum in [4, 6, 9, 11]\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes two lists as input and returns a tuple containing the minimum difference between any two elements in the two lists.\n    '''\n    # Sorting the given array\n    arr.sort()\n\n    # Initializing minimum difference variable\n    min_diff = float('inf')\n\n    # Traversing through the sorted array\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize minimum difference\n    min_diff = arr[1] - arr[0]\n\n    # Traverse the array to find the minimum difference between any two elements\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n\n    arr.sort()  # Sort the array in ascending order\n    min_diff = arr[1] - arr[0]  # Initialize the minimum difference with the first element\n\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]  # Calculate the difference between the current element and the previous element\n        min_diff = min(diff, min_diff)  # Update the minimum difference with the minimum of the current difference and the current minimum difference\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize min_diff to the first element of the array\n    min_diff = arr[1] - arr[0]\n    # Iterate through the array starting from the second element\n    for i in range(1, n-1):\n        # Calculate the current element minus the previous element\n        curr_diff = arr[i+1] - arr[i]\n        # Update min_diff if the current difference is smaller\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables\n    min_diff = float('inf')\n    current_diff = float('inf')\n\n    # Iterate through the array and calculate the difference between adjacent elements\n    for i in range(1, n):\n        current_diff = abs(arr[i] - arr[i - 1])\n\n        # If the difference is smaller than the minimum difference, update the minimum difference\n        if current_diff < min_diff:\n            min_diff = current_diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize variables\n    min_diff = float('inf')\n    diff = arr[1] - arr[0]\n\n    # Loop through the sorted array and find the minimum difference\n    for i in range(1, n):\n        if i < n - 1:\n            diff = min(arr[i+1] - arr[i], diff)\n        else:\n            diff = min(arr[-1] - arr[i], diff)\n\n        min_diff = min(diff, min_diff)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n    # Sorting the array\n    arr.sort()\n    \n    # Finding the minimum difference between any two elements in the array\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # initialize count to 0\n    count = 0\n    # loop through each character in the string\n    for char in str:\n        # check if the character is a digit\n        if char.isdigit():\n            # increment the count by 1\n            count += 1\n    # return the count\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function returns the nth polite number using the Fibonacci sequence.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        if b >= 1:\n            a, b = b, a + b\n    return b\n\ndef nth_polite(n):\n    '''\n    This function returns the nth polite number using a loop.\n    '''\n    polite_count = 1\n    a, b = 0, 1\n    while polite_count < n:\n        a, b = b, a + b\n        polite_count += 1\n    return b\n\ndef main():\n    n = int(input(\"Enter the value of n: \"))\n    nth_polite_num = nth_polite(n)\n    polite_num = is_polite(n)\n    print(\"The {}th polite number is: {}\".format(n, nth_polite_num))\n    print(\"The {}th polite number using the Fibonacci sequence is: {}\".format(n, polite_num))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    polite_numbers = []\n    count = 1\n\n    while len(polite_numbers) < n:\n        num = 10 * count - 2\n        if is_palindrome(num) and is_prime(num):\n            polite_numbers.append(num)\n        count += 1\n\n    return polite_numbers[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n % 2 == 0:\n        return is_polite(n//2) + 1\n    else:\n        return is_polite((n//2) + 1) + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns\n    the nth polite number.\n\n    A polite number is a positive integer that is divisible by 7. For example,\n    37 is a polite number because 37 is divisible by 7.\n\n    A n-th polite number is the n-th polite number.\n\n    Example:\n    >>> is_polite(1)\n    1\n    >>> is_polite(5)\n    28\n    >>> is_polite(10)\n    329\n    \"\"\"\n    def is_divisible_by_7(num):\n        if num % 7 == 0:\n            return True\n        else:\n            return False\n\n    polite_numbers = [i for i in range(1, 501) if is_divisible_by_7(i)]\n    nth_polite_number = polite_numbers[n-1]\n    return nth_polite_number\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize count and a variable to store the current number \n    count = 1 \n    number = 1 \n\n    # Iterate until the count reaches n \n    while count <= n: \n\n        # If the current number is greater than or equal to 10, print it \n        if number >= 10: \n            print(number) \n\n        # Increment the count and the number \n        count += 1 \n        number += 1 \n\n    # Return the value of the last printed number \n    return number - 1 "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, else False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef nth_prime(n):\n    \"\"\"\n    Returns the nth prime number.\n    \"\"\"\n    count = 0\n    p = 2\n    while count < n:\n        count += 1\n        p += 1\n        if is_prime(p):\n            return p\n    return None\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n    \"\"\"\n    p = nth_prime(n)\n    return p * (p - 1) // 2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Find the nth polite number.\n    \"\"\"\n    polite_numbers = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return polite_numbers[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 0 or n % 1!= 0:\n        return \"Invalid input\"\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n % 2 == 0:\n        return is_polite(n // 2) + 1\n    \n    a = 1\n    b = 0\n    \n    while a * b < n:\n        if a * b + 1 > n:\n            break\n        a += 1\n    \n    return a - 1\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    def get_polite_number(i, m):\n        if i == 1:\n            return i\n        else:\n            return m - 1\n\n    def get_polite_number_recursive(i, m, polite_numbers):\n        if i == 1:\n            return polite_numbers[i-1]\n        else:\n            if m % i == 0:\n                polite_numbers.append(get_polite_number_recursive(i-1, m, polite_numbers))\n                return get_polite_number_recursive(i-1, m, polite_numbers)\n            else:\n                polite_numbers.append(get_polite_number_recursive(i-1, m, polite_numbers))\n                return get_polite_number_recursive(i-1, m, polite_numbers)\n\n    if n == 1:\n        return 1\n    else:\n        m = math.ceil(math.log(n, 2)) + 1\n        polite_numbers = [1]\n        while len(polite_numbers) < m:\n            polite_numbers.append(get_polite_number_recursive(1, m, polite_numbers))\n        return polite_numbers[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_consecutive(num):\n        return len(str(num)) == 4 and num!= 100 and num!= 200\n\n    polite = 2\n\n    if is_prime(polite):\n        return polite\n\n    while len(str(polite)) < n:\n        polite += 1\n\n    while not (is_prime(polite) and is_consecutive(polite)):\n        polite += 1\n\n    return polite"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i], l1[i+1]])\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n):\n            result.append((l1[i], l1[j]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return []\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    n = len(l1)\n    result = []\n    for i in range(n - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l)-1):\n        pairs.append((l[i], l[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The function gets as input a list of numbers and the sum.\n    \"\"\"\n\n    # Initialize count to 0\n    count = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the current element is in the range of the remaining elements\n        if sum - arr[i] in arr[i+1:]:\n            # If it is, increment the count\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as inputs and returns the difference between them.\n    '''\n\n    # initialize an empty list to store the difference between the two lists\n    diff_list = []\n\n    # loop through the first list and check if each element is also in the second list\n    for i in li1:\n        if i in li2:\n            # if it is, then add it to the difference list\n            diff_list.append(i)\n\n    # return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create a set to store the difference between the two lists\n    diff = set(li1) - set(li2)\n    # convert the set to a list and return it\n    return list(diff)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # Using set to find the elements that are present in both lists but not in the first list\n    diff_set = set(li1) & set(li2)\n    # Using list comprehension to convert the set to a list\n    diff_list = [x for x in li1 if x not in li2]\n    # Returning the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input, and returns a list of elements that are present in only one of the lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = list(set(li1) - set(li2))\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a list containing the elements that are present in the first list but not in the second list.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements that are\n    in the first list but not in the second list.\n    \"\"\"\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_nums = [x for x in range(1, n+1, 2)]\n    sum_of_fourth_powers = 0\n    \n    for num in odd_nums:\n        sum_of_fourth_powers += num ** 4\n        \n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        num = 1\n        for j in range(i+1):\n            num *= 2\n        sum += num ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        num = i+1\n        if num % 2!= 0:\n            fourth_power = num ** 4\n            sum += fourth_power\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        num = 2 * i - 1\n        sum += num ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_fourth_pow = 0\n    for i in range(n):\n        num = i * 2 + 1\n        fourth_pow = num ** 4\n        sum_fourth_pow += fourth_pow\n    return sum_fourth_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2!=0:\n            sum += i**(4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum to zero\n    sum = 0\n    # iterate over first n odd natural numbers\n    for i in range(n):\n        # add fourth power of odd number to sum\n        sum += i*i*i*i\n    # return sum\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = set([\"(\", \"[\", \"{\"])\n    close_brackets = set([\")\", \"]\", \"}\"])\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            if char == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif char == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            elif char == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balanced = True\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                balanced = False\n                break\n    return balanced"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char not in ['(', ')', '[', ']']:\n                if char not in ['{', '}']:\n                    return False\n                if char!= top_char:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if char in ['(', ')', '[', ']']:\n                if last_char in ['(', '[']:\n                    if char == ')':\n                        return False\n                elif last_char in ['{', '[']:\n                    if char == '}' or char == ']':\n                        return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the length of the word is equal to K\n        if len(words[i]) == K:\n            # If it is, remove it from the list\n            del words[i]\n\n    # Join the list of words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Loop through each word and check its length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            # If the length is equal to K, remove the word from the list\n            del words[i]\n\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # split the string into words\n    new_words = [] # create an empty list to store new words\n    \n    for word in words:\n        if len(word)!= K: # check if the length of the word is not equal to K\n            new_words.append(word) # if not, append the word to the new list\n    \n    return''.join(new_words) # join the new list of words with spaces"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the new words\n    new_words = []\n\n    # Loop through the words\n    for word in words:\n\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n\n            # If the length is not K, append the word to the new list\n            new_words.append(word)\n\n    # Return the new string with the removed words\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word)!= K]\n    filtered_str =''.join(filtered_words)\n    return filtered_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Convert the given string to a list of words\n    words = test_str.split()\n    \n    # Iterate through the list of words and remove words with length K\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            del words[i]\n    \n    # Convert the list of words back to a string and return the result\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    # match all occurrences of pattern in text\n    matches = re.finditer(pattern, text)\n    \n    # check if any match was found\n    if matches:\n        # loop through all matches and find the position of each match\n        for matchNum, match in enumerate(matches, start=1):\n            # get the start and end position of the match\n            start = match.start()\n            end = match.end()\n            \n            # print the position and substring\n            print(f\"Match {matchNum}: Position {start}, Substring: {text[start:end]}\")\n        \n        # return the number of matches found\n        return len(matches)\n    else:\n        # if no match was found, return None\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use re.findall() function to find all the occurrences of pattern in text\n    matches = re.findall(pattern, text)\n    \n    # if there are matches, return a list of tuples where each tuple has the form (match, start_index, end_index)\n    if matches:\n        result = []\n        for match in matches:\n            start_index = text.find(match)\n            end_index = start_index + len(match)\n            result.append((match, start_index, end_index))\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use re.finditer() to find all the matches\n    matches = re.finditer(pattern, text)\n    \n    # If there are no matches, return None\n    if len(list(matches)) == 0:\n        return None\n    \n    # Otherwise, loop through the matches and return a list of tuples containing the occurrence and position of each match\n    result = []\n    for match in matches:\n        result.append((match.start(), match.end()))\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    result = re.findall(pattern, text)\n    if result:\n        return [(m.start(), m.end()) for m in result]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        substring = text[start:end]\n        print(f\"Substring '{substring}' found at position {start} in '{text}'.\")\n        return substring, start"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not all(num % 2 == 1 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2 == 0:\n                    return False\n        else:\n            count = 0\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2 == 1:\n                    count += 1\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:  # if the number at odd index is odd, then the rest of the list must also be odd\n            for j in range(i + 1, len(nums)):\n                if nums[j] % 2!= 0:  # if the number at the next odd index is odd, then the list is not valid\n                    return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([nums[i]] + [nums[j] for j in range(i+1, len(nums), 2)])) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # Initialize a boolean variable to keep track of whether all odd indices contain odd numbers\n    odd_index_found = True\n\n    # Iterate through the list of numbers, starting from the second element (index 1)\n    for i in range(1, len(nums), 2):\n        # If an odd number is found in the current odd index, set the boolean variable to False and break the loop\n        if nums[i] % 2!= 0:\n            odd_index_found = False\n            break\n\n    # Return the boolean variable indicating whether all odd indices contain odd numbers\n    return odd_index_found"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n\n    Args:\n        nums: A list of numbers.\n\n    Returns:\n        A boolean value indicating whether every odd index contains odd numbers of the given list.\n\n    Examples:\n        >>> odd_position([1, 2, 3, 4, 5])\n        True\n        >>> odd_position([1, 2, 4, 6, 8])\n        False\n    \"\"\"\n\n    # Initialize a boolean variable to store the result\n    result = True\n\n    # Loop through each index of the list\n    for index in range(len(nums)):\n        # If the current index is odd, check if its corresponding number is odd\n        if index % 2!= 0 and nums[index] % 2!= 0:\n            # If the number is odd, update the result to False and break out of the loop\n            result = False\n            break\n\n    return result"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] in vowels) and (i == len(test_str)-1 or test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiouAEIOU')\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            if test_str[i] in vowels and test_str[j] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            if any(c in test_str[i:j] for c in vowels):\n                count += 1\n    return count\n\ntest_str = input(\"Enter a string: \")\nprint(count_vowels(test_str))"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Loop through the list and add unique elements to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # Calculate the sum of the unique elements\n    sum_unique = sum(unique_set)\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr))\n    non_repeated_sum = 0\n    \n    for num in unique_arr:\n        non_repeated_sum += num\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    # Create a dictionary to store the elements of the list\n    element_dict = {}\n    # Initialize the sum variable to zero\n    sum_variable = 0\n    # Loop through each element in the list\n    for element in arr:\n        # Check if the element is already in the dictionary\n        if element in element_dict:\n            # If the element is already in the dictionary, increment its frequency count by one\n            element_dict[element] += 1\n        else:\n            # If the element is not in the dictionary, add it to the dictionary with a frequency count of one\n            element_dict[element] = 1\n        # Calculate the sum of all non-repeated elements by summing up all the elements with a frequency count of one\n        sum_variable += element_dict[element]\n    # Return the final sum variable\n    return sum_variable"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store non-repeated elements\n    unique_elements = set(arr)\n\n    # calculate the sum of the unique elements\n    sum_unique = sum(unique_elements)\n\n    # return the sum\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # Find the sum of unique elements\n    sum_unique = sum(unique_set)\n\n    # Return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store the elements of the list \n    set_arr = set(arr) \n    # Initialize the sum variable to 0 \n    sum = 0 \n    # Iterate through the set of elements and add their values to the sum variable \n    for num in set_arr: \n        sum += num \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for elem in arr:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    \n    # Initialize the sum variable to zero\n    sum_non_repeated = 0\n    \n    # Loop through the dictionary and add up the non-repeated elements\n    for elem, count in count_dict.items():\n        if count == 1:\n            sum_non_repeated += elem\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = list(set(arr))\n    unique_elements.sort()\n    sum_of_elements = 0\n    for i in range(len(unique_elements)):\n        sum_of_elements += unique_elements[i]\n    return sum_of_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_of_unique = 0\n    for element in unique_elements:\n        sum_of_unique += element\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the elements and their count\n    count_dict = {}\n    # loop through the list and update the count for each element\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    # loop through the list again and add up the elements that appear only once\n    sum_non_repeated = 0\n    for element in arr:\n        if count_dict[element] == 1:\n            sum_non_repeated += element\n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list of elements, return a list of lists, where each inner list contains consecutive duplicates of the original list.\n    \"\"\"\n    groups = []\n    for k, g in groupby(enumerate(lst), lambda x: x[0] == x[1]):\n        if g:\n            group = [lst[i[0]] for i in g]\n            groups.append(group)\n    return groups"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function will take a list as input and return a new list that groups all the consecutive duplicates of the input list into a list of sublists.\n    \"\"\"\n    grouped_lst = groupby(lst)\n    result_lst = []\n    for item in grouped_lst:\n        if item[0] == item[1]:\n            result_lst.append([item[0]])\n        else:\n            result_lst.append(list(item))\n    return result_lst"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def merge_groups(group):\n        return list(group)\n\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # groupby() function is used to group the list elements based on their value\n    grouped_list = groupby(list1)\n\n    # using a list comprehension to create a new list with sublists of consecutive duplicates\n    packed_list = [list(group) for group in grouped_list if len(list(group)) > 1]\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the list by consecutive duplicates\n    grouped = groupby(list1)\n    # use zip_longest to merge the consecutive duplicates into sublists\n    return [list(group) for group in zip_longest(*grouped, fillvalue=None)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group consecutive duplicates of the list\n    grouped_list = groupby(list(set(list1)))\n    # pack the groups into sublists\n    packed_list = [list(group) for key, group in grouped_list]\n    # return the packed list\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list and returns a list of lists, where each sublist contains consecutive duplicates of the original list.\n\n    Args:\n        lst (list): A list of elements.\n\n    Returns:\n        list: A list of sublists, where each sublist contains consecutive duplicates of the original list.\n    \"\"\"\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if list(group).count(key) == len(list(group)):\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            group = list(group)\n            group.append(list1[0])\n            result.append(group)\n        elif key == list1[1]:\n            group = list(group)\n            group.append(list1[1])\n            result.append(group)\n        elif key == list1[2]:\n            group = list(group)\n            group.append(list1[2])\n            result.append(group)\n        else:\n            group = list(group)\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Define the key function to group consecutive duplicates by\n    def key(x):\n        return x\n\n    # Use the groupby function to group consecutive duplicates\n    grouped_list = groupby(list1, key=key)\n\n    # Create an empty list to store sublists\n    sublist = []\n\n    # Iterate over each group and add all the consecutive duplicates to the sublist\n    for item in grouped_list:\n        if item[1]:\n            sublist.extend(item[1])\n\n    # Return the packed list\n    return sublist"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                if subitem in count:\n                    count[subitem] += 1\n                else:\n                    count[subitem] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the unique sublists and their counts\n    unique_sublist_dict = {}\n    \n    # loop through the original list\n    for i in range(len(list1)):\n        # check if the current element is a list\n        if isinstance(list1[i], list):\n            # turn the list into a tuple to check for uniqueness\n            unique_tuple = tuple(list1[i])\n            # check if the tuple exists in the dictionary\n            if unique_tuple in unique_sublist_dict:\n                # increment the count of the tuple\n                unique_sublist_dict[unique_tuple] += 1\n            # if the tuple does not exist, add it to the dictionary with a count of 1\n            else:\n                unique_sublist_dict[unique_tuple] = 1\n    \n    # return the dictionary containing the unique sublists and their counts\n    return unique_sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if tuple(j) not in list_dict:\n                    list_dict[tuple(j)] = i.count(j)\n    return list_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # create a dictionary to store the sublist counts\n    sublist_counts = {}\n\n    # loop through each element in the list\n    for elem in list1:\n        # if the element is a list, convert it to a tuple and add it to the dictionary\n        if isinstance(elem, list):\n            tuple_elem = tuple(elem)\n            if tuple_elem not in sublist_counts:\n                sublist_counts[tuple_elem] = 1\n            else:\n                sublist_counts[tuple_elem] += 1\n\n    # return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    '''\n    Count the number of lists within a list.\n\n    :param lst: The list to count the sublists in.\n    :return: A dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for i in range(len(lst)):\n        if isinstance(lst[i], list):\n            sublist = lst[i]\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple in counts:\n                counts[sublist_tuple] += 1\n            else:\n                counts[sublist_tuple] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n    # Loop through the elements of the list1\n    for item in list1:\n        # Check if the current item is a list\n        if isinstance(item, list):\n            # If it is a list, turn it into a tuple and add it to the counts dictionary\n            counts[tuple(item)] = counts.get(tuple(item), 0) + 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the unique sublists and their occurrences\n    sublist_count = {}\n    # Loop through each sublist in the list1\n    for sublist in list1:\n        # Turn the sublist into a tuple and check if it exists in the dictionary\n        if tuple(sublist) in sublist_count:\n            # If it does, increment its count by 1\n            sublist_count[tuple(sublist)] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            sublist_count[tuple(sublist)] = 1\n    # Return the dictionary of unique sublists and their counts\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through each element in the list\n    for item in list1:\n\n        # Check if the item is a list\n        if isinstance(item, list):\n\n            # If the item is a list, turn it to a tuple and check if it's in the dictionary\n            if tuple(item) in counts:\n\n                # If the tuple is in the dictionary, increment its count by 1\n                counts[tuple(item)] += 1\n\n            # If the tuple isn't in the dictionary, add it with a count of 1\n            else:\n                counts[tuple(item)] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for item in list1:\n        if type(item) == list:\n            sublists.append(tuple(item))\n    sublists_dict = {}\n    for sublist in sublists:\n        if sublist in sublists_dict:\n            sublists_dict[sublist] += 1\n        else:\n            sublists_dict[sublist] = 1\n    return sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Define a dictionary to store the unique lists and their occurrences\n    unique_lists = {}\n    \n    # Loop through each list in the input list\n    for item in list1:\n        \n        # Check if the list is already in the dictionary\n        if item not in unique_lists:\n            \n            # If not, add it to the dictionary and set the value to 1\n            unique_lists[item] = 1\n            \n        # If the list is already in the dictionary, increment its value by 1\n        else:\n            unique_lists[item] += 1\n            \n    # Return the dictionary with the unique lists and their occurrences\n    return unique_lists"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def find_combinations_helper(index, current_sum, current_combination, current_list, output):\n        if current_sum == 0 and len(current_list) == 2:\n            output.append(tuple(current_combination))\n        elif current_sum < 0 or (len(current_list) > 0 and current_list[0][0] > current_sum):\n            return\n        else:\n            for i in range(index, len(test_list)):\n                current_list.append(test_list[i])\n                find_combinations_helper(i, current_sum - test_list[i][0], current_combination + [test_list[i][0]], current_list, output)\n                current_list.pop()\n\n    output = []\n    for i in range(len(test_list)):\n        current_list = [test_list[i]]\n        find_combinations_helper(i, test_list[i][0], [test_list[i][0]], current_list, output)\n\n    return output"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total = sum(test_list)\n    for i in range(total+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == total:\n                print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n    # Initialize a list to store the combinations\n    combinations_list = []\n\n    # Iterate over all possible tuples in the given list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            # Find the sum of the two tuples\n            sum_of_tuples = sum(test_list[i][:j])\n\n            # Check if the sum is present in the given list\n            if sum_of_tuples in test_list:\n                # Add the combination to the list of combinations\n                combinations_list.append(test_list[i][:j])\n\n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n\n    # Initialize an empty list to store the combinations\n    result = []\n\n    # Iterate through the tuples in the list\n    for tup in test_list:\n\n        # Find all combinations of the sum of elements in the tuple\n        for combo in combinations(tup, len(tup)):\n\n            # Append the combination to the result list\n            result.append(combo)\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list as input and returns all combinations of sums with tuples in the given list.\n    The function uses the itertools.combinations() function to find all possible combinations of sums with tuples in the list.\n    The function returns the list of combinations.\n    '''\n    total_sum = sum(test_list)\n    all_combinations = []\n    for i in range(1, total_sum + 1):\n        for combination in combinations(test_list, r=i):\n            if sum(combination) == total_sum:\n                all_combinations.append(combination)\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Loop through the tuple list\n    for i in range(len(test_list)):\n        # Loop through the remaining indices in the tuple list\n        for j in range(i+1, len(test_list)):\n            # Check if the current combination sums up to the total sum of all tuples\n            if sum(test_list[i]) + sum(test_list[j]) == sum(test_list):\n                # Append the current combination to the list\n                combinations_list.append(test_list[i], test_list[j])\n\n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # sort the list of tuples\n    test_list.sort()\n\n    # create a list to store the combinations\n    combinations_list = []\n\n    # create a set of tuples for the first element of the list\n    first_element = set(test_list[0])\n\n    # use itertools to generate all combinations of sums with tuples in the set of first elements\n    for combination in combinations(first_element, len(test_list[0])):\n        # create a set of tuples for the current combination\n        current_combination = set(combination)\n\n        # check if the current combination is present in the set of first elements\n        if all(current_combination.issubset(set(test_list[i])) for i in range(len(test_list))):\n            # add the current combination to the combinations list\n            combinations_list.append(tuple(current_combination))\n\n    # sort the combinations list\n    combinations_list.sort()\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    # Create a set of tuples to store unique tuples in the given list\n    unique_tuples = set(tuple(sorted(i)) for i in test_list)\n\n    # Create a list of tuples with unique tuples as elements\n    combinations_list = [(a, b) for a in unique_tuples for b in unique_tuples if a!= b]\n\n    # Combine all the tuples from the original list and the combinations list and store it in a set\n    result = set(tuple(sorted(a + b)) for a in test_list for b in combinations_list)\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            for k in range(j + 1, len(test_list)):\n                if sum(test_list[i]) == sum(test_list[j]) + sum(test_list[k]):\n                    print(tuple(test_list[i]), tuple(test_list[j]), tuple(test_list[k]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if (test_list[i][0], test_list[j][0], test_list[k][0]) in test_list:\n                    result.append((test_list[i], test_list[j], test_list[k]))\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0 \n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            count += 1 \n    if count == 2: \n        return True \n    else: \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    # Calculate the number of divisors of n \n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i!= n / i:\n                divisors.append(i)\n                divisors.append(n / i)\n    # Check the count of divisors is even or not\n    if len(divisors) % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of its divisors is even, else False.\n    The divisors of a number n are all the integers less than or equal to its square root.\n    '''\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    count = 0\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns a tuple containing the count of distinct prime divisors of n.\n    '''\n    divisors = set()\n\n    # Check if n is even\n    if n % 2 == 0:\n        return (1, 0)\n\n    # Iterate from 3 to the square root of n\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # Check if i divides n\n        if n % i == 0:\n            # Add i to the set of divisors\n            divisors.add(i)\n\n            # Check if i+2 also divides n\n            if i+2 <= int(math.sqrt(n)):\n                divisors.add(i+2)\n\n    # Check if n is a prime number\n    if n > 2:\n        divisors.add(n)\n\n    # Return the count of distinct prime divisors\n    return len(divisors), divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if i!= n//i:\n                count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_divisors(n):\n    if n <= 1:\n        return 0\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # calculate number of divisors\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    # check count of divisors is even\n    if len(divisors) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes in an array and returns the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    odd_sum = 0\n\n    for i in range(n):\n        if i == 0 or arr[i] % 2 == 0:\n            count += 1\n            odd_sum += arr[i]\n        else:\n            if count % 2 == 1:\n                odd_sum -= arr[i - 1]\n            count -= 1\n\n    if count % 2 == 1:\n        odd_sum -= arr[n - 1]\n\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j-i+1 % 2 == 1:\n                sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j-i+1%2!=0:\n                subarray = arr[i:j+1]\n                sum += sum(subarray)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n\n    for i in range(1, n):\n        if i % 2 == 1:\n            if arr[i] % 2!= 0:\n                sum += arr[i]\n\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    result = 0\n\n    for i in range(n-1):\n        if arr[i] % 2 == 1 and arr[i+1] % 2 == 1:\n            result += arr[i] + arr[i+1]\n\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (j-i+1)%2!= 0:\n                sub_array = arr[i:j+1]\n                sum += sum(sub_array)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    odd_length = 0\n    sum_odd = 0\n\n    for i in range(n):\n        count += 1\n\n        if count % 2!= 0:\n            if i == 0:\n                odd_length = 1\n            else:\n                odd_length = count - 1\n\n            sum_odd += arr[i] * odd_length\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i+1 % 2 == 1:\n                sub_array = arr[i:j]\n                sum += sum(sub_array)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += arr[j] - arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        if i == 0 or arr[i] % 2!= 0:\n            # check if current element is odd length\n            if i == 0:\n                # if first element then add only one element\n                total += arr[i]\n            else:\n                # if current element is odd length then add previous odd length subarray sum\n                total += arr[i-1]\n        else:\n            # add current element to previous odd length subarray sum\n            total += arr[i]\n    return total"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to HSV\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if cmax == cmin:\n        h = 0\n    else:\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h / 6\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    v = cmax\n\n    # Convert HSV to RGB\n    if s == 0:\n        r, g, b = v, v, v\n    else:\n        if h < 1:\n            f = (v - cmin) / delta\n            p = v\n        else:\n            f = (v - cmin) / delta\n            p = cmax - delta\n        q = v - f * delta\n        t = f\n        if h < 1:\n            r = v\n        elif h < 2:\n            r = q\n        else:\n            r = p\n        if h < 2:\n            g = v\n        elif h < 3:\n            g = p\n        else:\n            g = t\n        if h < 3:\n            b = v\n        else:\n            b = q\n\n    # Convert RGB to HSV values and return them\n    return (r * 255, g * 255, b * 255)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert the RGB values to float\n    r = float(r) / 255\n    g = float(g) / 255\n    b = float(b) / 255\n\n    # Convert the RGB color to its HSV color model\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta = max_rgb - min_rgb\n\n    if max_rgb == min_rgb:\n        h = 0  # achromatic colors\n    else:\n        if max_rgb == r:\n            h = (g - b) / delta\n        elif max_rgb == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6\n\n        if h < 0:\n            h += 1\n\n    if max_rgb == 0:\n        s = 0  # achromatic colors\n    else:\n        s = delta / max_rgb\n\n    v = max_rgb\n\n    # Convert the HSV values to floats and return them as a tuple\n    return (h * 360, s * 100, v * 100)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    h = 0\n    s = 0\n    v = max_val / 255\n\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h *= 60\n    if h < 0:\n        h += 360\n\n    s = delta / (1 - abs(2 * v - 1))\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert r, g, b to float\n    r, g, b = [float(x)/255 for x in [r, g, b]]\n    \n    # Calculate max and min color values\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    \n    # Calculate delta between max and min color values\n    delta = max_color - min_color\n    \n    # Calculate hue\n    if max_color == min_color:\n        h = 0\n    elif r == max_color:\n        h = ((g - b) / delta) % 6\n    elif g == max_color:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    # Calculate saturation and value\n    if max_color == 0:\n        s = 0\n    else:\n        s = delta / max_color\n    \n    if max_color == min_color:\n        v = 0\n    else:\n        v = max_color\n    \n    # Convert hue, saturation, and value to float\n    h, s, v = [float(x) for x in [h, s, v]]\n    \n    # Return the converted values as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    h = 0\n    s = 0\n    v = max_val\n    \n    if delta == 0:\n        h = 0\n        s = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    h *= 60\n    if h < 0:\n        h += 360\n    \n    if s == 0:\n        s = delta / max_val\n    else:\n        s = delta / s\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert an RGB color (red, green, blue) to HSV (hue, saturation, value) color space.\n\n    Parameters\n    ----------\n    r : float\n        The red component of the color in the range [0, 1].\n    g : float\n        The green component of the color in the range [0, 1].\n    b : float\n        The blue component of the color in the range [0, 1].\n\n    Returns\n    -------\n    h : float\n        The hue component of the color in the range [0, 360].\n    s : float\n        The saturation component of the color in the range [0, 1].\n    v : float\n        The value component of the color in the range [0, 1].\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = h * 60\n    if h < 0:\n        h += 360\n    s = delta / (1 - abs(2 * cmax - 1))\n    v = cmax\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSV color space\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    h = 0\n    s = 0\n    v = max_val / 255.0\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = 60.0 * ((g - b) / delta)\n    elif max_val == g:\n        h = 60.0 * ((b - r) / delta + 2.0)\n    else:\n        h = 60.0 * ((r - g) / delta + 4.0)\n    if h < 0:\n        h += 360.0\n    h = int(h)\n    if s == 0:\n        s = delta / 255.0\n    else:\n        s = delta / 255.0 / max_val\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r/255, g/255, b/255\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    h = 0\n    s = 0\n    v = max_value\n    if max_value == min_value:\n        h = 0\n    else:\n        if r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n        if h < 0:\n            h += 360\n        s = delta / max_value\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmin = min(r, g, b)\n    cmax = max(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g-b)/delta) % 6\n    elif cmax == g:\n        h = (b-r)/delta + 2\n    else:\n        h = (r-g)/delta + 4\n    h = h/6\n    if h < 0:\n        h += 1\n    s = delta/cmax\n    v = cmax\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n\n    # Convert R, G, B to float values\n    r = float(r)/255\n    g = float(g)/255\n    b = float(b)/255\n\n    # Convert R, G, B to float values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate Hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60*(g-b)/(max_val-min_val)\n    elif max_val == g:\n        hue = 60*(b-r)/(max_val-min_val) + 120\n    else:\n        hue = 60*(r-g)/(max_val-min_val) + 240\n\n    # Calculate Saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val)/(max_val)\n\n    # Calculate Value\n    value = max_val\n\n    # Convert Hue, Saturation, and Value to int values\n    hue = int(hue)\n    saturation = int(saturation*100)\n    value = int(value*100)\n\n    return hue, saturation, value"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # initialize variables\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    # loop through the list\n    for num in list1:\n        # check if the number is even or odd\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        # multiply the product with the number if it's even\n        if num % 2 == 0:\n            product *= num\n            \n    # return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    if even_count == 0 or odd_count == 0:\n        return None\n    else:\n        return list1[0] * list1[1]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 and odd_count == 0:\n        print(\"List contains only zeroes\")\n    elif even_count == 0:\n        return \"The product of even and odd numbers in the list is:\", odd_count\n    else:\n        return \"The product of even and odd numbers in the list is:\", even_count * odd_count\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for num in list1:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as an input and returns the product of the first even and odd numbers in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i % 2 == 0:\n            count += 1\n        elif i % 2!= 0:\n            count += 1\n    return (count * (count + 1)) // 2"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # initialize variables\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    # loop through the list\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    # return the product of even and odd numbers\n    return even_product * odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    result = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            result *= num\n    \n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        product *= min(even_count, odd_count)\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return even_count * odd_count"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list\n    test_list = list(test_str)\n    # Create an empty integer tuple\n    int_tuple = ()\n    # Loop through the list and append the integer value to the integer tuple\n    for char in test_list:\n        int_tuple += (int(char),)\n    # Return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    return tuple(int(i) for i in test_str.split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by ',' and convert each element to integer\n    test_tuple = tuple(int(i) for i in test_str.split(','))\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # initialize an empty list to hold the integer values\n    int_list = []\n\n    # split the string by commas and convert each part to an integer\n    for part in test_str.split(','):\n        int_list.append(int(part))\n\n    # convert the list to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.split(',')\n    int_tuple = tuple(int(i) for i in tuple_str)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of tuples\n    test_list = test_str.split(\",\")\n    \n    # Convert each tuple in the list to an integer\n    test_tuple = tuple(map(int, test_list))\n    \n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by the delimiter ','\n    str_list = test_str.split(',')\n    \n    # Iterate through the list and convert each element to integer\n    int_list = [int(s) for s in str_list]\n    \n    # Convert the list of integers to tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into individual tuples\n    test_tuple = tuple(test_str.split(','))\n    # Convert each tuple string element to integer\n    int_tuple = tuple(map(int, test_tuple))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    int_tuple = tuple(int(i) for i in test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\" \", \"\").split(\",\"))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert tuple string to list\n    test_list = [int(x) for x in test_str.split(',')]\n    # Convert list to tuple\n    test_tuple = tuple(test_list)\n    return test_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Bisect returns the index where to insert x into a.\n    # We need to find the index where to insert x such that a[i] > x and a[i] <= x.\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        # If x is greater than all elements in a, we need to insert at the end.\n        return len(a)\n    elif a[i] == x:\n        # If x is equal to the element at index i, we need to insert to the right.\n        return i + 1\n    else:\n        # Otherwise, we need to insert to the right of the current element.\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # bisect_right function returns the index where the element should be inserted\n    # to maintain the sorted order of the array.\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x) - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n\n    # Use bisect.bisect_left function to find the insertion point.\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Using bisect to find the right insertion point\n    index = bisect.bisect_right(a, x)\n    # If the value is already present in the array, then index will be the index of the first occurrence of the value\n    if index < len(a) and a[index] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\ba\\bb{3}\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return \"No match found.\""
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a\\1{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=bb)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple_list = []\n    for i in range(len(test_list)):\n        new_tuple_list.append((test_str, test_list[i]))\n    return tuple(new_tuple_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert string to list\n    test_list = list(test_str)\n    # concatenate lists\n    new_list = test_list + test_list\n    # convert list to tuple\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create a list of tuples\n    tuple_list = []\n    for i in range(len(test_list)):\n        # Combine the list item with the string and store as a tuple\n        tuple_list.append((test_list[i], test_str))\n    # Return the new tuple list\n    return tuple_list"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple and concatenate with the string\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for char in test_str:\n        new_list.append(char.upper())\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): A list of values.\n    test_str (str): A string of characters.\n\n    Returns:\n    tuple: A new tuple containing the concatenated values of the list and string.\n    \"\"\"\n\n    # Concatenate the list and string using the join() method\n    new_string = ''.join(str(x) for x in test_list) + test_str\n\n    # Split the concatenated string into a list of characters\n    new_list = [char for char in new_string]\n\n    # Convert the list of characters back to a tuple\n    new_tuple = tuple(new_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(str(i) + test_str for i in test_list)\n    return new_tup"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                break\n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and i % 2 == 0:\n            print(f\"Index {i} contains even number {nums[i]}\")\n        else:\n            print(f\"Index {i} does not contain even number {nums[i]}\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(nums[i]) % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of integers as input and returns a boolean value indicating whether\n    every even index in the list contains even numbers.\n    '''\n    \n    # loop through the list using a for loop\n    for i in range(len(nums)):\n        # check if the current index is even\n        if i % 2 == 0:\n            # if it is, loop through the odd indices and check if there are any even numbers\n            for j in range(1, len(nums), 2):\n                # if there are, return False\n                if nums[j] % 2!= 0:\n                    return False\n    \n    # if no even numbers were found, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                count += 1\n    return count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            for j in range(i+2, len(nums), 2):\n                if nums[j] % 2!= 0:\n                    return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:  # Check if i is even\n            if len(nums[i]) % 2 == 0:  # Check if length of numbers at even index is even\n                continue  # Skip this even index if its length is odd\n            else:\n                return False  # If length of numbers at even index is odd, return False\n        else:\n            if len(nums[i]) % 2!= 0:  # Check if length of numbers at odd index is odd\n                return False  # If length of numbers at odd index is even, return False\n    return True  # If all even indices have even numbers, return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if any(num % 2 == 0 for num in nums[i:]):\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_list.extend(item)\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        for i in range(len(test_tup)):\n            if isinstance(test_tup[i], tuple):\n                remove_nested(test_tup[i])\n                test_tup = test_tup[:i] + test_tup[i+1:]\n                i -= 1\n            elif isinstance(test_tup[i], list):\n                remove_nested(test_tup[i])\n                test_tup = test_tup[:i] + test_tup[i+1:]\n                i -= 1\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # iterate over the elements of the tuple\n    for element in test_tup:\n        # if the element is a tuple, recursively call the function on it\n        if type(element) == tuple:\n            # remove the nested tuple and add the new elements to the list\n            test_tup = test_tup[:test_tup.index(element)] + list(element)\n    # return the updated list without nested tuples\n    return list(set(test_tup))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_list.extend(remove_nested(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                test_list.append(subitem)\n        else:\n            test_list.append(item)\n    return test_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem) == tuple:\n            for sub_elem in elem:\n                new_tup.append(sub_elem)\n        else:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Remove all tuples from the given tuple\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for sub_item in item:\n                flattened_tup.append(sub_item)\n        else:\n            flattened_tup.append(item)\n    return flattened_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return list(filter(lambda x: isinstance(x, tuple), test_tup))\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    This function takes a list of lists as input and returns the number of lists present in the input.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    This function takes in a sorted array and an element x and returns the index of the last occurrence of x.\n    If x is not found in the array, it returns -1.\n    '''\n\n    # Initialize a variable to keep track of the last occurrence of x\n    last_occurrence = -1\n\n    # Iterate through the array using a loop\n    for i in range(len(arr)):\n        # If the current element is equal to x, update the last occurrence variable\n        if arr[i] == x:\n            last_occurrence = i\n\n    # Return the last occurrence of x, or -1 if x was not found in the array\n    return last_occurrence"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n        arr (list): A sorted array.\n        x (int): An element to search for in the array.\n\n    Returns:\n        int: The last position of the element `x` in the array. If the element is not in the array, returns -1.\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last index to -1\n    last_index = -1\n    \n    # Traverse through the array\n    for i in range(len(arr)):\n        # Check if the current element is equal to the target element\n        if arr[i] == x:\n            # If it is, set the last index to the current index\n            last_index = i\n    \n    # Return the last index found\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1 #return -1 if the array is empty\n    else:\n        for i in range(len(arr)):\n            if arr[i] == x:\n                return i\n        return -1 #return -1 if the element is not present in the array"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function takes in a sorted array and an element to find the last position of.\n    It returns the index of the last occurrence of the element in the array.\n    If the element is not found in the array, it returns -1.\n    '''\n    if len(arr) == 0:\n        return -1\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if arr[left]!= x:\n        return -1\n\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Find the first index of the element in the array\n    first = bisect_left(arr, x)\n\n    # If the element is not present in the array, return -1\n    if first == len(arr) or arr[first]!= x:\n        return -1\n\n    # Find the last index of the element in the array\n    last = bisect_right(arr, x) - 1\n\n    # Return the index of the last occurrence of the element\n    return last"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments - an array and a value to search for. It returns the last index of the element in the array if found, otherwise it returns -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the last position of the element x in the array.\n    \"\"\"\n    # Initialize the left and right pointers to the start and end of the array, respectively.\n    left = 0\n    right = len(arr) - 1\n\n    # While the left pointer is less than or equal to the right pointer, perform binary search.\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        # If the element at the mid position is equal to x, return the mid position.\n        if arr[mid] == x:\n            return mid\n\n        # If the element at the mid position is less than x, search the right half of the array.\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # If the element at the mid position is greater than x, search the left half of the array.\n        else:\n            right = mid - 1\n\n    # If the element x is not found in the array, return -1.\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    return pattern.match(text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?=.*a)(?=.*b)[^a]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'^a.*?b$'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = re.compile(r'a.*b')\n    \n    result = pattern.search(text)\n    \n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b$')\n    return pattern.match(text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes a dictionary as input and returns the sum of all its items.\n    '''\n    total_sum = 0\n    for item in dictionary.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum_value = 0\n    for key, value in dict.items():\n        sum_value += value\n    return sum_value"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum_of_odds = 0\n    \n    while l <= r:\n        if l % 2!= 0:\n            sum_of_odds += l\n        l += 1\n    \n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum_of_odd = 0\n    \n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_of_odd += i\n            \n    return sum_of_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(l, r+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n%2 == 0:\n        print(\"Error: n should be an odd number.\")\n        return None\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize sum to 0\n    sum_odd = 0\n    \n    # loop through numbers in the range l to r\n    for i in range(l, r+1, 2):\n        # add the odd numbers to the sum\n        sum_odd += i\n    \n    # return the sum of odd numbers in the range l to r\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    sum = 0\n    for i in range(n, 0, -2): \n        sum += i \n    return sum "
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    \n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # take input from user\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n\n    # initialize sum to zero\n    total = 0\n\n    # loop through odd numbers from l to r\n    for i in range(l, r+1, 2):\n        total += i\n\n    # return total sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter the range of natural numbers: \").split())\n    odd_sum = 0\n    for i in range(l, r+1, 2): \n        odd_sum += i\n    print(\"The sum of all odd natural numbers within the range\", l, \"to\", r, \"is\", odd_sum)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    This function takes an array as input and returns the sum of all its elements.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of the input array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF # 32 bits\n    \n    # Rotate bits left by d bits\n    n = (n << d) & mask\n    n = (n | (n >> (32 - d))) & mask\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    d = d % 32\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert binary to decimal\n    decimal_number = int(n, 2)\n    # Calculate the right shift amount\n    shift_amount = d % 32\n    # Calculate the new decimal number\n    new_decimal_number = (decimal_number << shift_amount) | (decimal_number >> (32 - shift_amount))\n    # Convert the decimal number back to binary\n    binary_number = bin(new_decimal_number)[2:]\n    # Add leading zeros to the binary number if necessary\n    if len(binary_number) < 32:\n        binary_number = '0' * (32 - len(binary_number)) + binary_number\n    # Convert the binary number back to an integer\n    rotated_number = int(binary_number, 2)\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d)) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    if d > 31:\n        d = d % 32\n    \n    # If d is zero or a multiple of 32, return n\n    if d == 0 or d % 32 == 0:\n        return n\n    \n    # Calculate the number of bits to rotate\n    num_bits = 32 - d\n    \n    # Get the first d bits and the last 32-d bits\n    first_bits = n >> d\n    last_bits = n & ((1 << num_bits) - 1)\n    \n    # Rotate the first d bits to the left by d bits\n    rotated_first_bits = first_bits << d\n    \n    # Combine the rotated first d bits with the last d bits\n    rotated_bits = rotated_first_bits | last_bits\n    \n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    # convert the given number to a binary string\n    binary_str = bin(n)[2:]\n\n    # calculate the number of bits to rotate left\n    rotate_bits = d % 32\n\n    # calculate the new value to be shifted\n    new_value = (int(binary_str[rotate_bits:], 2) << rotate_bits) | (int(binary_str[:rotate_bits], 2) & ((1 << rotate_bits) - 1))\n\n    # convert the new value to an integer and return it\n    return new_value"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    return ((n << d) | (n >> (32 - d))) & mask"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a given string.\n    '''\n    # Replace all whitespaces with a single space\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespaces with a single space\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(' +', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        if x == y == z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    # Iterating through all three integers and checking if each pair of numbers are equal\n    for i in range(len(x)):\n        if x[i] == y[i] or y[i] == z[i] or z[i] == x[i]:\n            count += 1\n    # Returning the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x, y+1):\n        for j in range(y, z+1):\n            if i == j:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    print(\"The number of equal numbers from the given three integers are: \", count)\n"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    # iterate through the list of numbers and check if each number is equal to the given integer\n    for i in [x, y, z]:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Count the number of inversions\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += min(arr[i], arr[j]) - arr[i]\n            if arr[j] < arr[i]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize variables to keep track of the number of rotations required\n    rotations = 0\n    # Traverse through the array and check if the array is sorted in increasing order or not\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            # If the array is not sorted in increasing order, we need to perform a rotation\n            rotations += 1\n            # Swap the first element with the last element of the unsorted part of the array\n            temp = arr[i]\n            arr[i] = arr[n-1]\n            arr[n-1] = temp\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize two pointers, start and end, pointing to the beginning of the array\n    start = 0\n    end = n - 1\n    \n    # Initialize a variable to count the number of rotations required\n    count = 0\n    \n    # If the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    \n    # If the array is already reversed, return 0\n    if arr == arr[::-1]:\n        return 0\n    \n    # While the start pointer is less than the end pointer\n    while start < end:\n        \n        # Calculate the midpoint of the array\n        mid = (start + end) // 2\n        \n        # If the midpoint element is greater than the last element of the array, rotate the array\n        if arr[mid] > arr[n-1]:\n            count += 1\n            \n            # Update the start and end pointers\n            start = mid + 1\n            end = n - 1\n        \n        # If the midpoint element is less than the first element of the array, rotate the array\n        elif arr[mid] < arr[0]:\n            count += 1\n            \n            # Update the start and end pointers\n            start = mid + 1\n            end = n - 1\n        \n        # If the midpoint element is equal to the first or last element of the array, do not rotate the array\n        else:\n            start = mid + 1\n            end = n - 1\n    \n    # Return the count of rotations required to generate the sorted array\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    for i in range(n//2):\n        if arr[i] > arr[n-i-1]:\n            return i\n    return n//2"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    max_val = arr[0]\n    min_val = arr[n-1]\n    for i in range(n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        if arr[i] < min_val:\n            min_val = arr[i]\n    if max_val == min_val:\n        return 0\n    if max_val == arr[n-1]:\n        return n\n    if min_val == arr[0]:\n        return n\n    count = 0\n    i = 0\n    j = n-1\n    while i < j:\n        if arr[i] > arr[j]:\n            count += 1\n            i += 1\n        else:\n            j -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize count and maximum rotation count to 0\n    count = 0\n    max_count = 0\n    \n    # Iterate through all possible rotations\n    for i in range(n):\n        # Initialize current rotation count to 0\n        curr_count = 0\n        \n        # Iterate through all possible sub-arrays\n        for j in range(n):\n            # If current element is smaller than the next element\n            if arr[j] < arr[j + 1]:\n                # Increment current rotation count\n                curr_count += 1\n                # Check if current rotation count is greater than maximum rotation count\n                if curr_count > max_count:\n                    max_count = curr_count\n                    \n        # Increment count of rotations required\n        count += max_count\n        \n        # Reset maximum rotation count to 0\n        max_count = 0\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        # if first element is less than or equal to second element, it must be sorted, so no rotation required\n        if arr[i] <= arr[i+1]:\n            continue\n        \n        # first element is greater than second element, so it must be sorted, so no rotation required\n        elif arr[i] > arr[i+1]:\n            continue\n        \n        # if first element is equal to second element, it must be sorted, so no rotation required\n        else:\n            continue\n        \n        # check for rotation\n        for j in range(i+1, n):\n            if arr[j] > arr[j-i-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If the array is already sorted, there is no rotation required.\n    if arr == sorted(arr):\n        return 0\n    \n    # Check if the array is already sorted in reverse order.\n    if arr == sorted(arr, reverse=True):\n        return n\n    \n    # Initialize variables for the left and right pointers.\n    left = 0\n    right = n - 1\n    \n    # Initialize variables for the count of rotations.\n    count = 0\n    \n    # Move the left pointer to the right until the left pointer reaches the middle of the array.\n    while left < right:\n        mid = (left + right) // 2\n        \n        # If the mid element is greater than the rightmost element, there is a rotation.\n        if arr[mid] > arr[right]:\n            count += right - mid\n            left = mid + 1\n        else:\n            right = mid\n            \n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    if n < 0:\n        return False\n    a = 0\n    b = n\n    while a <= b:\n        c = (a + b) // 2\n        if c * c == n:\n            return True\n        elif c * c < n:\n            a = c + 1\n        else:\n            b = c - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # If the number is less than 2, it is not a perfect square\n    if n < 2:\n        return False\n\n    # Find the square root of n\n    square_root = n ** 0.5\n\n    # If the square root is an integer, it is a perfect square\n    if square_root.is_integer():\n        return True\n\n    # If the square root is not an integer, it is not a perfect square\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Square root of n\n    sqrt_n = int(n ** 0.5)\n    # Check if n is a perfect square or not\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # check if n is a perfect square or not\n    for i in range(int(n**0.5)+1):\n        if n%i**2 == 0:\n            return True\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a perfect square, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    sqrt_n = int(n**0.5) + 1\n    for i in range(2, sqrt_n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Initialize a variable to store the square root\n    sqrt_n = 0\n\n    # Calculate the square root of n\n    while n > 0:\n        n = n / 2\n        sqrt_n = sqrt_n + 1\n\n    # Check if the square root of n is an integer\n    if sqrt_n == int(sqrt_n):\n        # Check if n is a perfect square\n        if n * n == 2 * n:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # loop from 1 to n/2\n    for i in range(1, int(n/2)+1):\n        # check if i^2 is equal to n\n        if i*i == n:\n            return True\n        # check if i^2 is greater than n\n        elif i*i > n:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # check for non-positive integers\n    if n <= 0:\n        return False\n    # check for special cases\n    if n == 1:\n        return True\n    if n == 4:\n        return True\n    # use the trial division method to check for perfect squares\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize a variable to store the product of the numbers in the list\n    product = 1\n\n    # Iterate through the list and multiply each number by the product variable\n    for num in arr:\n        product *= num\n\n    # Check if the product is even or not by checking if the remainder of dividing the product by 2 is 0\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers is even\")\n    else:\n        print(\"The product of the numbers is odd\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        total_sum = 0\n        for j in range(len(lists[i])):\n            total_sum += lists[i][j]\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = [lists[i]]\n        elif total_sum == max_sum:\n            max_list.append(lists[i])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize maximum sum and list with first element of each list in lists\n    max_sum = 0\n    max_list = []\n\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    # Create a set to store the sums of lists\n    sums = set()\n    # Iterate over each list in the input list of lists\n    for list in lists:\n        # Calculate the sum of the elements in the list\n        total = sum(list)\n        # Add the sum to the set of sums\n        sums.add(total)\n    # Find the maximum sum in the set of sums\n    max_sum = max(sums)\n    # Create a list of lists to store the indices of the lists with the maximum sum\n    max_indices = []\n    # Iterate over each sum in the set of sums\n    for total in sums:\n        # If the sum is the maximum, add the index of the corresponding list to the list of indices\n        if total == max_sum:\n            max_indices.append(lists.index(lists[sums.index(total)]))\n    # Return the list of lists with the maximum sum\n    return [lists[i] for i in max_indices]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    \n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = None\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = lists[i]\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        curr_sum = sum(lst)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return None\n    max_sum = sum(lists[0])\n    best_list = lists[0]\n    for i in range(1, len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            best_list = lists[i]\n    return best_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    start = 0\n    end = 0\n    max_run = 0\n    current_run = 0\n    uppercase = False\n    \n    # loop through the string\n    for i in range(len(test_str)):\n        # check if the current character is uppercase\n        if test_str[i].isupper():\n            # if it is, increase the current run\n            current_run += 1\n        else:\n            # if not, update the max run if necessary\n            if current_run > max_run:\n                max_run = current_run\n            # reset the current run\n            current_run = 0\n            # reset the start and end index\n            start = end = i\n        # update the end index\n        end = i\n    \n    # update the max run if necessary\n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables to store the start and end indices of the current run of uppercase characters\n    start = 0\n    end = 0\n    \n    # Iterate through the string\n    for i in range(1, len(test_str)):\n        # If the current character is uppercase and the previous character was not uppercase,\n        # update the start and end indices of the current run\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            start = i\n            end = i\n        # If the current character is not uppercase and the previous character was uppercase,\n        # update the end index of the current run\n        elif not test_str[i].isupper() and test_str[i-1].isupper():\n            end = i\n    \n    # Return the maximum run of uppercase characters found in the string\n    return test_str[start:end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    current_char = None\n    \n    # Iterate through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run counter\n        if char.isupper():\n            current_run += 1\n        # If the character is not uppercase and the current run counter is greater than the maximum run counter, update the maximum run counter\n        elif current_run > max_run:\n            max_run = current_run\n            current_char = char\n        # Reset the current run counter to 0 if the character is not uppercase\n        else:\n            current_run = 0\n    \n    # If the last character was uppercase, add it to the maximum run counter\n    if current_char and current_run > max_run:\n        max_run += 1\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    current_char = ''\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run count\n        if char.isupper():\n            current_run += 1\n        # If the character is not uppercase and the current run count is greater than the previous max_run count,\n        # update max_run and current_run\n        elif current_run > max_run:\n            max_run = current_run\n            current_run = 0\n        # Reset current_run to 0 if the character is lowercase\n        else:\n            current_run = 0\n        # If the character is a lowercase letter, update the current character\n        if char.islower():\n            current_char = char\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    current_char = test_str[0]\n\n    # loop through the string\n    for i in range(1, len(test_str)):\n        # if the current character is uppercase\n        if test_str[i].isupper():\n            # if the current run is greater than the maximum run so far\n            if current_run > max_run:\n                # update the maximum run and current run\n                max_run = current_run\n                current_run = 1\n            else:\n                # otherwise, increment the current run\n                current_run += 1\n        # if the current character is not uppercase\n        else:\n            # reset the current run to 0\n            current_run = 0\n\n    # if the last character was uppercase\n    if test_str[-1].isupper():\n        # update the maximum run with the last run\n        max_run = current_run\n\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 0\n    prev_char =''\n    max_run = 0\n    for char in test_str:\n        if char.isupper():\n            if prev_char.islower():\n                run += 1\n                if run > max_run:\n                    max_run = run\n            else:\n                run = 1\n            prev_char = char\n    if prev_char.isupper() and prev_char.islower():\n        run += 1\n        if run > max_run:\n            max_run = run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables\n    max_run = 0\n    run_length = 0\n    \n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase\n        if test_str[i].isupper():\n            # If the run length is greater than the current max run\n            if run_length > max_run:\n                # Update the max run\n                max_run = run_length\n            # Reset the run length\n            run_length = 0\n        # If the current character is not uppercase\n        else:\n            # Increment the run length\n            run_length += 1\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    run = 0\n    for char in test_str:\n        if char.isupper():\n            run += 1\n            if run > max_run:\n                max_run = run\n        else:\n            run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    start = 0\n    end = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if end == 0:\n                start = i\n            end = i\n        else:\n            if end!= 0:\n                max_run = max(max_run, end - start + 1)\n                start = i\n                end = 0\n    if end!= 0:\n        max_run = max(max_run, end - start + 1)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    current_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 1\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:  # checks if number is odd\n            return num\n    return None  # if no odd number found"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    # Initialize a variable to store the first odd number found\n    first_odd = None\n    \n    # Loop through the list of numbers\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If the number is odd, check if it's the first odd number\n            if first_odd is None:\n                first_odd = num\n            # If it's not the first odd number, update the first_odd variable\n            else:\n                return first_odd\n    \n    # If no odd number was found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # Initialize the first odd number to be None\n    first_odd_num = None\n\n    # Loop through the list of numbers\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If it is, update the first odd number to be the current number\n            first_odd_num = num\n            # Break out of the loop since we've found the first odd number\n            break\n\n    # Return the first odd number\n    return first_odd_num"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for num in test_tup:\n        if num in K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count >= 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) >= len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        for i in range(K):\n            if i == K-1:\n                return True\n            elif test_tup[i] == K:\n                return False\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Check if the given tuples contain the k or not.\n\n    Parameters:\n    test_tup (tuple): a tuple of integers\n    K (integer): a positive integer\n\n    Returns:\n    bool: True if the given tuple contains the k, False otherwise\n    '''\n    if all(i in test_tup for i in K):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup) & set(K)) == len(K):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple and a value K as input. \n    It checks if the tuple contains the value K.\n    If K is present in the tuple, it returns True, otherwise it returns False.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == K:\n        print(\"The tuples contain K\")\n    else:\n        print(\"The tuples do not contain K\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths\")\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The element at index {} of the first tuple is greater than the element at the same index in the second tuple\".format(i))\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    # loop through the tuples to compare the elements\n    for i in range(len(test_tup1)):\n        # check if the element in test_tup2 is smaller than the element in test_tup1\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    # if we make it through the loop without returning False, it means all the elements in test_tup2 are smaller than their corresponding elements in test_tup1\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Error: The element in the second tuple is greater than its corresponding element in the first tuple.\")\n            return\n    print(\"Both tuples are smaller or equal.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must have the same length.\"\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Loop through both tuples\n    for i in range(len(test_tup1)):\n        # If first tuple element is greater than second tuple element, return False\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    # If no False values are returned, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"{test_tup1[i]} is larger than {test_tup2[i]}.\")\n            return\n\n    print(\"All elements in the second tuple are smaller than or equal to their corresponding elements in the first tuple.\")"
    }
]