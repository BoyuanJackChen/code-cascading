[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    # compare the elements of the two tuples\n    for element in test_tup1:\n        if element in test_tup2:\n            # if the element is present in both tuples, add it to the list of shared elements\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2 and item not in shared_elements:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of elements that are present in both tuples.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Find the intersection of the two lists\n    intersection = list(set(test_tup1) & set(test_tup2))\n\n    # Sort the intersection list in ascending order\n    intersection.sort()\n\n    return intersection"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of common elements\n    in the two tuples.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_list.append(elem)\n    return shared_list"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is not a prime number, otherwise False.\n    \"\"\"\n\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Check if the input is a prime number\n    if n == 2:\n        return False\n\n    # Check if the input is a prime number using the Sieve of Eratosthenes algorithm\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n + 1, i):\n                is_prime[j] = False\n\n    for i in range(2, n + 1):\n        if is_prime[i]:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n and returns True if it is not a prime number, otherwise False.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap from the list of numbers\n    max_heap = nums\n\n    # pop the n largest elements from the heap\n    for _ in range(n):\n        hq.heappop(max_heap)\n\n    # return the largest elements in descending order\n    return [hq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    hq.heapify(heap)\n    \n    for num in nums:\n        hq.heappush(heap,-num)\n        \n        if len(heap) > n:\n            hq.heappop(heap)\n    \n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    hq.heapify(max_heap)\n    \n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    \n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a max heap\n    hq.heapify(nums)\n    # Remove all the elements from the heap\n    for i in range(n):\n        hq.heappop(nums)\n    # Convert the heap back to a list and return it\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    heap = [(-num, i) for i, num in enumerate(nums)]\n    hq.heapify(heap)\n\n    # Remove the smallest n elements from the heap and append them to a list\n    result = []\n    for _ in range(n):\n        value, _ = hq.heappop(heap)\n        result.append(value)\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max-heap from the first n elements of the input list\n    max_heap = nums[:n]\n    hq.heapify(max_heap)\n    \n    # Iterate through the remaining elements of the input list\n    for i in range(n, len(nums)):\n        # If the current element is larger than the root of the heap, replace it\n        if nums[i] > max_heap[0]:\n            max_heap[0] = nums[i]\n            hq.heapify(max_heap)\n    \n    # Return the largest n elements of the heap in descending order\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a max heap\n    heap = hq.nlargest(n, nums)\n    # Convert the max heap to a list\n    return list(heap)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 1: \n        if x % 2 == 0: \n            x //= 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # if x is a power of 2, x & (x-1) will be 0 \n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1:\n        if x & 1 == 1:\n            return False\n        x = x >> 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0: # check if x is a power of 2\n        x &= (x-1) # if x is not a power of 2, remove the last set bit from x and check again\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        print(\"The two numbers differ at one bit position only.\")\n    else:\n        print(\"The two numbers do not differ at one bit position only.\")\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    This function finds all words that are at least 4 characters long in a string.\n    \"\"\"\n    # Find all words that are at least 4 characters long\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    \n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b')\n    matches = pattern.findall(text)\n    words = [match.lower() for match in matches]\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    \n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    \n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Using regular expressions to find all words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to match all words with at least 4 characters\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_num = num ** 2\n        squared_nums.append(squared_num)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Find the maximum frequency of a character in the string\n    max_freq = max(char_freq.values())\n\n    # Count the number of characters with frequency equal to the maximum frequency\n    count = sum([1 for freq in char_freq.values() if freq == max_freq])\n\n    # If the number of characters with frequency equal to the maximum frequency is the same as the length of the string, then there is no rotation required.\n    if count == len(str):\n        return 0\n    \n    # Find the minimum number of rotations required to get the string with maximum frequency.\n    min_rot = 0\n    while True:\n        # Check if the string with the rotated frequency is the same as the original string.\n        rotated_str = \"\"\n        for char, freq in char_freq.items():\n            rotated_str += char * (freq - 1)\n            rotated_str += char\n        if rotated_str == str:\n            break\n        # If the string with the rotated frequency is not the same as the original string, then increment the minimum number of rotations required.\n        min_rot += 1\n\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    # Initialize variables\n    n = len(str)\n    if n == 1:\n        return 0\n\n    # Initialize a list to store the frequency of each character\n    freq = [0] * 26\n\n    # Count the frequency of each character\n    for char in str:\n        freq[ord(char) - ord('a')] += 1\n\n    # Find the minimum difference between the frequency of each character\n    min_diff = n\n    for i in range(n):\n        diff = abs(freq[i] - freq[(i + 1) % 26])\n        if diff < min_diff:\n            min_diff = diff\n\n    # Find the minimum number of rotations required to get the same string\n    rotations = 0\n    for i in range(26):\n        if freq[i]!= n and freq[i] + freq[(i + 1) % 26] == n:\n            rotations += 1\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n\n    # Initialize the minimum number of rotations to infinity\n    minRot = float('inf')\n\n    # Initialize the left and right indices of the string\n    left = 0\n    right = len(str) - 1\n\n    # Loop until left and right indices cross each other\n    while left < right:\n        # Find the middle index of the string\n        mid = (left + right) // 2\n\n        # Find the rotation of the string by reversing the first half and appending the second half\n        rev_str = str[:mid] + str[mid:]\n\n        # Compare the original string with the reversed string\n        if rev_str == str:\n            # If the reversed string is equal to the original string, update the minimum number of rotations\n            minRot = min(minRot, mid)\n            # Move the left index to the middle index of the reversed string\n            left = mid\n        else:\n            # If the reversed string is not equal to the original string, move the right index to the middle index of the original string\n            right = mid\n\n    # Return the minimum number of rotations\n    return minRot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    \n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n            \n    # find the maximum frequency and its corresponding character\n    max_freq = max(freq.values())\n    max_char = [k for k, v in freq.items() if v == max_freq][0]\n    \n    # create a new string by swapping the maximum frequency character with all its occurrences\n    new_str = ''\n    for char in str:\n        if char == max_char:\n            for i in range(freq[max_char]):\n                new_str += char\n        else:\n            new_str += char\n    \n    # count the number of rotations required to get the new string from the original string\n    rotations = 0\n    while new_str!= str:\n        rotations += 1\n        str = new_str\n        new_str = ''\n        for char in str:\n            if char == max_char:\n                for i in range(freq[max_char]):\n                    new_str += char\n            else:\n                new_str += char\n    \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                min_rotations = min(min_rotations, j-i+1)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    # Convert the string to lowercase to avoid case sensitivity\n    str = str.lower()\n    # Calculate the length of the string\n    length = len(str)\n    # Initialize two pointers to the start of the string\n    i = 0\n    j = length-1\n    # Initialize the minimum number of rotations\n    minRotations = 0\n    # Loop until the two pointers meet\n    while i < j:\n        # If the characters at the two pointers are the same, increment the minimum rotations\n        if str[i] == str[j]:\n            minRotations += 1\n            # Increment both pointers\n            i += 1\n            j -= 1\n        # If the characters at the two pointers are not the same, move the pointer with the smaller character\n        elif str[i] < str[j]:\n            i += 1\n        else:\n            j -= 1\n    # Return the minimum number of rotations\n    return minRotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    for i in range(n): \n        if str[i]!= str[(n-1)-i]: \n            return 1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    # initialize a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # initialize a list to store the sorted keys of the frequency dictionary\n    sorted_freq = sorted(freq.keys())\n\n    # initialize the count of rotations to zero\n    count = 0\n\n    # loop through each key of the sorted frequency dictionary\n    for i in range(len(sorted_freq)):\n        # loop through each key of the sorted frequency dictionary again\n        for j in range(i+1, len(sorted_freq)):\n            # check if the frequency of the current and next keys is equal\n            if freq[sorted_freq[i]] == freq[sorted_freq[j]]:\n                # if so, increment the count of rotations by 1\n                count += 1\n\n    # return the count of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    # Initialize the minimum number of rotations as infinity\n    min_rot = float('inf')\n\n    # Loop through all possible rotations\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            # Find the common suffix of the two substrings\n            common_suffix = str[j]\n            while j < len(str) - 1 and str[j+1] == common_suffix:\n                common_suffix += str[j+1]\n                j += 1\n            # Update the minimum number of rotations if the common suffix is longer than the current minimum\n            if len(common_suffix) > min_rot:\n                min_rot = len(common_suffix)\n\n    # Return the minimum number of rotations required\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    max_rotations = 0\n\n    for i in range(n):\n        left = (i - 1 + n) % n\n        right = (i + 1) % n\n\n        if str[left]!= str[i]:\n            count += 1\n            max_rotations = max(max_rotations, count)\n            count = 0\n\n    return max_rotations\n"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] == ch:\n            del s[i]\n            i -= 1\n        elif s[j] == ch:\n            del s[j]\n            j += 1\n        else:\n            i += 1\n            j -= 1\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return \"Character not present in the string\"\n    if len(s) == 1:\n        return \"String contains only one character\"\n    s = list(s)\n    s.remove(ch)\n    s.remove(ch)\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    s = list(s)\n    s.remove(ch)\n    if ch in s:\n        s.remove(ch)\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return \"\"\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s[0] + remove_Occ(s[1:-1], ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    if ch not in s:\n        return \"Character not found in the string.\"\n    \n    # remove first occurrence of character\n    s = s.replace(ch,'',1)\n    \n    # remove last occurrence of character\n    s = s.replace(ch,'',-1)\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    index = s.index(ch)\n    s.pop(index)\n    index = s.index(ch)\n    s.pop(index)\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) < 2:\n        return s\n    elif s[0] == ch:\n        return s[1:]\n    elif s[-1] == ch:\n        return s[:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into list of characters\n    lst = list(s)\n    # Remove the first occurrence of the character\n    if lst[0] == ch:\n        lst.pop(0)\n    # Remove the last occurrence of the character\n    if lst[-1] == ch:\n        lst.pop()\n    # Convert list of characters to string\n    s = ''.join(lst)\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    # Calculate the sum of each row in the matrix\n    sums = [sum(row) for row in M]\n    # Sort the rows in ascending order based on the sums\n    sorted_rows = sorted(M, key=lambda x: sums[M.index(x)])\n    # Return the sorted matrix\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    rows = len(M)\n    cols = len(M[0])\n\n    for i in range(rows):\n        for j in range(cols - 1):\n            for k in range(j + 1, cols):\n                if M[i][j] + M[i][k] > M[i][j + 1] + M[i][k + 1]:\n                    M[i][j], M[i][k] = M[i][k], M[i][j]\n                    M[i][j + 1], M[i][k + 1] = M[i][k + 1], M[i][j + 1]\n\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a dictionary to store the sum of each row as the key and the row indices as the value\n    row_sums = {}\n    for i in range(len(M)):\n        row_sums[sum(M[i])] = i\n    \n    # Sort the rows based on their sums\n    sorted_rows = sorted(M, key=lambda x: sum(x))\n    \n    # Use the sorted row indices to reconstruct the original matrix\n    sorted_matrix = []\n    for i in range(len(sorted_rows)):\n        sorted_matrix.append(sorted_rows[i])\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    # Calculate the sum of each row\n    rows = [sum(row) for row in M]\n    # Sort the rows in ascending order\n    sorted_rows = sorted(rows)\n    # Create a new matrix with the sorted rows\n    sorted_M = [[sorted_rows[i] for i in range(len(sorted_rows)) if j == i] for j in range(len(sorted_rows))]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # Sort each row of the matrix in ascending order\n    for i in range(n):\n        M[i].sort()\n    # Sort the matrix in ascending order based on the sum of its rows\n    M.sort(key=lambda x: sum(x))\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # Traverse each row of the matrix\n    for i in range(n):\n        # Initialize variables to keep track of the minimum and maximum sum\n        min_sum = M[i][i]\n        max_sum = M[i][i]\n        # Traverse each element of the row and update the minimum and maximum sum\n        for j in range(i+1, n):\n            min_sum = min(min_sum, M[i][j])\n            max_sum = max(max_sum, M[i][j])\n        # Traverse each row again and swap the minimum and maximum sum elements\n        for j in range(n):\n            if j < i:\n                M[i][j], M[j][i] = M[j][i], M[i][j]\n            else:\n                M[i][j], M[j][i] = M[i][j], M[j][i]\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # Use a heap to sort the rows of the matrix in ascending order\n    for i in range(n):\n        # Initialize a min heap of size n-i\n        heap = [(0, M[i])]\n        # Iterate over the remaining rows of the matrix\n        for j in range(i+1, n):\n            # Add the sum of the row and the current element to the heap\n            heapq.heappush(heap, (heapq.heappushpop(heap)[0] + j, M[j][i]))\n        # Extract the minimum element from the heap and assign it to the current row\n        for j in range(i+1):\n            M[i][j], M[j][i] = M[j][i], M[i][j]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j+1][i]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # find the sum of the i-th row\n        row_sum = sum(M[i])\n        # find the maximum element in the i-th row\n        max_element = M[i][0]\n        # find the index of the maximum element in the i-th row\n        max_index = 0\n        for j in range(1, len(M[i])):\n            if M[i][j] > max_element:\n                max_element = M[i][j]\n                max_index = j\n        # swap the maximum element with the last element of the i-th row\n        M[i][max_index], M[i][len(M[i])-1] = M[i][len(M[i])-1], M[i][max_index]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the rows in ascending order\n    sorted_rows = sorted(M, key=lambda row: row_sums.index(sum(row)))\n    \n    # Return the sorted matrix\n    return sorted_rows"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 1/3 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length of each side of a triangular prism and returns its volume.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, width and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    V = (l * b * h) / 3\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n\n    # Calculate the volume of the prism using Heron's formula\n    volume = 0.5 * l * b * h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function takes three parameters: the length of the base, the height of the prism, and the length of the side.\n    The function calculates the area of the prism and then returns its volume.\n    '''\n    area = 0.5*l*b # calculate the area of the prism\n    volume = area*h # calculate the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5*l*b*h # Formula for volume of a triangular prism\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])(_+[a-z]+)*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=[a-z])(?=[A-Z])[a-z]+_'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+[_]+[a-z]+)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]*_[a-z]*\\b'\n    matches = re.findall(pattern, text.lower())\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+[_a-z]*$'\n    return re.match(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define the regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = re.compile(r'(?<![_a-zA-Z])[a-z]+(?![_a-zA-Z])_')\n    # Check if the input string matches the pattern\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z])([A-Z])'\n    result = re.findall(pattern, text)\n    if len(result) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text.lower())\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = list(range(NO_OF_CHARS))\n    list_of_chars_set = set(list_of_chars)\n    \n    string_set = set(string)\n    list_of_chars = list(set(list_of_chars) - string_set)\n    \n    return ''.join(chr(char) for char in list_of_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    result = []\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            result.append(chr(i))\n    return ''.join(result)\n\ndef remove_chars(string1, string2):\n    '''\n    This function takes two strings as input and removes the characters from the first string which are present in the second string.\n    '''\n    return str_to_list(string1)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    set1 = set(string)\n    set2 = set(string[::-1])\n    \n    set1.intersection_update(set2)\n    \n    return ''.join(chr(i) for i in set1)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two strings as input, string1 and string2. It removes the characters present in string2 from string1 and returns the result.\n    \"\"\"\n    # Create an empty list to store the result\n    result = []\n    # Iterate over each character of string1\n    for char in string1:\n        # If the character is not present in string2, add it to the result list\n        if char not in string2:\n            result.append(char)\n    # Convert the result list to a string and return it\n    return ''.join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    list_string = []\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            list_string.append(chr(i))\n    return ''.join(list_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Create a set of characters to check if they are present in the first string\n    set_of_chars = set(string)\n\n    # Create a set of characters to remove from the first string\n    set_of_to_remove = set(string[0])\n\n    # Remove the characters present in the second string from the first string\n    for char in set_of_to_remove:\n        string = string.replace(char, '')\n\n    # Return the modified string\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the string to a list of characters\n    string_list = list(string)\n\n    # Create a set of characters to remove from the first string\n    remove_set = set(string_list)\n\n    # Remove the characters from the first string which are in the remove_set\n    for char in remove_set:\n        string_list.remove(char)\n\n    # Convert the list back to a string and return it\n    return \"\".join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert string to list of integers\n    list_str = [ord(char) for char in string]\n\n    # Remove the characters present in the second string from the first string\n    for char in list_str:\n        if char in NO_OF_CHARS:\n            list_str.remove(char)\n\n    # Convert the list of integers back to string\n    list_str = [chr(char) for char in list_str]\n    string = ''.join(list_str)\n\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    string_list = list(string)\n    for i in range(len(string_list)):\n        if string_list[i] in string:\n            string_list.pop(i)\n            i -= 1\n    return ''.join(string_list)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique numbers\n    unique_nums = set()\n    \n    # Loop through the array and add each unique number to the set\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    \n    # Check if the set has more than one element (if it has duplicates)\n    if len(unique_nums) > 1:\n        print(\"The array contains duplicate elements.\")\n    else:\n        print(\"The array does not contain duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a set to store unique numbers\n    unique_nums = set()\n\n    # Loop through each element in the array\n    for num in arraynums:\n        # If the number is already in the set, the array contains a duplicate\n        if num in unique_nums:\n            return True\n        # Otherwise, add the number to the set\n        else:\n            unique_nums.add(num)\n\n    # If all elements have been checked without finding duplicates, the array does not contain duplicates\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create an empty dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Iterate through the array and update the count of each element in the dictionary\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Iterate through the dictionary and return True if any count is greater than 1, otherwise return False\n    for count in count_dict.values():\n        if count > 1:\n            return True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_elements = set(arraynums)\n    if len(unique_elements) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # initialize an empty set to store unique elements\n    unique_set = set()\n    # loop through the array of integers\n    for num in arraynums:\n        # if the current element is not already in the set, add it to the set\n        if num not in unique_set:\n            unique_set.add(num)\n        # if the current element is already in the set, return True\n        else:\n            return True\n    # if no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    return x % 2 == 0"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Using Woodall's Conjecture\n    if x**2 + 12*x + 48 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: \n        return \"Woodall\"\n    else:\n        return \"Not Woodall\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    This function takes a number as input and returns True if it's a woodball, False otherwise.\n    '''\n    # Create a list of all possible combinations of three digits\n    combinations = [\n        (x // 100) * 1000,\n        (x // 100) * 100,\n        (x // 100) * 10,\n        (x // 100) * 1,\n        (x // 10) * 100,\n        (x // 10) * 10,\n        (x // 10) * 1,\n        (x // 1) * 100,\n        (x // 1) * 10,\n        (x // 1) * 1,\n    ]\n    \n    # Check if the number is in any of the combinations\n    for comb in combinations:\n        if x == comb:\n            return True\n    \n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    digits = list(str(x))  # convert the number to a list of digits\n    even_digits = [int(digit) for digit in digits if int(digit) % 2 == 0]  # filter the even digits from the list\n    \n    if len(even_digits) == len(digits):  # check if the length of even_digits is equal to the length of digits\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Checks if a number is a woodball or not.\n\n    Args:\n        x: An integer representing the number to be checked.\n\n    Returns:\n        A boolean indicating whether the given number is a woodball or not.\n    \"\"\"\n    return x % 2 == 1"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 7 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define the set of allowed values for a woodball number\n    woodball_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n\n    # Check if x is in the set of allowed values for a woodball number\n    return x in woodball_values"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    reverse_num_str = num_str[::-1]\n    reverse_num = int(reverse_num_str)\n    reverse_num_two = reverse_num * 2\n    if num < reverse_num_two:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n    # Calculate the reverse of the reversed number\n    rev_num = int(num_str)\n    # Calculate the difference between the original number and the reversed number\n    diff = abs(num - rev_num)\n    # Check if the difference is one less than twice the reverse\n    if diff <= 2 * rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    return num == reversed_num * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number to a string\n    num_str = str(num)\n\n    # Initialize the reverse string as an empty string\n    reverse_str = \"\"\n\n    # Loop through each character in the number string and append it to the reverse string\n    for i in range(len(num_str)-1, -1, -1):\n        reverse_str += num_str[i]\n\n    # Convert the reverse string to an integer\n    reverse_int = int(reverse_str)\n\n    # Check if the reversed number is one less than twice the original number\n    if reverse_int >= 2*num:\n        print(num, \"is not one less than twice its reverse.\")\n    else:\n        print(num, \"is one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    \n    # Calculate the reverse of the reverse of the number\n    rev_rev_num = str(int(rev_num) + int(rev_num))\n    \n    # Check if the reversed number is one less than twice its reverse\n    if int(rev_rev_num) < 2 * int(rev_num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Calculate the reverse of the given number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    # Check if the reverse is one less than twice the original number\n    return (reverse + 1) == (num + num) * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(num)\n    # reverse the string and convert it back to an integer\n    reverse = int(num_str[::-1])\n    # check if the original number is one less than twice its reverse\n    if num == reverse - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return 1 if (rev_num+1) % 2 == 0 else 0"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Reverse the number\n    rev_str = num_str[::-1]\n    \n    # Convert the reversed number back to an integer\n    rev_int = int(rev_str)\n    \n    # Check if the reversed number is one less than twice the original number\n    if rev_int == num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the given number to a string and then to a list of digits\n    num_str = str(num)\n    num_list = list(num_str)\n\n    # Reverse the list of digits and convert it back to a string\n    num_list.reverse()\n    num_str = ''.join(num_list)\n\n    # Convert the reversed number to an integer and check if it's one less than twice its reverse\n    reversed_num = int(num_str)\n    if reversed_num == (2 * reversed_num) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)  # Sort the list in descending order\n    max_num = 0\n    for i in range(len(arr)):\n        temp = 0\n        for j in range(len(arr[i])):\n            temp += arr[i][j] * (10**(len(arr[i]) - 1 - j))\n        max_num = max(max_num, temp)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes in a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    '''\n    # initialize variables to hold the current number and the sum of digits\n    current_num = 0\n    sum_of_digits = 0\n    \n    # iterate through the list of digits\n    for num in arr:\n        # add each digit to the current number\n        current_num += int(num)\n        \n        # add the current number to the sum of digits\n        sum_of_digits += current_num\n        \n        # if the sum of digits exceeds the current number, update the current number\n        if sum_of_digits > current_num:\n            current_num = sum_of_digits\n            sum_of_digits = 0\n    \n    # return the current number\n    return current_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    # Define a function to check if a given number can be formed from the given digits\n    def is_valid(num):\n        # Convert the number to a string and split it into digits\n        num_str = str(num)\n        digits = [int(digit) for digit in num_str]\n\n        # Check if the digits are in the correct order\n        for i in range(len(digits)):\n            if digits[i] < digits[i+1]:\n                return False\n\n        return True\n\n    # Find the maximum valid number that can be formed from the given digits\n    max_num = -1\n    for num in arr:\n        if is_valid(num):\n            max_num = max(max_num, num)\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    arr.sort()\n    max_num = arr[0] * 10**(len(arr)-1)\n    for i in range(1, len(arr)):\n        max_num += arr[i] * 10**(len(arr)-i-1)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in arr:\n        max_num += i\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with these digits.\n    '''\n    # Sort the list in ascending order\n    arr.sort()\n    # Initialize the maximum number to be formed with the first digit\n    max_num = arr[0]\n    # Traverse through the list from the second digit to the end\n    for i in range(1, len(arr)):\n        # Find the maximum number that can be formed with the digits till the i-th digit\n        max_num = max(max_num + arr[i], max_num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] ** i\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        max_num += (10 ** i) * arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    max_num = 0\n    max_len = 0\n    for num in arr : \n        if len(str(num)) > max_len : \n            max_num = num\n            max_len = len(str(num))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the list of digits in descending order\n    arr.sort(reverse=True)\n    # initialize the maximum number as the first element of the sorted list\n    max_num = arr[0]\n    # loop through the sorted list and add each digit to the maximum number until the maximum number becomes 0\n    while max_num > 0:\n        # add the last digit of the maximum number to the maximum number\n        max_num += arr[-1]\n        # remove the last digit of the maximum number from the list\n        arr.pop()\n    # return the maximum number\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if both numbers have opposite signs\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers x and y as input and checks whether they have opposite signs or not.\n    The function returns True if they have opposite signs and False otherwise.\n    '''\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign and False otherwise.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        print(\"The two integers have opposite signs.\")\n    else:\n        print(\"The two integers have the same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Check whether two integers have opposite signs or not.\n\n    Parameters:\n    x (int): First integer.\n    y (int): Second integer.\n\n    Returns:\n    bool: True if the signs are opposite, False otherwise.\n\n    \"\"\"\n\n    # check if both integers are positive or both negative\n    if x >= 0!= y >= 0:\n        return False\n    # check if the signs are opposite\n    elif x >= 0!= y < 0 or x < 0!= y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Checks whether the given two integers have opposite sign or not.\n\n    Parameters:\n    x: int\n        The first integer to be compared.\n    y: int\n        The second integer to be compared.\n\n    Returns:\n    bool\n        True if x and y have opposite signs, False otherwise.\n    \"\"\"\n    return x*y < 0"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n\n    Args:\n    x (int): first integer.\n    y (int): second integer.\n\n    Returns:\n    str: \"Both have same sign\" or \"Both have opposite sign\"\n    \"\"\"\n\n    if x == y:\n        return \"Both have same sign\"\n    elif x > y:\n        return \"Both have opposite sign\"\n    else:\n        return \"Both have same sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0)!= (y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Define the formula for finding the nth octagonal number\n    # O(n^2) in time complexity\n    # O(1) space complexity\n    n_squared = n ** 2\n    return 12 * n_squared + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (n + 1) * (2 * n + 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_valid(num):\n        if num < 0:\n            return False\n        for i in range(1, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(1, n+1):\n        oct_num = i * (10**(i-1)) * (3*i-1)\n        if is_valid(oct_num):\n            return oct_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = 1\n    for i in range(n):\n        if i % 2 == 0:\n            num += i*i + 1\n        else:\n            num -= i*i - 1\n    return num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_num = n * (n + 1) / 2\n    return oct_num\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Check if n is divisible by 8 (the number of octagons in a square)\n    if n % 8 == 0:\n        return False\n    # Calculate the nth octagonal number using the formula:\n    # Octagonal number = (n^2 - 1) / 2\n    octagonal_number = (n ** 2 - 1) // 2\n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 2\n    c = 3\n    \n    while c <= n:\n        d = 1\n        while b <= c:\n            d += a\n            b += 2\n        a += 1\n        c += 1\n    \n    return d"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = [num for num in range(1, n+1) if num**2 == num + 1]\n    return octagonal_numbers[-1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def nth_octagonal(n):\n        return (n*n*n-n+24)*2\n\n    return nth_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Initialize the count of octagonal numbers\n    count = 0\n\n    # Iterate through each integer from 1 to n\n    for i in range(1, n+1):\n        # Find the value of the i^2 term\n        term = i**2\n\n        # Check if the term is an octagonal number\n        if term == 8*i**2:\n            count += 1\n\n    # Return the count of octagonal numbers\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the frequency of each digit\n    digit_freq = defaultdict(int)\n    for digit in s:\n        digit_freq[digit] += 1\n    \n    # count the number of substrings with the sum of digits equal to their length\n    count = 0\n    for length in range(1, len(s)+1):\n        for start in range(len(s)-length+1):\n            end = start + length - 1\n            if sum(int(digit) for digit in s[start:end+1]) == length:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize a dictionary to store the frequency of characters in the string\n    freq = defaultdict(int)\n    for char in s:\n        freq[char] += 1\n\n    # Initialize a dictionary to store the sum of digits for each substring\n    substrings = {}\n\n    # Calculate the sum of digits for each substring\n    for i in range(len(s)):\n        substring = s[i:i+len(s)-i]\n        sum_of_digits = sum(int(digit) for digit in substring)\n        substrings[substring] = sum_of_digits\n\n    # Count the number of substrings with the sum of digits equal to their length\n    count = 0\n    for substring in substrings:\n        if substrings[substring] == len(substring):\n            count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Creating a dictionary to store the count of substrings with sum of digits equal to their length\n    count = defaultdict(int)\n    \n    # Iterating over all substrings of the string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Converting the substring into a list of digits and summing up the digits\n            substring = [int(digit) for digit in s[i:j]]\n            sum_digits = sum(substring)\n            \n            # Storing the count of substrings with sum of digits equal to their length in the dictionary\n            count[sum_digits] += 1\n    \n    # Returning the count of substrings with sum of digits equal to their length\n    return count[sum(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    def helper(s, i, j, current_sum, count, result):\n        if i > j:\n            return\n        \n        if i == j:\n            if current_sum == len(str(len(s[i]))):\n                result[len(s[i])] += count\n            return\n        \n        current_sum += s[i] - '0'\n        helper(s, i+1, j, current_sum, count, result)\n        \n        current_sum -= s[i] - '0'\n        count += 1\n        helper(s, i+1, j, current_sum, count, result)\n        \n    result = defaultdict(int)\n    helper(s, 0, len(s)-1, 0, 1, result)\n    return result"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        substrings[s[i]] += 1\n    for i in range(n-1):\n        for j in range(i+1, n):\n            digits = sum(int(digit) for digit in s[i:j+1])\n            if digits == j-i+1:\n                substrings[digits] += 1\n    return sum(substrings.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        # Using defaultdict to keep track of the current substring sum\n        substring_sum = defaultdict(int)\n        for j in range(i, n):\n            substring_sum[sum(int(d) for d in s[i:j+1])] += 1\n            count += substring_sum[sum(int(d) for d in s[i:j+1])]\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n\n    # iterate through all possible substrings\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # get the substring and calculate its sum of digits\n            substr = s[i:j]\n            sum_digits = sum(int(d) for d in substr)\n            # if the sum of digits is equal to the length of the substring, increment the count\n            if sum_digits == len(substr):\n                count[substr] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_Substrings_helper(s, start, end, prev_sum, result):\n        if start > end:\n            result.append(prev_sum)\n            return\n\n        if s[start] == '0':\n            return count_Substrings_helper(s, start + 1, end, prev_sum, result)\n\n        digit_sum = sum(int(c) for c in s[start:end+1])\n        if digit_sum == len(s[start:end+1]):\n            result.append(prev_sum + digit_sum)\n\n        count_Substrings_helper(s, start + 1, end, prev_sum, result)\n\n    count_Substrings_helper(s, 0, len(s)-1, 0, [])\n    return result"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with a given sum of digits\n    digit_count = defaultdict(int)\n\n    # Iterate through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Convert the substring to a list of digits\n            digits = [int(digit) for digit in s[i:j+1]]\n            # Calculate the sum of digits\n            sum_digits = sum(digits)\n            # Check if the sum of digits is equal to the length of the substring\n            if sum_digits == len(digits):\n                # Increment the count of the substring in the dictionary\n                digit_count[sum_digits] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return digit_count[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for char in s:\n        digit_count[int(char)] += 1\n    \n    count = 0\n    for length in digit_count:\n        if digit_count[length] > 1:\n            for substring in range(len(s) - length + 1):\n                count += 1\n    \n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = float('inf') # initialize smallest to infinity\n    \n    for x in xs:\n        if x < smallest:\n            smallest = x\n    \n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list `xs` as input and returns the smallest number in the list.\n    If the list is empty, it will return None.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n    \"\"\"\n\n    # Sort the input list in ascending order\n    test_list.sort()\n\n    # Initialize two variables to store the maximum difference found so far and the maximum difference found so far plus one\n    max_diff = 0\n    max_diff_plus_one = 0\n\n    # Iterate through the list and compare adjacent pairs of values to find the maximum difference\n    for i in range(len(test_list) - 1):\n        diff = test_list[i + 1] - test_list[i]\n        max_diff = max(max_diff, diff)\n        max_diff_plus_one = max(max_diff_plus_one, diff + 1)\n\n    return max_diff_plus_one - 1"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum difference between \n    available pairs in the list.\n    \"\"\"\n    # Sort the list of tuples in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize variables to store the minimum and maximum difference found\n    min_diff = test_list[1][1] - test_list[0][1]\n    max_diff = test_list[0][1] - test_list[0][1]\n\n    # Iterate through the list of tuples and calculate the difference between each pair\n    for i in range(1, len(test_list)):\n        diff = test_list[i][1] - test_list[i-1][1]\n\n        if diff < min_diff:\n            min_diff = diff\n\n        elif diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n\n    # Loop through each pair of elements in the list\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n\n            # Calculate the difference between the two elements\n            diff = abs(test_list[i][0] - test_list[j][0])\n\n            # Update the max_diff variable if the current difference is greater\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize max_diff to be the smallest possible integer value\n    max_diff = float('-inf')\n\n    # Iterate over each pair of elements in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the current pair and the next pair\n            diff = test_list[j][0] - test_list[i][0]\n            # If the difference is greater than the current max_diff, update max_diff\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the max_diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Initialize variables to keep track of maximum difference and the pair of values that gives it\n    max_diff = 0\n    first = None\n    second = None\n    \n    # Loop through the list of tuples and compare the values\n    for i, j in test_list:\n        # If the value of j is greater than the current maximum difference, update both variables\n        if j > max_diff:\n            max_diff = j\n            first = i\n            second = j\n        # If the value of j is less than the current maximum difference and the value of i is less than j,\n        # update only the second variable\n        elif j < max_diff and i < j:\n            max_diff = j\n            second = j\n    \n    # Return the maximum difference and the pair of values that gave it\n    return max_diff, (first, second)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n    test_list (list): A tuple list of length n containing integers\n\n    Returns:\n    int: The maximum difference between available pairs in the given tuple list.\n    \"\"\"\n\n    # Get the length of the list\n    n = len(test_list)\n\n    # Initialize the maximum difference\n    max_diff = 0\n\n    # Loop through the list\n    for i in range(n):\n        # Loop through the rest of the list\n        for j in range(i+1, n):\n            # Calculate the difference between the current pair of integers\n            diff = abs(test_list[i] - test_list[j])\n\n            # Update the maximum difference if the current difference is greater than the previous maximum\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n\n    Args:\n        test_list (list): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between available pairs in the list.\n\n    \"\"\"\n    max_diff = float('-inf')\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sorting the list using sorted() function with key parameter set to lambda function\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    \n    # Print the sorted list\n    print(subjectmarks)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element of the list to the sum of the recursive call to the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flattened_list = [x for sublist in data_list for x in sublist]\n        return recursive_list_sum(flattened_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        raise TypeError('Input must be a list')\n    elif not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        if isinstance(data_list[0], list):\n            return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element of the list to the sum of all elements in the list recursively\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(lst):\n        if type(lst) == list:\n            for item in lst:\n                flatten_list(item)\n        else:\n            yield lst\n\n    flattened_list = list(flatten_list(data_list))\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Helper function to flatten a list\n    def flatten(lst):\n        return [item for sublist in lst for item in flatten(sublist)] if type(lst) == list else [lst]\n    \n    # Flatten the list and sum its elements\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a Python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    pos_count = 0\n    for num in lst:\n        if num > 0:\n            pos_count += 1\n    return pos_count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    def num_ways(n, k):\n        '''\n        Recursive function to count the number of ways to partition a set of Bell numbers.\n        '''\n        \n        # base case\n        if n == 0:\n            return 0\n        \n        # check if k is greater than or equal to n\n        if k >= n:\n            return 1\n        \n        # count number of ways to partition with k-1\n        count = num_ways(n-1, k)\n        \n        # count number of ways to partition with k\n        count += num_ways(n-1, k-1)\n        \n        return count\n    \n    # call the function to get the number of ways\n    count = num_ways(2*n, n)\n    \n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def choose(n, r):\n        if r > n:\n            return 0\n        if r == 0 or r == n:\n            return 1\n        num = 1\n        for i in range(1, r+1):\n            num = (num * (n-i+1)) // i\n        return num\n    \n    total = 0\n    for i in range(2, n+1):\n        total += choose(n, i)\n    return total"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1] * (n+1)\n    bell[0] = 1\n    bell[1] = 1\n    \n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n        \n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize variables\n    count = 0\n    memo = {}\n\n    # Base case\n    if n == 0:\n        return 1\n\n    # Iterate through all the values of n\n    for i in range(1, n+1):\n\n        # Calculate the bell number for i\n        bell = bin(i).count('1')\n\n        # If the bell number is less than or equal to n, we can partition the set into two sets of size n\n        if bell <= n:\n\n            # Check if we have already calculated the result for this combination of i and n\n            if (i, n) in memo:\n                count += memo[(i, n)]\n\n            # Calculate the number of ways to partition the set of Bell numbers\n            else:\n                count += bell_number(n-i)\n\n            # Store the result in the memoization table\n            memo[(i, n)] = count\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    count = 0\n    # Loop through all numbers from 0 to n\n    for i in range(n+1):\n        # If i is a Bell number, add 1 to the count\n        if (i*i - (n-i)*(n-i+1)) % (n*n) == 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of partitions\n\n    Returns:\n    int: The number of ways to partition a set of Bell numbers\n    \"\"\"\n    # Initialize the count to 0\n    count = 0\n    # Loop through each integer from 1 to n\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition the set of Bell numbers using i\n        ways = binomial(2*i, i)\n        # Multiply the count by the number of ways to partition the set of Bell numbers using i\n        count += ways\n    # Return the final count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (2*bell_number(n-1) + bell_number(n-2)) // (n+1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 1\n    else:\n        # Initialize the number of ways to partition the set as 1\n        ways = 1\n        # Iterate from 1 to n-1\n        for i in range(1, n+1):\n            # Add the number of ways to partition the set as 1 plus the number of ways to partition the set up to i-1\n            ways += ways * (i-1)\n        # Return the number of ways to partition the set\n        return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a list to store the number of ways to partition each Bell number\n    ways = [0] * (n + 1)\n    \n    # Initialize the first Bell number to 0\n    ways[0] = 1\n    \n    # Loop through all Bell numbers from 1 to n\n    for i in range(1, n + 1):\n        # For each Bell number, add the number of ways to partition the previous Bell numbers to the current one\n        ways[i] = ways[i] + ways[i - 1]\n        \n    return ways[n]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    elif A[0] == A[-1]:\n        return is_Monotonic(A[1:-1])\n    elif A[0] < A[-1]:\n        return all(A[i] <= A[i+1] for i in range(len(A)-1))\n    else:\n        return all(A[i] >= A[i+1] for i in range(len(A)-1))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    \n    # Initialize the current and previous elements\n    current = A[0]\n    prev = A[0]\n    \n    # Check for monotonicity in the array\n    for i in range(1, len(A)):\n        if A[i] < current:\n            return False\n        elif A[i] > current:\n            prev = current\n            current = A[i]\n        else:\n            return False\n    \n    # If the loop completes without returning False, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if array is empty or not\n    if len(A) == 0:\n        return True\n    # initialize left and right pointers\n    left = 0\n    right = len(A) - 1\n    # check if both pointers are pointing to the same element\n    while left < right:\n        if A[left] < A[right]:\n            return False\n        left += 1\n        right -= 1\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n        elif A[i] < A[i+1]:\n            return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if it is monotonic increasing or decreasing or not monotonic.\n    '''\n\n    if len(A) <= 1:\n        return True\n\n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    elif A[0] > A[1]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 0:\n        return True\n\n    if A[0] < A[1]:\n        return is_Monotonic(A[1:])\n    elif A[n-1] > A[n-2]:\n        return is_Monotonic(A[:n-1])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[0] >= A[1]:\n        return False\n    elif A[len(A)-1] <= A[-2]:\n        return False\n    \n    for i in range(1,len(A)-1):\n        if A[i] <= A[i-1] or A[i] >= A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n < 2:\n        return True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n        elif A[i] > A[i-1]:\n            return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if it is monotonic and False otherwise.\n    A monotonic array is an array that is either monotonically increasing or monotonically decreasing.\n    '''\n\n    # Initialize a flag variable to keep track of whether the array is monotonic or not\n    is_monotonic = True\n\n    # Iterate through the array A from index 1 to n-1\n    for i in range(1, len(A)):\n\n        # If the current element is less than the previous element, the array is not monotonic\n        if A[i] < A[i-1]:\n            is_monotonic = False\n            break\n\n        # If the current element is greater than the previous element, the array is monotonic\n        elif A[i] > A[i-1]:\n            is_monotonic = True\n\n    return is_monotonic"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            continue\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    else:\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] in s:\n        return is_sublist(l[1:], s)\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the length of the sublist is greater than or equal to the length of the list\n    if len(s) >= len(l):\n        # Check if the first elements of the sublist are equal to the first elements of the list\n        if l[0:len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the sublist is empty or not\n    if not s:\n        return True\n\n    # Initialize the starting index\n    i = 0\n\n    # Traverse the list using the sublist as a sliding window\n    while i <= len(l) - len(s):\n        # Check if the sublist is present in the list using the same sliding window approach\n        if l[i:i+len(s)] == s:\n            return True\n        i += 1\n\n    # If the sublist is not found in the list, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if len(l) < len(s):\n        return False\n    return all(s[0] == x for x in l)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(tup) for tup in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        if len(i) == 0:\n            return \"Empty tuple\"\n        if len(i) == count:\n            count += 1\n        else:\n            return \"Tuple length is not equal\"\n    if count == len(Input):\n        return \"All tuples have equal length\""
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == len(set(map(len, Input))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all tuples in the list have equal length, otherwise it returns False.\n    \"\"\"\n    tuples_length = [len(tuple) for tuple in Input]\n    if len(set(tuples_length)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    for i in range(n-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    # create a set of tuples from the input list\n    tuples_set = set(Input)\n    # create a list of all tuples in the set\n    tuples_list = list(tuples_set)\n    # check if all the tuples have equal length\n    if all(len(t) == len(tuples_list[0]) for t in tuples_list):\n        # if all tuples have equal length, print True\n        print(\"True\")\n    else:\n        # if not all tuples have equal length, print False\n        print(\"False\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not isinstance(Input, list):\n        raise TypeError(\"Input should be a list\")\n    \n    for i in Input:\n        if not isinstance(i, tuple):\n            raise TypeError(\"Each element in the list should be a tuple\")\n        \n        if len(i)!= len(Input[0]):\n            return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    flag = True\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            flag = False\n            break\n    return flag"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    # Initialize the gap and the number of iterations\n    gap = len(nums) // 2\n    n = len(nums)\n    \n    # Loop until the gap is 1 or the number of iterations is greater than the number of elements\n    while gap > 1 or n > 1:\n        # Loop through the list, swapping adjacent elements if they are not in the correct order\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n        \n        # Decrease the gap by half, stopping if the gap is one or less\n        gap //= 2\n        n -= gap\n        \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of integers using the Comb Sort algorithm.\n    \"\"\"\n\n    # initialize the swapped flag and the minimum and maximum indices\n    swapped = True\n    min_idx = 0\n    max_idx = len(nums) - 1\n\n    # keep sorting until the swapped flag is no longer true\n    while swapped:\n        swapped = False\n\n        # find the minimum and maximum indices\n        for i in range(min_idx + 1, max_idx):\n            if nums[i] < nums[min_idx]:\n                min_idx = i\n\n        for i in range(max_idx - 1, min_idx - 1, -1):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n\n        # swap the elements if they are not in the correct order\n        if min_idx < max_idx:\n            nums[min_idx], nums[max_idx] = nums[max_idx], nums[min_idx]\n            swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        if gap > 1:\n            gap = (gap * 10) // 13  # Math magic!\n            if gap < 1:\n                gap = 1\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        # Step 1: Build a max heap\n        for i in range(gap, n):\n            curr = nums[i]\n            j = i\n            while j >= gap and nums[j - gap] < curr:\n                nums[j] = nums[j - gap]\n                j -= gap\n            nums[j] = curr\n\n        # Step 2: Reduce the gap\n        gap = int(gap / 1.3)\n\n    # Step 3: Swap elements if required\n    if gap == 0:\n        return nums\n\n    for i in range(gap, n):\n        if nums[i] > nums[i - gap]:\n            nums[i], nums[i - gap] = nums[i - gap], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    sorted = False\n    \n    while not sorted:\n        gap = n // 2\n        swapped = False\n        \n        for i in range(gap, n):\n            if nums[i] > nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        \n        if not swapped:\n            sorted = True\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    swapped = True\n\n    while swapped:\n        swapped = False\n\n        for i in range(n - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n\n    The comb sort algorithm works by repeatedly sorting a sublist by repeatedly swapping adjacent elements.\n    The sorted sublist is then inserted back into the original list. This process is repeated until\n    the sublist is sorted.\n\n    Time complexity: O(n^2)\n    Space complexity: O(1)\n    '''\n\n    def swap(a, b):\n        a, b = nums[a], nums[b]\n        nums[a], nums[b] = b, a\n\n    for gap in range(len(nums) // 2, 0, -1):\n        for i in range(len(nums) - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                swap(i, j)\n\n    for i in range(len(nums)):\n        if i!= nums.index(min(nums)):\n            swap(i, nums.index(min(nums)))\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the Comb sort algorithm.\n\n    Parameters:\n    nums (list): The list of elements to be sorted.\n\n    Returns:\n    The sorted list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        if swapped:\n            swapped = False\n\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        gap = int(gap / 1.3)\n\n        if gap == 0:\n            gap = 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    gap = len(nums) // 2\n\n    while gap > 0:\n        for i in range(gap, len(nums)):\n            j = i\n            while j >= gap and nums[j] < nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n            j = i\n            while j < len(nums) - gap and nums[j] > nums[j + gap]:\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                j += gap\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # calculate the square of the number\n    square = n ** 2\n    # check if the square is even or odd\n    if square % 2 == 0:\n        return False\n    # calculate the difference between the square and 2\n    diff = square - 2\n    # check if the difference is greater than 0\n    if diff > 0:\n        # check if the difference is a square\n        square_diff = diff ** 2\n        if square_diff == square:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = int(n ** 0.5)\n    b = n - (a ** 2)\n    if a * a == b:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Helper function to check if a number is a square or not\n    def is_square(num):\n        return num == int(num ** 0.5) ** 2\n\n    # Check if the given number can be represented as the difference of two squares\n    if is_square(n) and is_square(n - 1):\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # loop until the difference of squares becomes less than 0\n    while n > 0:\n        # calculate the square of the remainder and subtract it from the given number\n        n = n - (n ** 2)\n    # if the difference of squares becomes 0, then the given number can be represented as the difference of squares\n    if n == 0:\n        return True\n    # otherwise, the given number cannot be represented as the difference of squares\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Check if the number is divisible by 4\n    if n%4!= 0:\n        print(\"The given number is not divisible by 4\")\n        return\n    \n    # Find the square root of the number\n    sqrt_n = int(n**0.5)\n    \n    # Check if the square root is divisible by 2\n    if sqrt_n%2!= 0:\n        print(\"The square root of the given number is not divisible by 2\")\n        return\n    \n    # Check if the difference between the square root and the original number is divisible by 4\n    diff = sqrt_n - n\n    if diff%4!= 0:\n        print(\"The difference between the square root and the original number is not divisible by 4\")\n        return\n    \n    print(\"The given number can be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # First, check if the given number is a perfect square\n    if n == int(n**0.5) ** 2:\n        return True\n    # If not, then try checking if the difference between two squares can be represented as the given number\n    else:\n        for i in range(int(n**0.5)+1):\n            for j in range(int(n**0.5)+1):\n                square = i**2 + j**2\n                if square == n:\n                    return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Convert the number to a string\n    n = str(n)\n\n    # Check if the string is of length 2\n    if len(n)!= 2:\n        return \"The given number is not of length 2.\"\n\n    # Check if the first character of the string is a digit\n    if n[0].isdigit():\n        return \"The given number cannot be represented as the difference of two squares.\"\n\n    # Check if the second character of the string is a digit\n    if n[1].isdigit():\n        return \"The given number cannot be represented as the difference of two squares.\"\n\n    # Check if the sum of the first two digits is equal to the third digit\n    if int(n[0]) + int(n[1]) == int(n[2]):\n        return \"The given number is a difference of two squares.\"\n\n    return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Initialize variables\n    x, y = 0, n\n    square = 0\n\n    # Check if n is a square number\n    while square**2 <= n:\n        square += 1\n\n    if n == square**2:\n        return True\n\n    # If not, then n cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # initialize the counter for the squares\n    count = 0\n\n    # loop until we reach a square greater than or equal to the given number\n    while n >= 1:\n        # add 1 to the counter if the number is divisible by 10\n        if n % 10 == 0:\n            count += 1\n        \n        # remove the last digit from the number\n        n = n // 10\n    \n    # if the counter is even, it means that the number can be represented as the difference of two squares\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is a square\n    if n * n == n:\n        return True\n    \n    # Check if the given number is a difference of two squares\n    for i in range(1, int(n**0.5) + 1):\n        if n - i*i == i**2:\n            return True\n    \n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    # initialize variables to keep track of the current color and pattern\n    current_color = None\n    current_pattern = None\n    \n    # loop through the patterns array and check if each color matches the current pattern\n    for pattern in patterns:\n        # split the pattern into its components\n        pattern_parts = pattern.split()\n        \n        # check if the length of the pattern is equal to the length of the current color\n        if len(pattern_parts)!= len(colors):\n            return False\n        \n        # check if the pattern components match the current color\n        for i, part in enumerate(pattern_parts):\n            if colors[i]!= part:\n                return False\n        \n        # update the current color and pattern\n        current_color = colors.pop(0)\n        current_pattern = pattern\n    \n    # if all colors have been used and all patterns have been matched, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_count = {}\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n    \n    for pattern in patterns:\n        if len(pattern)!= len(color_count):\n            return False\n        \n        for color in pattern:\n            if color not in color_count or color_count[color] == 0:\n                return False\n            color_count[color] -= 1\n            \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        elif colors[i] in patterns[i:]:\n            continue\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n\n    # Check if the number of colors and patterns are the same\n    if n!= len(patterns):\n        return False\n\n    # Check that the patterns are all valid\n    for p in patterns:\n        if not (1 <= p <= n):\n            return False\n\n    # Check if the patterns are followed by the colors\n    for i in range(n):\n        p = patterns[i]\n        if colors[i]!= patterns[i - 1] + 1:\n            return False\n        for j in range(i + 1, n):\n            if colors[j]!= patterns[j - 1] + 2:\n                return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # convert patterns to sets to make sure order doesn't matter\n    patterns = set(patterns)\n    # sort colors to make sure order doesn't matter\n    colors = sorted(colors)\n    # iterate through colors and patterns\n    for i, color in enumerate(colors):\n        if color not in patterns:\n            return False\n        if patterns.pop()!= color:\n            return False\n    return not patterns"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Define a helper function to check if two patterns are the same\n    def is_samepattern(pattern1, pattern2):\n        if len(pattern1)!= len(pattern2):\n            return False\n        for i in range(len(pattern1)):\n            if pattern1[i]!= pattern2[i]:\n                return False\n        return True\n\n    # Check if the colors array and the patterns array are the same length\n    if len(colors)!= len(patterns):\n        return False\n\n    # Check if all patterns are the same\n    pattern = patterns[0]\n    for i in range(1, len(patterns)):\n        if not is_samepattern(pattern, patterns[i]):\n            return False\n\n    # Check if the colors follow the patterns\n    for i in range(len(colors)):\n        if colors[i] not in pattern:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    def is_samepattern(pattern):\n        colors_count = [0] * 3\n        for color in pattern:\n            colors_count[color] += 1\n        return colors_count == patterns[pattern_index]\n    \n    pattern_index = 0\n    for color in colors:\n        if is_samepattern(color):\n            pattern_index += 1\n        if pattern_index == len(patterns):\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # initialize the variables to check if all patterns match\n    same_pattern = True\n    same_color = True\n    # loop through each pattern\n    for pattern in patterns:\n        # loop through each color in the pattern\n        for color in pattern:\n            # check if the color is the same for all colors in the pattern\n            if color!= colors[0]:\n                same_color = False\n                break\n        # if a color in the pattern doesn't match, break out of the loop and return False\n        if not same_color:\n            break\n        # if the same color is found, check if all patterns are the same\n        for pattern_i in patterns:\n            # check if the current pattern matches the next pattern\n            if pattern!= pattern_i:\n                same_pattern = False\n                break\n        # if any pattern doesn't match, break out of the loop and return False\n        if not same_pattern:\n            break\n    # if all patterns are the same, return True\n    if same_pattern and same_color:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    pattern = patterns[0]\n    for color in colors:\n        if color not in pattern:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    filtered_tuples = [tuple(t) for t in test_list if all(x % K == 0 for x in t)]\n    return filtered_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Initialize an empty list to store the matching tuples\n    matching_tuples = []\n    # Loop through each tuple in the test_list\n    for tup in test_list:\n        # Check if all elements of the tuple are divisible by K\n        if all(elem % K == 0 for elem in tup):\n            # If all elements are divisible by K, add the tuple to the matching_tuples list\n            matching_tuples.append(tup)\n    # Return the matching_tuples list\n    return matching_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(x % K == 0 for x in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        test_list (list of tuples): A list of tuples.\n        K (int): A number to divide all elements of the tuples by.\n\n    Returns:\n        list of tuples: A list of tuples that have all elements divisible by k.\n    \"\"\"\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate through each tuple in the input list\n    for tuple in test_list:\n        # Create a set from the tuple to check if all elements are divisible by K\n        set_tuple = set(tuple)\n\n        # Check if the set contains only integers and if the length of the set is equal to K\n        if all(isinstance(x, int) for x in set_tuple) and len(set_tuple) == K:\n            # If the tuple is valid, add it to the result list\n            result.append(tuple)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if sum(tup) % K == 0 and all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty dictionary to store the result\n    result = {}\n    \n    # Iterate through each tuple in the given list\n    for tup in test_list:\n        # Iterate through each element of the tuple and check if it is divisible by K\n        for elem in tup:\n            if elem % K!= 0:\n                # If not, skip to the next element\n                break\n            # If all elements are divisible by K, add the tuple to the result dictionary with its key being the tuple itself\n            else:\n                key = tuple(tup)\n                if key in result:\n                    result[key].append(tup)\n                else:\n                    result[key] = [tup]\n                \n    # Return the result dictionary\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple1 in test_list:\n        flag = True\n        for num in tuple1:\n            if num % K!= 0:\n                flag = False\n                break\n        if flag:\n            result.append(tuple1)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tup in test_list:\n        if sum(tup) % K == 0:\n            print(tup)"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    \"\"\"\n    This function takes a number as input and returns True if it is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check if the number is divisible by 11 using the modulo operator\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.split() # split the string into words\n    for word in s:\n        if len(word)%2==1: # check if the length of the word is odd\n            return True # return True if the length is odd\n    return False # return False if the length is even"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is even length.\")\n        else:\n            print(word, \"is odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, 'is odd length')\n        else:\n            print(word, 'is even length')"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # split the string into words\n    words = s.split()\n\n    # iterate over the words and check their length\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n\n    # if the loop completes without returning True, all words have even length\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0] # Split the string into words and get the first word\n    if len(word) % 2 == 0: # Check if the length of the word is even\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 12\n    elif n == 3:\n        return 28\n    else:\n        return tetrahedral_number(n-1) + 2*tetrahedral_number(n-2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    This function returns the nth tetrahedral number.\n\n    The nth tetrahedral number is the number of partitions of a cube into four equal parts,\n    such that the sum of the parts is equal to 4n.\n\n    For example, the first tetrahedral number is 12.\n\n    For n = 1, the first tetrahedral number is 0.\n    For n = 2, the first tetrahedral number is 3.\n    For n = 3, the first tetrahedral number is 12.\n    For n = 4, the first tetrahedral number is 20.\n    For n = 5, the first tetrahedral number is 24.\n    For n = 6, the first tetrahedral number is 28.\n    For n = 7, the first tetrahedral number is 30.\n    For n = 8, the first tetrahedral number is 32.\n    For n = 9, the first tetrahedral number is 32.\n    For n = 10, the first tetrahedral number is 32.\n    '''\n\n    if n <= 0:\n        return 0\n\n    elif n == 1:\n        return 0\n\n    else:\n        numerator = 2 * n\n        denominator = (n * (n + 1)) ** 2\n        return numerator / denominator"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [1]\n    while len(tetrahedral_numbers) < n:\n        last_tetrahedral = tetrahedral_numbers[-1]\n        next_tetrahedral = (3*last_tetrahedral**2 + 1)/2\n        tetrahedral_numbers.append(next_tetrahedral)\n    return tetrahedral_numbers[-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 12\n    elif n == 3:\n        return 28\n    else:\n        return 1 + (4 * tetrahedral_number(n-1))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 0\n    b = 1\n    c = 0\n    d = 1\n    for i in range(1, n+1):\n        a, b, c, d = b, a + b, c + b, d + b\n    return a + c + d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return 1 + (n - 1) * (4 * n - 3) // (3 * n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 8\n    else:\n        return tetrahedral_number(n-1) + (3 * tetrahedral_number(n-1) + 1) / 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    x = 1\n    y = 1\n    z = 0\n    \n    # Iterate n times\n    for i in range(1, n+1):\n        \n        # Calculate the current term\n        current_term = (x ** 2 + y ** 2 + z ** 2) // 6\n        \n        # Update the values\n        x = current_term\n        y = current_term - x\n        z = y - x\n    \n    # Return the final value\n    return x"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Function to find the nth tetrahedral number.\n    '''\n    tetrahedral = 1\n    count = 0\n    for i in range(n):\n        count += 1\n        tetrahedral *= 4\n        if count % 2 == 0:\n            tetrahedral -= 1\n        else:\n            tetrahedral += 1\n    return tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4 * (n - 1) + 4"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r ** 3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    \n    return (4/3)*pi*(r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4/3 * pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function finds the volume of a sphere with a given radius r.\n    '''\n    # Formula to find the volume of a sphere\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    char %= 26\n    return chr(char+65)\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize a variable to store the sum of ASCII values of characters of the given string\n    sum_ascii = 0\n    # iterate over each character of the string and add its ASCII value to the sum_ascii variable\n    for char in strr:\n        sum_ascii += ord(char)\n\n    # return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr((sum_ascii % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr(total % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # initialize the character to an empty string\n    char = \"\"\n    \n    # loop over all characters of the string\n    for c in strr:\n        # add the ASCII value of the character to the character string\n        char += str(ord(c))\n    \n    # convert the character string to an integer and calculate the character modulo 26\n    char_int = int(char)\n    char_mod = char_int % 26\n    \n    # convert the character modulo 26 to a letter and return it as a string\n    char_letter = chr(char_mod + ord('a'))\n    return char_letter"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Loop through each character in the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(char)\n        # Add the ASCII value of the character modulo 26 to the result string\n        result += chr(((ascii_value - 97 + 1) % 26) + 97)\n\n    # Return the final result string\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    # Initialize a variable to store the ASCII value of the first character\n    char_val = ord(strr[0])\n\n    # Loop through the remaining characters in the string\n    for i in range(1, len(strr)):\n        # Add the ASCII value of the current character to the previous value\n        char_val += ord(strr[i])\n\n    # Return the character value modulo 26\n    return char_val % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize the variable to store the character made by adding the ASCII value of all characters of the string modulo 26\n    char = 0\n    \n    # iterate through each character of the string\n    for char in strr:\n        # add the ASCII value of the character to the variable\n        char = ord(char) + char\n        \n        # check if the resulting character is greater than 90 (i.e. the ASCII value of 'Z')\n        if char > 90:\n            # subtract 26 from the character to get its ASCII value modulo 26\n            char = char - 26\n    \n    # convert the character to a string\n    char = chr(char)\n    \n    # return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = sum([ord(c) for c in strr]) % 26\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return chr((sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2]\n    for i in range(1, n):\n        next_sequence = []\n        for j in range(len(sequence)):\n            if (j+1) % 2 == 1:\n                next_sequence.append(sequence[j] + 2)\n            else:\n                next_sequence.append(sequence[j] - 2)\n        sequence = next_sequence\n    return sequence[0]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2]\n    i = 2\n    while i < n: \n        sequence.append(sequence[i-1] + sequence[i-2])\n        i += 1\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    i = 1\n\n    while i < n:\n        if sequence[i - 1] % 2 == 0:\n            sequence.append(sequence[i - 1] * 3 + 1)\n        else:\n            sequence.append(sequence[i - 1] * 3)\n        i += 1\n\n    return sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 0, 0]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 1, 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            print(a, end=\" \")\n            a, b = b, a+b\n        else:\n            print(b, end=\" \")\n            a, b = b, a+b\n    print()"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n < 0:\n        print(\"Invalid input. Please enter a non-negative integer.\")\n        return\n    \n    sequence = [1, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    \n    print(\"The nth number in the newman conway sequence is:\", sequence[n])"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 1, 1\n    for i in range(2, n+1):\n        a, b = b, 2 * a + b\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a = (3 * a) % 10\n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    area = 4*math.pi*r**2 # the surface area of a sphere is 4 * pi * r^2\n    \n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes a radius as input and returns the surface area of a sphere.\n    '''\n\n    # Use the formula for the surface area of a sphere\n    surface_area = (4/3) * math.pi * r**3\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere.\n\n    Args:\n    r (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    '''\n\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 0\n    for i in range(36):\n        surface_area += math.pi/2\n    return surface_area*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r ** 3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n\n    # Formula for surface area of a sphere\n    surface_area = (4/3) * math.pi * r**3\n\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((n * (3 * n - 1)) // 2) + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n    \n    # Find the centered hexagonal number\n    for i in range(1, n+1):\n        a = b\n        b = 2*c - a\n        c = a\n    \n    return c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return 3 * centered_hexagonal_number(n-1) - centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n    The centered hexagonal number is defined as:\n\n    C(n) = 1/2 n^2 + 2/3 n + 1\n\n    If n is odd, then C(n) is centered with respect to the even number n-1.\n    If n is even, then C(n) is centered with respect to the odd number n-1.\n\n    Example:\n    centered_hexagonal_number(5) returns 13\n\n    The centered hexagonal number for n=5 is 13 which is written as:\n\n    1/2 (5^2) + 2/3 (5) + 1\n\n    C(5) = 1/2 (5^2) + 2/3 (5) + 1 = 1/2 (25) + 2/3 (5) + 1 = 18.5\n    5th centered hexagonal number.\n    '''\n\n    if n % 2 == 0:\n        return 1/2*n**2 + 2/3*n - 1\n    else:\n        return 1/2*n**2 + 2/3*(n-1) - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        return (3*n*n + 3*n + 1) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the variables for the centered hexagonal number\n    a = 1\n    b = 6\n    c = 11\n    d = 16\n    e = 21\n    f = 26\n    \n    # Calculate the nth centered hexagonal number\n    if n == 1:\n        centered_hexagonal = a\n    elif n == 2:\n        centered_hexagonal = b\n    elif n == 3:\n        centered_hexagonal = c\n    elif n == 4:\n        centered_hexagonal = d\n    elif n == 5:\n        centered_hexagonal = e\n    elif n == 6:\n        centered_hexagonal = f\n    else:\n        centered_hexagonal = centered_hexagonal_number(n-6)\n    \n    # Return the centered hexagonal number\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagon(n):\n        '''\n        Write a function to find nth centered hexagon number.\n        '''\n        return (3*n-1)//2\n    \n    def hexagon_sum(k):\n        '''\n        Write a function to find the sum of k centered hexagons.\n        '''\n        return 2*(centered_hexagon(2*k-1)+centered_hexagon(2*k))\n    \n    return hexagon_sum(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Find the number of rows needed to represent the centered hexagonal number\n    num_rows = n // 2 + 1\n\n    # Initialize an empty list to store the centered hexagonal numbers\n    centered_hex_nums = []\n\n    # Loop through the number of rows needed to represent the centered hexagonal number\n    for i in range(1, num_rows + 1):\n        # Loop through the number of columns needed to represent the centered hexagonal number\n        for j in range(1, (i*2) + 1):\n            # Append the centered hexagonal number to the list of centered hexagonal numbers\n            centered_hex_nums.append(i*j)\n\n    # Return the nth centered hexagonal number\n    return centered_hex_nums[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    while n > 0:\n        n -= 1\n        c = a + b\n        a = b\n        b = c\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return None\n\n    hexagonal_number = n * (2 * n - 1)\n    return hexagonal_number"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # initialize an empty dictionary to store the final merged dictionary\n    merged_dict = {}\n    \n    # iterate over the three dictionaries and merge their values\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    \n    for key, value in dict2.items():\n        merged_dict[key] = value\n    \n    for key, value in dict3.items():\n        merged_dict[key] = value\n        \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to store the merged dictionary\n    merged_dict = {}\n    \n    # Loop through the keys in each of the dictionaries and add their values to the merged dictionary\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    \n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(list)\n\n    for key, value in dict1.items():\n        merged_dict[key].append(value)\n\n    for key, value in dict2.items():\n        merged_dict[key].append(value)\n\n    for key, value in dict3.items():\n        merged_dict[key].append(value)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy() # make a copy of dict1\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    # create a new dictionary to store the merged values\n    merged_dict = {}\n    # loop through the three dictionaries\n    for key in dict1:\n        # if the key already exists in the merged dictionary, add its value to its value\n        if key in merged_dict:\n            merged_dict[key] = merged_dict[key] + dict1[key]\n        else:\n            merged_dict[key] = dict1[key]\n    for key in dict2:\n        # if the key already exists in the merged dictionary, add its value to its value\n        if key in merged_dict:\n            merged_dict[key] = merged_dict[key] + dict2[key]\n        else:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        # if the key already exists in the merged dictionary, add its value to its value\n        if key in merged_dict:\n            merged_dict[key] = merged_dict[key] + dict3[key]\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Combine the dictionaries using the update() method\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = collections.defaultdict(int)\n    \n    # Iterate through the list and update the frequency of each element in the dictionary\n    for num in list1:\n        freq_dict[num] += 1\n    \n    # Return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Iterate through the list and add the frequency of each element to the dictionary\n    for element in lst:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    \n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for elem in list1:\n        freq_dict[elem] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # iterate through each element in the list\n    for item in list1:\n        # if the element is already in the dictionary, increment its frequency by 1\n        if item in freq:\n            freq[item] += 1\n        # if the element is not in the dictionary, add it with frequency 1\n        else:\n            freq[item] = 1\n    \n    # return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    for num in range(1, N):\n        if num % 2 == 0:\n            if num < min_num:\n                min_num = num\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    nums = [int(x) for x in input(\"Enter a list of numbers separated by space: \").split()]\n    closest_num = abs(n - min(nums)) + abs(n - max(nums))\n    print(\"The closest smaller number to\", n, \"is\", closest_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize the closest smaller number as the first number\n    closest = N\n    \n    # Iterate through the numbers from 2 to n\n    for i in range(2, N+1):\n        # Calculate the difference between the current number and n\n        diff = abs(i-N)\n        \n        # If the current number is closer to n than the previous closest number, update closest\n        if diff < abs(closest-N):\n            closest = i\n            \n    # Return the closest smaller number than n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Find the smallest number that is greater than N\n    smaller = min(range(N+1, 2000000000), key=lambda x: abs(x-N))\n    # Find the closest smaller number to N\n    closest = min(range(N, smaller), key=lambda x: abs(x-N))\n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_smaller_than_n(n):\n        if n % 2 == 0:\n            return (n//2)*2\n        else:\n            return (n//2)*2 + 1\n    \n    smaller_num = closest_smaller_than_n(N)\n    closest_num = min(smaller_num, N)\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = int(input(\"Enter a number: \"))\n    smallest = n\n    for i in range(1, N+1):\n        if i < n:\n            smallest = min(smallest, i)\n        else:\n            smallest = max(smallest, i)\n    print(\"The closest smaller number to\", n, \"is\", smallest)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    # Initialize variables for closest number and its index\n    closest = None\n    index = None\n\n    # Iterate through the numbers from 1 to N\n    for i in range(1, N + 1):\n        # Check if the current number is closer to N than the current closest\n        if abs(N - i) < abs(closest):\n            # If it is, update closest and index\n            closest = i\n            index = i\n\n    # Return the closest number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = 0\n    min_diff = float('inf')\n    for i in range(1, N):\n        diff = N - i\n        if diff < min_diff:\n            min_diff = diff\n            min_num = i\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    for i in range(2, int(N**0.5)+1):\n        if N%i == 0:\n            if i < min_num:\n                min_num = i\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    nums = []\n    for i in range(1, n+1):\n        nums.append(i)\n    num_str = str(n)\n    closest = n\n    for i in range(len(num_str)):\n        for j in range(i+1, len(num_str)+1):\n            temp = num_str[i:j]\n            if int(temp) < n:\n                if int(temp) < closest:\n                    closest = int(temp)\n            elif int(temp) > n:\n                break\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    This function takes in a list of strings and returns the length of the longest word in the list.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for i in list1:\n        if len(i) > len(longest):\n            longest = i\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # Initializing variables\n    max_len = 0\n    longest_word = \"\"\n\n    # Looping through the list\n    for word in list1:\n        # Finding length of the word\n        len_word = len(word)\n\n        # Checking if the length of the word is greater than the current maximum length\n        if len_word > max_len:\n            max_len = len_word\n            longest_word = word\n\n    # Returning the length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Convert both the string and the list of strings to lowercase\n    str1 = str1.lower()\n    sub_str = sub_str.lower()\n\n    # Iterate over the list of strings\n    for string in str1:\n        # Check if the substring is present in the string\n        if sub_str in string:\n            # If yes, return True\n            return True\n    \n    # If the substring is not found in any of the strings, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"Substring '{}' is present in the string '{}'.\".format(sub_str, str1))\n    else:\n        print(\"Substring '{}' is not present in the string '{}'.\".format(sub_str, str1))"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(sub_str)!= str:\n        raise TypeError(\"The second argument should be a string.\")\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the given number is positive\n    if n < 0:\n        print(\"The given number should be positive.\")\n        return\n    \n    # Check if the given number is divisible by 2\n    if n % 2 == 0:\n        print(\"The given number is undulating.\")\n    else:\n        print(\"The given number is not undulating.\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return False\n    elif n % 2 == 0:\n        return is_undulating(n//2)\n    else:\n        return is_undulating(3*n+1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    This function takes a positive integer as input and returns True if it is \n    undulating and False otherwise.\n\n    An undulating number is a positive integer whose sum of its digits is equal to \n    the original number. For example, 157 is undulating because 1 + 5 + 7 = 15, \n    5 + 7 = 12, and 12 = 15.\n\n    If the input number is less than 10, it is considered undulating.\n    '''\n\n    # Convert the input number to a string\n    number_str = str(n)\n\n    # Check if the input number is less than 10\n    if len(number_str) < 2:\n        return True\n\n    # Initialize the sum of digits to 0\n    sum_of_digits = 0\n\n    # Iterate over the digits of the number\n    for digit in number_str:\n        # Add the digit to the sum of digits\n        sum_of_digits += int(digit)\n\n    # Check if the sum of digits is equal to the original number\n    if sum_of_digits == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(is_undulating(10))  # Output: False\nprint(is_undulating(8))   # Output: True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n <= 0:\n        return \"Number should be greater than 0.\"\n    elif n == 1:\n        return \"Number is undulating.\"\n    else:\n        return \"Number is not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer as input and returns True if the number is undulating, False otherwise.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    This function takes two parameters, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use the built-in min function to find the index of the minimum value\n    minimum_index = test_list.index(min(test_list, key=lambda x: x[1]))\n    # Return the first element of the tuple at the minimum index\n    return test_list[minimum_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    min_value = min(test_list, key=itemgetter(1))\n    return min_value[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_value = float('inf')\n    min_index = -1\n    \n    for i in range(len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n    \n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Using lambda function as the key for sorting\n    test_list.sort(key=lambda x: (x[1]))\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_item = test_list[0]\n    for item in test_list:\n        if item[1] < min_item[1]:\n            min_item = item\n    return min_item[0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    min_length = 999999999\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    min_len
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for lst in lst:  \n        if len(lst) < min_length:  \n            min_length = len(lst)  \n    return min_length  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and finds the length of the smallest list in the list.\n    '''\n    min_length = float('inf') # initialize the minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])   # set minimum length as first list in list of lists\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:  # check if current list has smaller length\n            min_length = len(lst[i])\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize a variable to store the minimum length found so far\n    min_length = 999999999\n\n    # Iterate through each sub-list in the list\n    for sub_lst in lst:\n        # Calculate the length of the current sub-list\n        current_length = len(sub_lst)\n        # If the current sub-list length is smaller than the minimum length found so far, update the minimum length\n        if current_length < min_length:\n            min_length = current_length\n\n    # Return the minimum length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div_count = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_count += 1\n    return div_count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for element in list1:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through the flattened list and update the frequency of each element in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq:\n                    freq[subitem] += 1\n                else:\n                    freq[subitem] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    freq_dict = {}\n    # loop through each element in the list\n    for element in list1:\n        # if the element is not already in the dictionary, add it with a count of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        # if the element is already in the dictionary, increment the count by 1\n        else:\n            freq_dict[element] += 1\n    # return the final dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem not in freq_dict:\n                freq_dict[subitem] = 1\n            else:\n                freq_dict[subitem] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = []\n    for sublist in list1:\n        flat_list.extend(sublist)\n    count_dict = {}\n    for elem in flat_list:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    return count_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for element in list1:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten(lst):\n    return [item for sublist in lst for item in sublist]\n\ndef frequency_lists(list1):\n    flattened_list = flatten(list1)\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) > 0:\n        product = 1\n        for num in numbers:\n            product *= num\n        return product / len(numbers)\n    else:\n        return 0"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # Multiply all the numbers and divide with the length of the list\n    result = numbers[0]\n    for i in range(1, len(numbers)):\n        result *= numbers[i]\n\n    # Divide the result with the length of the list to get the average\n    avg = result / len(numbers)\n\n    return avg"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1  \n    for num in numbers:  \n        product *= num  \n    return product/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # Multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n\n    # Divide with the length of the list\n    result /= len(numbers)\n\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1  \n    for num in numbers:  \n        result *= num  \n    return result / len(numbers)  "
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    \n    binary_string = \"\"\n    while n > 0:\n        binary_string = str(n % 2) + binary_string\n        n //= 2\n    \n    return binary_string[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = []\n        while n > 0:\n            binary.append(n % 2)\n            n //= 2\n        binary.reverse()\n        binary_str = ''\n        for digit in binary:\n            binary_str += str(digit)\n        return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes a decimal number and returns its binary equivalent as a string, with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n < 0:\n        return '1' + decimal_to_binary(abs(n))\n    else:\n        result = ''\n        while n > 0:\n            result = str(n % 2) + result\n            n //= 2\n        return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary if binary else \"0\""
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num % 10 == 9:\n        num = num // 10 * 10\n    else:\n        num = num // 10 * 10 + 10\n    \n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # find the smallest palindrome greater than num\n    smallest_palindrome = num + 1\n    while smallest_palindrome <= num:\n        if smallest_palindrome > 0:\n            palindrome = str(smallest_palindrome)\n            if palindrome == palindrome[::-1] and int(palindrome) > num:\n                return int(palindrome)\n        smallest_palindrome += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    def is_palindrome(n):\n        \"\"\"\n        Helper function to check if a number is palindrome or not.\n        \"\"\"\n        return str(n) == str(n)[::-1]\n\n    def is_valid(n):\n        \"\"\"\n        Helper function to check if a number is valid or not.\n        \"\"\"\n        if n < 10 or (n >= 10 and is_palindrome(n)):\n            return True\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_next_palindrome(num):\n        \"\"\"\n        Helper function to check if a number is next smallest palindrome or not.\n        \"\"\"\n        next_num = num + 1\n        while next_num < 1000000:\n            if is_valid(next_num):\n                return True\n            next_num += 1\n        return False\n\n    next_palindrome = num + 1\n    while not is_valid(next_palindrome):\n        next_palindrome += 1\n\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    # Initialize a variable to store the smallest palindrome greater than or equal to the given integer\n    smallest_palindrome = num + 1\n    # Keep looping until we find a palindrome greater than or equal to the given integer\n    while not is_palindrome(smallest_palindrome):\n        smallest_palindrome += 1\n    return smallest_palindrome\n\ndef is_palindrome(num):\n    # Helper function to check if a number is a palindrome\n    return str(num) == str(num)[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef is_palindrome(n):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    # convert number to string and reverse it\n    reversed_num = str(n)[::-1]\n    # check if reversed_num is equal to original number\n    return reversed_num == str(n)\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # find the smallest palindrome greater than the specified number\n    smallest_palindrome = num + 1\n    while not is_palindrome(smallest_palindrome):\n        smallest_palindrome += 1\n    # return the next smallest palindrome\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is palindrome or not.\n    '''\n    num_str = str(num)\n    return num_str == num_str[::-1]\n\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num + 1):\n        return num + 1\n    elif num - 1 >= 0 and is_palindrome(num - 1):\n        return num - 1\n    else:\n        return None\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input number to string\n    num_str = str(num)\n\n    # Initialize variables\n    palindrome = \"\"\n    digit_count = 0\n\n    # Iterate through the digits of the number in reverse order\n    for i in range(len(num_str) - 1, -1, -1):\n        # Check if the current digit is a palindrome\n        if num_str[i] == num_str[digit_count]:\n            digit_count += 1\n            if digit_count == len(num_str):\n                # If all digits are palindromes, return the next smallest palindrome\n                palindrome += \"9\" * (len(num_str) - digit_count)\n                return int(palindrome)\n        else:\n            # If the current digit is not a palindrome, reset the palindrome count and append the next smallest digit\n            palindrome = \"\"\n            palindrome += str(9 - int(num_str[i]))\n            digit_count = 1\n\n    # If all digits have been checked and none are palindromes, return the input number\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    def get_next_palindrome(n):\n        if is_palindrome(n):\n            return n + 1\n        else:\n            while not is_palindrome(n + 1):\n                n += 1\n            return n + 1\n    \n    def get_largest_palindrome_less_than_n(n):\n        largest_palindrome = n\n        while largest_palindrome >= 10:\n            largest_palindrome = get_next_palindrome(largest_palindrome)\n        return largest_palindrome\n    \n    def get_largest_palindrome_less_than_or_equal_to_n(n):\n        largest_palindrome = n\n        while largest_palindrome > 10:\n            largest_palindrome = get_next_palindrome(largest_palindrome)\n        return largest_palindrome\n    \n    def get_largest_palindrome(n):\n        largest_palindrome = get_largest_palindrome_less_than_or_equal_to_n(n)\n        return get_next_palindrome(largest_palindrome)\n    \n    def get_next_largest_palindrome(n):\n        largest_palindrome = get_largest_palindrome_less_than_or_equal_to_n(n)\n        return get_next_palindrome(largest_palindrome)\n    \n    def get_next_smallest_palindrome(n):\n        next_palindrome = get_next_palindrome(n)\n        while not is_palindrome(next_palindrome):\n            next_palindrome = get_next_palindrome(next_palindrome)\n        return next_palindrome\n    \n    return get_next_smallest_palindrome(num)\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    num = int(sys.argv[1])\n    print(next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    A helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        if is_palindrome(num):\n            return num + 1\n        else:\n            num += 1\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    next_palindrome = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", next_palindrome)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_smallest_palindrome(num):\n    # Convert the number to a string\n    str_num = str(num)\n    # Initialize the result\n    result = ''\n    # Loop through each character in the string\n    for char in str_num:\n        # Convert the character to an integer and subtract 1\n        int_char = int(char) - 1\n        # Convert the integer back to a character and append to the result\n        result += str(int_char)\n    # Convert the result back to an integer\n    result = int(result)\n    # Check if the result is less than or equal to the input number\n    if result <= num:\n        return result\n    # Otherwise, return the next smallest palindrome\n    else:\n        return next_smallest_palindrome(result)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    left = 1\n    right = n\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid-1] > arr[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return \"The given array has less than k elements.\"\n    else:\n        arr.sort()\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    # check if k is within the bounds of the array\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    \n    # find the kth smallest element using binary search\n    left, right = 1, len(arr)\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid-1] > arr[mid]:\n            # if the middle element is smaller, search in the left half\n            left = mid + 1\n        else:\n            # if the middle element is larger, search in the right half\n            right = mid - 1\n            \n    # return the kth smallest element\n    return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Initialize a variable to keep track of the current position in the array\n    curr_pos = 1\n    # Initialize a variable to keep track of the current smallest element\n    smallest_elem = arr[0]\n    # Loop through the rest of the array\n    for i in range(1, len(arr)):\n        # If the current element is smaller than the current smallest element, update the variables\n        if arr[i] < smallest_elem:\n            smallest_elem = arr[i]\n            curr_pos = i + 1\n    # If the kth element is less than the smallest element, return the smallest element\n    if k <= curr_pos:\n        return smallest_elem\n    # If the kth element is greater than the smallest element, return the kth smallest element\n    else:\n        return kth_element(arr[curr_pos:], k - curr_pos)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    if not arr:\n        return None\n    \n    if k == 1:\n        return arr[0]\n    \n    for i in range(1, len(arr)):\n        if k == i + 1:\n            return arr[i]\n    \n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n < k or k < 1:\n        return \"Invalid input\"\n    for i in range(1, n+1):\n        if i == k:\n            return arr[i-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    else:\n        left, right = 1, len(arr)\n        while left <= right:\n            mid = left + (right - left) // 2\n            if k == mid:\n                return arr[k-1]\n            elif k < mid:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    else:\n        left = 1\n        right = len(arr)\n        while left < right:\n            mid = (left + right) // 2\n            if mid == k:\n                return arr[k-1]\n            elif mid < k:\n                left = mid + 1\n            else:\n                right = mid\n        return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    else:\n        left = 1\n        right = n\n        while left < right:\n            mid = (left + right) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid\n        return arr[left - 1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = ''.join(words[0:1] + [word.capitalize() for word in words[1:]])\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), *word[1:]])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.upper()\n        elif letter.isupper():\n            camel_case += '_' + letter.lower()\n        else:\n            camel_case += letter\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for char in word:\n        if char == \"_\":\n            camel_case += char\n        else:\n            camel_case += char.capitalize()\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join([word[:1].upper(), word[1:]])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case_words = [word.capitalize() for word in words]\n    # Join the words into a camel case string\n    camel_case_string = ''.join(camel_case_words)\n    return camel_case_string"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_word += char.lower()\n        elif char.isupper():\n            camel_word += char\n        else:\n            camel_word += '_' + char.lower()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.lower()\n        else:\n            camel_case += letter.upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word\n    capitalized_words = [word.capitalize() for word in words]\n    \n    # Join the words back into a string\n    camel_case_word = ''.join(capitalized_words)\n    \n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return \"\".join([word[0].upper(), word[1:].lower()])"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function returns the Eulerian number for the given values of n and m.\n    '''\n    # Initialize the number of paths to reach 0 and 1 from the starting node\n    paths_0_to_0 = 1\n    paths_0_to_1 = 1\n\n    # Calculate the number of paths to reach 0 from each of the other nodes\n    for i in range(1, n + 1):\n        paths_0_to_0 *= (i + m)\n        paths_0_to_1 *= (i - m)\n\n    # Calculate the number of paths to reach 1 from each of the other nodes\n    for i in range(2, n + 1):\n        paths_0_to_0 *= (i - m)\n        paths_0_to_1 *= (i + m)\n\n    # Return the product of the two path counts\n    return paths_0_to_0 * paths_0_to_1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case\n    if n == 0 or m == 0:\n        return 1\n    \n    # base case\n    if n == 1:\n        return m\n    \n    # recursive case\n    return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case\n    if m == 0:\n        return 1\n    \n    # recursive case\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return m + 1\n    if n == 2:\n        return 2 * m + 1\n    if n == 3:\n        return 2 * m + 1 + 1\n    if n == 4:\n        return 3 * m + 1 + 1 + 1\n    if n == 5:\n        return 3 * m + 1 + 1 + 1 + 1\n    if n == 6:\n        return 4 * m + 1 + 1 + 1 + 1 + 1\n    if n == 7:\n        return 4 * m + 1 + 1 + 1 + 1 + 1 + 1\n    if n == 8:\n        return 5 * m + 1 + 1 + 1 + 1 + 1 + 1 + 1\n    if n == 9:\n        return 5 * m + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the array\n    arr = [[0] * m for _ in range(n)]\n\n    # Fill the array with 1\n    for i in range(n):\n        arr[i][0] = 1\n\n    # Fill the array with 0's in the first row\n    for j in range(1, m):\n        arr[0][j] = 0\n\n    # Fill the array with the min of the adjacent numbers\n    for i in range(1, n):\n        for j in range(1, m):\n            arr[i][j] = min(arr[i-1][j], arr[i][j-1]) + arr[i-1][j-1]\n\n    # Return the final answer\n    return arr[n-1][m-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Check if n and m are positive integers\n    if not (isinstance(n, int) and isinstance(m, int)):\n        raise ValueError('Both n and m must be positive integers.')\n    elif n <= 0 or m <= 0:\n        raise ValueError('Both n and m must be positive integers.')\n    \n    # Calculate the factorial of n and m\n    factorial_n = 1\n    factorial_m = 1\n    for i in range(1, n+1):\n        factorial_n *= i\n    for i in range(1, m+1):\n        factorial_m *= i\n    \n    # Calculate the Eulerian number a(n, m) using the formula\n    a = (factorial_n * factorial_m) // (factorial_n // m)\n    \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # create a list of n-1 zeros followed by a list of m ones\n    lst = [0] * (n-1) + [1] * m\n    \n    # calculate the binomial coefficient using recursion\n    def binomial(n, k):\n        if k == 0:\n            return 1\n        if k == n:\n            return 1\n        return n * binomial(n-1, k-1)\n    \n    # calculate the Eulerian number using the binomial coefficient\n    a = binomial(n, m)\n    \n    # return the result\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 0\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == j:\n                print(i, end=\" \")\n            elif i + j == n:\n                print(i, end=\" \")\n            elif i > j and i + j == m:\n                print(i, end=\" \")\n    return None"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 2: \n        return 0\n    else:\n        a = 1\n        b = 0\n        for i in range(n): \n            c = (b * i * i + a * (m - i)) // (m - 1) \n            a = b \n            b = c \n        return b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m < 1:\n        return 0\n\n    a = 1\n    for i in range(1, n+1):\n        a *= (m*i) // i\n\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Use the `sorted()` function to sort the sublist in ascending order\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate over each sublist of strings in the input_list\n    for sublist in input_list:\n        # use the sorted() function to sort the sublist\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input_list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if type(elem) == bool and elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool and i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if type(element) == bool and element == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if isinstance(elem, bool):\n            count += elem\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):   \n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples\n    test_tup = tuple(test_tup)\n    test_list = tuple(test_list)\n\n    # Concatenate the two tuples\n    test_tup = test_tup + test_list\n\n    # Convert the concatenated tuple back to a list\n    test_tup = list(test_tup)\n\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuples\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    for item in test_list:\n        test_tup = tuple(item) + test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Check if the input is a list or a tuple\n    if isinstance(test_list, list) and isinstance(test_tup, tuple):\n        # Check if the input lists have the same length\n        if len(test_list) == len(test_tup):\n            # Append the lists to the tuples\n            new_tup = test_tup + test_list\n            # Return the new tuples\n            return new_tup\n        else:\n            print(\"The input lists have different lengths.\")\n    else:\n        print(\"The input is not a list or a tuple.\")"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the list to a tuple to make it immutable\n    test_tup = tuple(test_list)\n    # convert the tuple back to a list to make it mutable again\n    test_list = list(test_tup)\n    # append the list to the tuple\n    test_list.append(123)\n    # convert the modified list back to a tuple\n    test_tup = tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # convert the list to a tuple\n    test_tup = tuple(test_list)\n    # append the list to the tuple\n    test_tup += (test_list,)\n    # return the updated tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    for i in range(len(test_tup)):\n        test_tup[i] = test_tup[i] + test_list\n    return tuple(test_tup)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # concatenate the three lists into one list\n    merged_list = num1 + num2 + num3\n    \n    # sort the list in ascending order\n    sorted_list = heapq.merge(num1, num2, num3)\n    \n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Create a min heap to keep track of the smallest elements\n    min_heap = []\n    # Iterate over the three lists and add the smallest elements to the min heap\n    heapq.heappush(min_heap, num1[0])\n    heapq.heappush(min_heap, num2[0])\n    heapq.heappush(min_heap, num3[0])\n    # Merge the remaining elements of the three lists into a single list\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n        if min_heap:\n            heapq.heappush(min_heap, min(num1[1:], key=lambda x: x[0]))\n            heapq.heappush(min_heap, min(num2[1:], key=lambda x: x[0]))\n            heapq.heappush(min_heap, min(num3[1:], key=lambda x: x[0]))\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n            \n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    # Merge num1 and num2\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    while num1 and num2:\n        if -heapq.heappop(num1) < -heapq.heappop(num2):\n            heapq.heappush(merged_list, -heapq.heappop(num1))\n        else:\n            heapq.heappush(merged_list, -heapq.heappop(num2))\n    # Merge num1 and num3\n    heapq.heapify(num1)\n    while num1 and num3:\n        if -heapq.heappop(num1) < -heapq.heappop(num3):\n            heapq.heappush(merged_list, -heapq.heappop(num1))\n        else:\n            heapq.heappush(merged_list, -heapq.heappop(num3))\n    # Merge num2 and num3\n    heapq.heapify(num2)\n    while num2 and num3:\n        if -heapq.heappop(num2) < -heapq.heappop(num3):\n            heapq.heappush(merged_list, -heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, -heapq.heappop(num3))\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three lists and merges them into a single sorted list.\n    '''\n\n    # Combine all the lists into a single list\n    combined_list = num1 + num2 + num3\n\n    # Convert the combined list into a min heap\n    heap = list(heapq.merge(combined_list))\n\n    # Remove the min heap from the combined list and convert it back into a list\n    merged_list = list(heapq.merge(*[heapq.merge([x]) for x in combined_list]))\n\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Step 1: Create three empty lists\n    list1 = []\n    list2 = []\n    list3 = []\n    # Step 2: Iterate through the three lists and add their elements to the appropriate list\n    for i in num1:\n        list1.append(i)\n    for i in num2:\n        list2.append(i)\n    for i in num3:\n        list3.append(i)\n    # Step 3: Merge the three lists into one sorted list\n    merged_list = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j]:\n            if list1[i] < list3[k]:\n                merged_list.append(list1[i])\n                i += 1\n            else:\n                merged_list.append(list3[k])\n                k += 1\n        elif list2[j] < list3[k]:\n            merged_list.append(list2[j])\n            j += 1\n        else:\n            merged_list.append(list3[k])\n            k += 1\n    merged_list += list1[i:]\n    merged_list += list2[j:]\n    merged_list += list3[k:]\n    # Step 4: Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Create a min heap of the merged list and extract the minimum element\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n        \n    # Extract the minimum element and append it to the result list\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n        \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge num1 and num2 into one list\n    merged_list = merge(num1, num2)\n\n    # Merge the merged list with num3\n    return merge(merged_list, num3)\n\n\ndef merge(list1, list2):\n    \"\"\"\n    Merge two sorted lists into a single sorted list.\n    \"\"\"\n    # Initialize an empty merged list\n    merged_list = []\n\n    # Compare the first elements of both lists and add the smaller one to the merged list\n    if list1[0] <= list2[0]:\n        merged_list.append(list1[0])\n        list1 = list1[1:]\n    else:\n        merged_list.append(list2[0])\n        list2 = list2[1:]\n\n    # Continue comparing and appending elements to the merged list until one of the lists is empty\n    while list1 and list2:\n        if list1[0] <= list2[0]:\n            merged_list.append(list1[0])\n            list1 = list1[1:]\n        else:\n            merged_list.append(list2[0])\n            list2 = list2[1:]\n\n    # Add any remaining elements of the non-empty list to the merged list\n    merged_list += list1 + list2\n\n    # Sort the merged list using merge sort\n    return merge_sort(merged_list)\n\n\ndef merge_sort(list_to_sort):\n    \"\"\"\n    Sort a list using merge sort algorithm.\n    \"\"\"\n    # Base case: if the list has only one element or is empty, it is already sorted\n    if len(list_to_sort) <= 1:\n        return list_to_sort\n\n    # Divide the list into two halves\n    mid = len(list_to_sort) // 2\n    left_half = list_to_sort[:mid]\n    right_half = list_to_sort[mid:]\n\n    # Sort the left and right halves recursively\n    sorted_left_half = merge_sort(left_half)\n    sorted_right_half = merge_sort(right_half)\n\n    # Merge the sorted halves into a single sorted list\n    return merge(sorted_left_half, sorted_right_half)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list using heapq\n    heapq.heapify(merged_list)\n\n    # Create a new list to store the sorted merged list\n    sorted_merged_list = []\n\n    # Extract the minimum element from the merged list and add it to the new list\n    while merged_list:\n        sorted_merged_list.append(heapq.heappop(merged_list))\n\n    return sorted_merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into one\n    combined_list = num1 + num2 + num3\n    # Convert the combined list into a heap\n    heapq.heapify(combined_list)\n    # Extract the elements from the heap\n    sorted_list = []\n    while combined_list:\n        sorted_list.append(heapq.heappop(combined_list))\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \n    Parameters:\n    s (str): A binary string to be rotated\n    n (int): A positive integer indicating the number of times the string should be rotated\n    \n    Returns:\n    int: The number of odd numbers when rotating the string n times\n    \"\"\"\n    \n    # Convert the binary string to a list of characters\n    s_list = [char for char in s]\n    \n    # Calculate the length of the binary string\n    n_bits = len(s)\n    \n    # Rotate the binary string n times\n    for _ in range(n):\n        # Calculate the left half of the list\n        left_half = s_list[:n_bits//2]\n        \n        # Calculate the right half of the list\n        right_half = s_list[n_bits//2:]\n        \n        # Combine the left and right halves into a single list\n        s_list = left_half + right_half\n        \n        # Reverse the list\n        s_list.reverse()\n        \n    # Count the number of odd numbers in the rotated string\n    count = sum(1 for bit in s_list if bit == '1')\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Create a binary string from the input string\n    binary = bin(int(s, 2))[2:]\n    # Get the length of the binary string\n    n = len(binary)\n    # Create an empty string to store the rotated binary string\n    rotated = ''\n    # Loop through the given number of times\n    for i in range(n):\n        # Append the leftmost bit of the binary string to the rotated string\n        rotated += binary[i]\n        # Remove the leftmost bit of the binary string\n        binary = binary[1:]\n    # Calculate the number of odd values in the rotated binary string\n    odd_count = 0\n    for bit in rotated:\n        if bit == '1':\n            odd_count += 1\n    # Return the count of odd values in the rotated binary string\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # initialize a variable to store the number of odd values\n    count = 0\n    \n    # loop through each character in the binary string\n    for i in range(len(s)):\n        # check if the current character is odd\n        if int(s[i]) % 2!= 0:\n            count += 1\n        \n        # rotate the binary string\n        s = s[-1] + s[:-1]\n    \n    # return the count of odd values after rotating the string n times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert binary string to list of characters\n    binary_list = list(s)\n    # Find the length of the binary string\n    binary_length = len(binary_list)\n    # Initialize count to zero\n    count = 0\n    # Loop n times\n    for i in range(n):\n        # Reverse the binary string\n        binary_list = binary_list[::-1]\n        # Initialize the count to zero\n        sub_count = 0\n        # Loop through the rotated binary string\n        for j in range(binary_length):\n            # If the current character is an odd value\n            if binary_list[j] == '1':\n                # Increment the sub-count\n                sub_count += 1\n            else:\n                # Reset the sub-count to zero\n                sub_count = 0\n            # If the sub-count becomes odd, increment the count\n            if sub_count % 2!= 0:\n                count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    s_len = len(s)\n    count = 0\n    \n    for i in range(n):\n        s = s[-s_len:] + s[:-s_len]\n        count += s.count('1')\n        \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string into a list\n    binary_list = list(s)\n\n    # Rotate the list n times\n    for i in range(n):\n        temp = binary_list[0]\n        for j in range(len(binary_list) - 1):\n            binary_list[j] = binary_list[j + 1]\n        binary_list[len(binary_list) - 1] = temp\n\n    # Count the number of odd values in the rotated list\n    count = 0\n    for num in binary_list:\n        if num == '1':\n            count += 1\n\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for _ in range(n):\n        if s.count('1') % 2!= 0:\n            count += 1\n            s = s[1:] + s[0]\n        else:\n            s = s[1:]\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize variables to store the sum of odd numbers and the number of even numbers\n    odd_sum = 0\n    even_sum = 0\n    # initialize the count of odd and even numbers\n    odd_count = 0\n    even_count = 0\n    # loop through the binary string n times\n    for i in range(n):\n        # initialize the string s_new to store the rotated binary string\n        s_new = ''\n        # loop through the characters in the binary string s\n        for j in range(len(s)):\n            # append the next character to s_new based on the current character in s\n            if s[j] == '1':\n                s_new += '0'\n            else:\n                s_new += '1'\n        # update the count of even and odd numbers\n        even_count += s_new.count('0')\n        odd_count += s_new.count('1')\n        # update the sum of even and odd numbers\n        even_sum += even_count * 2\n        odd_sum += odd_count * 2\n        # update the binary string s to s_new\n        s = s_new\n    # return the sum of odd numbers\n    return odd_sum"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    s = s.strip() # Remove any leading or trailing spaces\n    binary = ''.join([str(int(i)) for i in s]) # Convert string to binary\n    rotated = binary[n:] + binary[:n] # Rotate the binary string\n    odd_count = 0\n    for i in rotated:\n        if int(i) % 2!= 0:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return odd_Equivalent(s, n // 2)\n    else:\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                count += 1\n            else:\n                break\n        return odd_Equivalent(s[count:] + s[:count], n // 2) + count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common = set()\n\n    # Loop through all the elements of the nested list\n    for i in range(len(nestedlist)):\n        # Loop through the remaining elements of the nested list\n        for j in range(i+1, len(nestedlist)):\n            # Check if the current element and the next element are common\n            if nestedlist[i] == nestedlist[j]:\n                common.add(nestedlist[i])\n                break\n\n    # Return the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list and returns a new list of the common elements in that list.\n    '''\n\n    # create two empty sets to store common elements\n    common = set()\n    set1 = set()\n\n    # loop through each element in the nested list\n    for elem in nestedlist:\n        # check if the element is in set1\n        if elem in set1:\n            common.add(elem)\n        # if the element is not in set1, add it to set1 and the common set\n        else:\n            set1.add(elem)\n            common.add(elem)\n\n    # convert the common set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n\n    for item in nestedlist:\n        if isinstance(item, list):\n            common_elements = common_elements.union(set(item))\n\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common_elements:\n                    continue\n                else:\n                    common_elements.append(nestedlist[i][j][k])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set for storing unique elements\n    unique_elements = set()\n\n    # Loop through each element in the nested list\n    for element in nestedlist:\n        # If the element is a list, recursively call the function on that list\n        if type(element) == list:\n            unique_elements.update(common_in_nested_lists(element))\n        # If the element is not a list, add it to the set\n        else:\n            unique_elements.add(element)\n\n    # Convert the set to a list and return it\n    return list(unique_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty set to store the common elements\n    common = set()\n    # loop through the nested list\n    for i in nestedlist:\n        # loop through the nested list again\n        for j in nestedlist:\n            # if the elements are the same, add it to the set\n            if i == j:\n                common.add(i)\n    # return the common elements as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Create a set to store the common elements\n    common_set = set()\n\n    # Iterate through each nested list and add its elements to the set\n    for sublist in nestedlist:\n        common_set.update(sublist)\n\n    # Convert the set back to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store the common elements\n    common_set = set()\n\n    # Iterate through the nested lists\n    for lst in nestedlist:\n        # Iterate through the list and add the elements to the set\n        for item in lst:\n            common_set.add(item)\n\n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if not dict1:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    if len(list1) == 0:\n        return True\n\n    for i in range(len(list1)):\n        if not list1[i]:\n            return False\n\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Iterate through the list of dictionaries\n    for i in list1:\n        # Check if the dictionary is empty or not\n        if i:\n            return False\n    # If all dictionaries are empty, return True\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # convert the tuple into a list to make it mutable\n    nums = list(nums)\n    # initialize the sum to 0\n    total = 0\n    # loop through the list and add each element to the sum\n    for num in nums:\n        total += num\n    # return the sum as the output\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert tuple to list to make indexing easier\n    nums_list = list(nums)\n    # Initialize sum to 0\n    sum_int = 0\n    # Loop through the list and add each element to the sum\n    for num in nums_list:\n        sum_int += num\n    # Return the sum as an integer\n    return int(sum_int)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums = list(nums)\n    # Initialize an empty string\n    result = \"\"\n    # Iterate through the list and convert each integer to a string and append it to the result string\n    for num in nums:\n        result += str(num)\n    # Convert the result string to an integer and return it\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a string\n    num_str = str(nums)\n    # Initialize the sum variable to 0\n    sum_ = 0\n    # Loop through each character in the string\n    for char in num_str:\n        # If the character is a digit, add it to the sum\n        if char.isdigit():\n            sum_ += int(char)\n    # Return the sum\n    return sum_"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                print(\"Error: Unable to convert element to float:\", element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                continue\n            except ValueError:\n                try:\n                    int(element)\n                    element = float(element)\n                    sublist[sublist.index(element)] = element\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        for j in i:\n            try:\n                if isinstance(j, str):\n                    j = float(j)\n                elif isinstance(j, int) or isinstance(j, float):\n                    pass\n                else:\n                    raise TypeError\n            except TypeError:\n                pass\n            else:\n                result.append(j)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n            except ValueError:\n                try:\n                    int(element)\n                except ValueError:\n                    if element!= \"\":\n                        test_list[test_list.index(row)][test_list[test_list.index(row)].index(element)] = float(element)\n            else:\n                test_list[test_list.index(row)][test_list[test_list.index(row)].index(element)] = float(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, str):\n                try:\n                    result.append(float(element))\n                except ValueError:\n                    pass\n            elif isinstance(element, (int, float)):\n                result.append(float(element))\n            else:\n                pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and store the resulting list in a variable\n    list_of_strings = string.split()\n    \n    return list_of_strings"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize count variable and set its value to 0\n    count = 0\n    \n    # Traverse the array\n    for i in range(len(arr)):\n        # If the count is already 0, then we have not found any element that appears only once\n        if count == 0:\n            # Traverse the remaining array elements\n            for j in range(i+1, len(arr)):\n                # If the current element is equal to the previous element, then increment the count\n                if arr[i] == arr[j]:\n                    count += 1\n        # If the count is greater than 0, then we have found an element that appears only once\n        else:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    i = 0\n    while i < n:\n        if arr[i] == arr[i+1]:\n            return arr[i]\n        i += 1\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count += 1\n            if count == 2:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[arr.index(arr[i])]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num in count:\n        if count[num] == 1:\n            return num\n    return \"There is no element that appears only once in the array.\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i > 0 and arr[i] == arr[i-1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    # Initialize variables\n    i = 0\n    count = 1\n    # Traverse through the array\n    while i < n-1:\n        # If the element is already present in the remaining elements, increment the count\n        if arr[i] == arr[i+1]:\n            count += 1\n        else:\n            i += count\n            count = 1\n    # If the element appears only once, return it\n    if count == 1:\n        return arr[i]\n    else:\n        return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize two variables to keep track of the minimum and maximum elements in the array\n    min_element = arr[0]\n    max_element = arr[0]\n\n    # Iterate over the array and update the minimum and maximum elements\n    for i in range(1, len(arr)):\n        if arr[i] < min_element:\n            min_element = arr[i]\n        elif arr[i] > max_element:\n            max_element = arr[i]\n\n    # Initialize a variable to keep track of the count of elements in the array\n    count = 1\n\n    # Iterate over the array again to count the number of occurrences of the minimum element\n    for i in range(1, len(arr)):\n        if arr[i] == min_element:\n            count += 1\n        else:\n            break\n\n    # Check if the count is equal to 1, indicating that the minimum element appears only once in the array\n    if count == 1:\n        return min_element\n    else:\n        return \"The minimum element appears more than once in the array.\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize two variables to keep track of the first and last occurrence of the element\n    first_occurrence = -1\n    last_occurrence = -1\n\n    # Loop through the array and keep track of the first occurrence and the last occurrence of the element\n    for i in range(len(arr)):\n        if arr[i] == arr[first_occurrence]:\n            if first_occurrence == -1:\n                first_occurrence = i\n        else:\n            first_occurrence = -1\n\n        if arr[i] == arr[last_occurrence]:\n            last_occurrence = i\n        else:\n            last_occurrence = -1\n\n    # If the element appears only once, return its value\n    if first_occurrence!= -1 and last_occurrence!= -1:\n        return arr[first_occurrence]\n    else:\n        return \"The element appears only once in the array\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate through the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the array again and find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize the maximum absolute product and the result\n    max_abs_product = float('-inf')\n    result = float('-inf')\n\n    # Iterate over the list\n    for i in range(len(list1)):\n        # Check if the current tuple is valid\n        if len(list1[i]) == 2:\n            # Calculate the absolute difference between the elements\n            abs_diff = abs(list1[i][0] - list1[i][1])\n            # Update the maximum absolute product if the current product is greater\n            if abs_diff > max_abs_product:\n                max_abs_product = abs_diff\n                result = (list1[i][0], list1[i][1])\n\n    # Return the result\n    return result"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0]*list1[j][1]), abs(list1[j][0]*list1[i][1]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            product = abs(pair[0] * pair[1])\n            if product > max_product:\n                max_product = product\n                max_pair = pair\n    \n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][1] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][1] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = [(x, y) for x in list1 for y in list1 if x!= y]  # filtering out duplicate pairs\n    max_product = 0\n    for i in range(len(list2)):\n        for j in range(i + 1, len(list2)):\n            product = abs(list2[i][0] * list2[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_abs_product = max(max_abs_product, product)\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = float('-inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the pair of tuples\n            product = list1[i] * list1[j]\n            # Calculate the absolute value of the product\n            product_abs = abs(product)\n            # Update the current product\n            current_product = max(product, current_product)\n            # Update the maximum product\n            max_product = max(max_product, current_product)\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for num in range(1, limit):\n        if is_amicable(num):\n            sum_of_amicable_numbers += num\n    return sum_of_amicable_numbers\n\ndef is_amicable(num):\n    '''\n    Define a function to check if a number is amicable to any other number.\n    '''\n    for i in range(1, num):\n        if (num % i == 0) and (i!= num):\n            return True\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_amicable(num):\n    \"\"\"\n    A function to check if a number is amicable or not.\n    \"\"\"\n    a = sum([x for x in range(1, num) if num % x == 0])\n    if a == num:\n        return True\n    else:\n        return False\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    A function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i not in amicable_numbers:\n            for j in range(i, limit+1):\n                if i+j == limit and i!= j and i not in amicable_numbers and j not in amicable_numbers:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\nprint(sum_amicable_numbers(2000000))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_of_divisors(n):\n        divisors = set()\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n//i)\n        return divisors\n    \n    amicable_numbers = set()\n    for num in range(1, limit+1):\n        divisors = sum_of_divisors(num)\n        if num not in amicable_numbers and num!= sum(divisors) and max(divisors) <= limit:\n            amicable_numbers.add(num)\n    \n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(2, limit + 1):\n        if num!= 1:\n            a = 0\n            b = num\n            while b!= 1:\n                a += b\n                b = a % b\n            if num == b:\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize the sum variable to zero\n    total = 0\n    \n    # loop through all numbers from 2 to the specified limit\n    for num in range(2, limit + 1):\n        # check if the number is amicable\n        if num == sum_of_proper_divisors(num):\n            # if it is, add it to the total\n            total += num\n    \n    # return the total\n    return total\n\ndef sum_of_proper_divisors(num):\n    '''\n    Write a function to sum all proper divisors of a specified number.\n    '''\n    # initialize the sum variable to zero\n    total = 0\n    \n    # loop through all numbers from 1 to the square root of the specified number\n    for i in range(1, int(num**0.5) + 1):\n        # check if the specified number is divisible by i\n        if num % i == 0:\n            # if it is, add the divisor to the total\n            total += i\n    \n    # return the total\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n\ndef sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers_sum(limit) and is_prime(i):\n            sum += i\n    return sum\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_prime(i) and i!= 1:\n            for j in range(1, limit + 1):\n                if is_prime(j) and (i + j) == limit:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(j)\n    return amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_amicable_number(num):\n    \"\"\"\n    Check if a number is amicable by iterating from 1 to the square root of the number and checking if there are any numbers between those two extremes that are both divisible by the number itself.\n    \"\"\"\n    sqrt_num = int(num**0.5)\n    for i in range(1, sqrt_num+1):\n        if num % i == 0 and num//i!= i:\n            return True\n    return False\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_amicable = 0\n    for num in range(1, limit+1):\n        if is_amicable_number(num) and num!= 1:\n            sum_amicable += num\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num == sum_of_divisors(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef sum_of_divisors(num):\n    '''\n    Write a function to calculate the sum of all divisors of a number.\n    '''\n    divisors = [1]\n    for i in range(2, num):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize the sum variable to 0\n    amicable_sum = 0\n    \n    # loop through numbers from 1 to the limit (inclusive)\n    for i in range(1, limit+1):\n        \n        # check if the number is amicable (i.e. divisible by one of its factors)\n        if i == 1:\n            continue # skip the first number (1 is not amicable)\n        elif sum(set(range(2, int(i**0.5)+1))) == i:\n            # if the number is amicable, add it to the sum\n            amicable_sum += i\n    \n    # return the sum of all amicable numbers\n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n\n    # Convert the input to complex numbers\n    z = a + b*1j\n    \n    # Calculate the angle of the complex number\n    angle = cmath.phase(z)\n    \n    # Convert the angle to degrees\n    angle = cmath.degrees(angle)\n    \n    # Return the angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    c = a + bj * 1j\n    angle = cmath.phase(c)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j) # use complex conjugation to get the real part of the angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # get the modulus and phase of the complex number\n    modulus = cmath.sqrt(a*a + b*b)\n    phase = cmath.phase(a+b*1j)\n    \n    # convert the angle to degrees\n    angle = 180.0*phase/cmath.pi\n    if angle > 180:\n        angle -= 360\n    \n    # return the angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    curr_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff, curr_diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    count_zero = 0\n    count_one = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            count_zero += 1\n        elif char == '1':\n            count_one += 1\n        if count_zero > count_one:\n            diff = count_zero - count_one\n        else:\n            diff = count_one - count_zero\n        max_diff = max(max_diff, diff)\n        count_zero = count_one = 0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    # Initialize the maximum length and the count of 0s and 1s in the first character\n    max_length = 0\n    count_0s = 0\n    count_1s = 0\n\n    # Loop through the remaining characters of the string\n    for char in string[1:]:\n        # Update the count of 0s and 1s in the current character\n        if char == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n\n        # Calculate the current length of the sub-string\n        length = count_0s + count_1s\n\n        # Update the maximum length if necessary\n        if length > max_length:\n            max_length = length\n\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize variables\n    max_diff = 0\n    prev_diff = 0\n    \n    # Iterate through the binary string\n    for i in range(len(string)):\n        # Check if the current digit is a 0\n        if string[i] == '0':\n            # If it is, increase the number of 0s and reset the number of 1s\n            count_0s = 0\n            count_1s = 1\n        else:\n            # If it is a 1, increase the number of 1s and reset the number of 0s\n            count_0s = 1\n            count_1s = 0\n        \n        # Calculate the difference between the two counts\n        diff = abs(count_0s - count_1s)\n        \n        # Update the maximum difference if necessary\n        max_diff = max(max_diff, diff)\n        \n        # If the previous difference was not equal to 0, the current difference must be larger than it\n        if prev_diff!= 0:\n            if diff > prev_diff:\n                max_diff = max(max_diff, diff - prev_diff)\n        \n        # Update the previous difference\n        prev_diff = diff\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    max_diff = 0\n    for i in range(len(string)):\n        # check for 0s\n        count_0s = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0s += 1\n                break\n        # check for 1s\n        count_1s = 0\n        for j in range(i, len(string)):\n            if string[j] == '1':\n                count_1s += 1\n                break\n        # calculate the difference\n        diff = abs(count_0s - count_1s)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    \n    for i in range(length):\n        count_0 = 0\n        count_1 = 0\n        \n        for j in range(i, length):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            \n            if count_0 > count_1:\n                max_diff = max(max_diff, count_0 - count_1)\n            \n            elif count_0 < count_1:\n                max_diff = max(max_diff, count_1 - count_0)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0]*n for i in range(n)]\n    max_diff = 0\n    \n    for i in range(1, n):\n        for j in range(i):\n            if string[j] == '0' and string[i] == '1':\n                dp[j][i] = dp[j+1][i-1] + 1\n                max_diff = max(max_diff, dp[j][i])\n                \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n\n    for i in range(length):\n        for j in range(i+1, length):\n            if string[i] == '0' and string[j] == '0':\n                diff = j - i\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    def count_bits(num):\n        return bin(num).count('1')\n    \n    def binary_to_int(binary_string):\n        return int(binary_string, 2)\n    \n    def count_zeros(binary_string):\n        zeros = 0\n        for bit in binary_string:\n            if bit == '0':\n                zeros += 1\n        return zeros\n    \n    def count_ones(binary_string):\n        ones = 0\n        for bit in binary_string:\n            if bit == '1':\n                ones += 1\n        return ones\n    \n    def get_substring(binary_string, start, end):\n        return binary_string[start:end]\n    \n    def count_substrings(binary_string):\n        count = 0\n        for i in range(1, len(binary_string) - 1):\n            count += 1\n        return count\n    \n    def get_length_difference(binary_string, start, end):\n        substring = get_substring(binary_string, start, end)\n        zeros = count_zeros(substring)\n        ones = count_ones(substring)\n        return abs(zeros - ones)\n    \n    max_diff = 0\n    for start in range(1, len(string) - 1):\n        for end in range(start + 1, len(string)):\n            sub_string = get_substring(string, start, end)\n            sub_count = count_substrings(sub_string)\n            sub_diff = get_length_difference(string, start, end)\n            if sub_diff > max_diff:\n                max_diff = sub_diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # initialize variables to store number of 0s and 1s in each sub-string\n    max_diff = 0\n    curr_diff = 0\n    \n    # iterate through each sub-string of the given binary string\n    for i in range(len(string)):\n        # calculate the difference between the number of 0s and number of 1s in the current sub-string\n        curr_diff = string.count('0') - string.count('1')\n        # update the maximum difference if the current difference is greater\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n            \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = set()\n\n    def find_common_divisors(num):\n        \"\"\"\n        Helper function to find common divisors of a given number.\n        \"\"\"\n        if num == 1:\n            return []\n        if num % 2 == 0:\n            divisors = find_common_divisors(num // 2)\n            divisors.append(num)\n            return divisors\n        else:\n            divisors = find_common_divisors(num - 1)\n            divisors.append(num)\n            return divisors\n\n    for num in [a, b]:\n        common_divisors.update(find_common_divisors(num))\n\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    num = a\n    while num % b == 0:\n        divisors.append(b)\n        num /= b\n    return sum(divisors)\n\nprint(sum(60, 24)) # Output: 8"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # Function to find the common divisors of two given numbers\n    def common_divisors(n, m):\n        if m == 0:\n            return []\n        elif n % m == 0:\n            return [m] + common_divisors(n, n//m)\n        else:\n            return common_divisors(n, m-1)\n    \n    # Find the sum of common divisors\n    common_divisors_list = common_divisors(a, b)\n    sum_of_common_divisors = sum(common_divisors_list)\n    \n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # initialize a set to store all common divisors\n    common_divisors = set()\n\n    # loop through all numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # check if i is a common divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # add i to the set of common divisors\n            common_divisors.add(i)\n\n    # return the sum of the common divisors\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Find the set of divisors of the first number\n    divisors1 = set(divisor for divisor in range(1, a + 1) if a % divisor == 0)\n\n    # Find the set of divisors of the second number\n    divisors2 = set(divisor for divisor in range(1, b + 1) if b % divisor == 0)\n\n    # Find the common divisors of the two numbers\n    common_divisors = divisors1 & divisors2\n\n    # Find the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Function to calculate the sum of common divisors of two numbers\n    def common_divisors(num1, num2):\n        \"\"\"\n        Calculate the sum of common divisors of two given numbers.\n        \"\"\"\n\n        # Initialize the sum to zero\n        total = 0\n\n        # Loop through all numbers between 1 and the smaller number\n        for i in range(1, min(num1, num2) + 1):\n\n            # Check if the current number is a divisor of both numbers\n            if num1 % i == 0 and num2 % i == 0:\n                # Add the current number to the total sum\n                total += i\n\n        # Return the total sum of common divisors\n        return total\n\n    # Calculate the sum of common divisors of the two given numbers\n    result = common_divisors(a, b)\n\n    # Return the result\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #initialize variables to store common divisors of a and b\n    cd_a = []\n    cd_b = []\n    #loop through all numbers from 1 to a and b\n    for num in range(1,a+b+1):\n        #check if num is a common divisor of a and b\n        if num%a==0 and num%b==0:\n            #if it is, add it to the appropriate list\n            if num in cd_a:\n                cd_a[cd_a.index(num)].append(b)\n            else:\n                cd_a.append([num,b])\n    #loop through all numbers from 1 to b\n    for num in range(1,b+1):\n        #check if num is a common divisor of a and b\n        if num%a==0 and num%b==0:\n            #if it is, add it to the appropriate list\n            if num in cd_b:\n                cd_b[cd_b.index(num)].append(a)\n            else:\n                cd_b.append([num,a])\n    #initialize variables to store sum of common divisors of a and b\n    total_a = []\n    total_b = []\n    #loop through each common divisor of a and b and add it to the appropriate list\n    for i in cd_a:\n        for j in i[1]:\n            if j not in total_a:\n                total_a.append(j)\n    for i in cd_b:\n        for j in i[1]:\n            if j not in total_b:\n                total_b.append(j)\n    #add up the common divisors of a and b\n    total_sum = sum(total_a)+sum(total_b)\n    #return the total sum of common divisors of a and b\n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = set()\n    for i in range(1, b + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_divisor(a, b):\n    # find the greatest common divisor using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum(a, b):\n    # find the sum of common divisors of a and b\n    gcd = common_divisor(a, b)\n    return a // gcd + b // gcd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        Write a python function to find the greatest common divisor of two given numbers.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    def is_prime(n):\n        \"\"\"\n        Write a python function to check if a given number is prime or not.\n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def common_divisors(a, b):\n        \"\"\"\n        Write a python function to find the common divisors of two given numbers.\n        \"\"\"\n        divisors = []\n        if a % b == 0:\n            divisors.append(b)\n        while a % b!= 0:\n            a, b = b, a % b\n        return divisors\n\n    def common_divisor_sum(a, b):\n        \"\"\"\n        Write a python function to find the sum of common divisors of two given numbers.\n        \"\"\"\n        if is_prime(a) or is_prime(b):\n            return sum(a, b)\n        else:\n            divisors_a = common_divisors(a, b)\n            divisors_b = common_divisors(b, a)\n            return sum([gcd(x, a) for x in divisors_a if gcd(x, a) in divisors_b])\n\n    return common_divisor_sum(a, b)\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for _ in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        remainder = x % y\n        result += remainder\n        x //= y\n        y //= 10\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(\"The product of\", x, \"and\", y, \"is\", result)"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into words\n    long_words = [] # initialize an empty list to store long words\n    for word in words:\n        if len(word) > n:\n            long_words.append(word) # if the word is longer than n characters, append it to the list\n    return long_words # return the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into words\n    words = str.split()\n    # Initialize an empty list to store the longer words\n    longer_words = []\n    # Loop through the words\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # If it is, append it to the longer_words list\n            longer_words.append(word)\n    # Return the longer_words list\n    return longer_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # split the input string into a list of words\n    words = str.split()\n    # initialize an empty list to store the longer words\n    longer_words = []\n    # loop through each word in the list of words\n    for word in words:\n        # if the length of the current word is greater than n, add it to the longer_words list\n        if len(word) > n:\n            longer_words.append(word)\n    # return the list of longer words\n    return longer_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words in the given list that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # check if all rows are equal\n    for i in range(n):\n        row = my_matrix[i]\n        if row!= row[::-1]:\n            return False\n    # check if all columns are equal\n    for j in range(n):\n        col = [row[j] for row in my_matrix]\n        if col!= col[::-1]:\n            return False\n    # check if the main diagonal is equal to its mirror image\n    mirror_image = [[my_matrix[i][j] for j in range(n)] for i in range(n)]\n    if mirror_image!= mirror_image[::-1]:\n        return False\n    # check if the secondary diagonal is equal to its mirror image\n    mirror_image = [[my_matrix[j][i] for j in range(n)] for i in range(n)]\n    if mirror_image!= mirror_image[::-1]:\n        return False\n    # if all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in range(n):\n        # Check rows\n        for j in range(n):\n            if my_matrix[i][j]!= i+j+1:\n                return False\n\n        # Check columns\n        for j in range(n):\n            if my_matrix[j][i]!= i+j+1:\n                return False\n\n    # Check diagonals\n    for i in range(n):\n        if my_matrix[i][i]!= i+1 or my_matrix[i][n-i-1]!= n*n-i:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Initialize the sum of the rows and columns\n    row_sum = sum(my_matrix[i] for i in range(len(my_matrix)))\n    col_sum = sum(my_matrix[j] for j in range(len(my_matrix[0])))\n    \n    # Initialize the sum of the diagonals\n    diag1_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    diag2_sum = my_matrix[2][0] + my_matrix[1][1] + my_matrix[0][2]\n    \n    # Check if the matrix is a magic square\n    if row_sum == col_sum == diag1_sum == diag2_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix has all the elements 1 to n^2\n    for row in my_matrix:\n        if len(row)!= len(my_matrix[0]):\n            return False\n        for num in row:\n            if not (1 <= num <= len(my_matrix)**2):\n                return False\n    \n    # Check if the matrix is a magic square\n    n = len(my_matrix)\n    magic_sum = n * (n * (n ** 2 + 1) // 2)\n    for row in my_matrix:\n        row_sum = sum(row)\n        if row_sum!= magic_sum:\n            return False\n    for col in range(n):\n        col_sum = sum([row[col] for row in my_matrix])\n        if col_sum!= magic_sum:\n            return False\n    for i in range(n):\n        for j in range(i + 1, n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is square\n    if n**2!= sum(sum(row) for row in my_matrix):\n        return False\n    # Check if the matrix is a magic square\n    for i in range(n):\n        if my_matrix[i][i]!= i+1 or my_matrix[i][n-i-1]!= i+1:\n            return False\n    for i in range(n):\n        if my_matrix[i][i]!= i+1 or my_matrix[n-i-1][i]!= i+1:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the dimensions of the matrix\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n    # Initialize the sum of the diagonal elements to zero\n    diag_sum = 0\n    # Iterate through the matrix and calculate the sum of the diagonal elements\n    for i in range(n):\n        for j in range(n):\n            diag_sum += my_matrix[i][j]\n    # If the sum of the diagonal elements is equal to the product of the elements of the matrix, it is a magic square\n    if diag_sum == n * (n + 1) * (2 * n + 1) // 6:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Initialize the sum of each row\n    row_sums = [0] * len(my_matrix[0])\n\n    # Initialize the sum of each column\n    col_sums = [0] * len(my_matrix)\n\n    # Initialize the sum of each diagonal\n    diag_sum1 = 0\n    diag_sum2 = 0\n\n    # Check if each element is equal to its corresponding sum\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # Check if the element is a digit\n            if not my_matrix[i][j].isdigit():\n                return False\n\n            # Add the element to the corresponding sum\n            row_sums[int(my_matrix[i][j]) - 1] += int(my_matrix[i][j])\n            col_sums[int(my_matrix[j][i]) - 1] += int(my_matrix[j][i])\n\n            # Add the element to the corresponding diagonal sum\n            if i == j:\n                diag_sum1 += int(my_matrix[i][j])\n            if i + j == len(my_matrix) - 1:\n                diag_sum2 += int(my_matrix[i][j])\n\n    # Check if the matrix is a magic square\n    if diag_sum1 == diag_sum2 and diag_sum1 == row_sums[0] and diag_sum1 == col_sums[0]:\n        return True\n    elif row_sums[0] == diag_sum1 == col_sums[0]:\n        return True\n    elif row_sums[2] == diag_sum2 == col_sums[2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Initialize a variable to store the sum of the elements in the magic square\n    magic_sum = 0\n    \n    # Loop through each element in the matrix\n    for i in range(n):\n        # Loop through the elements in the same column\n        for j in range(n):\n            # If the element is not the same as its neighbor in the same row and column, return False\n            if my_matrix[i][j]!= my_matrix[j][(j+1)%n] and my_matrix[i][j]!= my_matrix[(i+1)%n][j]:\n                return False\n            \n            # Calculate the sum of the elements in the magic square\n            magic_sum += my_matrix[i][j]\n            \n            # If the element is the same as its neighbor in the same row and column, continue to the next element\n            if my_matrix[i][j] == my_matrix[j][(j+1)%n] and my_matrix[i][j] == my_matrix[(i+1)%n][j]:\n                continue\n            \n            # If the sum of the elements in the magic square is equal to the product of the diagonal elements, return True\n            if magic_sum == n*(n**2 + 1) and my_matrix[i][j] == (n**2 + 1)/2:\n                return True\n    \n    # If the loop completes without finding a magic square, return False\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix has the same number of rows and columns\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if all the elements of the matrix are distinct\n    seen_numbers = set()\n    for row in my_matrix:\n        if len(seen_numbers)!= len(set(row)):\n            return False\n        for num in row:\n            if num in seen_numbers:\n                return False\n            seen_numbers.add(num)\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row_sum = 0\n        col_sum = 0\n        for j in range(len(my_matrix[0])):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum!= col_sum or row_sum!= len(my_matrix) * (i + 1) or col_sum!= len(my_matrix[0]) * (i + 1):\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum([sum(row) for row in my_matrix])\n\n    # Check if the sum of the row elements is equal to the diagonal sum\n    row_sums = [sum(row) for row in my_matrix]\n    for row in row_sums:\n        if row!= diagonal_sum:\n            return False\n\n    # Check if the sum of the column elements is equal to the diagonal sum\n    col_sums = [sum(row[:i] + row[i+1:] for row in my_matrix) for i in range(len(my_matrix[0]))]\n    for col in col_sums:\n        if col!= diagonal_sum:\n            return False\n\n    # Check if the sum of the 3x3 sub-matrices is equal to the diagonal sum\n    sub_matrix_sums = [sum(my_matrix[i:i+3]) for i in range(len(my_matrix)-2)]\n    for sub_sum in sub_matrix_sums:\n        if sub_sum!= diagonal_sum:\n            return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    # Count the occurrences of each item in the list\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = None\n    max_count = 0\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Given a list of integers, return the item with the maximum frequency.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_num = max(freq, key=freq.get)\n    max_freq = freq[max_num]\n\n    return max_num, max_freq"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to keep track of frequency of each item in the list\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in frequency.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_occurrences(nums):\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n    max_num = None\n    for num in freq_dict:\n        if freq_dict[num] == max_freq:\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Given a list of integers, return the item with the maximum frequency.\n    \"\"\"\n    # Use a dictionary to count the occurrences of each item\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n\n    # Find the item with the maximum frequency\n    max_num = max(counts, key=counts.get)\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in str1:\n        if char not in vowels:\n            result.append(char)\n    return ''.join(reversed(result))"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_count = 0\n    result = []\n    for char in str1:\n        if char in vowels and char not in result:\n            result.append(char)\n            vowel_count += 1\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_dict = {v: True for v in vowels}\n    vowels_set = set(vowels)\n\n    reversed_str = []\n    for char in str1:\n        if char.lower() in vowels_dict and char.lower() not in vowels_set:\n            reversed_str.append(char)\n\n    return ''.join(reversed_str[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_vowels = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            reversed_vowels = char + reversed_vowels\n    return reversed_vowels"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_set = set(vowels)\n    reversed_vowels = []\n    for char in str1:\n        if char in vowel_set:\n            reversed_vowels.append(char)\n    return \"\".join(reversed_vowels[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = reversed_str + char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_reverse = ''\n    for char in str1:\n        if char in vowels:\n            vowel_reverse = char + vowel_reverse\n        else:\n            vowel_reverse = vowel_reverse + char\n    return vowel_reverse"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    rev_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            rev_str += str1[i]\n    return rev_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    str_tup = str(tup1)\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a list\n    tup2 = list(tup1)\n    # Convert the list to a string\n    return str(tup2)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string using the str() method\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # join the elements of the tuple using a comma as separator\n    string = \",\".join(str(x) for x in tup1)\n    return string"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through each element in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the sum\n            sum += num\n\n    # Return the sum of the negative numbers\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def is_hexagonal(n):\n        \"\"\"\n        Helper function to check if a number is a hexagonal number.\n        \"\"\"\n        if n <= 0:\n            return False\n        return all(n % i!= 0 for i in range(2, int(n**0.5) + 1))\n\n    def find_nth_hexagonal(n):\n        \"\"\"\n        Main function to find the nth hexagonal number.\n        \"\"\"\n        if n <= 0:\n            return None\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if is_hexagonal(n):\n            return n - 1\n        else:\n            return find_nth_hexagonal(n - 1) + find_nth_hexagonal(n - 2)\n\n    return find_nth_hexagonal(n)\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 2*n*(n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n\n    hex_count = 0\n    row = 1\n\n    while hex_count < n:\n        row += 1\n        col = row - 1\n        hex_count += col + 1\n\n    return row"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) + (n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Base case: if n is 1, return 1\n    if n == 1:\n        return 1\n    \n    # Initialize variables for first two terms of the sequence\n    a = 1\n    b = 6\n    \n    # Loop through n-2 terms to find the nth term\n    for i in range(2, n):\n        # Compute the next term of the sequence\n        c = a + b\n        \n        # Update variables for next iteration\n        a = b\n        b = c\n        \n    # Return the nth term of the sequence\n    return b"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n\n    # Base case for n = 0\n    if n == 0:\n        return 0\n\n    # Initialize the first and last row\n    first_row = [1]\n    last_row = [2 * i + 1 for i in range(n)]\n\n    # Initialize the remaining rows\n    for i in range(1, n):\n        next_row = [2 * last_row[i - 1] - 1]\n        for j in range(1, i):\n            next_row.append(2 * last_row[j] + 1)\n        last_row = next_row\n\n    # Add the first row to the final result\n    result = first_row + last_row\n\n    return result[n - 1]"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 2 * n * n - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    hex_num = 1\n    for i in range(n):\n        hex_num += 2 * hex_num - 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initialize variables\n    a = 1\n    b = 6\n    hex_num = 0\n\n    # loop through n times\n    for i in range(n):\n        # add a and b\n        hex_num += a + b\n\n        # update a and b\n        a = b\n        b += 6\n\n    # return the hexagonal number\n    return hex_num"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = array('i', [0])\n    count_non_zeros = array('i', [0])\n    length = len(nums)\n    for num in nums:\n        if num == 0:\n            count_zeros[0] += 1\n        else:\n            count_non_zeros[0] += 1\n    return count_zeros[0] / length"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zeroes[nums.index(num)] += 1\n\n    non_zeroes = array('i', [0]*len(nums))\n    for num in nums:\n        if num!= 0:\n            non_zeroes[nums.index(num)] += 1\n\n    zero_ratio = (sum(zeroes) / sum(non_zeroes)) if sum(non_zeroes) > 0 else 0\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [1]*len(nums))\n    for num in nums:\n        if num == 0:\n            count[nums.index(num)] = 0\n    \n    non_zero_count = 0\n    for i in range(len(nums)):\n        if count[i] == 1:\n            non_zero_count += 1\n    \n    return non_zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ratio of zeroes to non-zeroes in the array.\n    '''\n    zeros = 0\n    non_zeros = 0\n    \n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n            \n    zero_count = zeros / non_zeros\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Initialize variables to keep track of non-zeroes and zeroes\n    num_zeros = 0\n    num_non_zeros = 0\n\n    # Loop through the array of integers\n    for num in nums:\n        # Check if the number is zero\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_non_zeros += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = num_zeros / num_non_zeros\n\n    # Return the ratio of zeroes to non-zeroes\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an array of boolean values representing whether each integer is zero or non-zero\n    bool_array = array('b', [num!= 0 for num in nums])\n    \n    # Count the number of zeros and non-zeros in the array\n    zeros = sum(bool_array)\n    ones = len(bool_array) - zeros\n    \n    # Return the ratio of zeros to non-zeros\n    return float(zeros) / ones"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_arr = array('i', [0] * len(nums))\n    for num in nums:\n        count_arr[num] += 1\n    \n    zero_count = 0\n    non_zero_count = 0\n    for num in count_arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    non_zero_count = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n        else:\n            non_zero_count[nums.index(num)] += 1\n\n    if sum(zero_count) == 0:\n        return 0\n    else:\n        return (non_zero_count[0] / zero_count[0])"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    arr = array('i', nums)\n    zero_count = arr.count(0)\n    non_zero_count = len(nums) - arr.count(0)\n    return zero_count/non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i')\n    non_zeroes = array('i')\n\n    for num in nums:\n        if num == 0:\n            zeroes.append(1)\n        else:\n            non_zeroes.append(1)\n\n    total_zeroes = len(zeroes)\n    total_non_zeroes = len(non_zeroes)\n\n    if total_zeroes == 0:\n        return 0.0\n    else:\n        return (total_zeroes / total_non_zeroes) * 100.0"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n    Input: n - an integer\n\n    Output: True or False - whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n    '''\n\n    # Check if the given number is a power of 2\n    if n & (n-1) == 0: \n        return True\n\n    # Check if the given number is a sum of powers of 2\n    if is_power_of_two(n): \n        return True\n    elif is_power_of_two(n-1): \n        return True\n\n    # If the given number is neither a power of 2 nor a sum of powers of 2, then it cannot be represented as sum of powers of 2\n    return False\n\ndef is_power_of_two(n): \n    '''\n    Write a python function to check whether the given number is a power of 2 or not.\n\n    Input: n - an integer\n\n    Output: True or False - whether the given number is a power of 2 or not.\n\n    '''\n\n    # Check if the given number is a power of 2\n    if n & (n-1) == 0: \n        return True\n\n    # If the given number is not a power of 2, then it cannot be a power of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    if n == 0:\n        return True\n\n    count = 0\n    while n > 0:\n        count += 1\n        n >>= 1\n\n    if n == 0:\n        return True\n\n    power = 0\n    while n > 0:\n        n >>= 1\n        power += 1\n\n    if power == 1:\n        return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check for negative and zero values\n    if n < 0 or n == 0: \n        return False\n\n    # Find the binary representation of n\n    binary = bin(n)\n\n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers_of_two = 0\n\n    # Loop through each character in the binary representation\n    for char in binary: \n        # If the character is '1', add the power of 2 to the sum\n        if char == '1': \n            sum_of_powers_of_two += 1\n\n    # Check if the sum is equal to n\n    if sum_of_powers_of_two == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Define a helper function to check if a number is a power of 2\n    def is_power_of_two(num):\n        return num & (num - 1) == 0\n\n    # Iterate through each power of 2 from 1 to the square root of the given number\n    for i in range(1, int(n ** 0.5) + 1):\n        if is_power_of_two(i) and is_power_of_two(n // i):\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, n+1): \n        if n == 1: \n            return True \n        if n % i == 0 and n // i!= 1: \n            n -= i \n            continue \n        else: \n            return False "
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n\n    # Check if the number is a power of 2\n    if n & (n - 1) == 0:\n        return True\n\n    # Calculate the sum of non-zero powers of 2\n    count = 0\n    while n > 1:\n        if n & 1:\n            count += 1\n        n >>= 1\n\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                if (n//i)**2 == i:\n                    return True\n                else:\n                    return False\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Checking if the given number is even or not\n    if n % 2 == 0:\n        return \"The given number cannot be represented as the sum of non-zero powers of 2\"\n\n    # Initializing the variable to store the sum of non-zero powers of 2\n    sum = 0\n\n    # Using a loop to iterate over the bits of the given number\n    for i in range(1, 33):\n        # Checking if the ith bit is 1 or not\n        if (n >> i) & 1 == 1:\n            # If the ith bit is 1, then we can add 2^i to the sum\n            sum += 2**i\n\n    # Checking if the sum is equal to the given number\n    if sum == n:\n        return \"The given number can be represented as the sum of non-zero powers of 2\"\n    else:\n        return \"The given number cannot be represented as the sum of non-zero powers of 2\""
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Check if the number is already a power of 2\n    if n & (n - 1) == 0 and n > 0:\n        return True\n    # Check if the number can be written as sum of powers of 2\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                if is_Sum_Of_Powers_Of_Two(n // i) == True:\n                    return True\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count == 1"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # converting from radians to degrees\n    return round(circumference, 2)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # formula for circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265359\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    unique_numbers = set(flattened_list)\n    return unique_numbers"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        result += sublist\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [num for sublist in test_list for num in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        result += sublist\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        for subitem in item:\n            flat_list.append(subitem)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sub_list in test_list:\n        flat_list.extend(sub_list)\n    return list(set(flat_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    def flatten_list(lst):\n        '''\n        A recursive function to flatten the list.\n        '''\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten_list(test_list)\n    numbers = set(flattened_list)\n    return numbers"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    n = len(nums)\n    for i in range(n):\n        # find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # swap the maximum element with the first unsorted element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # reverse the unsorted part of the array\n        for j in range(i, n):\n            nums[i], nums[j] = nums[j], nums[i]\n            \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # We want to sort in decreasing order, so we can start with the largest element and move towards the smallest one.\n        # We start by finding the index of the largest element, which will be at i-1 in the list.\n        max_index = i-1\n        for j in range(i-1, 0, -1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Now we have the index of the largest element, so we can swap it with the element at i-1.\n        nums[i-1], nums[max_index] = nums[max_index], nums[i-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # Get the length of the list\n    n = len(nums)\n    \n    # Iterate through the list\n    for i in range(n):\n        \n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # If the maximum element is not at the current index, swap them\n        if max_idx!= i:\n            nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # Bubble sort the max_idx part of the list\n        for j in range(i, max_idx, -1):\n            for k in range(j):\n                if nums[j] < nums[k]:\n                    nums[j], nums[k] = nums[k], nums[j]\n            \n            # Update the maximum index of the unsorted part of the list\n            max_idx = j\n            \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        # Find the maximum element in the first i elements.\n        max_idx = i\n        for j in range(i):\n            if nums[j] < nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element.\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the largest element in the remaining unsorted portion of the array\n        largest = nums[i]\n        for j in range(i+1, n):\n            if nums[j] > largest:\n                largest = nums[j]\n        # Swap the largest element with the first element of the unsorted portion\n        nums[i], nums[largest_index] = nums[largest_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 0, -1):\n        # Find the largest element in the first i elements\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the largest element with the first element\n        nums[i-1], nums[max_index] = nums[max_index], nums[i-1]\n        # Reverse the first i elements\n        nums[0:i] = nums[0:i][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Function to bubble sort the list in ascending order\n    def bubble_sort(nums):\n        n = len(nums)\n        for i in range(n):\n            for j in range(0, n-i-1):\n                if nums[j] > nums[j+1]:\n                    nums[j], nums[j+1] = nums[j+1], nums[j]\n\n    # Function to pancake sort the list using the bubble sort method\n    def pancake_sort_helper(nums, k):\n        n = len(nums)\n        k -= 1\n        for i in range(k, -1, -1):\n            if i!= k:\n                for j in range(0, n-i-1):\n                    if nums[j] > nums[j+i+1]:\n                        nums[j], nums[j+i+1] = nums[j+i+1], nums[j]\n            if i == k:\n                break\n\n    # Call the pancake sort helper function with the initial length of the list\n    pancake_sort_helper(nums, n)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Traverse through all possible pancakes\n    for start in range(n):\n        # Find the maximum element in the pancake starting from index'start'\n        max_index = start\n        for end in range(start+1, n):\n            if nums[end] > nums[max_index]:\n                max_index = end\n        # Swap the maximum element with the element at index'start'\n        nums[start], nums[max_index] = nums[max_index], nums[start]\n        # Reverse the remaining part of the pancake from start to max_index\n        for i in range(start, max_index, -1):\n            nums[i], nums[max_index-i+start] = nums[max_index-i+start], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    for i in range(len(nums)):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the current element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Create a copy of the list to avoid modifying the original one\n    nums_copy = nums.copy()\n\n    # Find the maximum element in the list\n    max_elem = max(nums_copy)\n\n    # Iterate over the list until no more swaps are needed\n    while True:\n        # Find the largest index i such that nums[i] < max_elem\n        i = nums_copy.index(max_elem)\n\n        # Find the index j such that nums[j] >= max_elem\n        j = nums_copy.index(max_elem, i+1)\n\n        # If i is equal to j, we have successfully sorted the list\n        if i == j:\n            break\n\n        # Swap the elements at indices i and j\n        nums_copy[i], nums_copy[j] = nums_copy[j], nums_copy[i]\n\n        # Update the maximum element in the list\n        max_elem = max(nums_copy)\n\n    return nums_copy"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    # Initialize a dictionary to store the counts of identical items\n    count = {}\n\n    # Iterate through the first list and check for identical items\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            # If the item is already in the dictionary, increment its count by 1\n            if list1[i] in count:\n                count[list1[i]] += 1\n            # Otherwise, add the item to the dictionary with a count of 1\n            else:\n                count[list1[i]] = 1\n\n    # Iterate through the second list and check for identical items\n    for i in range(len(list2)):\n        if list2[i] == list3[i]:\n            # If the item is already in the dictionary, increment its count by 1\n            if list2[i] in count:\n                count[list2[i]] += 1\n            # Otherwise, add the item to the dictionary with a count of 1\n            else:\n                count[list2[i]] = 1\n\n    # Count the number of items that are identical in the same position of the lists\n    result = 0\n    for item in count:\n        if count[item] > 1:\n            result += count[item]\n\n    return result"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for item in Input:\n        if type(item) == list:\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count = 0\n    \n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n            \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # initialize variables to keep track of the maximum absolute difference and the first and last indices of the current subarray\n    max_diff = float('-inf')\n    first_index = 0\n    last_index = 0\n\n    # loop over all subarrays in the array\n    for i in range(len(arr) - 1):\n        # update the last index of the current subarray\n        last_index = i\n        # compute the current subarray sum\n        subarray_sum = sum(arr[first_index:last_index + 1])\n        # check if the sum is negative (indicating a subarray that is decreasing in magnitude)\n        if subarray_sum < 0:\n            # update the first index of the next subarray\n            first_index = i + 1\n            # reset the sum to its initial value\n            subarray_sum = sum(arr[first_index:last_index + 1])\n        # compute the absolute difference between the current subarray sum and the initial sum\n        diff = abs(subarray_sum - sum(arr[:first_index] + arr[last_index + 1:]))\n        # update the maximum absolute difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n\n    # return the maximum absolute difference found\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    # Initialize variables to keep track of the minimum and maximum elements\n    min_val = arr[0]\n    max_val = arr[0]\n    \n    # Loop through the array and update the minimum and maximum values\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n    \n    # Calculate the absolute difference between the maximum and minimum values\n    diff = abs(max_val - min_val)\n    \n    # Return the maximum absolute difference\n    return diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array of numbers as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    if len(arr) <= 1:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    else:\n        max_diff = arr[1] - arr[0]\n        for i in range(1, len(arr)-1):\n            diff = arr[i+1] - arr[i]\n            if diff > max_diff:\n                max_diff = diff\n        return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    # calculate the maximum difference between any two elements in the array\n    max_diff = abs(arr[0] - arr[1])\n\n    # loop through the array and compare each element with the current maximum difference\n    for i in range(2, len(arr)): \n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff: \n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Use the quadratic formula to find x and y\n    x1 = (-b + math.sqrt(b*b - 4*a*n)) / (2*a)\n    x2 = (-b - math.sqrt(b*b - 4*a*n)) / (2*a)\n    \n    # Check if x1 and x2 are real and within the range of [-b, b]\n    if not (-b <= x1 <= b and -b <= x2 <= b):\n        return None\n    \n    # Return the tuple of x and y\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        x = (n - i) // a\n        y = (n - i) % a\n        if x * a + y * b == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Using Newton's method to find the roots of the quadratic equation\n    x1, x2 = 0, 1\n    while x2 - x1 > 1e-6:\n        x3 = x1 - (x1**2 - n)/(2*a)\n        x1 = x2\n        x2 = x3\n    if abs(x2**2 - n) < 1e-6:\n        return (x2, 0)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a is zero\n    if a == 0:\n        return None\n\n    # find the value of b\n    d = n // a\n\n    # check if there exists a unique solution\n    if d == b:\n        return (d, d)\n    elif d * a!= n:\n        return None\n    else:\n        return (d, d + b)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # initialize the variables x and y to None\n    x = None\n    y = None\n\n    # check if the equation has two solutions\n    if a == 0:\n        return None\n    elif b == 0:\n        x = -n / a\n        return (x, None)\n    else:\n        # compute the quadratic equation\n        discriminant = b**2 - 4*a*n\n\n        # check if the equation has one solution\n        if discriminant < 0:\n            return None\n        elif discriminant == 0:\n            x = -b / (2*a)\n            return (x, x)\n        else:\n            # compute the roots of the equation\n            root1 = (-b + discriminant**0.5) / (2*a)\n            root2 = (-b - discriminant**0.5) / (2*a)\n\n            # check if both roots are integer solutions\n            if root1.is_integer() and root2.is_integer():\n                return (int(root1), int(root2))\n            else:\n                return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    x = -b / a\n    y = n / a\n    if x == int(x) and y == int(y):\n        return (int(x), int(y))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Finding the discriminant\n    discriminant = b ** 2 - 4 * a * n\n    \n    # If discriminant is less than 0, no solutions exist\n    if discriminant < 0:\n        return None\n    \n    # Finding the roots of the discriminant\n    root1 = (-b + discriminant ** 0.5) / (2 * a)\n    root2 = (-b - discriminant ** 0.5) / (2 * a)\n    \n    # Converting the roots to integers\n    x1 = int(root1)\n    x2 = int(root2)\n    \n    # Returning the solution as a tuple\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # if a is 0, the equation is not solvable\n    if a == 0:\n        return None\n    \n    # calculate the discriminant\n    disc = b**2 - 4*a*n\n    \n    # if the discriminant is less than 0, the equation is not solvable\n    if disc < 0:\n        return None\n    \n    # calculate the roots of the discriminant\n    root1 = (-b + disc**0.5) / (2*a)\n    root2 = (-b - disc**0.5) / (2*a)\n    \n    # if root1 is negative, the equation is not solvable\n    if root1 < 0:\n        return None\n    \n    # if root2 is negative, the equation is not solvable\n    if root2 < 0:\n        return None\n    \n    # check if root1 and root2 are integers\n    if not root1.is_integer() or not root2.is_integer():\n        return None\n    \n    # return the solution as a tuple\n    return (root1, root2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns the integers x and y that satisfy ax + by = n as a tuple, or None if no solution exists.\n    \"\"\"\n    if b == 0:\n        return None\n    \n    x0 = n // b\n    y = a * x0 + n % b\n    \n    if y == 0:\n        return None\n    \n    return (x0, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns the two integers x and y such that ax + by = n if there exists a solution.\n    \"\"\"\n    # Find the discriminant\n    d = b**2 - 4*a*n\n    \n    # Check if the discriminant is positive or negative\n    if d > 0:\n        x = (-b + d**0.5)/(2*a)\n        y = (-b - d**0.5)/(2*a)\n    elif d == 0:\n        x = -b/(2*a)\n        y = -b/(2*a)\n    else:\n        return None\n    \n    return (x, y)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Convert the given lists to sets to remove duplicates and then back to lists\n    list1 = list(set(list1))\n    list2 = list(set(list2))\n\n    # Iterate over the first list and remove all elements present in the second list\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list2:\n        if i in list1:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Copying list2 to avoid modifying original list\n    list2 = list2.copy()\n    # Removing elements present in list1 from list2\n    for i in list1:\n        list2.remove(i)\n    # Returning updated list2\n    return list2"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Convert both lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # Get the difference between the two sets and convert it back to a list\n    return list(set1.difference(set2))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n // 2):\n        s += n - 2 * i\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return n * (n // 2)\n    else:\n        return (n + (n // 2)) * (n // 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    i = 0\n    total = 0\n    while n - 2*i >= 0:\n        total += n - 2*i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n-2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum_ = 0\n    while n - 2*i >= 0:\n        sum_ += n - 2*i\n        i += 1\n    return sum_"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(0, n, 2))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum\n    total_sum = 0\n    # Loop until n-i = 0\n    while n - (2 * i) >= 0:\n        # Add (n - 2*i) to the sum\n        total_sum += n - (2 * i)\n        # Increment i\n        i += 1\n    # Return the sum\n    return total_sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((i * 2 * pi) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (math.tan(math.pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((2 * i + 1) * pi / l)\n    area *= 0.5\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        area += (s*tan((2*pi)/l))**2\n    area = 0.5*s*area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    \n    for i in range(l):\n        angle = i * 2 * pi / l\n        x = s * tan(angle)\n        area += x\n        \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / (2 * pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the area of each side of the polygon\n    area = 0\n    for i in range(l):\n        area += s**2\n\n    # Calculate the area of the polygon as the sum of the areas of its sides\n    return (area * 6) / (4 * tan(pi/l))\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2*pi/l*i\n        area += s*tan(angle/2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        r = s / (2*tan(pi/l))\n        area += r**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i*2*pi/l\n        area += s*tan(angle)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum(set(range(1, int(math.sqrt(n))+1)) & set(divisors(n)))\n\n    # Check if the sum of the divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False\n\ndef divisors(n):\n    '''\n    Returns a list of all divisors of n.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    def sum_of_divisors(num):\n        \"\"\"\n        Function to calculate the sum of the divisors of a given number.\n        \"\"\"\n        divisors = []\n        divisor = 1\n        while divisor <= num:\n            if num % divisor == 0:\n                divisors.append(divisor)\n            divisor += 1\n        return sum(divisors)\n\n    def gcd(a, b):\n        \"\"\"\n        Function to find the greatest common divisor (GCD) of two numbers using Euclidean algorithm.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_common_divisor(a, b):\n        \"\"\"\n        Function to find the common divisor of two numbers using Euclidean algorithm.\n        \"\"\"\n        return gcd(a, b)\n\n    if n < 0:\n        return \"The sum of the divisors of two negative integers cannot be determined.\"\n    elif n == 0:\n        return \"The sum of the divisors of 0 is 0.\"\n    else:\n        divisor1 = find_common_divisor(n, n)\n        divisor2 = find_common_divisor(n, divisor1)\n        if divisor1 == divisor2:\n            return \"The sum of the divisors of {} and {} is equal to {}\".format(n, divisor1, sum_of_divisors(n))\n        else:\n            return \"The sum of the divisors of {} and {} is not equal to {}\".format(n, divisor1, sum_of_divisors(n))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determines if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Define the function to calculate the sum of divisors of n\n    def sum_divisors(n):\n        return sum(range(1, int(math.sqrt(n))+1))\n\n    # Calculate the sum of divisors of n and m\n    n_sum = sum_divisors(n)\n    m_sum = sum_divisors(m)\n\n    # Check if the sum of divisors of n and m is the same\n    return n_sum == m_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # Use the floor division operator to round down to the nearest integer\n    numerator = math.floor(n / 2)\n    denominator = 1\n\n    # Loop through the divisors of n and add them to the denominator\n    for i in range(2, numerator + 1):\n        if n % i == 0:\n            denominator += i\n\n    # Compare the sum of the divisors of n and 2n\n    return (denominator == numerator + denominator)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = [i for i in range(1, n+1) if n % i == 0]\n    return sum(div_list) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            div_list.append(i)\n            if n//i!= i:\n                div_list.append(n//i)\n    return div_list"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n is the same as the sum of the divisors of n+1.\n    If the sum of the divisors of n+1 is the same as the sum of the divisors of n+2 and so on, then the function will return False.\n    '''\n    div_sum_n = sum([i for i in range(1, n+1) if n%i == 0])\n    div_sum_n_plus_1 = sum([i for i in range(1, n+1) if (n+1)%i == 0])\n    if div_sum_n == div_sum_n_plus_1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Finding divisors of given number\n    div1 = [i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0]\n    div2 = [n // i for i in div1]\n    # Finding sum of divisors\n    div_sum = sum(div1) + sum(div2)\n    # Checking if sum of divisors is same as given number\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the divisors of n\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n\n    # Calculate the sum of the divisors\n    div_sum = sum(divisors)\n\n    # Check if the sum of the divisors is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    div_list = []\n\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n\n    div_sum = sum(div_list)\n\n    return div_sum"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    This function takes a string as input and returns the number of characters that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        if str1.lower().count(english_alphabet[i]) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Define a dictionary to store the character count for each English alphabet character\n    char_count = {chr(i): 0 for i in range(65, 91)}\n    \n    # Loop through each character in the input string\n    for char in str1:\n        # Convert the character to lowercase for case-insensitivity\n        char = char.lower()\n        \n        # If the character is in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n    \n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count_dict = {}\n    for char in english_alphabet:\n        count_dict[char] = 0\n\n    for char in str1:\n        count_dict[char.lower()] += 1\n\n    result = \"\"\n    for char in english_alphabet:\n        if count_dict[char] > 0:\n            result += char + str(count_dict[char]) + \" \"\n\n    return result[:-1]"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(i+97))\n        \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0 \n    for i in range(26): \n        if str1.lower()[i] == str1.lower()[i].upper(): \n            count += 1 \n    return count "
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet:\n            if alphabet.index(char.lower()) == alphabet.index(str1[count:].lower()):\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert string to lowercase\n    str1 = str1.lower()\n\n    # initialize a dictionary to store the count of each character\n    char_count = {}\n\n    # iterate through the string\n    for char in str1:\n        # check if the character is in the dictionary\n        if char in char_count:\n            # increment the count of the character\n            char_count[char] += 1\n        else:\n            # add the character to the dictionary with a count of 1\n            char_count[char] = 1\n\n    # iterate through the dictionary and count the number of occurrences of each character at the same position in the English alphabet\n    for i in range(26):\n        # get the character at the current position\n        char = chr(ord('a') + i)\n\n        # check if the character exists in the dictionary\n        if char in char_count:\n            # add the count of the character at the current position to the count of the character in the English alphabet\n            char_count['a'] += char_count[char]\n            del char_count[char]\n\n    # return the final count of each character at the same position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(26):\n        if str1.lower() == english_alphabet[i].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer input n and returns the smallest power of 2 \n    greater than or equal to n.\n    '''\n    # Check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n    \n    # Find the highest power of 2 that is less than or equal to n\n    highest_pow_2 = 1\n    while highest_pow_2 <= n:\n        highest_pow_2 <<= 1\n        \n    # Check if the next power of 2 is greater than or equal to n\n    if highest_pow_2 < n:\n        highest_pow_2 <<= 1\n        \n    return highest_pow_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize power of 2\n    power = 1\n    # loop until power >= n\n    while power < n:\n        power *= 2\n    # return power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function returns the next smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Use binary exponentiation to find the next power of 2\n    # This will be more efficient than using the built-in pow() function\n    # as it avoids creating a new number object and hence making the function faster\n    n_log = 1\n    while n_log < n:\n        n_log <<= 1\n    return n_log"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize a variable to store the power of 2\n    power = 1\n    \n    # Loop until we find the smallest power of 2 greater than or equal to n\n    while power < n:\n        power *= 2\n        \n    # Return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n\n    # Find the largest power of 2 smaller than or equal to n\n    i = 0\n    while i * 2 <= n:\n        i += 1\n\n    # Set the highest power of 2 to be n + 1, since 2**i is the power of 2 we are looking for\n    highest_power_of_2 = n + 1\n\n    # If the power of 2 we are looking for is greater than or equal to the next power of 2,\n    # round up to the next power of 2\n    if i * 2 > n:\n        highest_power_of_2 = i * 2\n\n    return highest_power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        # Binary search to find the smallest power of 2 greater than or equal to n\n        low = 1\n        high = n\n        while low < high:\n            mid = (low + high) // 2\n            if (mid & (mid - 1)) == 0:\n                # If mid is a power of 2\n                low = mid + 1\n            else:\n                # If mid is not a power of 2\n                high = mid\n        return high"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest power of 2 that is greater than or equal to n.\n    \"\"\"\n    while n % 2 == 0: # check if n is divisible by 2\n        n = n // 2 # if it is, reduce n by half\n    while n > 1: # keep reducing n by 1 until n is 1\n        n = n // 2 # reduce n by half\n    return 1 << n # return the result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize power variable to 1\n    power = 1\n    \n    # loop until power is equal to or greater than 32\n    while power < 32:\n        # check if power is greater than or equal to n\n        if power >= n:\n            # return power\n            return power\n        # increment power by 1\n        power += 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert the given number to binary string\n    binary_str = bin(n)[2:]\n    \n    # Count the number of zeroes in the binary string\n    zero_count = binary_str.count('0')\n    \n    # Add 1 to the power of 2 to the left of the first zero\n    power_of_2 = 1 << zero_count\n    \n    # If the power of 2 is greater than or equal to the given number, return it\n    if power_of_2 >= n:\n        return power_of_2\n    \n    # Otherwise, return the power of 2 minus 1\n    return power_of_2 - 1"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(lst, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        if i < len(list1) and i >= 0:\n            sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Calculate the sum of numbers in the range\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i-1]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    \n    sum = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum += list1[i]\n    \n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the range is valid (m <= n)\n    if m > n:\n        raise ValueError(\"The first index must be less than or equal to the second index.\")\n\n    # Initialize the sum to zero\n    sum_value = 0\n\n    # Iterate over the range of indices from m to n\n    for i in range(m, n+1):\n        # Check if the index is valid (i is within the bounds of the list)\n        if i < 0 or i >= len(list1):\n            raise ValueError(\"The index is out of bounds of the list.\")\n\n        # Add the value at the index to the sum\n        sum_value += list1[i]\n\n    # Return the final sum\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m > len(list1) or n < 0 or n > len(list1):\n        return \"Invalid indices\"\n    elif m > n:\n        return \"Invalid range\"\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    result = 0\n    for i in range(m, n+1):\n        if i in list1:\n            result += i\n    return result"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i >= 0 and i < len(list1):\n            total += list1[i]\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    "
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the semi-perimeter of the pentagon\n    s = (a + math.sqrt(3)*a)/2\n\n    # return the result\n    return 5*a + 5*math.sqrt(3)*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * a * math.sqrt(3)\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i+1:i+3] == 'td':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n\n    # Check if the length of the tuple is greater than 1\n    if len(test_tuple) > 1:\n        # Initialize a variable to store the data type of the first element in the tuple\n        data_type = type(test_tuple[0])\n        # Loop through the rest of the tuple and check if the data type of each element is same as the first element\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i])!= data_type:\n                return False\n    else:\n        # If the length of the tuple is 1, all the elements are of the same data type, so return True\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Checks if all elements in the given tuple have the same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_set = set()\n    for item in test_tuple:\n        type_set.add(type(item))\n\n    if len(type_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set() # to store data types of all elements in tuple\n    \n    for element in test_tuple:\n        data_types.add(type(element)) # add data type of each element to set\n    \n    if len(data_types) == 1: # if set has only one element, it means all elements have same data type\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function takes a tuple as input and returns True if all the elements in the tuple have the same data type,\n    False otherwise.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = set()\n\n    for element in test_tuple:\n        data_types.add(type(element))\n\n    return data_types.issubset({type(test_tuple[0])})"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # Initialize variables to keep track of the count and the total count of the element\n    count = 0\n    total_count = 0\n\n    # Iterate through the array and count the occurrences of the element x\n    for num in arr:\n        if num == x:\n            count += 1\n        total_count += 1\n\n    # Check if the count is greater than n/2\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. \n    The majority element is the element that occurs more than n/2 times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        n &= n - 1 # clear the least significant bit set to 1 \n        count += 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = ''\n    for i, char in enumerate(str):\n        if i % 2!= 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Create an empty string to store the result\n    result = \"\"\n    # Loop through each character in the input string\n    for char in str:\n        # If the index value of the character is odd, append it to the result string\n        if int(char) % 2!= 0:\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters with odd index values from a given string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Split the string into a list of characters\n    char_list = list(str)\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate over the list of characters\n    for i in range(len(char_list)):\n        # If the index is odd, append the character to the result string\n        if i % 2 == 1:\n            result += char_list[i]\n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and removes the characters which have odd index values.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Loop through each character in the input string\n    for char in string:\n        # Check if the index of the current character is odd\n        if len(string) % 2 == 0:\n            # If the index is even, add the character to the result string\n            result += char\n        # If the index is odd, skip the character\n        else:\n            # If the index is odd, skip the character and move on to the next character\n            continue\n\n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    # Split the string into a list of characters\n    chars = list(str)\n\n    # Iterate over the characters and check if their index value is odd\n    for i in range(len(chars)):\n        if i % 2!= 0:\n            chars[i] = ''\n\n    # Convert the list of characters back into a string\n    result = ''.join(chars)\n\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c): \n    \"\"\"\n    This function takes three numbers as input and returns the minimum of those numbers.\n    \"\"\"\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their minimum.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    # Iterate through the given range from l to r\n    for i in range(l, r + 1):\n        # Count the number of unset bits in each number\n        unset_bits = bin(i).count('0')\n        # If all the bits are unset in the number, increment the count variable\n        if unset_bits == 0:\n            count += 1\n    # Return the count variable as the result\n    return count"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n    n (int): The value of the given number.\n    l (int): The starting index of the given range.\n    r (int): The ending index of the given range.\n\n    Returns:\n    bool: True if all the bits are unset in the given range, else False.\n    \"\"\"\n\n    # Create a binary representation of the given number\n    binary_representation = bin(n)[2:]\n\n    # Check if all the bits are set to 1\n    if all(int(binary_representation[i]) == 1 for i in range(l, r+1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        count += n & (1 << (i - l))\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize variables\n    count = 0\n    # Iterate through all the bits in n\n    for i in range(32):\n        # Check if the bit at i is set or unset\n        if (n >> i) & 1:\n            # If the bit is set, increment the count\n            count += 1\n            # Check if the count exceeds the range specified by l and r\n            if count > r - l + 1:\n                return False\n    # If the loop completes without any errors, all the bits are unset in the given range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # converting the given range to binary format\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n\n    # calculating the number of bits that are unset in the given range\n    unset_bits = len(binary_l) + len(binary_r) - len(n)\n\n    # checking whether all the bits are unset in the given range or not\n    if unset_bits == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the count of unset bits in the range\n    unset_count = 0\n\n    # Calculate the number of bits in the given range\n    num_bits = r - l + 1\n\n    # Calculate the first bit that is unset in the given range\n    first_unset_bit = (n >> l) & 1\n\n    # Calculate the last bit that is unset in the given range\n    last_unset_bit = (n >> r) & 1\n\n    # Count the unset bits in the given range\n    unset_count = first_unset_bit + last_unset_bit - num_bits\n\n    # Check whether all the bits are unset in the given range or not\n    if unset_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return l == r\n    else:\n        mask = (1 << n) - 1\n        if l & mask == 0 and r & mask == 0:\n            return all_Bits_Set_In_The_Given_Range(n - 1, l, r)\n        else:\n            return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l >= 0 and r <= 32:\n        return (n & (1 << l)) == (1 << l)\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Calculate the difference between the maximum value and the minimum value in the range\n    max_diff = 2 ** l - 1\n    \n    # Check if all the bits in the range are set or not\n    if n % max_diff == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through all the bits in the range (l to r)\n    for i in range(l, r+1):\n        # Check if the i-th bit is set or not\n        if n & (1 << i):\n            # If it is set, increment the count variable\n            count += 1\n            \n    # Return True if count is 0, otherwise return False\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array `arr` and an integer `n`, and re-arranges the first `n` elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers: `i` and `j`, which will point to the first negative and first positive elements of the array, respectively\n    i = 0\n    j = n\n    \n    # While `i` is less than `n`, swap elements pointed to by `i` and `j`\n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        j += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # initialize two pointers to the beginning and end of the array\n    i = 0\n    j = n-1\n    \n    # while i < j, swap elements at i and j if they are negative\n    while i < j:\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    \n    # now, swap the first n elements with the positive elements\n    while i < n:\n        if arr[i] >= 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n        else:\n            i += 1\n    \n    # finally, sort the negative elements in descending order\n    arr[n:n+len(arr[n:])] = sorted(arr[n:n+len(arr[n:])], reverse=True)\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize two pointers, left and right, at the beginning and end of the array respectively.\n    left = 0\n    right = len(arr) - 1\n    \n    # Initialize a variable, temp, to keep track of the element to be swapped.\n    temp = 0\n    \n    # Iterate through the array from left to right.\n    for i in range(left, right):\n        \n        # If the current element is negative and left pointer is less than n, swap the current element with the element at the left pointer.\n        if arr[i] < 0 and left < n:\n            arr[left], arr[i] = arr[i], arr[left]\n            \n            # Increment the left pointer.\n            left += 1\n        \n        # If the current element is positive and right pointer is greater than or equal to n-1, swap the current element with the element at the right pointer.\n        elif arr[i] > 0 and right >= n-1:\n            arr[right], arr[i] = arr[i], arr[right]\n            \n            # Decrement the right pointer.\n            right -= 1\n        \n        # If the current element is neither negative nor positive, do nothing.\n    \n    # Return the updated array.\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = 0\n    neg = 0\n    \n    # Count the number of positive and negative elements in the array\n    while neg < n:\n        if arr[neg] >= 0:\n            pos += 1\n        else:\n            neg += 1\n    \n    # Swap the elements of the array\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg += 1\n    \n    # Remove all the negative elements from the array\n    arr = arr[:n]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n        i += 2\n    return arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # initialize two empty lists for negative and positive elements\n    neg_lst = []\n    pos_lst = []\n\n    # loop through the array and add elements to the appropriate lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg_lst.append(arr[i])\n        else:\n            pos_lst.append(arr[i])\n\n    # loop through the remaining elements of the array and add them to their respective lists\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg_lst.append(arr[i])\n        else:\n            pos_lst.append(arr[i])\n\n    # concatenate the lists and return the result\n    return neg_lst + pos_lst"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes an array and an integer n, and rearranges the first n elements of the given array such that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers for negative and positive elements\n    neg_ptr = 0\n    pos_ptr = n - 1\n\n    # Loop through the array\n    for i in range(n):\n        # If the current element is negative, swap it with the first positive element\n        if arr[i] < 0:\n            arr[i], arr[neg_ptr] = arr[neg_ptr], arr[i]\n            neg_ptr += 1\n        # If the current element is positive, swap it with the last negative element\n        elif arr[i] > 0:\n            arr[i], arr[pos_ptr] = arr[pos_ptr], arr[i]\n            pos_ptr -= 1\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers, one for the positive elements and one for the negative elements\n    i = 0\n    j = 0\n\n    # Iterate through the array and swap elements as required\n    while i < n:\n        if arr[i] >= 0:\n            # If the element is positive, increment the positive pointer\n            i += 1\n        else:\n            # If the element is negative, swap it with the first element in the negative segment\n            arr[j], arr[i] = arr[i], arr[j]\n            # Increment the positive and negative pointers\n            i += 1\n            j += 1\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # create a list to store negative elements\n    negative_list = []\n\n    # create a list to store positive elements\n    positive_list = []\n\n    # iterate over the array\n    for i in range(n):\n        # if the current element is negative\n        if arr[i] < 0:\n            # add it to the negative list\n            negative_list.append(arr[i])\n        # if the current element is positive\n        else:\n            # add it to the positive list\n            positive_list.append(arr[i])\n\n    # combine the negative and positive lists into a single list\n    combined_list = negative_list + positive_list\n\n    # return the combined list\n    return combined_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # initialize two pointers, one for positive and one for negative\n    i = 0\n    j = n - 1\n\n    # while there are still elements to be considered\n    while i < j:\n\n        # if the element at index i is negative, swap it with the element at index j\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n        # if the element at index i is positive, increment i\n        elif arr[i] > 0:\n            i += 1\n\n        # if the element at index i is zero, increment both i and j\n        else:\n            i += 1\n            j -= 1\n\n    # return the final array\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \", char)\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i!='':\n            new_str += i\n        elif i =='':\n            new_str += char\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n\n    # Use regular expressions to replace all consecutive spaces with one character\n    str2 = re.sub(' +', char, str1)\n\n    # Return the modified string\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    # Replace all blank spaces with the given character\n    new_str = str1.replace(\" \", char)\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \",\"\")\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(' ',char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        min_heapq.heappush(min_heap, -heapq.heappop(min_heap))\n\n    # Iterate through the list and push items into the min heap\n    for item in list1:\n        min_heapq.heappush(min_heap, -item)\n\n    # Extract the n largest items from the heap and store them in a list\n    result = []\n    for i in range(n):\n        result.append(-heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    \n    heap = []\n    for i in range(len(list1)-n):\n        heapq.heappush(heap, list1[i])\n    \n    for i in range(n):\n        heapq.heappushpop(heap, list1[-1])\n    \n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list to a min heap, which is like a max heap but with smaller values on top\n    min_heap = [(-x, i) for i, x in enumerate(list1)]\n    heapq.heapify(min_heap)\n    \n    # Pop the top n items from the heap\n    result = []\n    for _ in range(n):\n        _, idx = heapq.heappop(min_heap)\n        result.append(list1[idx])\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap to store the n largest numbers from the list\n    min_heap = []\n    for i in range(n):\n        if i < len(list1):\n            heapq.heappush(min_heap, list1[i])\n        else:\n            break\n    \n    # extract the n largest numbers from the min heap and return them as a list\n    larg_nums = []\n    while len(min_heap) > 0:\n        larg_nums.append(heapq.heappop(min_heap))\n    \n    return larg_nums"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a min-heap with the first n largest items\n    max_heap = [heapq.nlargest(n, list1[:n])]\n    # Remove the largest item from the min-heap and append it to the result list\n    result = []\n    while max_heap:\n        max_item = heapq.heappop(max_heap[0])\n        result.append(max_item)\n        if len(max_heap) == 0:\n            break\n        # Append the next n largest items to the min-heap\n        min_heap = [heapq.nsmallest(n - len(result), max_heap[0])] + max_heap[1:]\n        max_heap = [heapq.nlargest(n, min_heap[0])] + min_heap[1:]\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(lst):\n        return []\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, lst[i])\n    for i in range(n, len(lst)):\n        if lst[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, lst[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = [] # initialize an empty heap\n    for num in list1:\n        heapq.heappush(heap, num) # push each number into the heap\n        if len(heap) > n: # if the heap has more than n items, pop the smallest item\n            heapq.heappop(heap)\n    return list(heap) # convert the heap back to a list and return it"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h + 2 * h * r\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h + 2*r*(h/3)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2 * r * (r + h)\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    lateral_surface_area = 2 * r * h\n\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2*3.14159*r**2 + 2*3.14159*r*h + 2*3.14159*h**2\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # Calculate the lateral surface area of the cylinder using the formula:\n    # A = pi*r^2 * h\n    lateral_surface_area = math.pi * r**2 * h\n    \n    # Return the lateral surface area of the cylinder:\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h + 2 * r * r\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Using formula for lateral surface area of cylinder\n    return 2*(3.14159*(r**2)+2*3.14159*r*h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area using the formula:\n    # Lateral surface area = (2*pi*r^2)*h\n    area = (2*math.pi*r**2)*h\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store even bit positions\n    even_bit_positions = []\n    \n    # Traverse through all bits of the given number\n    for i in range(32):\n        # If the bit is even, append its position to the list\n        if n & (1 << i):\n            even_bit_positions.append(i)\n    \n    # Set all even bits of the given number to 1\n    for position in even_bit_positions:\n        n |= (1 << position)\n    \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize an empty list to store the bits\n    bits = []\n\n    # Iterate through each bit of the given number\n    for i in range(8): \n        # Get the value of the current bit\n        bit = (n >> i) & 1\n\n        # If the current bit is even, add 1 to the list\n        if bit == 0:\n            bits.append(0)\n        else:\n            bits.append(1)\n\n    # Convert the list of bits back to an integer\n    result = int(''.join(str(bit) for bit in bits), 2)\n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        # Get the last bit of the number\n        last_bit = n & 1\n        # Set the even bit to 1\n        n |= last_bit\n        # Shift the number to the left by 1\n        n <<= 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the even bits of n\n    even_bits = []\n\n    # loop through the bits of n in reverse order\n    for i in range(len(bin(n)[2:])):\n        # check if the i-th bit of n is even\n        if bin(n)[2:][i] == '0':\n            # if it's even, append a 1 to the even_bits list\n            even_bits.append(1)\n        else:\n            # otherwise, append a 0 to the even_bits list\n            even_bits.append(0)\n\n    # convert the even_bits list to an integer and return it\n    return int(''.join(str(bit) for bit in even_bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize a variable to keep track of the even bits of n\n    even_bits = 0\n\n    # Iterate over the bits of n from right to left\n    for bit in bin(n)[2:]:\n        # If the bit is even, set the corresponding bit in even_bits to 1\n        if int(bit) == 0:\n            even_bits <<= 1\n        else:\n            even_bits |= 1\n\n    # Return the number with all even bits set to 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize the result variable\n    result = 0\n    \n    # iterate through each bit of the input number\n    for bit in bin(n)[2:]:\n        # if the current bit is even, set the corresponding bit in the result variable to 1\n        if int(bit) % 2 == 0:\n            result = result | (1 << int(bit))\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # convert integer to binary string\n    bin_str = bin(n)[2:]\n    # initialize result to zero\n    result = 0\n    # iterate over binary string\n    for bit in bin_str:\n        # if bit is even, set it to one\n        if bit == '1':\n            result |= 1 << (int(bit) * 2)\n    # return result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the number with all even bits set to 1.\n    even_n = 0\n    # Loop through each bit of the original number.\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1, otherwise set it to 0.\n        if bit == '0':\n            even_n += 1\n        else:\n            even_n += 2\n    # Return the number with all even bits set to 1.\n    return even_n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the given number to binary\n    binary = bin(n)[2:]\n\n    # Iterate through each character in the binary string\n    for i in range(len(binary)):\n        # If the character is an even digit, set the corresponding bit in the binary number to 1\n        if int(binary[i]) % 2 == 0:\n            binary = binary[:i] + '1' + binary[i+1:]\n\n    # Convert the binary string back to an integer\n    return int(binary, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Find the least significant set bit in the number\n    while n & 1 == 0:\n        n >>= 1\n\n    # Clear all even bits and set the least significant bit\n    return n | (1 << (n.bit_length() - 1))"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    # loop through each tuple in the test list\n    for tup in test_list:\n        # if the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # if the tuple is not in the dictionary, add it and set its count to 1\n        else:\n            count_dict[tup] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a Counter object to count the number of occurrences of each tuple in the list\n    counter = Counter(test_list)\n\n    # Return the dictionary of the count of each unique tuple\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary to store the counts of each tuple\n    count_dict = {}\n\n    # iterate through the list of tuples\n    for tup in test_list:\n        # if the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    count = Counter(test_list)\n    # Convert the Counter object to a dictionary of the form {key: value}\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    \n    count_dict = {}\n    for tup in unique_tuples:\n        count_dict[tup] = test_list.count(tup)\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter from the collections module to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of occurrences of each tuple\n    count_dict = {}\n\n    # iterate over the list of tuples\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # increment the count for the tuple\n            count_dict[tup] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            count_dict[tup] = 1\n\n    # return the dictionary of count of occurrences\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    substrings = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            substrings += 1\n    return substrings"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n\n    # Loop through all possible substrings of the string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Check if the substring is non-empty\n            if j - i == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = []\n    i = 0\n    while i < len(str):\n        j = i\n        while j < len(str) and str[j]!='':\n            j += 1\n        substrings.append(str[i:j])\n        i = j + 1\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequences = 0\n    for i in range(m+1, 2*n+1):\n        if i >= 2*m:\n            sequences += 1\n    return sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the number of possible sequences\n    count = 0\n\n    # Initialize the list of previous elements\n    prev_elems = [0] * n\n\n    # Check all possible sequences of length n\n    for i in range(n):\n        # Initialize the current element\n        curr_elem = i\n\n        # Check all possible elements in the sequence\n        for j in range(n):\n            # Check if the current element is within the given range and greater than or equal to twice the previous element\n            if curr_elem >= 2 * prev_elems[j] and curr_elem <= m:\n                # Add the number of possible sequences to the count\n                count += n - j\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(m, n+1):\n        for j in range(i-1, 0, -1):\n            if j >= 2*i and j <= m:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    def is_valid_sequence(sequence):\n        for i in range(len(sequence)):\n            if sequence[i] < 2 * sequence[i-1] or sequence[i] > m:\n                return False\n        return True\n\n    total_sequences = 0\n    sequence = [2]\n\n    while len(sequence) < n:\n        next_sequence = [x + y for x, y in zip(sequence, [1, m-2])]\n        if is_valid_sequence(next_sequence):\n            sequence = next_sequence\n            total_sequences += 1\n\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables to store the number of sequences found and the sum of all sequences\n    count = 0\n    sequence_sum = 0\n    \n    # Define a helper function to check if a given number is valid\n    def is_valid(num):\n        # Check if the number is positive and greater than or equal to twice the previous number\n        if num > 0 and num >= 2 * prev_num:\n            return True\n        else:\n            return False\n    \n    # Initialize the previous number to None\n    prev_num = None\n    \n    # Loop through all the numbers from 1 to m\n    for num in range(1, m+1):\n        # Check if the current number is valid\n        if is_valid(num):\n            # Update the count and sequence sum\n            count += 1\n            sequence_sum += num\n            \n            # Update the previous number\n            prev_num = num\n    \n    # Return the total number of sequences found and the sum of all sequences\n    return count, sequence_sum"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total = 0\n    prev = 0\n    for i in range(n):\n        count = 0\n        for j in range(1, m // 2 + 1):\n            if i >= j * 2:\n                count += 1\n        total += count\n        prev = min(prev, i)\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n):\n    # Initialize the count variable to 0\n    count = 0\n    # Initialize the two previous elements to None\n    prev_prev = None\n    prev = None\n    # Loop through the range of possible elements\n    for i in range(2,m+1):\n        # Check if the current element is greater than or equal to twice the previous element but less than or equal to m\n        if i >= 2*prev_prev and i <= m:\n            # If it is, check if the current element is greater than or equal to the previous element\n            if i >= prev:\n                # If it is, update the two previous elements and increment the count\n                prev_prev = prev\n                prev = i\n                count += 1\n    # Return the final count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # initialize variables\n    n_sequences = 0\n    prev_element = None\n    count = 0\n\n    # loop through elements in range(m+1)\n    for element in range(m+1):\n\n        # if element is greater than or equal to twice the previous element and less than or equal to m\n        if element >= 2*prev_element and element <= m:\n            n_sequences += 1\n\n        # update count and previous element for next iteration\n        count += 1\n        prev_element = element\n\n    # return total number of sequences\n    return n_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    prev = 0\n    for i in range(n):\n        if i > 0:\n            if m - prev >= 2*prev and m - prev <= m:\n                count += 1\n        prev = prev + 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize the total number of sequences to 0\n    total = 0\n    # initialize a list to store the previous elements\n    previous = []\n    # loop through each element from 1 to m-1\n    for i in range(1, m):\n        # loop through each element from i+2 to m\n        for j in range(i+2, m+1):\n            # check if the current element is valid and if it is not already in the previous elements list\n            if j % n == 0 and j not in previous:\n                # add the current element to the previous elements list and increment the total number of sequences by 1\n                previous.append(j)\n                total += 1\n    return total"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    if len(list2) == 0:\n        print(\"Second list is empty. Not replacing anything.\")\n        return\n\n    list1[-1] = list2\n    print(\"New list:\", list1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2)!= len(list1):\n        print(\"The lists must have the same length!\")\n        return\n    else:\n        list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list1\n    \n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        print('Error: Lists must be of equal length')\n    else:\n        for i in range(len(list1)-1, -1, -1):\n            list1[i] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) == 0:\n        print(\"One of the lists is empty.\")\n        return\n    elif len(list2) == 0:\n        print(\"The second list is empty.\")\n        return\n    elif len(list1) < len(list2):\n        print(\"The first list has less elements than the second list.\")\n        return\n    else:\n        list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    for i in range(len(list1)-1,-1,-1):\n        list1[i] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2[:]"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Use binary search to find the next perfect square greater than N\n    low = 1\n    high = N\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == N:\n            high = mid - 1\n        elif mid * mid < N:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # Return the next perfect square greater than N\n    return high + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Using binary search algorithm to find the next perfect square greater than N\n    left, right = 0, N\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid * mid == N:\n            right = mid - 1\n        elif mid * mid < N:\n            left = mid + 1\n        else:\n            return mid * mid\n    # If the function reaches here, it means we did not find a perfect square greater than N\n    return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Helper function to check if a number is a perfect square\n    def is_square(n):\n        return int(math.sqrt(n)) ** 2 == n\n\n    # Helper function to get the next perfect square greater than a given number\n    def next_square(n):\n        while True:\n            n += 1\n            if is_square(n):\n                return n\n\n    # Find the next perfect square greater than N\n    n = N + 1\n    while not is_square(n):\n        n += 1\n\n    return n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        num = N * N\n        if num > N:\n            return num\n        else:\n            N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = int(math.ceil(math.log(N, 2)))\n    return 2 ** n + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math  \n  \ndef next_Perfect_Square(N):  \n    '''\n    This function finds the next perfect square greater than a given number.\n    '''\n    # Convert N to float and initialize variables\n    N = float(N)\n    i = 1\n    next_square = 0\n    current_square = N\n\n    # Find the next perfect square greater than N\n    while current_square >= N:\n        next_square = math.sqrt(current_square)\n        current_square = int(next_square) + 1\n\n    # Return the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = int(math.sqrt(N))\n    while True:\n        N += 1\n        if is_Perfect_Square(N):\n            return N\n        else:\n            sqrtN += 1\n            if sqrtN * sqrtN <= N:\n                return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n    # Calculate the next perfect square\n    next_sqrt_N = sqrt_N + 1\n    # Find the square root of the next perfect square\n    next_sqrt_N = math.sqrt(next_sqrt_N)\n    # Return the next perfect square\n    return int(next_sqrt_N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math  \n  \ndef next_Perfect_Square(N): \n  \n    # Check if N is a perfect square or not\n    root = math.sqrt(N)\n    if root.is_integer():\n        return int(N) + 1\n    else:\n        return int(root) + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    root = math.sqrt(N)\n    if root.is_integer():\n        root += 1\n    else:\n        root = math.ceil(root)\n    return int(root)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr) \n    if n < 2: \n        return 0\n    \n    # Find the maximum sum in the increasing subsequence\n    max_sum_inc = max_sum_dec = float('-inf')\n    for i in range(1, n): \n        max_sum_inc = max(max_sum_inc, arr[i] + arr[i-1])\n        max_sum_dec = max(max_sum_dec, arr[i] - arr[i-1])\n    \n    # Find the maximum sum in the decreasing subsequence\n    max_sum_inc = max(max_sum_inc, arr[n-1])\n    max_sum_dec = max(max_sum_dec, arr[n-2])\n    \n    # Return the maximum sum\n    return max(max_sum_inc, max_sum_dec)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr)\n\n    if n == 0 or n == 1:\n        return 0\n\n    # Sort the array in non-decreasing order\n    arr = sorted(arr, reverse=True)\n\n    # Initialize variables for the maximum sum and the current subsequence sum\n    max_sum = 0\n    subseq_sum = arr[0]\n\n    # Loop through the sorted array and update the maximum sum and subsequence sum\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            # If the next element is smaller than the previous element, update the maximum sum and the subsequence sum\n            max_sum = max(max_sum, subseq_sum)\n            subseq_sum = arr[i]\n        else:\n            # If the next element is larger than the previous element, update the subsequence sum only\n            subseq_sum += arr[i]\n\n    # If the subsequence sum is greater than the maximum sum, update the maximum sum\n    max_sum = max(max_sum, subseq_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initialize variables for maximum sum and current sum\n    max_sum_right = max_sum_left = float('-inf')\n    current_sum_right = current_sum_left = 0\n    \n    # loop through the array\n    for i in range(len(arr)):\n        # update the current sum for each side of the array\n        if i % 2 == 0:\n            current_sum_right += arr[i]\n            current_sum_left -= arr[i]\n        else:\n            current_sum_right -= arr[i]\n            current_sum_left += arr[i]\n        \n        # update the maximum sum for each side of the array\n        if current_sum_right > max_sum_right:\n            max_sum_right = current_sum_right\n        if current_sum_left < max_sum_left:\n            max_sum_left = current_sum_left\n            \n    # return the maximum sum for the entire array\n    return max(max_sum_right, max_sum_left)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables to keep track of the maximum sum for increasing and decreasing subsequences\n    max_inc = float('-inf')\n    max_dec = float('-inf')\n\n    # Loop through the array and find the maximum sum for increasing and decreasing subsequences\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] > arr[i-1]:\n                max_inc = max(max_inc, arr[i] + arr[i-1])\n            else:\n                max_dec = max(max_dec, arr[i] + arr[i-1])\n        else:\n            if arr[i] > arr[i-1]:\n                max_dec = max(max_dec, arr[i] + arr[i-1])\n            else:\n                max_inc = max(max_inc, arr[i] + arr[i-1])\n\n    # Return the maximum sum of the bitonic subsequence\n    return max(max_inc, max_dec)\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    # initialize variables\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] < arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    else:\n        # create a temporary array to store the maximum sum seen so far for each index\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        for i in range(1, n):\n            if arr[i] > arr[i-1]:\n                max_ending_here = max(max_ending_here + arr[i], arr[i])\n            else:\n                max_ending_here = max(max_ending_here - arr[i], arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = max_ending_here\n\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables\n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    # Traverse through the array from second element to last element\n    for i in range(1, n-1):\n        if arr[i] > arr[i+1]:\n            # If current element is greater than next element, update max_ending_here\n            max_ending_here += arr[i+1]\n        else:\n            # If current element is less than next element, update max_ending_here to zero\n            max_ending_here = arr[i+1]\n\n        # Update max_so_far if current element is greater than or equal to max_ending_here\n        max_so_far = max(max_so_far, max_ending_here)\n\n    # Return the maximum sum of a bitonic subsequence\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Sort the array in non-decreasing order\n    sorted_arr = sorted(arr)\n\n    # Initialize two pointers left and right, left at 0 and right at n-1\n    left = 0\n    right = n - 1\n\n    # Initialize a variable max_sum to store the maximum sum\n    max_sum = 0\n    \n    # Traverse the array\n    while left < right:\n        # Check if the current subsequence is increasing\n        if sorted_arr[left] < sorted_arr[right]:\n            # Check if the current subsequence is increasing and the sum is greater than max_sum\n            if sorted_arr[left] < sorted_arr[left+1] and sorted_arr[left] < sorted_arr[left+2]:\n                if sorted_arr[right] > max_sum:\n                    max_sum = sorted_arr[right]\n            \n            # If the current subsequence is decreasing and the sum is greater than max_sum\n            elif sorted_arr[right] > sorted_arr[right-1] and sorted_arr[right] > sorted_arr[right-2]:\n                if sorted_arr[left] > max_sum:\n                    max_sum = sorted_arr[left]\n            # If the current subsequence is neither increasing nor decreasing, move the pointers accordingly\n            else:\n                if sorted_arr[left] > sorted_arr[right]:\n                    left += 1\n                else:\n                    right -= 1\n        # If the current subsequence is decreasing, move the right pointer\n        else:\n            right -= 1\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 2:\n        return max(arr)\n    \n    # Calculate the sum of the left and right subarrays\n    left_sum = 0\n    right_sum = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            left_sum += arr[i]\n        else:\n            right_sum += arr[i]\n    \n    # Find the maximum sum of a subarray that is increasing and then decreasing\n    max_sum = max(left_sum, right_sum)\n    \n    # Calculate the maximum sum of a subarray that is increasing only\n    if left_sum > right_sum:\n        max_sum = max(max_sum, left_sum)\n    \n    # Calculate the maximum sum of a subarray that is decreasing only\n    if right_sum > left_sum:\n        max_sum = max(max_sum, right_sum)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] > arr[1]:\n            return arr[0] + arr[1]\n        else:\n            return arr[1] + arr[0]\n    else:\n        max_increasing = max_decreasing = arr[0]\n        for i in range(1, n):\n            if arr[i] > arr[i - 1]:\n                max_increasing = max(max_increasing, arr[i])\n            else:\n                max_decreasing = max(max_decreasing, arr[i])\n        return max_increasing + max_decreasing"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    low = 0.0001\n    high = number\n    result = (low + high) / 2.0\n    while abs(result**2 - number) > 0.0001:\n        if result**2 < number:\n            low = result\n        else:\n            high = result\n        result = (low + high) / 2.0\n    return result"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    x_0 = number/2.0 # initial guess\n    x_1 = x_0 # first iteration\n    x_2 = x_1 - ((number/x_1)**2) # second iteration\n\n    while abs(x_2-x_1) > 0.000001: # loop until converges\n        x_0 = x_1\n        x_1 = x_2\n        x_2 = x_1 - ((number/x_1)**2)\n\n    return x_2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Initialize the current guess and the maximum number of iterations\n    current_guess = number / 2\n    max_iterations = 1000\n\n    # Perform the babylonian method until the current guess is within the desired precision\n    for i in range(max_iterations):\n        # Calculate the next guess by computing the average of the previous two guesses\n        next_guess = (current_guess + number / current_guess) / 2\n\n        # Check if the next guess is within the desired precision\n        if abs(next_guess - current_guess) < 0.0001:\n            break\n\n        # Update the current guess\n        current_guess = next_guess\n\n    # Return the final guess\n    return current_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Calculate the initial approximation for the square root\n    x = number / 2\n    # Set a tolerance for the difference between x and the square root\n    tolerance = 0.00001\n    # Keep track of the number of iterations\n    iterations = 0\n    # Loop until the difference between x and the square root is less than the tolerance\n    while abs(x*x - number) >= tolerance:\n        x = (x + number/x) / 2\n        iterations += 1\n    # Return the square root and the number of iterations taken\n    return x, iterations"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newton_raphson_square_root(number):\n    '''\n    Write a function for computing square roots using the Newton-Raphson method.\n    '''\n    current_estimate = 1\n    tolerance = 0.0001\n    \n    while True:\n        new_estimate = (current_estimate + number/current_estimate) / 2\n        if abs(new_estimate - current_estimate) < tolerance:\n            break\n        current_estimate = new_estimate\n    \n    return current_estimate"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x = 1\n    tol = 1e-10\n    while True:\n        y = (x + number / x) / 2\n        if abs(x - y) < tol:\n            return y\n        x = y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    guess = number / 2  # initial guess\n    tolerance = 0.0001  # tolerance for convergence\n    iterations = 0  # number of iterations\n\n    while abs(guess**2 - number) > tolerance:\n        # update guess\n        guess = (number / guess + guess) / 2\n        iterations += 1\n\n    # return result and number of iterations\n    return guess, iterations"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    i = 1\n    x = 0\n    y = number / 2\n    error = 1\n    \n    # iterate until x is within 1e-6 of y\n    while error > 1e-6:\n        x = y\n        y = (y + number / y) / 2\n        error = abs(x - y)\n        i += 1\n    \n    # return the final value of x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initial guess of square root\n    guess = number / 2\n    \n    # Maximum number of iterations\n    max_iters = 1000\n    \n    # Maximum difference between two consecutive approximations\n    epsilon = 0.0001\n    \n    # Initialize count of iterations\n    count = 0\n    \n    # Compute square root using babylonian method\n    while abs(guess * guess - number) > epsilon and count < max_iters:\n        guess = (guess + number / guess) / 2\n        count += 1\n    \n    # Return the square root if it converged within the maximum iterations\n    if count < max_iters:\n        return guess\n    else:\n        print(\"Error: Maximum number of iterations reached.\")\n        return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2  # start with an initial guess of half the number\n    while abs(guess*guess - number) > 0.001:  # check if the guess is within 0.001 of the square root\n        guess = (guess + number / guess) / 2  # compute a new guess\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s):\n    \"\"\"\n    This function returns the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    # Create a 2D table to store the length of longest palindromic subsequence for all possible substrings\n    dp = [[0] * n for _ in range(n)]\n    # Initialize the first row and column of the table\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the rest of the table in bottom-up manner\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a 2D table to store LPS lengths \n    # of all substrings \n    table = [[0] * n for i in range(n)] \n\n    # Initialize LPS lengths for single character \n    for i in range(n): \n        table[i][i] = 1\n\n    # Fill in the remaining entries in the table \n    for length in range(3, n+1): \n        for start in range(n-length+1): \n            end = start + length - 1 \n            if str[start] == str[end]: \n                table[start][end] = table[start+1][end-1] + 2\n            else: \n                table[start][end] = max(table[start+1][end], table[start][end-1])\n\n    # Return the length of the LPS substring \n    return table[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(s):\n    n = len(s)\n    # Initialize the length of the longest palindrome subsequence as 1\n    lps[0] = 1\n    # Initialize the previous and current indices of the longest palindrome subsequence\n    prev = 0\n    curr = 1\n    # Iterate over all characters in the string\n    for i in range(1, n):\n        # If the current character is same as the previous character, then check if the substring starting from the previous index\n        # and ending at the current index is also a palindrome. If yes, then update the length of the longest palindrome subsequence\n        # by taking the maximum value of the current length and the length of the previous longest palindrome subsequence.\n        if s[i] == s[prev]:\n            # Update the length of the longest palindrome subsequence by taking the maximum value of the current length and the length of the previous longest palindrome subsequence\n            lps[i] = lps[prev] + 1\n            # If the current length of the longest palindrome subsequence is greater than the current length of the longest palindrome subsequence starting from the previous index, then update the previous index to the current index\n            if lps[i] > lps[curr]:\n                prev = i\n        # If the current character is not same as the previous character, then reset the current index to the previous index and update the current index to the next index\n        else:\n            curr = i\n    return lps[n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                dp[i+1][j+1] = dp[i][j] + 2\n            else:\n                dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])\n    return dp[0][n]\n\nWe will create a 2D table dp of size (n+1)x(n+1) and initialize it with zeros. Then, we will iterate through the string str and fill the table dp. The value in the table will represent the length of the longest palindromic subsequence ending at index i. We will fill the table in a bottom-up manner.\n\nFor each pair of indices i and j, we will compare the characters at indices i and j. If the characters are the same, then the length of the longest palindromic subsequence ending at index i+1 and index j+1 can be obtained by adding the length of the longest palindromic subsequence ending at indices i and j. If the characters are different, then the length of the longest palindromic subsequence ending at index i+1 and index j+1 can be obtained by taking the maximum of the length of the longest palindromic subsequence ending at index i and index j+1 and the length of the longest palindromic subsequence ending at index i and index j.\n\nFinally, we will return the value in the table at index (0, n) which represents the length of the longest palindromic subsequence in the input string str."
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(string):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(string)\n    # create a 2D table to store the length of longest palindromic subsequence for substrings of length 1, 2,..., n\n    lps_table = [[0] * (n+1) for i in range(n+1)]\n\n    # fill the table with 0's\n    for i in range(n+1):\n        lps_table[i][0] = 0\n\n    # fill the table in bottom up manner\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if string[i-1] == string[j-1]:\n                lps_table[i][j] = lps_table[i-1][j-1] + 1\n            else:\n                lps_table[i][j] = max(lps_table[i-1][j], lps_table[i][j-1])\n\n    # return the length of longest palindromic subsequence\n    return lps_table[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    if n == 0 or n == 1:\n        return n\n\n    dp = [[0] * (n+1) for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(i):\n            if s[i-1] == s[j]:\n                dp[i][j] = 2 + dp[j][i-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[j][i])\n\n    return dp[n][0]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n    start = 0\n\n    for i in range(n):\n        if i < n-1 and s[i] == s[i+1]:\n            dp[i][i+1] = 2\n            start = i\n            max_len = 2\n            continue\n\n        for j in range(i-1, -1, -1):\n            if i-j >= 0 and s[i] == s[j] and dp[j+1][i-1] + 2 > dp[i][j]:\n                dp[i][j] = dp[j+1][i-1] + 2\n                start = j\n\n        if dp[i][i] > max_len:\n            max_len = dp[i][i]\n            start_idx = i\n\n    return s[start:start+max_len]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n\n    # Create a 2D table to store lengths of palindrome subsequences\n    table = [[0 for j in range(n)] for i in range(2)]\n\n    # Base case: If the length of the string is 0 or 1, it is a palindrome subsequence\n    for i in range(2):\n        table[i][i] = 1\n\n    # Fill the rest of the table in bottom-up manner\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                table[i%2][j%2] = table[(i+1)%2][(j+1)%2] + 2\n            else:\n                table[i%2][j%2] = max(table[(i+1)%2][j%2], table[i%2][(j+1)%2])\n\n    # Return the length of the longest palindrome subsequence\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize variables for longest palindromic subsequence length and start and end indices\n    length = 0\n    start = 0\n    end = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Check if the character is the start of a palindromic subsequence\n        if i > 0 and str[i] == str[i-1]:\n            # Check if the current palindromic subsequence is longer than the previous longest palindromic subsequence\n            if length < i - start + 1:\n                length = i - start + 1\n                start = i - length + 1\n                end = i\n        # Check if the character is the end of a palindromic subsequence\n        elif i < len(str) - 1 and str[i] == str[i+1]:\n            # Check if the current palindromic subsequence is longer than the previous longest palindromic subsequence\n            if length < i - start + 1:\n                length = i - start + 1\n                start = i - length + 1\n                end = i\n        # If the character is neither the start nor end of a palindromic subsequence, check if it can form a palindromic subsequence\n        elif i == len(str) - 1 or (i > 0 and str[i]!= str[i-1]):\n            # Check if the current palindromic subsequence is longer than the previous longest palindromic subsequence\n            if length < i - start + 1:\n                length = i - start + 1\n                start = i - length + 1\n                end = i\n\n    # Return the length of the longest palindromic subsequence\n    return length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize first column and base case\n    for i in range(n):\n        if i == 0 or str[i] == str[i-1]:\n            dp[i][i] = 1\n\n    # Fill the rest of the DP table\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 1\n    for i in range(1, n):\n        harmonic += 1 / i\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n <= 1:\n        return n\n    \n    return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n - 1) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return n / harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2*n - 1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0.5\n    else:\n        return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2*n - 1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_1s = 0\n    for i in range(1, n):\n        sum_of_1s += 1 / i\n    return 1 / sum_of_1s"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return 1 + harmonic_sum(n-1) / n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    If the intersection is empty, it returns an empty array.\n    \"\"\"\n    # Initialize an empty dictionary to store the frequency of each element in array_nums2\n    freq_dict = {}\n\n    # Iterate over each element in array_nums2 and update the frequency dictionary\n    for num in array_nums2:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    # Initialize an empty list to store the intersection\n    intersection = []\n\n    # Iterate over each element in array_nums1 and check if its frequency is in the frequency dictionary\n    for num in array_nums1:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input, and returns the intersection of the two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the first array\n    freq = {}\n    for num in array_nums1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # create a list of elements that appear in both arrays\n    intersection = []\n    for num in array_nums2:\n        if num in freq and freq[num] > 0:\n            intersection.append(num)\n            freq[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    intersection_list = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection_list.append(num)\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the first array\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Create a list to store the intersection of the two arrays\n    intersection_list = []\n\n    # Loop through the second array and check if each element is in the dictionary\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection_list.append(num)\n            freq_dict[num] -= 1\n\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create two dictionaries to store the unique elements of array1 and array2\n    array1_dict = {}\n    array2_dict = {}\n\n    # iterate through array1 and add each unique element to the dictionary\n    for num in array_nums1:\n        if num not in array1_dict:\n            array1_dict[num] = True\n\n    # iterate through array2 and add each unique element to the dictionary\n    for num in array_nums2:\n        if num not in array2_dict:\n            array2_dict[num] = True\n\n    # find the intersection of the two dictionaries\n    intersection = [key for key in array1_dict.keys() if key in array2_dict.keys()]\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize empty set to store the intersection\n    intersection = set()\n\n    # Loop through array_nums1 and check if each element is also in array_nums2\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.add(num)\n\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Sort both arrays\n    array_nums1.sort()\n    array_nums2.sort()\n\n    # Initialize the intersection array\n    intersection = []\n\n    # Iterate over both arrays\n    i, j = 0, 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        # Compare the current elements\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # initialize an empty list to store the result\n    result = []\n    # iterate through the input list and add each element to the result list before the element itself\n    for i in range(len(list)):\n        if i == 0:\n            # if the current index is 0, add the element to the result list\n            result.append(element)\n        else:\n            # if the current index is not 0, add the element to the result list before the previous element in the list\n            result.append(list[i-1])\n            result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, \n    and returns the resulting list.\n    \"\"\"\n    # create a new list to hold the modified list\n    new_lst = []\n    \n    # loop through the original list and add the element to the new list\n    for i in lst:\n        new_lst.append(elem)\n        new_lst.append(i)\n    \n    # return the modified list\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(elem)\n        new_lst.append(lst[i])\n    return new_lst\n"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i, item in enumerate(list):\n        new_list.append(item)\n        new_list.insert(i, element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n            new_list.append(list[i])\n        else:\n            new_list.append(list[i])\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # Print the polar coordinates\n        print(f\"r = {r:.2f}, theta = {theta:.2f} rad\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        mag = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(number)\n        print(\"Magnitude:\", mag, \"Phase:\", phase)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        try:\n            complex_num = complex(num)\n            real = abs(complex_num)\n            imag = cmath.phase(complex_num)\n            result.append((real, imag))\n        except ValueError:\n            pass\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for num in numbers:\n        magnitude = abs(num)\n        if magnitude == 0:\n            angle = 0\n        else:\n            angle = cmath.phase(num)\n        polar_numbers.append((magnitude, angle))\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        r, theta = cmath.polar(number)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # converting complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        \n        # printing polar coordinates\n        print(\"({}, {})\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        # Split the complex number string into real and imaginary parts\n        real, imag = num.split(' + ')\n        real = float(real)\n        imag = float(imag)\n\n        # Calculate the magnitude and angle of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(complex(real, imag))\n\n        # Convert the angle to degrees and append to the polar_coords list\n        polar_coords.append(cmath.rect(magnitude, angle).real)\n\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        if isinstance(num, complex):\n            r = cmath.sqrt(num.real**2 + num.imag**2)\n            theta = cmath.phase(num)\n            polar_coordinates.append((r, theta))\n        else:\n            polar_coordinates.append(num)\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        r, phi = cmath.polar(num)\n        # add the polar coordinates to the result list\n        result.append((r, phi))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        print(\"(%.2f, %.2f)\" % (r, theta))"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    This function counts the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n\n    for i in range(1, len(l) + 1):\n        for j in combinations_with_replacement(l, i):\n            color_combinations.append((j,))\n\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if len(set(l[i:j])) == n:\n                result.append((l[i:j]))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, n):\n            color_combinations.append(tuple(j))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all combinations (with repetition) of the elements of the list\n    all_combinations = list(combinations_with_replacement(l, n))\n    # create a list with a tuple for each combination\n    combined_combinations = []\n    for combination in all_combinations:\n        combined_combinations.append(tuple(combination))\n    return combined_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all combinations with replacement for n elements\n    comb = list(combinations_with_replacement(l, n))\n\n    # return a list of tuples containing the combination\n    return [tuple(comb[i]) for i in range(len(comb))]"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than n.\n    \"\"\"\n    prime_count = 0\n    i = 2\n    while i < n:\n        if all(i%j!=0 for j in range(2,int(i**0.5)+1)):\n            prime_count += 1\n        i += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime or not\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    primes = []\n    # start with 2 as 1 is not a prime number\n    primes.append(2)\n    for num in range(3, n+1, 2):\n        # check if num is prime\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return b, a\n\nprint(swap_numbers(5, 10)) # Output: (10, 5)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    # Create a list of tuples with the minimum value for each tuple element\n    min_val1 = min(test_tup1)\n    min_val2 = min(test_tup2)\n    \n    # If the minimum value for one tuple is greater than the other, swap them\n    if min_val1 > min_val2:\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    \n    # Find the maximum value for each tuple element\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n    \n    # Create a new tuple with the maximum value for each tuple element\n    result_tup = (max_val1, max_val2)\n    \n    return result_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples have different lengths.\"\n\n    # Initialize the maximum values\n    max1 = 0\n    max2 = 0\n\n    # Loop through the tuples and compare each element\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n        if test_tup2[i] > max2:\n            max2 = test_tup2[i]\n\n    # Return the maximum values\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max2 = float('-inf')\n    for num in test_tup1:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    for num in test_tup2:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Use a list comprehension to create a new tuple that contains the maximum values from both tuples\n    max_tup = tuple([max(tup1, tup2) for tup1, tup2 in zip(test_tup1, test_tup2)])\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # initialize max values\n    max_tup1 = test_tup1\n    max_tup2 = test_tup2\n    \n    # loop through each element of the tuples\n    for i in range(len(test_tup1)):\n        # compare each element of the tuples\n        if test_tup1[i] > test_tup2[i]:\n            # if the first element is greater, update max_tup1\n            max_tup1 = test_tup1\n        elif test_tup2[i] > test_tup1[i]:\n            # if the second element is greater, update max_tup2\n            max_tup2 = test_tup2\n            \n    # return the max values\n    return max_tup1, max_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple that contains the maximum elements from both input tuples.\n    '''\n    max_tup = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    if len(test_tup1) > len(test_tup2):\n        max_tup += test_tup1[len(test_tup2):]\n    else:\n        max_tup += test_tup2[len(test_tup1):]\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return maximize_elements(test_tup2, test_tup1)\n    elif len(test_tup1) == len(test_tup2):\n        if test_tup1[0] > test_tup2[0]:\n            return test_tup1\n        elif test_tup1[0] < test_tup2[0]:\n            return test_tup2\n        else:\n            return maximize_elements(test_tup1[1:], test_tup2[1:])\n    else:\n        return maximize_elements(test_tup1[1:], test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_1 = max(test_tup1)\n    max_2 = max(test_tup2)\n    \n    if max_1 > max_2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # if one of the tuples is greater than the other, return that tuple\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        # if both tuples have the same length, compare the elements in them\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return test_tup1\n            elif test_tup1[i] < test_tup2[i]:\n                return test_tup2\n            else:\n                # if the elements are equal, return the original tuple\n                return test_tup1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n\n    # initialize variables\n    count = 0\n    i = 2\n    prime = True\n\n    # loop through numbers until nth prime is found\n    while count < n:\n        i += 1\n        is_prime = True\n\n        # check if number is prime\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        # if number is prime, it is the nth prime\n        if is_prime:\n            count += 1\n\n    return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Define the sequence of newman prime numbers\n    new_primes = [2]\n    while len(new_primes) < n:\n        last_prime = new_primes[-1]\n        for i in range(3, last_prime*2, 2):\n            if is_prime(i):\n                new_primes.append(i)\n                break\n    \n    # Return the nth newman prime number\n    return new_primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    prime = 2\n    \n    # Loop through all numbers up to n\n    while count < n:\n        # Check if the current number is prime\n        for i in range(2, int(prime**0.5)+1):\n            if prime % i == 0:\n                break\n        else:\n            # If the number is prime, increment count and update prime\n            count += 1\n            prime += 2\n    \n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize the first prime number to 2\n    prime = 2\n\n    # initialize a list to store the prime numbers found so far\n    primes = []\n\n    # loop until we have found the nth prime number\n    for i in range(n):\n        # check if the current prime number is prime\n        is_prime = True\n        for j in range(2, int(prime**0.5)+1):\n            if prime % j == 0:\n                is_prime = False\n                break\n        # if the current prime number is prime, append it to the list of primes\n        if is_prime:\n            primes.append(prime)\n\n        # increment the current prime number\n        prime += 1\n\n    # return the nth prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the count variable to 0 \n    count = 0 \n    # Initialize a list to store the prime numbers \n    primes = [] \n    # Loop through the numbers from 2 to n \n    for i in range(2, n+1): \n        # Check if i is prime \n        is_prime = True \n        # Loop through the numbers from 2 to the square root of i \n        for j in range(2, int(i**0.5)+1): \n            if i % j == 0: \n                is_prime = False \n                break \n        # If i is prime, add it to the list of primes \n        if is_prime: \n            primes.append(i) \n            count += 1 \n        # If we have found the nth prime number, return it \n        if count == n: \n            return i "
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    current_prime = 3\n    prime_count = 0\n    \n    # Loop until we have found the nth prime\n    while prime_count < n:\n        # Check if the current prime is prime\n        if is_prime(current_prime):\n            prime_count += 1\n            \n        # Increment the current prime\n        current_prime += 2\n    \n    # Return the nth prime\n    return current_prime\n\ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # Loop from 2 to the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    # If we get here, the number is prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define the list of known primes\n    known_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Loop through the known primes to find the nth prime number\n    for i in range(len(known_primes)):\n        if known_primes[i] > n:\n            return known_primes[i-1]\n    # If we reach this point, the nth prime number has not been found\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    is_prime = lambda x: all(x % i!= 0 for i in range(2, int(x**0.5) + 1))\n    primes = [x for x in range(2, 1000) if is_prime(x)]\n    count = 0\n    for prime in primes:\n        if prime**3 + 1 <= n:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        '''\n        Write a function to check if a given number is prime or not.\n        '''\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def next_prime(n):\n        '''\n        Write a function to find the next prime number after n.\n        '''\n        i = n + 1\n        while not is_prime(i):\n            i += 1\n        return i\n    \n    def nth_prime(n):\n        '''\n        Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n        '''\n        i = 1\n        prime = next_prime(2)\n        while i < n:\n            prime = next_prime(prime)\n            i += 1\n        return prime\n    \n    return nth_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1: \n        return None\n    elif n == 1: \n        return 2\n    else: \n        i = 3\n        while i <= n: \n            if i % 3 == 0 or i % 5 == 0: \n                i += 2\n            elif i % 7 == 0: \n                i += 1\n            else: \n                return i\n            if i > n: \n                return i\n        return None"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            try:\n                result_tup += (test_tup1[i] / test_tup2[i],)\n            except ZeroDivisionError:\n                print(\"Cannot perform division by zero.\")\n                return None\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] // test_tup2[i],)\n        except ZeroDivisionError:\n            result_tup += (0,)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Get the length of the tuples\n    length = len(test_tup1)\n    # Initialize an empty list to store the division results\n    result = []\n    # Perform the element-wise division operation using nested loops\n    for i in range(length):\n        result.append(test_tup1[i] / test_tup2[i])\n    # Return the resultant list of division results\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length.\")\n    \n    # Perform element-wise division\n    result_tup = tuple(x1 / x2 for x1, x2 in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # If the length of the two input tuples are not equal, return None\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    # Initialize an empty list to hold the result\n    result = []\n    \n    # Loop through each element in the two input tuples\n    for i in range(len(test_tup1)):\n        # Perform the division operation element-wise\n        result.append(test_tup1[i] / test_tup2[i])\n    \n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements.\")\n    \n    # create a new empty tuple for the result\n    result_tup = ()\n    \n    # perform the element-wise division operation\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            raise ValueError(\"Both elements of a tuple cannot be zero.\")\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result.append(float('nan'))\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        # initialize an empty list to store the result\n        result_list = []\n        # perform element-wise division operation on the tuples\n        for i in range(len(test_tup1)):\n            result_list.append(test_tup1[i] / test_tup2[i])\n        # return the list of result\n        return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # Perform element-wise division operation\n        for i in range(len(test_tup1)):\n            test_tup1[i] /= test_tup2[i]\n    else:\n        print(\"Error: The length of the two tuples is not equal.\")"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Number of elements in the tuples must be equal\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            raise ValueError(\"Cannot divide by zero\")\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n\n    # initialize the first part of the list\n    first_part = list1[:L]\n\n    # initialize the second part of the list\n    second_part = list1[L:]\n\n    # return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts of length L.\n    \n    Args:\n    lst (list): List to split into two parts\n    L (int): Length of the first part of the list\n        \n    Returns:\n    tuple: Two parts of the original list\n    \"\"\"\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = len(list1) // 2\n    return (list1[:half], list1[half:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Calculate the length of the first part of the list\n    first_part_length = int(len(list1)/2)\n    \n    # Split the list into two parts\n    first_part = list1[:first_part_length]\n    second_part = list1[first_part_length:]\n    \n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    n = len(lst)\n    if n > L:\n        # split the list into two parts\n        mid = n // 2\n        part1 = lst[:mid]\n        part2 = lst[mid:]\n        # return the two parts as a tuple\n        return (part1, part2)\n    else:\n        # if the length of the list is less than L, return the original list\n        return lst"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(lst) < L:\n        raise ValueError('List should have at least {} elements'.format(L))\n    half = len(lst) // 2\n    return (lst[:half], lst[half:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    n = len(list1)\n    if L <= 0 or L > n:\n        return \"Invalid input\"\n    else:\n        list2 = list1[L:]\n        list1 = list1[:L]\n        return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 0:\n        mid = int(len(list1)/2)\n        part1 = list1[:mid]\n        part2 = list1[mid:]\n        return (part1, part2)\n    else:\n        mid = int((len(list1)+1)/2)\n        part1 = list1[:mid]\n        part2 = list1[mid:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Check if the length of the list is less than L\n    if len(list1) < L:\n        raise ValueError('The length of the list should be greater than or equal to L.')\n        \n    # Divide the list into two parts and return them as a tuple\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    mid = len(list1)//2 # Finding the midpoint of the list\n    list1_part = list1[:mid] # Slicing the first part of the list\n    list2_part = list1[mid:] # Slicing the second part of the list\n    return (list1_part, list2_part) # Returning the resulting lists as a tuple"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert human age to dog's years\n    dog_years = (h_age * 7)\n    # Return the dog's age in dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in years\n    dog_age_years = h_age * 7\n    \n    # Return the dog's age in years\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert the hour age into dog years\n    dog_years = h_age / 7\n    \n    # return the dog's age in dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_years = 7\n    years = h_age * dogs_years\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 7 + h_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 7\n    return age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S)\n    L = []\n    for i in range(0, n, step):\n        L.append(S[i:i+step])\n    return L"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Split the input list into sublists at every n-th element\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # convert the list into a generator so that we can iterate over it in a more memory-efficient way\n    S_gen = (S[i] for i in range(len(S)))\n\n    # create an empty list to store the resulting lists\n    result = []\n\n    # iterate over the generator and split the list for every nth element\n    for i, item in enumerate(S_gen, 1):\n        if i % step == 0:\n            # if the index is a multiple of the step, add the current item to the result list\n            result.append(item)\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to hold the resulting lists\n    result = []\n\n    # Use a loop to iterate over the input list\n    for i in range(0, len(S), step):\n        # Create a new list with the elements of the original list between the current index and the next index\n        temp_list = S[i:i+step]\n        # Add the new list to the result list\n        result.append(temp_list)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    results = []\n    for i in range(0, n, step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step == 0:\n        raise ValueError(\"Step cannot be 0.\")\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    i = 1\n    while i <= n:\n        total += i ** 2\n        i += 2\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    # initialize sum variable to 0\n    sum_of_squares = 0\n    \n    # iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd natural number to the sum_of_squares\n        sum_of_squares += i*i\n    \n    # return the sum of the squares of the first n odd natural numbers\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_squares = 0\n    for i in range(1, n+1, 2):\n        odd_squares += i*i\n    return odd_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize variables\n    result = 1\n    count = 0\n    \n    # loop through all numbers from 1 to n\n    while count < n:\n        # add the current number to the result\n        result += count\n        \n        # increment the counter\n        count += 1\n    \n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Start with 1\n    current_num = 1\n    # Loop until n stars have been printed\n    for i in range(n):\n        # Print the current number\n        print(current_num)\n        # Increment the current number\n        current_num += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # initialize variables\n    star_num = 1\n\n    # loop until n stars have been printed\n    for i in range(n): \n        # print the current star number\n        print('*' * star_num)\n\n        # increment the star number\n        star_num += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize a counter variable to 1\n    count = 1\n    # Initialize an empty string to store the star number\n    star_num = \"\"\n    # Loop through the first n-1 rows\n    for i in range(n-1): \n        # Append \"*\" to the star_num variable each time\n        star_num += \"*\"\n    # Append the last row of stars to the star_num variable\n    star_num += \"****\"\n    # Return the value of star_num\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the counter variable\n    count = 1\n    # Initialize the result variable\n    result = 0\n    # Loop n times\n    while count <= n:\n        # Multiply the result by 2 and add 1\n        result = result * 2 + 1\n        # Increment the counter\n        count += 1\n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n - 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize the star number to 1\n    star_num = 1\n\n    # Loop through the first n-1 numbers and add the number to the star number\n    for i in range(1, n):\n        star_num += i\n\n    # Return the star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    num = 1\n    count = 1\n\n    # Loop through the first n-1 rows\n    for i in range(n-1): \n        # Multiply the count by 2 and add 1\n        count *= 2 \n        count += 1\n\n        # Print the current count\n        print(count)\n\n    # Print the final count\n    print(count)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Find the number of stars for each digit\n    digit_count = [0] * 10  # Initialize a list of 10 zeros\n    while n > 0:\n        digit = n % 10  # Find the last digit\n        digit_count[digit] += 1  # Increment the count for that digit\n        n //= 10  # Remove the last digit from the number\n\n    # Convert the list of digit counts to a string of stars\n    result = ''\n    for digit in digit_count:\n        if digit > 0:\n            result += '*' * digit\n        else:\n            result +='' * abs(digit)\n\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(n): \n        print(\"*\" * (i+1))"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    ascii_val = ord(k)\n    print(\"The ascii value of\", k, \"is\", ascii_val)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    sum_even = 0\n    count = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_even_numbers = 0\n    for i in range(2, n+1, 2):\n        sum_of_even_numbers += i ** 5\n    return sum_of_even_numbers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize sum variable\n    sum = 0\n\n    # loop through first n even numbers\n    for i in range(2, n+1, 2):\n        # calculate the raised power and add to sum\n        sum += i ** 5\n\n    # return the final sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"Sum of the first\", n, \"even natural numbers that are raised to the fifth power is:\", even_Power_Sum(n))"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    This function takes an integer n and returns the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i * i * i * i * i\n        i += 1\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_in_list in test_list:\n        rear_list.append(tuple_in_list[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for index in range(len(test_tup1)):\n        test_tup1[index] -= test_tup2[index]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2) and i >= 0:\n            sub_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            sub_tup += (test_tup1[i],)\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    \n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize a variable to store the sum of even index binomial coefficients\n    even_binomial_sum = 0\n    \n    # Loop through odd indices of the number from 1 to n\n    for i in range(1, n+1, 2):\n        # Calculate the binomial coefficient for i and n-i\n        binomial_coeff = math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n        \n        # If the index is even, add it to the sum\n        if i % 2 == 0:\n            even_binomial_sum += binomial_coeff\n    \n    # Return the sum of even index binomial coefficients\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    \n    # Loop through all possible indices\n    for i in range(n):\n        # Calculate the even index binomial coefficient\n        coeff = math.comb(n, 2*i)\n        # Add the coefficient to the sum if it's even\n        if i % 2 == 0:\n            sum += coeff\n    \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    \n    # Calculate the sum of even index binomial coefficients using math.comb() function\n    for i in range(2, n+1):\n        for j in range(0, i, 2):\n            sum += math.comb(i, j)\n    \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    \n    #initialize the sum to zero\n    sum_even_binomial = 0\n    \n    #loop through odd indices\n    for i in range(1, n+1, 2):\n        #find the binomial coefficient using the formula:\n        #C(n,i) = (n-i+1) * C(n,i-1)\n        num = (n-i+1) * (n-i)\n        den = 2 * i - 1\n        #add the even index binomial coefficient to the sum\n        sum_even_binomial += num // den\n    \n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_coeffs = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1, 2):\n            if j == i:\n                sum_even_coeffs += math.comb(n, j)\n            else:\n                sum_even_coeffs += math.comb(i, j)\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.comb(i, 2)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return math.factorial(2) // 4\n    else:\n        return 4 * math.factorial(n-2) // (math.factorial(2*n-4) * math.factorial(4))\n\nprint(even_binomial_Coeff_Sum(10)) # Output: 55"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    \n    for i in range(2, n+1):\n        # find the even index term of the binomial coefficient\n        index = 2*i-1\n        \n        # calculate the binomial coefficient\n        coeff = math.comb(n, i)\n        \n        # check if the index is even\n        if index % 2 == 0:\n            # add the even index term to the sum\n            sum += coeff\n    \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and calculates the sum of even index binomial coefficients.\n    '''\n    even_binomial_coeffs = [0]*(n+1)\n    for i in range(2, n+1):\n        even_binomial_coeffs[i] = (1 - math.factorial(i-2)/math.factorial(i-4))*even_binomial_coeffs[i-2]\n\n    return sum(even_binomial_coeffs[::2])"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        print(\"Error: n must be a non-negative integer.\")\n        return\n\n    # initialize sum of even binomial coefficients\n    sum_even = 0\n\n    # calculate the sum of even index binomial coefficients\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even += math.comb(n, i)\n\n    # print the sum of even index binomial coefficients\n    print(\"The sum of even index binomial coefficients is:\", sum_even)"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14159 * r * r * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (3.14159 * r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r**2*h # Using formula of volume of cylinder"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3)*3.14*r*r*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume using the formula V = (1/3) * \u03c0 * r\u00b2 * h\n    volume = (1/3) * 3.14159 * r**2 * h\n    \n    # Return the volume\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    # calculate the volume using the formula V = (1/3) * pi * r^2 * h\n    volume = (1/3) * 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = (1/3) * pi * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r**2) * h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    # Loop through the tuple and decrement the count variable for each element before the tuple element\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            # If the current element is the last element in the tuple, return the count variable\n            return count\n        if i > 0 and test_tup[i]!= test_tup[i-1]:\n            # If the current element is not equal to the previous element, decrement the count variable\n            count -= 1\n    # If no elements before the tuple element are found, return 0\n    return 0"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= 0:\n            if test_tup[i]!= test_tup[i-1]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i, x in enumerate(test_tup):\n        if x == test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i-1] == test_tup[i]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    a = 1\n    for i in range(n):\n        a += i * (2 * i - 1)\n    return a"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += (i * (2*i-1))\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_list = []\n    i = 1\n    while i <= n:\n        num_list.append(2 * i - 1)\n        i += 1\n    return num_list[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the sum and index variables\n    sum_dec = 1\n    dec_idx = 1\n    \n    # Loop through all numbers from 1 to n\n    for num in range(1, n+1):\n        # Calculate the next decagonal number\n        next_dec = sum_dec + dec_idx\n        \n        # Update the sum and index variables\n        sum_dec = next_dec\n        dec_idx += 1\n        \n        # Check if the current number is the nth decagonal number\n        if num == next_dec:\n            return True\n    \n    # If we make it through the loop without finding the nth decagonal number, return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    # Check if n is a decagonal number\n    if n % 10!= 0:\n        return False\n\n    # Convert n to a string\n    n_str = str(n)\n\n    # Iterate through each digit of the number\n    for i in range(1, 14):\n        # Check if the digit is equal to the digit of the previous number\n        if int(n_str[i])!= int(n_str[i-1]) + (i // 10) * 10:\n            return False\n\n    return True"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize counter variable\n    count = 0\n    \n    # Iterate through each row of the decagonal number\n    while count < n:\n        # Initialize counter variable for each row\n        row_count = 0\n        \n        # Iterate through each number in each row\n        while row_count < n:\n            # Multiply the row counter by 2 to get the row number\n            row = 2 * row_count\n            \n            # Check if the number is a decagonal number\n            if count == row + row_count:\n                return True\n            \n            row_count += 1\n        \n        count += 1\n    \n    # If the function exits without returning True, the nth decagonal number was not found\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through each row of the square matrix\n    for i in range(1, n+1):\n        # Calculate the sum of the row numbers\n        row_sum = sum(range(1, i+1))\n        # Add the sum to the result\n        result += row_sum\n    # Return the result\n    return result"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input: n must be a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-1)/2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_num = 0\n    for i in range(n):\n        decagonal_num += (i * (i + 1))\n    return decagonal_num"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # loop through the list to search for the item\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            # item found, return a tuple containing True and the index position\n            return (True, i)\n    # item not found, return a tuple containing False and -1\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as an input and returns True if all the elements are unique, False otherwise.\n    \"\"\"\n    unique_elements = set(test_list)\n    return len(unique_elements) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements in the list are unique, otherwise False.\n    \"\"\"\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store unique elements\n    unique_elements = set()\n    # Loop through the elements of the list\n    for element in test_list:\n        # Check if the element is already in the set\n        if element in unique_elements:\n            # If it is, the list is not unique\n            return False\n        else:\n            # If it's not, add it to the set\n            unique_elements.add(element)\n    # If the loop completes without finding any duplicates, the list is unique\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Iterate through the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n\n    # Check if the set is empty or not\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # converting the list to set to remove duplicates\n    unique_set = set(test_list)\n    \n    # checking if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print('The two lists must have the same length.')\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists of numbers and returns a new list\n    where each element is the difference between the corresponding\n    elements in the two lists.\n\n    :param nums1: A list of numbers\n    :param nums2: A list of numbers\n    :return: A new list containing the differences between the\n             corresponding elements in the two lists.\n    \"\"\"\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return None\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(min(len(nums1), len(nums2))):\n        result.append(nums1[i] - nums2[i])\n    if len(nums1) > len(nums2):\n        result.extend([0] * (len(nums1) - len(nums2)))\n    elif len(nums1) < len(nums2):\n        result.extend([0] * (len(nums2) - len(nums1)))\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length')\n    return [a - b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [a - b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # iterate over each digit in the integer\n    for digit in str(n):\n        # if the digit is already in the dictionary, increment its count\n        if digit in freq:\n            freq[digit] += 1\n        # otherwise, add it to the dictionary with a count of 1\n        else:\n            freq[digit] = 1\n\n    # iterate over each digit in the integer again\n    for digit in str(n):\n        # if the frequency of the digit is greater than or equal to its value, return False\n        if freq[digit] >= digit:\n            return False\n\n    # otherwise, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize a dictionary to store the frequency of digits\n    freq = {}\n    # iterate through the digits of the number and update the frequency of each digit in the dictionary\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    # iterate through the digits of the number and check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in str(n):\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    frequency = {}\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    for digit in frequency:\n        if frequency[digit] > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # Function to check frequency of digits\n    def check_freq(num):\n        freq = [0] * 10\n        for digit in str(num):\n            freq[int(digit)] += 1\n        for digit in freq:\n            if digit > 1:\n                return False\n        return True\n\n    # Check if the frequency of digits is less than or equal to the digits themselves\n    if check_freq(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    # Initialize a dictionary to store the frequency of each digit in the number\n    digit_frequency = {}\n    \n    # Loop through each digit in the number\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its count\n        if digit in digit_frequency:\n            digit_frequency[digit] += 1\n        # If the digit is not in the dictionary, add it with a count of 1\n        else:\n            digit_frequency[digit] = 1\n    \n    # Loop through each digit in the number and check if its frequency is greater than or equal to its value\n    for digit in str(n):\n        if digit_frequency[digit] < digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # check if the frequency of each digit is less than or equal to itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n\n    freq = [0] * 10\n\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    for i in range(1, 10):\n        if freq[i] > freq[i]:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Initialize a dictionary to store the frequency of each digit\n    digit_freq = {}\n\n    # Iterate through each digit in the integer\n    for digit in str(n):\n        # Check if the digit is already in the dictionary\n        if digit in digit_freq:\n            # Increment the frequency of the digit\n            digit_freq[digit] += 1\n        else:\n            # If the digit is not in the dictionary, add it with a frequency of 1\n            digit_freq[digit] = 1\n\n    # Iterate through each digit in the dictionary and check if its frequency is less than or equal to the digit itself\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n\n    # If all digits are valid, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n    for digit in freq:\n        if digit > 1 and digit!= digits.count(digit):\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    all_elements_equal = True\n    for item in list:\n        if item!= element:\n            all_elements_equal = False\n            break\n    return all_elements_equal"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element as input and returns True if all the elements in the list are equal to the given element, and False otherwise.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check if the list is empty\n    if len(list) == 0:\n        return True\n    # Check if the first element in the list is equal to the given element\n    elif list[0] == element:\n        # Recursively call the function on the remaining elements in the list\n        return check_element(list[1:], element)\n    # If the first element in the list is not equal to the given element, return False\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    \n    if match:\n        print(\"The text contains the pattern.\")\n    else:\n        print(\"The text does not contain the pattern.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?:b{2,3})'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.{2,3}'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba\\w{2,3}b\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create a new array by repeating the original array k times\n    arr = [0] * (k * n)\n    for i in range(k):\n        for j in range(n):\n            arr[i * n + j] = a[j]\n    \n    # Find the maximum sum of a contiguous array in the new array\n    max_sum = max_subarray(arr)\n    \n    # Return the maximum sum of a contiguous array in the modified array\n    return max_sum\n\ndef max_subarray(arr):\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in arr:\n        curr_sum += num\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Calculate the sum of the first k elements of the array\n    first_k_sum = sum(a[:k])\n\n    # Calculate the sum of the first k elements of the modified array\n    modified_array_sum = first_k_sum * k\n\n    # Initialize the maximum sum found so far\n    max_sum = first_k_sum\n\n    # Loop through all possible start indices\n    for i in range(k):\n        # Calculate the maximum sum for the current array\n        max_sum_for_current_array = first_k_sum - a[i]\n\n        # Update the maximum sum found so far\n        max_sum = max(max_sum, max_sum_for_current_array)\n\n        # Calculate the new sum for the modified array\n        new_sum = modified_array_sum + first_k_sum - a[i]\n\n        # Update the modified array sum\n        modified_array_sum = new_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize max_sum with the first element of the array\n    max_sum = a[0]\n\n    # Initialize the sum with the first element of the array\n    sum_ = a[0]\n\n    # Iterate through the array from the second element to the last element\n    for i in range(1, n):\n        # Update the sum by adding the current element to the current sum\n        sum_ += a[i]\n\n        # If the sum is greater than the current max_sum, update max_sum\n        if sum_ > max_sum:\n            max_sum = sum_\n\n        # If the sum is greater than the previous max_sum and less than or equal to the max_sum, then the current element can be added to the array to form a new max_sum\n        elif sum_ > max_sum - k:\n            max_sum += a[i]\n\n    # Return the maximum sum of a contiguous array in the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize the maximum sum\n    max_sum = float('-inf')\n    \n    # Initialize the current sum\n    cur_sum = 0\n    \n    # Loop through the array k times\n    for i in range(k):\n        # Add the current element to the current sum\n        cur_sum += a[i]\n        \n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n            \n    # Subtract the first element from the maximum sum\n    max_sum -= a[0]\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a list of modified array using repeated elements of a\n    modified_array = []\n    for i in range(k):\n        for j in range(n):\n            modified_array.append(a[j])\n\n    # Find the sum of the modified array\n    sum_modified_array = sum(modified_array)\n\n    # Find the maximum subarray sum from the original array\n    max_sum_original_array = max_subarray_sum(a)\n\n    # Find the sum of the modified array which is equal to the sum of the original array\n    sum_original_array = sum(a)\n\n    # Find the maximum difference between the sum of the modified array and the sum of the original array\n    max_diff = max(abs(sum_modified_array - sum_original_array))\n\n    # Return the sum of the modified array which is equal to the sum of the original array\n    return sum_modified_array"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    if n == 1:\n        return a[0]\n    max_sum = a[0]\n    for i in range(n):\n        for j in range(k):\n            if i == 0:\n                a[i] = a[i] * (k - j)\n            elif i == n - 1:\n                a[i] = a[i] * (k - j)\n            else:\n                a[i] = a[i] * (k - j) + a[i - 1] * j\n        max_sum = max(max_sum, max(a))\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    max_ending_here = 0\n    repeated_array = a * k\n\n    for i in range(n):\n        for j in range(k):\n            if i == j:\n                max_ending_here += a[i]\n            else:\n                max_ending_here = max_ending_here - repeated_array[j] + a[i]\n\n            max_sum = max(max_sum, max_ending_here)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a copy of the original array\n    arr = a.copy()\n    \n    # Create a dictionary to store the maximum sum for different combinations of elements\n    max_sum_dict = {}\n    \n    # Traverse through all possible combinations of repeated elements\n    for i in range(k):\n        for j in range(n-k+i):\n            # Combine the repeated elements into a new array\n            combined_arr = arr[j:j+k]\n            # Calculate the sum of the new array\n            sum_new_arr = sum(combined_arr)\n            \n            # Update the maximum sum in the dictionary for this combination\n            if sum_new_arr not in max_sum_dict:\n                max_sum_dict[sum_new_arr] = 1\n            else:\n                max_sum_dict[sum_new_arr] += 1\n    \n    # Find the maximum sum of a contiguous array in the modified array\n    max_sum = max(max_sum_dict)\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    a = a + [0] * (k - len(a)) # adding zeros to make the length of the array equal to k\n    max_sum = float('-inf')\n    for i in range(k): # iterating over the k times\n        a = a + a[:k-i-1] # repeating the array n times\n        max_sum = max(max_sum, max(a)) # finding the maximum sum of the array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # Initialize variables to keep track of the maximum sum and the sum of the current subarray\n    max_sum = float('-inf')\n    current_sum = 0\n    current_index = 0\n\n    # Iterate through the array n times (since each subarray is repeated k times)\n    for _ in range(n):\n        # Compute the sum of the current subarray\n        for i in range(k):\n            current_sum += a[current_index % n]\n            current_index += 1\n\n        # Update the maximum sum if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total_sum = 0\n    num = 2\n    while num <= n:\n        if num % 2 == 0:\n            total_sum += num**2\n        num += 1\n    return total_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    count = 0\n    sum = 0\n    for i in range(2, n+1, 2):\n        count += 1\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize the sum to 0\n    sum_of_squares = 0\n    # iterate from 2 to n\n    for i in range(2, n+1):\n        # check if i is even\n        if i % 2 == 0:\n            # add i^2 to the sum of squares\n            sum_of_squares += i**2\n    # return the sum of squares\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 1:\n        return \"Invalid input! n should be a positive integer.\"\n    if n % 2!= 0:\n        return \"Invalid input! n should be an even integer.\"\n    even_sum = 0\n    for i in range(1, n+1, 2):\n        even_sum += i**2\n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum_of_squares += count**2\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths, default=0):\n            max_lengths = [len(sublist)]\n        elif len(sublist) > len(max_lengths):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths, default=0):\n            max_lengths = [len(sublist)]\n        elif len(sublist) > len(max_lengths):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize an empty list to store the maximum lengths\n    max_lengths = []\n    # loop through each list in the input list\n    for lst in list1:\n        # find the length of the current list\n        current_length = len(lst)\n        # add the length to the max_lengths list if it's greater than the current max\n        if current_length > max(max_lengths):\n            max_lengths = [current_length]\n        elif current_length == max(max_lengths):\n            max_lengths.append(current_length)\n    # return the max_lengths list\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = [len(sublist) for sublist in list1]\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        max_length = max(len(lst), len(max_lengths), default=0)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # DP table to store the count of ways\n    dp = [[0]*(k+1) for i in range(n+1)]\n    \n    # Initialize the first row and column with 1\n    for i in range(1, n+1):\n        dp[i][1] = 1\n        \n    for j in range(1, k+1):\n        dp[1][j] = 1\n        \n    # Fill the rest of the DP table\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            if i == 2 and j == 2:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    \n    # Return the count of ways\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a 2D array to store the count of ways for each number of adjacent posts\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n\n    # Base case: if there is only one post, there is only one way to paint the fence\n    dp[1][1] = 1\n\n    # Fill the rest of the array\n    for i in range(2, k + 1):\n        dp[i][1] = dp[i - 1][1]\n\n    for i in range(2, k + 1):\n        for j in range(2, n + 1):\n            dp[i][j] = (dp[i][j - 1] + dp[i - 1][j - 1]) % (10**9 + 7)\n\n    # Return the answer\n    return dp[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(k):\n            if i >= 2:\n                if j == 0 or j == k - 1:\n                    dp[i] += dp[i - 1]\n                else:\n                    dp[i] += dp[i - 2]\n            else:\n                dp[i] += dp[i - 1]\n    \n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Calculate the number of ways to paint the fence without adjacent colors\n    ways = n * (k - 1)\n    # Calculate the number of ways to paint the fence with two adjacent colors\n    for i in range(1, k):\n        ways += n * (k - 1) // (k - i)\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(start, count, fence_colors, visited):\n        if start == n:\n            return 1\n        if start < 0:\n            return 0\n\n        if fence_colors[start] == fence_colors[start + 1]:\n            return 0\n\n        if visited[start] == 1:\n            return 0\n\n        visited[start] = 1\n        res = count_no_of_ways(start + 2, count, fence_colors, visited) + count_no_of_ways(start + 1, count, fence_colors, visited)\n        visited[start] = 0\n        return res\n\n    fence_colors = [0] * n\n    visited = [0] * n\n    return backtrack(0, 0, fence_colors, visited)\n\nn = 5\nk = 3\nprint(count_no_of_ways(n, k))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the count to 0\n    count = 0\n\n    # Check if the number of colors is less than or equal to 2\n    if k <= 2:\n        # If the number of colors is less than or equal to 2, we can paint the fence in any way\n        count = 1\n\n    # Initialize an array to store the number of ways for each color\n    ways = [0] * (k+1)\n\n    # Check if the number of colors is greater than 2\n    if k > 2:\n        # If the number of colors is greater than 2, we need to calculate the number of ways for each possible color\n        for i in range(k):\n            # Initialize the number of ways for the current color to 0\n            ways[i+1] = 0\n\n        # Calculate the number of ways for each possible color\n        for i in range(k-1):\n            ways[i+1] = ways[i+2] + ways[i+3]\n\n        # Initialize the count for each possible color to 0\n        for i in range(k+1):\n            count += ways[i]\n\n    # Return the final count\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_subsets(arr, k): \n        count = [0] * (k + 1) \n        count[0] = count[1] = 1 \n        for i in range(2, k + 1): \n            count[i] = count[i - 1] + count[i - 2] \n        for i in range(n): \n            for j in range(k): \n                count[j] += count[j - arr[i]] \n        return count[k] \n\n    # Taking the input of the number of posts and colors\n    n = int(input(\"Enter the number of posts: \")) \n    k = int(input(\"Enter the number of colors: \")) \n\n    # Taking the input of the color for the first post\n    color = int(input(\"Enter the color of the first post: \")) \n\n    # Calculating the number of ways using the recursion\n    def count_ways(n, k, color, subset_sum, count): \n        if n == 0: \n            count[subset_sum] += 1 \n            return 1 \n        if subset_sum < 0 or color < 1: \n            return 0 \n        return count_ways(n - 1, k, color, subset_sum, count) + count_ways(n - 1, k, color + 1, subset_sum, count)\n\n    subset_sum = color \n    count = [0] * (k + 1) \n    count[color] = 1 \n    ways = count_ways(n - 1, k, 1, subset_sum, count) \n\n    return ways "
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a dictionary to store the count of different colors in the fence\n    color_count = {}\n    for i in range(k):\n        color_count[i] = 0\n    \n    # Initialize a variable to store the number of ways of painting the fence\n    ways = 0\n    \n    # Iterate through all the possible ways of painting the fence\n    for i in range(n):\n        for j in range(i+1, min(n, i+k+1)):\n            # Check if the adjacent posts have the same color\n            if color_count[j%k] == 0:\n                # If they have the same color, add the number of ways to paint the fence with the remaining colors\n                ways += count_no_of_ways(n, k-1)\n                color_count[j%k] = 1\n                \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    # base cases \n    if n == 0: \n        return 0 \n    elif n == 1 or n == k: \n        return 1 \n    else: \n        # create a list to store the number of ways for each combination of colors \n        ways = [0] * (n+1) \n        # initialize the first two ways \n        ways[0] = 1 \n        ways[1] = 1 \n        # loop through all the other ways \n        for i in range(2, n+1): \n            # loop through all the colors and add the ways for each combination \n            for j in range(1, k+1): \n                ways[i] += ways[i-1] * (j//(i-1)) \n        return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    # base case\n    if k == 0: \n        return 1\n    elif k == 1: \n        return n\n    else: \n        # recursive case\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # calculate quotient\n    quotient = n//m\n\n    # round down to nearest integer\n    quotient = quotient - (quotient*m < n) * m\n\n    # return quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # calculate the quotient\n    quotient = int(n/m)\n\n    # check if the remainder is 0\n    if n%m == 0:\n        return quotient\n    else:\n        return quotient+1"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two integers as input and returns the quotient of the two numbers rounded down to the nearest integer.\n    \"\"\"\n    # Calculate the quotient and round down to the nearest integer\n    quotient = int(n / m)\n    # Return the quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = n//m\n    return result"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    if m == 0:\n        return n\n    else:\n        return find(n - m, m)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # Calculate the cosine of the angle formed by the right angle and the x-axis\n    cos_angle = (w**2 + h**2 - s**2) / (2 * w * h)\n    # Calculate the distance of the third side from the center of the triangle\n    third_side = math.sqrt(w**2 - cos_angle**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    c = math.sqrt(w**2 - h**2)\n    return a + c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h:\n        base = w\n        height = h\n    else:\n        base = h\n        height = w\n\n    third_side = math.sqrt(base**2 + height**2)\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(w**2 + h**2) - s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    # Calculate the length of the other side\n    s = math.sqrt(w**2 + h**2)\n    \n    # Calculate the angle between the other side and the base\n    angle = math.degrees(math.acos((w**2 + h**2 - s**2) / (2 * w * h)))\n    \n    # Calculate the third side\n    third_side = s * math.sin(math.radians(angle))\n    \n    return round(third_side, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Find the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # Use the formula for the cotangent to find the angle of the triangle\n    cotangent = math.tan(math.pi / 3)\n    \n    # Use the formula for the area of a right triangle to find the height of the triangle\n    area = (w * h) / (4 * cotangent ** 2)\n    \n    # Use the formula for the cotangent of the angle of the triangle to find the height of the triangle\n    other_side = math.sqrt(area ** 2 - w * h)\n    \n    # Return the other side of the triangle\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter\n    s = (w+h)/2\n    # calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s*(s-w)*(s-h)*(s-w))\n    # return the third side of the triangle\n    return area"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w*w + h*h)\n    a = (w+h)/2\n    return c + a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n    # Calculate the third side of the triangle using Heron's formula\n    third_side = math.sqrt(area * (area - w) * (area - h))\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for i in listval[1:]:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize a variable to store the maximum value\n    max_val = None\n    # iterate over the list\n    for val in listval:\n        # if the current value is greater than the maximum value, update the maximum value\n        if val > max_val:\n            max_val = val\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize the maximum value to be negative infinity\n    max_val = float('-inf')\n    # iterate over each element in the list\n    for val in listval:\n        # if the current element is greater than the maximum value, update the maximum value\n        if val > max_val:\n            max_val = val\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(lst):\n    '''\n    This function takes a heterogeneous list of values as input and returns the maximum value.\n    '''\n    # Initialize the maximum value with the first element of the list\n    max_val = lst[0]\n    # Loop through the remaining elements of the list\n    for i in lst[1:]:\n        # Check if the current element is greater than the current maximum value\n        if i > max_val:\n            max_val = i\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = float('-inf')\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = float('-inf')\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError('Input must be a list.')\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize the maximum value to None\n    max_val = None\n    # loop through the list and compare each value to the maximum value\n    for value in listval:\n        if max_val is None:\n            # if the maximum value is still None, set it to the current value\n            max_val = value\n        else:\n            # if the current value is greater than the maximum value, update the maximum value\n            if value > max_val:\n                max_val = value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize max_val to the first element of the list\n    max_val = listval[0]\n    # Loop through the rest of the list\n    for item in listval[1:]:\n        # If the current item is greater than max_val, update max_val\n        if item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # Initialize a variable to store the sum of divisors\n    sum_of_divisors = 0\n\n    # Loop through the numbers from 1 to the square root of the input number\n    for i in range(1, int(number ** 0.5) + 1):\n\n        # If the input number is divisible by the current number, add it to the sum of divisors\n        if number % i == 0:\n            sum_of_divisors += i\n\n    # Return the sum of divisors\n    return sum_of_divisors"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize a variable to store the sum of divisors\n    total_divisor_sum = 0\n    \n    # loop through all the numbers from 1 to the square root of the input number\n    for i in range(1, int(number**0.5)+1):\n        # check if the input number is divisible by i\n        if number % i == 0:\n            # add i to the total divisor sum\n            total_divisor_sum += i\n            \n            # check if i is also divisible by the square root of the input number\n            if i == number//i:\n                # add the square root of the input number to the total divisor sum\n                total_divisor_sum += number//i\n    \n    # return the total divisor sum\n    return total_divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    # Count the number of inversions in the array\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n\n    # create a flag to keep track of swapping elements\n    swapping = True\n\n    # while swapping is True, keep swapping elements from two ends of the array\n    while swapping:\n        swapping = False\n\n        # start from the second element and compare with the last element\n        for i in range(1, n-1):\n            if arr[i-1] > arr[i]:\n                # swap the elements if they are in the wrong order\n                arr[i-1], arr[i] = arr[i], arr[i-1]\n                swapping = True\n\n    # count the number of swaps to get the number of inversions\n    count = 0\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] < arr[j] and arr[i] > arr[j-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize variables to store inversions count\n    i = 0\n    j = len(arr) - 1\n    count = 0\n    \n    while i < j:\n        if arr[i] > arr[j]:\n            count += j - i\n            i += 1\n        else:\n            j -= 1\n            \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - i - 1\n                arr[i], arr[j] = arr[j], arr[i]\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Create a copy of the input array\n    arr_copy = arr.copy()\n\n    # Sort the array in ascending order\n    arr_copy.sort()\n\n    # Initialize the count variable to zero\n    inv_count = 0\n\n    # Traverse through the array and compare adjacent elements\n    for i in range(len(arr_copy)):\n        for j in range(i + 1, len(arr_copy)):\n            # If the current element is greater than the next element, increment the count variable\n            if arr_copy[i] > arr_copy[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions\n    in the array. It uses a divide and conquer approach to sort the array and count\n    the number of inversions.\n    \"\"\"\n    if len(arr) <= 1:\n        return 0\n    else:\n        mid = len(arr) // 2\n        left_inv = get_Inv_Count(arr[:mid])\n        right_inv = get_Inv_Count(arr[mid:])\n        return merge_and_count_inversions(arr[:mid], arr[mid:], left_inv, right_inv)\n\n\ndef merge_and_count_inversions(left, right, left_inv, right_inv):\n    \"\"\"\n    This function takes the left, right subarrays, the inversions in the left and right subarrays,\n    and returns the number of inversions in the entire array.\n    \"\"\"\n    i = j = k = 0\n    inv_count = left_inv + right_inv\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            j += 1\n            inv_count += len(left) - i\n    while i < len(left):\n        arr[k] = left[i]\n        i += 1\n        k += 1\n    while j < len(right):\n        arr[k] = right[j]\n        j += 1\n        k += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    # Traverse the array twice\n    for i in range(n):\n        # Sort the array from arr[0] to arr[i-1]\n        for j in range(i, n):\n            if arr[j] < arr[i]:\n                arr[i], arr[j] = arr[j], arr[i]  # swap elements\n                # Increment the count of inversions\n                count = (i - j) + 1\n                return count\n    # Base case: If array has one element or less, no inversions required\n    return 0"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        # Find the largest element in the remaining part of the array\n        largest = i\n        for j in range(i+1, n):\n            if arr[j] > arr[largest]:\n                largest = j\n        # Swap the elements\n        arr[i], arr[largest] = arr[largest], arr[i]\n        inv_count += (n-i-1)*min(largest, n-largest-1)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    inv_count = 0\n\n    for i in range(len(arr)):\n        left = 0\n        right = i\n\n        while left < right:\n            mid = (left + right) // 2\n\n            if arr[mid] > arr[i]:\n                inv_count += right - mid\n                right = mid\n            else:\n                left = mid + 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions \n    in the array using the merge sort algorithm.\n    '''\n\n    def merge(left, right):\n        i = j = k = 0\n        result = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    return len(merge_sort(arr))"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    flattened_list = []\n\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for i, (item, price) in enumerate(stdata):\n        if i == 0:\n            max_aggr[item] = price\n        elif price > max_aggr[item]:\n            max_aggr[item] = price\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate\n    max_dict = defaultdict(int)\n    \n    # loop through the list of tuples\n    for s, t in stdata:\n        # if the aggregate is greater than the current maximum, update it\n        if t > max_dict[s]:\n            max_dict[s] = t\n    \n    # find the maximum aggregate from the defaultdict and return it\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        for key, value in item.items():\n            max_dict[key] = max(max_dict[key], value)\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each group\n    max_aggr = defaultdict(int)\n\n    # loop through the list of tuples and update the max_aggr for each group\n    for t in stdata:\n        max_aggr[t[0]] = max(max_aggr[t[0]], t[1])\n\n    # loop through the defaultdict and return the maximum aggregate for each group\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_dict = defaultdict(int)\n    max_aggregate_total = 0\n    for i in range(len(stdata)):\n        max_aggregate_dict[stdata[i][0]] += stdata[i][1]\n        max_aggregate_total += stdata[i][1]\n    max_aggregate_dict = {k: v for k, v in max_aggregate_dict.items() if v == max(max_aggregate_dict.values())}\n    max_aggregate_list = [(k, v) for k, v in sorted(max_aggregate_dict.items(), key=lambda item: item[1], reverse=True)]\n    return max_aggregate_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[0]] += item[1]\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)  # defaultdict to store max aggregate for each item\n    max_sum = 0  # initialize max sum to 0\n\n    for item, price in stdata:  # iterate through the list of tuples\n        if price > max_dict[item]:  # if the current price is greater than the max aggregate for the item\n            max_dict[item] = price  # update the max aggregate for the item\n        if price + max_dict[item] > max_sum:  # if the sum of the current price and the max aggregate for the item is greater than the max sum\n            max_sum = price + max_dict[item]  # update the max sum\n\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for customer, amount in stdata:\n        # Calculate the maximum aggregate for the current customer\n        max_aggr[customer] = max(max_aggr[customer], amount)\n\n    # Find the maximum aggregate across all customers\n    max_aggr_total = max(max_aggr.values())\n\n    # Return the maximum aggregate\n    return max_aggr_total"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    max_agg = defaultdict(int)\n    for item in stdata:\n        max_agg[item[0]] += item[1]\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    st_dict = defaultdict(list)\n    max_sum = float('-inf')\n\n    for item in stdata:\n        st_dict[item[0]].append(item[1])\n\n    for items in st_dict.values():\n        total_sum = sum(items)\n        if total_sum > max_sum:\n            max_sum = total_sum\n\n    return max_sum"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    binary_seq = \"0\" * 2 * n\n    count = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2 ** n):\n        # Extract the first n bits of the sequence\n        first_n_bits = bin(i)[2:].zfill(n)\n        # Extract the last n bits of the sequence\n        last_n_bits = bin(i >> n)[2:].zfill(n)\n        # Calculate the sum of first n bits and last n bits\n        first_sum = int(first_n_bits, 2)\n        last_sum = int(last_n_bits, 2)\n        # Check if the sum of first n bits is same as the sum of last n bits\n        if first_sum == last_sum:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**2*n, 2**n):\n        first_half = bin(i)[2:]\n        last_half = bin(i+2**n-1)[2:]\n        if int(first_half) == int(last_half):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    def is_valid_binary(seq):\n        return all(c in '01' for c in seq) and seq[0] == seq[-1]\n\n    def binary_to_int(seq):\n        return int(seq, 2)\n\n    def int_to_binary(num, n):\n        return format(num, f'0{n}b')\n\n    def int_to_bin(num):\n        return int_to_binary(num, 32)\n\n    def sum_bits(seq, start, end):\n        return binary_to_int(seq[start:end])\n\n    def get_seq(num, n):\n        return int_to_bin(num).zfill(n * 2)\n\n    def generate_binary_seq(n):\n        seq = ''\n        for i in range(n):\n            seq += '1'\n        return seq\n\n    def count_binary_seq(n):\n        count = 0\n        for i in range(2, 2**n + 1):\n            binary_seq = generate_binary_seq(n)\n            if is_valid_binary(binary_seq):\n                count += 1\n                for j in range(n):\n                    first_sum = sum_bits(binary_seq, j, j + n)\n                    second_sum = sum_bits(binary_seq, j + n, j + 2 * n)\n                    if first_sum == second_sum:\n                        break\n        return count\n\n    return count_binary_seq(n)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    # Generate all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Generate all possible binary sequences of length n\n        for j in range(2**n):\n            # Check if the sum of first n bits is same as the sum of last n bits\n            if bin(i).count('1') == bin(j).count('1'):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n+1):\n        if i % 2 == 0:\n            sum1 = 0\n            sum2 = 0\n            for j in range(2):\n                if i % (2**j) == 0:\n                    sum1 += j\n                    sum2 += 2**j\n            if sum1 == sum2:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n\n    # Generate all binary sequences of length 2n\n    for i in range(2**n):\n        for j in range(2**n):\n            # Check if the sum of first n bits is same as sum of last n bits\n            if ((i >> 1) + j) & ((1 << n) - 1) == (i + j) & ((1 << n) - 1):\n                count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(n+1)):\n        if i == i[::-1]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if int(binary[:n]) == int(binary[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0 \n    for i in range(2**n): \n        sum_first_n = i // 2**n \n        sum_last_n = i % 2**n \n        if sum_first_n == sum_last_n: \n            count += 1 \n    return count \n\nn = int(input(\"Enter value of n: \")) \nprint(\"Count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n):\n        # check if the first n bits are same as the last n bits\n        if sum(int(digit) for digit in format(i, 'b')) == n:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n        elif isinstance(value, (list, tuple)):\n            depth = 1\n        else:\n            depth = 0\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n        else:\n            current_depth = 0\n        if current_depth > max_depth:\n            max_depth = current_depth\n        if current_depth == 0:\n            continue\n        if isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    current_depth += 1\n        current_depth -= 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = 1\n        for v in d.values():\n            depth = 1 + dict_depth(v)\n            max_depth = max(max_depth, depth)\n        return max_depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        depth = 1 + max([dict_depth(v) for v in d.values()])\n        return depth\n    elif type(d) == list:\n        return 1 + max([dict_depth(v) for v in d])\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        depth = 1\n        for v in d.values():\n            depth = max(depth, dict_depth(v))\n        return depth + 1\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for _ in d.values():\n        depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            new_depth = dict_depth(d[key]) + 1\n            if new_depth > max_depth:\n                max_depth = new_depth\n        else:\n            max_depth += 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            depth = dict_depth(d[key])\n            max_depth = max(max_depth, current_depth + depth)\n        else:\n            max_depth = max(max_depth, current_depth)\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a number of rotations, and returns the element at the given index after the specified rotations.\n    \"\"\"\n\n    # Function to calculate the element at the given index after the specified rotations\n    def calculate_element(arr, ranges, index, rotations):\n        element = arr[index]\n\n        for i in range(rotations):\n            element = arr[(index - ranges[i]) % len(arr)]\n\n        return element\n\n    # Calculate the element at the given index after the specified rotations\n    element = calculate_element(arr, ranges, index, rotations)\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in a list 'arr', a list of ranges 'ranges', and a number of rotations 'rotations'. It then finds the element at the given index after the specified number of rotations.\n    \n    Returns the element at the given index after the specified number of rotations.\n    '''\n    \n    # Calculate the total number of rotations needed to reach the index\n    total_rotations = 0\n    for r in ranges:\n        total_rotations += r\n        \n    # Calculate the number of rotations needed to reach the index modulo the number of rotations in each range\n    remaining_rotations = rotations % total_rotations\n    \n    # Calculate the number of rotations needed to reach the index modulo the number of elements in each range\n    remaining_elements = (index - ranges[0]) % ranges[0]\n    \n    # Calculate the remaining element at the given index after rotations\n    remaining_element = (index - ranges[0] + remaining_rotations) % ranges[0]\n    \n    # Find the remaining element in the range that contains the given index\n    if remaining_elements >= remaining_rotations:\n        return arr[index]\n    \n    # Find the remaining element in the range that does not contain the given index\n    else:\n        return arr[index - remaining_elements]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array and two lists, one containing the number of rotations required \n    for each element and the other containing the indexes of each element, and returns the element \n    at the given index after rotations.\n    \"\"\"\n    # Finding the required rotations for each element\n    for i in range(len(arr)):\n        if i in ranges:\n            rotations[i] = ranges[i]\n\n    # Applying the rotations to the array\n    for i in range(len(rotations)):\n        if rotations[i] > 0:\n            for j in range(rotations[i]):\n                arr.append(arr.pop(index))\n                index += 1\n\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Initialize the start and end pointers of the array\n    start = 0\n    end = len(arr) - 1\n\n    # Iterate through the rotations\n    for i in range(rotations):\n        # Find the minimum element in the current range\n        min_val = arr[start]\n        min_idx = start\n\n        # Iterate through the range and update the minimum element and its index\n        for j in range(start + 1, end):\n            if arr[j] < min_val:\n                min_val = arr[j]\n                min_idx = j\n\n        # If the minimum element is already at the end of the range, swap it with the last element\n        if arr[min_idx] == arr[end]:\n            arr[min_idx], arr[end] = arr[end], arr[min_idx]\n\n        # Update the start and end pointers of the range based on the direction of rotation\n        if i % 2 == 0:\n            start = min_idx + 1\n            end = end - 1\n        else:\n            start = min_idx - 1\n            end = start + 1\n\n    # Return the element at the given index after rotations\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n\n    # Check if the index is within the range of array\n    if index < 0 or index >= n:\n        return None\n\n    # Calculate the rotation factor\n    r = rotations % n\n\n    # If the rotation factor is 0, return the element at index\n    if r == 0:\n        return arr[index]\n\n    # Calculate the element at index after rotation\n    element = arr[index]\n\n    # Calculate the element at index after rotation for each rotation factor\n    for i in range(1, r + 1):\n        element = arr[(index - i + n) % n]\n\n    # Return the element after the rotation\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, range of rotations, and index to find the element after the specified number of rotations.\n\n    Args:\n    arr (list): input array\n    ranges (list): range of rotations to check\n    rotations (int): number of rotations to apply\n    index (int): index to find the element after\n\n    Returns:\n    element (int): element at the given index after rotating the array\n\n    \"\"\"\n\n    # get the size of the array\n    n = len(arr)\n\n    # loop through each range of rotations\n    for r in ranges:\n        # get the starting index of the range\n        start = r[0]\n        # get the ending index of the range\n        end = r[1]\n\n        # check if the index falls within the range\n        if index >= start and index <= end:\n            # check if the index is a multiple of rotations\n            if index % rotations == 0:\n                # calculate the index after rotations\n                rot_index = index + (n * rotations)\n                # check if the index is within the bounds of the array\n                if rot_index >= n:\n                    # return the element at index 0 (the first element of the array)\n                    return arr[0]\n                else:\n                    # return the element at the calculated index\n                    return arr[rot_index]\n            else:\n                # return the element at the specified index\n                return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # find the range of elements that needs to be rotated\n    range_indices = ranges[rotations-1]\n\n    # find the remaining rotations\n    remaining_rotations = rotations - 1\n\n    # find the remaining range of elements that needs to be rotated\n    remaining_range_indices = ranges[remaining_rotations-1]\n\n    # calculate the new index after rotating the remaining range of elements\n    new_index = index % remaining_range_indices\n\n    # calculate the new index after rotating the entire array\n    new_index = (index - new_index) % len(arr)\n\n    # find the element at the new index\n    result = arr[(new_index + range_indices[new_index]) % len(arr)]\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #initialize a variable to keep track of the rotated array\n    rotated_arr = arr\n    \n    #perform rotations and ranges\n    for i in range(rotations) :\n        #rotate the array\n        for j in range(len(rotated_arr)//2) :\n            #swap the elements at i and j\n            temp = rotated_arr[i+j]\n            rotated_arr[i+j] = rotated_arr[j+len(rotated_arr)//2]\n            rotated_arr[j+len(rotated_arr)//2] = temp\n            \n        #perform the range operations\n        for j in range(len(ranges)) :\n            #find the indices of the start and end of the range\n            start = 0\n            end = rotated_arr[j] - 1\n            \n            #perform the range operations\n            while start < end :\n                temp = rotated_arr[start]\n                rotated_arr[start] = rotated_arr[end]\n                rotated_arr[end] = temp\n                start += 1\n                end -= 1\n    \n    #find the element at the given index\n    result = rotated_arr[index]\n    \n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after a given number of rotations.\n    :param arr: list of integers representing the array.\n    :param ranges: list of tuples representing the ranges of the array.\n    :param rotations: the number of rotations required to find the element.\n    :param index: the index of the element to be found.\n    :return: the element at the given index after the given number of rotations.\n    \"\"\"\n    # Initialize the range of the array\n    current_range = ranges[0]\n\n    # Initialize the current index\n    current_index = index\n\n    # Initialize the element to be found\n    element_to_find = None\n\n    # Iterate through each rotation\n    for i in range(rotations):\n        # Find the minimum and maximum values in the current range\n        min_val = min(current_range)\n        max_val = max(current_range)\n\n        # Calculate the new range for the current range\n        new_range = (min_val + max_val) // 2\n\n        # If the current element is not in the new range, move to the next range\n        if arr[current_index] < new_range[0] or arr[current_index] > new_range[1]:\n            current_range = new_range\n        else:\n            # Update the current element to be found\n            element_to_find = arr[current_index]\n\n            # Move to the next index in the array\n            current_index = (current_index + 1) % len(arr)\n\n            # Exit the loop if the element has been found\n            if current_index == index:\n                break\n\n    return element_to_find"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n\n    # Find the number of rotations to apply\n    total_rotations = 0\n    for i in range(len(ranges)):\n        total_rotations += ranges[i] * rotations[i]\n\n    # Calculate the final index after rotations\n    final_index = (index + total_rotations) % len(arr)\n\n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = re.findall(r'p[a-z]*', words)\n    if len(p_words) == 0:\n        return None\n    elif len(p_words) == 1:\n        return p_words[0], None\n    else:\n        return p_words[0], p_words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                return p_words\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0].lower() == 'p':\n            p_words.append(word)\n        if len(p_words) == 2:\n            break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p[a-zA-Z]*'\n    for word in words:\n        if re.match(pattern, word):\n            return word, words[words.index(word)+1]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-z]*'\n    p_words = re.findall(pattern, words)\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w*')\n    matches = re.findall(pattern, words)\n    if len(matches) == 0:\n        return \"No words starting with 'p' were found in the list.\"\n    if len(matches) == 1:\n        return f\"{matches[0]} and {matches[0]}\"\n    else:\n        return f\"{matches[0]}, {matches[1]}\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the first letter of the word is 'p'\n        if word[0] == 'p':\n            # If it is, add the word to the p_words list\n            p_words.append(word)\n    \n    # Check if there are at least two p_words\n    if len(p_words) >= 2:\n        # Return the two first p_words\n        return p_words[:2]\n    else:\n        # If there are less than two p_words, return an empty list\n        return []"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p[a-zA-Z]*', word):\n            p_words.append(word)\n    return p_words"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    max_subseq = []\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = max_sum_increasing_subseq_helper(a, i, n, index, k, dp)\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n            max_subseq = [i]\n        elif dp[i] == max_sum and i not in max_subseq:\n            max_subseq.append(i)\n    return max_sum, max_subseq\n\n\ndef max_sum_increasing_subseq_helper(a, i, n, index, k, dp):\n    if i == index:\n        return 0\n    if i > index:\n        return max_sum_increasing_subseq_helper(a, index, n, index, k, dp)\n    if a[i] <= a[i - 1]:\n        return max_sum_increasing_subseq_helper(a, i + 1, n, index, k, dp)\n    if i + k <= n:\n        if a[i] > a[k]:\n            dp[i] = max(dp[i], dp[i - 1] + a[i])\n        else:\n            dp[i] = max(dp[i], dp[i - 1])\n    else:\n        dp[i] = max(dp[i], dp[i - 1])\n    return dp[i]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k <= index:\n        return 0\n    if index == 0:\n        return a[0]\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, index):\n        if a[i] > a[i-1]:\n            dp[i] = dp[i-1] + a[i]\n        else:\n            dp[i] = max(dp[i-1], dp[i])\n    for i in range(index, n):\n        if a[i] > a[k-1] and i-k+1 < index:\n            dp[i] = dp[k-1]\n        else:\n            dp[i] = max(dp[i], dp[i-k]+a[i])\n    return dp[n-1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    max_sum = float('-inf')\n\n    # Iterate through all indices up to i\n    for i in range(1, n+1):\n        # Initialize variables\n        max_ending_here = a[index]\n        max_ending_here += k\n        if index == i-1:\n            # If index is i-1, then no more elements can be added, so max_ending_here becomes i\n            max_ending_here = i\n        else:\n            # Add the previous maximum ending here to max_ending_here\n            max_ending_here = max(max_ending_here, dp[index][i-1])\n\n        # Update the dp table\n        dp[index][i] = max_ending_here\n\n        # Update the maximum sum\n        if max_ending_here > max_sum:\n            max_sum = max_ending_here\n\n    # Return the maximum sum\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # base case\n    if k > index:\n        return 0\n\n    # dp array to store the maximum sum of increasing subsequence till i and including k\n    dp = [0] * (n+1)\n\n    # initialize the dp array with first element as 0\n    for i in range(1, n+1):\n        dp[i] = a[i-1]\n\n    # fill the dp array using dynamic programming\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if a[j-1] < a[i-1]:\n                dp[j] = max(dp[j], dp[i] + a[j-1])\n\n    # find the maximum sum of increasing subsequence from the ith index and including k\n    max_sum = dp[n]\n\n    # find the maximum sum of increasing subsequence from the ith index to the kth index (excluding k)\n    for i in range(n, k-1, -1):\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    if k > index:\n        return 0\n    \n    dp = [0] * (k+1)\n    dp[1] = a[1]\n    \n    for i in range(2, k+1):\n        dp[i] = a[i]\n        for j in range(1, i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n                \n    return max(dp[i] for i in range(1, k+1))\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if index == k:\n        # If kth element is present at index, then check for the maximum sum of increasing subsequence from prefix until index - 1\n        if index == 0:\n            return 0\n        else:\n            return max(max_sum_increasing_subseq(a, n, index - 1, k) + a[index],\n                       max_sum_increasing_subseq(a, n, index - 1, k))\n    else:\n        # If kth element is not present at index, then check for the maximum sum of increasing subsequence from prefix until index\n        if index == 0:\n            return 0\n        else:\n            return max(max_sum_increasing_subseq(a, n, index - 1, k),\n                       max_sum_increasing_subseq(a, n, index - 1, k + 1))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through the array\n    for i in range(index, n):\n        # Add the current element to the current sum\n        current_sum += a[i]\n        \n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum and i < k:\n            max_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n\n    if index > k:\n        prefix_sum = max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        prefix_sum = max_sum_increasing_subseq(a, n, index+1, n)\n\n    if a[index] > a[index-1]:\n        if a[index] > a[k-1]:\n            return max(prefix_sum, a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n        else:\n            return max(prefix_sum, max_sum_increasing_subseq(a, n, index+1, k))\n    else:\n        if a[k-1] > a[index]:\n            return max(prefix_sum, a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n        else:\n            return max(prefix_sum, max_sum_increasing_subseq(a, n, index+1, k))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Time Complexity: O(n^2 * log(n))\n    Space Complexity: O(n^2)\n\n    \"\"\"\n    dp = [0] * (n + 1)  # to store the maximum sum of increasing subsequence from prefix until ith index\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[j] <= a[i] and j!= k:\n                dp[i] = max(dp[i], dp[j] + a[i])\n\n    return dp[n]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    prefix_sum = 0\n\n    # Traverse through the array from index to k-1\n    for i in range(index, k):\n        # Update prefix_sum by adding current element\n        prefix_sum += a[i]\n\n        # Update max_sum if current prefix_sum is greater than max_sum\n        if prefix_sum > max_sum:\n            max_sum = prefix_sum\n\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a new list to store the new colon\n    new_colon = []\n    # For loop to iterate through each element of the tuple\n    for i in range(len(tuplex)):\n        # If the current element is not None\n        if tuplex[i] is not None:\n            # Copy the current element to a new tuple\n            new_element = deepcopy(tuplex[i])\n            # Add the elements to the new colon\n            for j in range(m):\n                for k in range(n):\n                    new_element[j] += k\n            # Add the new tuple to the new colon\n            new_colon.append(new_element)\n    # Return the new colon\n    return new_colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(tuplex[i][j])\n        col.append(tuple(row))\n    return col\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) % m == 0:\n        return (deepcopy(tuplex[i:i+n]))\n    else:\n        return (deepcopy(tuplex[i:i+n+1]))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    - tuplex: A tuple.\n    - m: An integer.\n    - n: An integer.\n\n    Returns:\n    - A tuple.\n\n    Example:\n    >>> tuplex = (1, 2, 3)\n    >>> m = 1\n    >>> n = 3\n    >>> colon_tuplex(tuplex, m, n)\n    (1,)\n    \"\"\"\n\n    if len(tuplex) < n:\n        raise ValueError(\"Tuple length must be greater than or equal to n\")\n\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[0:m]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes in a tuple and returns a colon\n    of the tuple. The colon is a new tuple that has n elements,\n    where each element is a copy of the nth element of the original tuple.\n\n    For example, if the original tuple is (1, 2, 3, 4, 5), and n=2,\n    then the returned tuple would be ((1, 2), (3, 4), (5)).\n    '''\n\n    # Make a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Generate the colon of the tuple\n    colon = [tuplex_copy[:i] + tuplex_copy[i+1:n] + tuplex_copy[i+1:] for i in range(len(tuplex_copy)-n+1)]\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Create a new list to hold the colon\n    colon = []\n\n    # Iterate over the rows\n    for i in range(m):\n        # Create a new list to hold the values in the current row\n        row = []\n        # Iterate over the columns\n        for j in range(n):\n            # Add the value to the row list\n            row.append(new_tuplex[i][j])\n        # Add the row list to the colon list\n        colon.append(row)\n\n    # Return the colon list\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    i = 0\n    while i < m:\n        colon.append(colon[i])\n        i += 1\n    i = 0\n    while i < n:\n        colon.insert(0,colon[i])\n        i += 1\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Get a colon of a tuple.\n\n    Parameters\n    ----------\n    tuplex : tuple\n        The tuple to get a colon from.\n    m : int\n        The number of rows in the colon to get.\n    n : int\n        The number of columns in the colon to get.\n\n    Returns\n    -------\n    list\n        A list of lists representing the colon.\n\n    Raises\n    ------\n    ValueError\n        If `m` is greater than the number of rows in the tuple or `n` is\n        greater than the number of columns in the tuple.\n\n    Examples\n    --------\n    >>> colon_tuplex((1, 2, 3, 4, 5), 2, 3)\n    [[1, 2, 3], [4, 5, None]]\n    >>> colon_tuplex((1, 2, 3, 4, 5), 1, 6)\n    [[1, 2, 3, 4, 5]]\n    \"\"\"\n    if m > len(tuplex) or n > len(tuplex[0]):\n        raise ValueError(\"m and n cannot exceed the dimensions of the tuple.\")\n    rows = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            if j < len(tuplex[i]):\n                row.append(tuplex[i][j])\n            else:\n                row.append(None)\n        rows.append(row)\n    return rows"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple of size (m,n) and returns a new tuple of size (m+1,n).\n    The new tuple has the same elements as the input tuple, except for the (m,n) element, which is replaced with a colon.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex[m-1][n-1] = ':'\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    tuplex (tuple): a tuple to be colonized.\n    m (int): the number of rows in the colon.\n    n (int): the number of columns in the colon.\n\n    Returns:\n    tuple: a tuple containing the colonized values.\n    \"\"\"\n\n    # Check if the tuple is valid.\n    if len(tuplex)!= m*n:\n        raise ValueError(\"The length of the tuple must be equal to m*n.\")\n\n    # Create a list to store the colonized values.\n    colonized = []\n\n    # Create a copy of the tuple to work with.\n    tup = deepcopy(tuplex)\n\n    # Colonize the tuple.\n    for i in range(m):\n        for j in range(n):\n            # Get the value of the current position in the tuple.\n            val = tup[i*n + j]\n            # Add the value to the colonized list.\n            colonized.append(val)\n            # Remove the value from the original tuple.\n            tup.pop(i*n + j)\n\n    return tuple(colonized)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize max_product_list to store the largest products found\n    max_product_list = []\n    \n    # Iterate through the given lists\n    for i in range(len(nums1)):\n        # Sort the two lists based on the ith element\n        sorted_nums1 = sorted(nums1, key=lambda x: x[i])\n        sorted_nums2 = sorted(nums2, key=lambda x: x[i])\n        \n        # Initialize max_product to store the largest product found so far\n        max_product = float('-inf')\n        \n        # Iterate through the two sorted lists\n        for j in range(len(sorted_nums1)):\n            # Calculate the product of the i-th element of each sorted list\n            product = sorted_nums1[j][i] * sorted_nums2[j][i]\n            \n            # Update max_product if the product is greater than max_product\n            if product > max_product:\n                max_product = product\n                \n            # If the number of products found so far is equal to N, break out of the inner loop\n            if len(max_product_list) == N:\n                break\n        \n        # Append the maximum product to the max_product_list\n        max_product_list.append(max_product)\n    \n    # Return the max_product_list\n    return max_product_list"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the maximum product as negative infinity\n    max_product = float('-inf')\n\n    # Initialize a list to store the products for each factor\n    products = []\n\n    # Iterate over the two lists\n    for i in range(N):\n        # Compute the product of the i-th factor from nums1 and nums2\n        product = nums1[i] * nums2[i]\n\n        # If the product is greater than the current maximum, update the maximum\n        if product > max_product:\n            max_product = product\n\n        # Add the product to the products list\n        products.append(product)\n\n    # Sort the products list in descending order\n    products.sort(reverse=True)\n\n    # Return the N largest products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize the max_products list to keep track of the largest products seen so far\n    max_products = [0] * N\n    \n    # iterate over the lists and find the largest products\n    for num1 in nums1:\n        for num2 in nums2:\n            # compute the product of num1 and num2\n            product = num1 * num2\n            \n            # keep track of the maximum of the current product and the largest product seen so far\n            max_product = max(max_products, product)\n            \n            # update the max_products list with the current product and any other products that are larger\n            for i in range(N):\n                if max_products[i] < product:\n                    max_products[i] = product\n                    \n    # return the max_products list\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    product_list = []\n    for i in range(len(nums1)):\n        largest_product = max(nums1[i]*nums2[i], nums1[i]*nums2[N-i-1], nums2[i]*nums1[N-i-1])\n        product_list.append(largest_product)\n    product_list.sort(reverse=True)\n    return product_list[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    largest_products = []\n\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[N-1-i] * nums2[N-1-i]\n        largest_products.append(product1 if product1 > product2 else product2)\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Find the number of products to select from each list\n    product_count = N // 2\n    if N % 2 == 1:\n        product_count += 1\n\n    # Initialize the product list with zeros\n    product_list = [0] * N\n\n    # Iterate through the sorted lists and fill the product list\n    for i in range(product_count):\n        product_list[2*i] = nums1[i] * nums2[i]\n        product_list[2*i+1] = nums1[i] * nums2[N-i-1]\n\n    # Return the product list with the desired number of products selected\n    return product_list[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    max_products = []\n\n    # Loop through each factor for each list\n    for i in range(N):\n        for j in range(i+1, N):\n            # Compute the product of the two selected factors\n            product = max(nums1[i], nums2[j]) * min(nums1[i], nums2[j])\n\n            # If this is the largest product so far, add it to the list\n            if product > max_product:\n                max_product = product\n                max_products = [nums1[i], nums2[j]]\n\n    # Return the largest N products\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    if N > len(nums1):\n        raise ValueError('The number of products to find must be less than or equal to the length of the larger list.')\n\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize two variables to store the maximum product found so far for each factor\n    max1 = float('-inf')\n    max2 = float('-inf')\n\n    # Loop through the first list of N elements, selecting one factor from each list\n    for i in range(N):\n        # Find the maximum product of the i-th element of each list\n        prod1 = max(nums1[i], nums1[i+1]) * max(nums2[i], nums2[i+1])\n        prod2 = max(nums1[i], nums2[i]) * max(nums1[i+1], nums2[i+1])\n\n        # Update the maximum product found so far for factor 1\n        if prod1 > max1:\n            max1 = prod1\n\n        # Update the maximum product found so far for factor 2\n        if prod2 > max2:\n            max2 = prod2\n\n    # Return the maximum product found for both factors\n    return max(max1, max2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort both lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Calculate the maximum product between two factors\n    max_product = nums1[0] * nums2[0]\n    \n    # Calculate the number of products to select\n    num_products = N\n    \n    # Iterate until the desired number of products have been selected\n    while num_products > 0:\n        \n        # Calculate the next largest product\n        product = nums1[-1] * nums2[-1]\n        \n        # Update the maximum product\n        if product > max_product:\n            max_product = product\n        \n        # Decrement the number of products left to select\n        num_products -= 1\n    \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two parameters a and b and returns the maximum of the two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n\n    if a>b:\n        print(a,\"is the maximum.\")\n    elif b>a:\n        print(b,\"is the maximum.\")\n    else:\n        print(\"Both numbers are equal.\")"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n\n    Args:\n    str1 (str): The input string.\n\n    Returns:\n    tuple: A tuple of characters from the input string.\n    \"\"\"\n\n    # Convert the string to a list of characters\n    lst = list(str1)\n\n    # Convert the list to a tuple and return it\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of characters.\n    \"\"\"\n    # Initialize an empty tuple\n    my_tuple = ()\n    # Loop through each character in the string\n    for char in str1:\n        # Append the character to the tuple\n        my_tuple += (char,)\n    # Return the tuple\n    return my_tuple"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert string to list of characters\n    lst = list(str1)\n    # Convert list to tuple\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Parameters:\n    str1 (str): A string to be converted to a tuple of characters.\n\n    Returns:\n    tuple: A tuple of characters representing the input string.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    str_list = list(str1)\n    # Convert the list to a tuple of characters\n    tuple_str = tuple(str_list)\n    return tuple_str"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize variables\n    bit_count = 0\n    \n    # loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # if bit is set to 0, increment bit count\n        if bit == '0':\n            bit_count += 1\n        # if bit is set to 1, exit loop\n        else:\n            break\n    \n    # set the leftmost unset bit to 1\n    n |= 1 << bit_count\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Iterate through the bits from right to left\n    for i in range(31, -1, -1):\n        # Check if the current bit is unset\n        if (n & (1 << i)) == 0:\n            # Set the current bit\n            n |= (1 << i)\n            # Exit the loop\n            break\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit = 1\n    while n & bit == 0:\n        bit <<= 1\n    return bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the index of the leftmost unset bit\n    i = 31\n\n    # While the leftmost unset bit is set, decrement the index\n    while n & 1 == 0:\n        i -= 1\n        n >>= 1\n\n    # Set the leftmost unset bit\n    n |= 1 << i\n\n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    set_bit = 1\n    \n    while (set_bit & n) == 0:\n        set_bit <<= 1\n    \n    return set_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the LSB\n    lsb = n.index('1')\n    \n    # Set the LSB to 0\n    n = n[:lsb] + '0' + n[lsb+1:]\n    \n    # Find the MSB\n    if lsb == 0:\n        lsb = n.index('1')\n        n = n[:lsb] + '0' + n[lsb+1:]\n    else:\n        lsb = n.rindex('1')\n        n = n[:lsb] + '0' + n[lsb+1:]\n    \n    # Set all bits to 0 between the LSB and MSB\n    n = n[:lsb] + '0'*(n[lsb:].index('1') + 1) + n[lsb+1:]\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n\n    # Convert binary number to an integer\n    n = int(n, 2)\n\n    # Set the leftmost unset bit to 1\n    n |= (1 << 31)\n\n    # Convert the integer back to a binary string\n    n = bin(n)[2:]\n\n    # Pad the binary string with leading zeros\n    n = \"0\" * (32 - len(n)) + n\n\n    # Convert the binary string back to an integer\n    n = int(n, 2)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the leftmost unset bit in n.\n\n    Parameters:\n    n (int): An integer value.\n\n    Returns:\n    The integer value with the leftmost unset bit set to 1.\n    \"\"\"\n    n -= 1  # Convert n to its binary representation\n    while n & 1 == 0:  # While the least significant bit is 0\n        n >>= 1  # Move to the next bit\n\n    return n + 1  # Add 1 back to get the binary representation of the new value"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    bit = 1\n    while bit & n:\n        bit <<= 1\n    return bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    unset_bit = 1\n    while unset_bit & n: \n        unset_bit <<= 1\n    return unset_bit"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n\n    Inputs:\n    r (float): radius of the cone\n    h (float): height of the cone\n\n    Outputs:\n    float: the volume of the cone\n    '''\n\n    pi = math.pi\n\n    volume = (1/3) * pi * r**2 * h\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculates the volume of a cone.\n\n    Args:\n        r (float): the radius of the cone.\n        h (float): the height of the cone.\n\n    Returns:\n        float: the volume of the cone.\n    \"\"\"\n    pi = math.pi\n    volume = (1/3) * pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone given the radius and height of the cone.\n\n    Args:\n        r (float): The radius of the cone.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The volume of the cone.\n    \"\"\"\n\n    # Calculate the volume of the cone using the formula: V = \u03c0r\u00b2h\n    volume = math.pi * r**2 * h\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume of the cone using the formula: V = pi * r^2 * h\n    volume = math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius r and height h of a cone as input and returns the volume of the cone.\n    '''\n    area = (math.pi * r**2)\n    volume = (1/3) * area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*(r**2)*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function calculates the volume of a cone given its radius and height.\n    '''\n    return math.pi*(r**2)*h"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the highest power of 2 found to be 1\n    highest_power_of_2 = 1\n\n    # Iterate through the binary representation of n\n    for i in bin(n)[2:]:\n        # Convert the binary digit to an integer and multiply it by 2 to get the next power of 2\n        next_power_of_2 = 2 * int(i)\n\n        # Update the highest power of 2 found so far if this is the new highest power of 2\n        if next_power_of_2 > highest_power_of_2:\n            highest_power_of_2 = next_power_of_2\n\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 to 0\n    highest = 0\n    # Loop through all powers of 2 from 1 to n\n    for i in range(1, n+1):\n        # If the current power of 2 is greater than the current highest power, update the highest power\n        if i > highest:\n            highest = i\n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 1\n    while highest_power <= n:\n        highest_power *= 2\n    return highest_power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is a power of 2\n        if i == 2**i:\n            # return the power of 2\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # loop through the numbers from 1 to n and check if each number is a power of 2\n    for i in range(1, n+1): \n        if i == 1: \n            # if the number is 1, it is a power of 2\n            power_of_2 = i\n        elif i == 2: \n            # if the number is 2, it is a power of 2\n            power_of_2 = 2\n        elif i & (i-1) == 0: \n            # if the number is a power of 2, it will be the previous power of 2\n            power_of_2 = i-1\n        else: \n            # if the number is not a power of 2, it will be the previous power of 2\n            power_of_2 = i-1\n\n        if power_of_2 < n: \n            # if the highest power of 2 is less than n, return it\n            return power_of_2\n\n    # if no power of 2 is less than or equal to n, return n\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 to be 1\n    highest_power_of_2 = 1\n    \n    # Loop through all the numbers from 1 to n\n    for i in range(2, n+1):\n        # Check if the current number is a power of 2\n        if i == 2**highest_power_of_2:\n            # If it is, update the highest power of 2\n            highest_power_of_2 += 1\n    \n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize variables\n    max_power = 0\n    current_power = 1\n\n    # Iterate until we reach the power of 2 greater than or equal to n\n    while current_power <= n:\n        max_power = current_power\n        current_power *= 2\n\n    # Return the highest power of 2 less than or equal to n\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n >= 2**power:\n        power += 1\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 as 1\n    highest_power = 1\n    \n    # Iterate through all numbers from 2 to n-1\n    for i in range(2, n):\n        \n        # Check if the current number is a power of 2\n        if i == 2**highest_power:\n            highest_power += 1\n            \n    # Return the highest power of 2\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    for i in range(n, 1, -1):\n        if i & (i-1) == 0:\n            return i\n    return n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1: \n        return n \n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1 or n == 2:\n        return n\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2)) % 1000000007"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the nth lucas number.\n    \"\"\"\n\n    # Define the first two Lucas numbers\n    a, b = 2, 1\n\n    # Loop through the nth number of Lucas numbers\n    for i in range(n):\n        # Calculate the next Lucas number\n        c = a + b\n        # Update the values of a and b for the next iteration\n        a, b = b, c\n\n    # Return the nth Lucas number\n    return a"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Base cases:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Recursive case:\n    a, b = 2, 1\n    for i in range(2, n+1):\n        a, b = b, a+b\n        \n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Find then'th lucas number using recursion.\n\n    :param n: The index of the lucas number to find.\n    :return: Then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Loop through the list and apply the format string to each element\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        formatted_element = string.format(element)\n        result.append(formatted_element)\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Create an empty dictionary\n    result = {}\n    \n    # Loop through each list\n    for i in range(len(l1)):\n        # Create a new dictionary for each sublist\n        sublist = {}\n        # Loop through each item in the sublist\n        for j in range(len(l2[i])):\n            # Add the item as a key and its index as a value to the sublist dictionary\n            sublist[l2[i][j]] = j\n        # Add the sublist dictionary to the result dictionary with the list's index as the key\n        result[i] = sublist\n    \n    # Return the final result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Define the nested dictionary\n    data = {}\n    \n    # Iterate through each list\n    for i in range(len(l1)):\n        data[str(i+1)] = {'name': l1[i], 'age': l2[i], 'city': l3[i]}\n        \n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    - l1 (list): a list of numbers\n    - l2 (list): a list of strings\n    - l3 (list): a list of booleans\n\n    Returns:\n    - dict: a dictionary where keys are the first list elements, values are the second list elements, and keys are the third list elements, values are the fourth list elements.\n    '''\n\n    # Create an empty dictionary to store the result\n    result = {}\n\n    # Loop through each element in the lists\n    for i in range(len(l1)):\n\n        # Use indexing to access each element of the lists\n        key1 = l1[i]\n        val1 = l2[i]\n        key2 = l3[i]\n        val2 = l4[i]\n\n        # Add the element to the dictionary using its keys as keys and values as values\n        result[key1] = val1\n        result[key2] = val2\n\n    # Return the dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Define an empty dictionary to hold the output\n    result = {}\n    \n    # Loop through each list and add its items to the result dictionary\n    for item in l1:\n        result[item] = l2.pop(0)\n    for item in l3:\n        result[item] = l2.pop(0)\n    \n    # Return the final dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create empty dictionary\n    final_dict = {}\n\n    # Loop through each list\n    for i in range(len(l1)):\n        # Create a nested dictionary for each list\n        inner_dict = {}\n\n        # Add key-value pairs to inner dictionary\n        inner_dict['key1'] = l1[i]\n        inner_dict['key2'] = l2[i]\n        inner_dict['key3'] = l3[i]\n\n        # Add inner dictionary to main dictionary\n        final_dict[i] = inner_dict\n\n    return final_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Define a dictionary to store the nested dictionary\n    nested_dict = {}\n    # Loop through the lists\n    for i in range(len(l1)):\n        # Add the first list as keys to the nested dictionary\n        nested_dict[l1[i]] = {}\n        # Loop through the second list and add it as values to the keys in the nested dictionary\n        for j in range(len(l2[i])):\n            nested_dict[l1[i]][l2[i][j]] = l3[i][j]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Combine all the lists into one\n    combined_list = l1 + l2 + l3\n    \n    # Create an empty dictionary\n    nested_dict = {}\n    \n    # Iterate over the combined list\n    for item in combined_list:\n        # Split the item into key-value pairs\n        key, value = item.split(':')\n        \n        # Check if the current key already exists in the dictionary\n        if key in nested_dict:\n            # If it does, append the value to the existing list\n            nested_dict[key].append(value)\n        else:\n            # If it doesn't, create a new list and append the value to it\n            nested_dict[key] = [value]\n    \n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # base case: if n is 1, return 1\n    if n == 1:\n        return 1\n\n    # recursive case: calculate the maximum sum for n/2 and n/3\n    max_sum_half = get_max_sum(n//2)\n    max_sum_third = get_max_sum(n//3)\n\n    # calculate the maximum sum for n using the given equation\n    max_sum_n = max(max_sum_half + max_sum_third + n, n)\n\n    return max_sum_n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 1:\n            return n\n        else:\n            return max((f(n//2) + f(n//3) + f(n//4) + f(n//5)), n)\n\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Define the recursive function to calculate the maximum sum\n    def helper(n):\n        # Base case: if n is 1, return n\n        if n == 1:\n            return n\n        # Recursive case: if n is greater than 1, return the maximum sum from n/2, n/3, n/4, and n/5\n        return max(helper(n//2) + helper(n//3) + helper(n//4) + helper(n//5), n)\n    \n    # Call the helper function with n as input and return its output\n    return helper(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def fibonacci(n):\n        if n == 1 or n == 2:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    def compute_sum(n):\n        if n == 1:\n            return 1\n        else:\n            return compute_sum(n-1) + fibonacci(n-1)\n\n    def max_sum(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return max_sum(n/2) + compute_sum(n/2)\n        else:\n            return max_sum(n/2)\n\n    return max_sum(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    # Initialize the array to store the maximum sum at each step\n    dp = [0] * (n+1)\n    # Base case: if n is 1 or 2, the maximum sum is n itself\n    dp[1] = n\n    dp[2] = n\n    # Fill the array using the formula f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    for i in range(3, n+1):\n        dp[i] = max(dp[i//2] + dp[i//3] + dp[i//4] + dp[i//5] + n, n)\n    return dp[n]"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        # Divide n by 2 to get f(n/2)\n        max_sum = get_max_sum(n//2)\n\n        # Divide n by 3 to get f(n/3)\n        if n % 3 == 0:\n            max_sum += get_max_sum(n//3)\n\n        # Divide n by 4 to get f(n/4)\n        if n % 4 == 0:\n            max_sum += get_max_sum(n//4)\n\n        # Divide n by 5 to get f(n/5)\n        if n % 5 == 0:\n            max_sum += get_max_sum(n//5)\n\n        # Add f(n/2), f(n/3), f(n/4) and f(n/5)\n        max_sum += n\n\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    elif n == 2:\n        return n * 2\n    else:\n        # Calculate the sum for each possible value of n\n        sum1 = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n\n        # Calculate the sum for n itself\n        sum2 = n\n\n        # Return the maximum sum\n        return max(sum1, sum2)\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = item\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Find the list with maximum length in a given list.\n    \"\"\"\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    # Loop through each element of the input list\n    for item in input_list:\n        # Check if the length of the current item is greater than the maximum length\n        if len(item) > max_length:\n            # If it is, update the maximum length and the list containing that element\n            max_length = len(item)\n            max_list = [item]\n        # If the current item is already in the list, add it to the list\n        elif item in max_list:\n            max_list.append(item)\n    \n    # Return the list containing the maximum length\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = []\n\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_list = [input_list[i]]\n        elif len(input_list[i]) == max_len:\n            max_list.append(input_list[i])\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for element in test_tup:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        else:\n            seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # Otherwise, add the character to the dictionary with a frequency of 1\n        else:\n            freq_dict[char] = 1\n    \n    # Iterate through the dictionary to find the first non-repeating character\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n\n    :param str1: input string\n    :return: the first non-repeated character or None if no non-repeating character is found\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(string):\n    # Create a dictionary to store the frequency of each character in the string\n    frequency = {}\n    for char in string:\n        frequency[char] = frequency.get(char, 0) + 1\n    \n    # Find the first non-repeating character\n    for char in string:\n        if frequency[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(string):\n    \"\"\"\n    This function will find the first non-repeating character in a given string.\n\n    :param string: string in which we need to find the first non-repeating character\n    :return: the first non-repeating character in the string\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # find the first non-repeating character in the dictionary\n    for char in string:\n        if freq[char] == 1:\n            return char\n\n    # if all characters have frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for i in range(len(str1)):\n        if char_count[str1[i]] == 1:\n            return str1[i]\n    \n    return \"No non-repeating character found.\""
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if not re.search(regex, string):\n        return False\n\n    return string[0] == string[-1]"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if not re.match(regex, string):\n        return False\n    if string[0] == string[-1]:\n        return True\n    return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the given numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the median\n    if len(nums) % 2 == 0:\n        median = (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n    else:\n        median = nums[len(nums) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the median of the sorted numbers\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    num_list = [a, b, c]\n    num_list.sort()\n    # if the numbers are equal, return the middle number\n    if num_list[0] == num_list[1] == num_list[2]:\n        return num_list[1]\n    # if the numbers are not equal, find the median\n    else:\n        mid = len(num_list) // 2\n        if len(num_list) % 2 == 0:\n            return (num_list[mid-1] + num_list[mid]) / 2\n        else:\n            return num_list[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a, b, c])\n    mid = len(sorted_list) // 2\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        return sorted_list[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Get the length of the list\n    length = len(sorted_list)\n\n    # Find the index of the middle element\n    middle_index = length // 2\n\n    # If the length of the list is odd, the middle element is the average of the two middle elements\n    if length % 2 == 1:\n        return sorted_list[middle_index]\n\n    # If the length of the list is even, the median is the average of the middle two elements\n    else:\n        return (sorted_list[middle_index - 1] + sorted_list[middle_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the length of the list\n    length = len(nums)\n\n    # If the length is odd, the median is the middle number\n    if length % 2 == 1:\n        return nums[length // 2]\n\n    # If the length is even, the median is the average of the two middle numbers\n    else:\n        # Find the indices of the two middle numbers\n        mid1 = length // 2 - 1\n        mid2 = length // 2\n\n        # Return the average of the two middle numbers\n        return (nums[mid1] + nums[mid2]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a,b,c])\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2-1] + sorted_numbers[len(sorted_numbers)//2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median\n\nprint(median_numbers(1,2,3)) # output: 2\nprint(median_numbers(4,5,6)) # output: 5\nprint(median_numbers(7,8,9)) # output: 8"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_list = [a, b, c]\n    sorted_list.sort()\n\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[len(sorted_list) // 2 - 1] + sorted_list[len(sorted_list) // 2]) / 2\n    else:\n        median = sorted_list[len(sorted_list) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    def quickselect(arr, k):\n        if len(arr) == 1:\n            return arr[0]\n        pivot = arr[len(arr) // 2]\n        lows = [el for el in arr if el < pivot]\n        highs = [el for el in arr if el > pivot]\n        pivots = [el for el in arr if el == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    \n    return quickselect([a, b, c], len(arr) // 2)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total_sum = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and iterate through its digits\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        \n        # Add the digit sum to the total sum\n        total_sum += digit_sum\n    \n    # Return the total sum of digits\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_num = sum(map(int, str(num)))\n        result.append(sum_num)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        num_str = str(num)\n        for digit in num_str:\n            total += int(digit)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        num_str = str(num)\n        sum_of_digits = sum(int(digit) for digit in num_str)\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Calculate the length of the two tuples\n    length = len(test_tup1)\n    \n    # Initialize the result tuple with all zeros\n    result_tup = tuple([0] * length)\n    \n    # Loop through each element in the tuples and perform the bitwise xor\n    for i in range(length):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result = xor_result ^ test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Combine the tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n\n    # Iterate through the combined list and perform the bitwise xor operation\n    for i in range(len(combined_list)):\n        combined_list[i] = combined_list[i] ^ combined_list[i+1]\n\n    # Combine the bits of each tuple into a new tuple\n    new_tup1 = tuple(combined_list[:len(test_tup1)])\n    new_tup2 = tuple(combined_list[len(test_tup1):])\n\n    # Return the new tuples\n    return new_tup1, new_tup2"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(a) ^ int(b) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple\n    result_tup = ()\n    # iterate through the tuples\n    for i in range(len(test_tup1)):\n        # perform the bitwise xor operation between the corresponding elements of the tuples\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize an empty list to store the resultant tuple\n    result_tup = []\n    # Iterate through both tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation on the corresponding elements of the tuples\n        result_tup.append(test_tup1[i] ^ test_tup2[i])\n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for tup in test_list:\n        if tup not in freq:\n            freq[tup] = 1\n        else:\n            freq[tup] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # create a set of tuples from the list\n    unique_tuples = set(tuple(x) for x in test_list)\n\n    # return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n\n    for item in test_list:\n        if tuple(item) not in unique_tuples:\n            unique_tuples.add(tuple(item))\n\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_freq = {}\n    for item in test_list:\n        if (item not in unique_freq):\n            unique_freq[item] = 1\n        else:\n            unique_freq[item] += 1\n    return unique_freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Use a set to remove duplicates and then convert back to a list to get the unique tuples\n    return list(set(test_list))"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup2[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    total_tup = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            total_tup.append(test_tup1[i] + test_tup2[i])\n        else:\n            total_tup.append(test_tup1[i])\n    return total_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Initialize the result tuple with the same length as the first tuple\n    result_tup = tuple(i + j for i, j in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"Both inputs must be tuples\")\n    elif len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    else:\n        result_tup = []\n        for i in range(len(test_tup1)):\n            result_tup.append(test_tup1[i] + test_tup2[i])\n        return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    # Loop through the elements of each tuple\n    for i in range(len(test_tup1)):\n        # Add the elements of each tuple element-wise\n        result_tup = result_tup + (test_tup1[i] + test_tup2[i],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #initialize an empty list to store the result\n    result = []\n    #loop through the first tuple to add each element to the result\n    for i in range(len(test_tup1)):\n        #loop through the second tuple to add each element to the result\n        for j in range(len(test_tup2[0])):\n            #append the sum of the corresponding elements from the first and second tuples to the result list\n            result.append(test_tup1[i] + test_tup2[i][j])\n    #return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new tuple to store the result\n    result = ()\n\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Get the element at current index from the first tuple\n        x = test_tup1[i]\n        # Loop through the second tuple\n        for j in range(len(test_tup2[0])):\n            # Get the element at current index from the second tuple\n            y = test_tup2[j][i]\n            # Add the two elements and append the result to the new tuple\n            result = result + (x + y,)\n\n    # Return the new tuple containing the result\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The number of elements in the two tuples should be same\"\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] + test_tup2[i])\n        return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the length of the two tuples is equal.\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return None\n\n    # Create a new empty tuple.\n    result_tup = ()\n\n    # Iterate through each element of the two tuples.\n    for i in range(len(test_tup1)):\n        # Add the two elements at the index i and append the result to the new tuple.\n        result_tup += (test_tup1[i] + test_tup2[i],)\n\n    # Return the new tuple.\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two arguments a and b and returns their minimum.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes in two tuples, tuplex and tuple1, and returns True if\n    an element exists within tuple1 and False otherwise.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for item in tuplex:\n        if item in tuple1:\n            print(f\"{item} exists in {tuple1}\")\n            return\n    print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function checks whether an element exists within a tuple.\n\n    Parameters:\n    -----------\n    tuplex : tuple\n        A tuple containing the elements to check.\n    tuple1 : tuple\n        A tuple containing the elements to check for.\n\n    Returns:\n    --------\n    bool\n        True if an element exists within the first tuple and False otherwise.\n    \"\"\"\n\n    for element in tuple1:\n        if element in tuplex:\n            return True\n\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(x, \"is an even number\")\n    else:\n        print(x, \"is an odd number\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    if x % 2 == 0: \n        return \"Even\" \n    else: \n        return \"Odd\" "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # If the number is even\n        return False # return False as the parity of even numbers is odd\n    else:\n        return True # return True as the parity of odd numbers is even"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The parity of {} is even.\".format(x) \n    else: \n        return \"The parity of {} is odd.\".format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even.\")\n    else:\n        print(f\"{x} is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Check if the given number is even or odd\n    if x % 2 == 0: \n        print(\"The given number is even.\") \n    else: \n        print(\"The given number is odd.\") "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    parity = 1 if x & 1 else 0\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer x as input and returns True if it's odd and False otherwise.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    temp = n\n    while temp > 0:\n        digits.append(temp % 10)\n        temp //= 10\n    digits.reverse()\n    new_num = 0\n    for digit in digits:\n        new_num = new_num * 10 + digit\n    return new_num + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Reverse the digits of the given number\n    reverse_n = int(str(n)[::-1])\n    \n    # Find the number of digits in the reversed number\n    num_digits = len(str(reverse_n))\n    \n    # Initialize the next bigger number\n    next_bigger = 0\n    \n    # Iterate through all possible rearrangements of the digits in the reversed number\n    for i in range(1, 10 ** num_digits + 1):\n        \n        # Convert the current rearrangement to a number\n        rearranged_n = int(''.join(str(i)[j] for j in range(num_digits)))\n        \n        # If the rearrangement is greater than the given number\n        if rearranged_n > n:\n            \n            # Compare the absolute difference between the rearranged number and the given number\n            # with the absolute difference between the rearranged number and the next bigger number\n            diff_rearranged = abs(rearranged_n - n)\n            diff_next_bigger = abs(rearranged_n - next_bigger)\n            \n            # If the absolute difference between the rearranged number and the next bigger number is smaller\n            # or equal to the absolute difference between the rearranged number and the given number\n            if diff_rearranged <= diff_next_bigger:\n                \n                # Set the next bigger number to the rearranged number\n                next_bigger = rearranged_n\n                \n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # convert the input number to a string\n    num_str = str(n)\n    # sort the digits in descending order\n    sorted_digits = sorted(num_str, reverse=True)\n    # create a new string with the sorted digits\n    new_num_str = ''.join(sorted_digits)\n    # convert the new string back to an integer and return the result\n    return int(new_num_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Find the index of the first digit that is greater than 0\n    digit_idx = num_str.find('0')\n\n    # Reverse the first digit to the end of the string\n    num_str = num_str[:digit_idx+1][::-1] + num_str[digit_idx+1:]\n\n    # Convert the string back to an integer and add 1\n    next_bigger = int(num_str) + 1\n\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number into a list of digits\n    num_list = list(str(n))\n    # Reverse the list of digits\n    num_list.reverse()\n    # Initialize the next bigger number\n    next_bigger = 0\n    # Loop through the list of digits\n    for digit in num_list:\n        # If the digit is greater than 0, add 1 to the next bigger number\n        if int(digit) > 0:\n            next_bigger += int(digit)\n        # If the digit is 0, do nothing\n        else:\n            pass\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    n_str = str(n)\n    digits = [int(digit) for digit in n_str]\n    reverse_digits = digits[::-1]\n    index = 0\n    for i in range(len(digits)):\n        if reverse_digits[i] == 9:\n            index = i\n            break\n    for i in range(len(digits)):\n        if i < index:\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n    new_n = 0\n    for digit in digits:\n        new_n = new_n * 10 + digit\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    num_str = str(n)\n    num_list = list(num_str)\n    digits = []\n    for i in range(len(num_list)):\n        if int(num_list[i]) > 0:\n            digits.append(int(num_list[i]))\n    \n    max_digit = max(digits)\n    min_digit = min(digits)\n    new_num = \"\"\n    for i in range(len(num_list)):\n        if int(num_list[i]) == max_digit:\n            new_num += str(min_digit)\n            break\n        elif int(num_list[i]) == min_digit:\n            new_num += str(max_digit)\n            break\n    \n    return int(new_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string\n    num_str = str(n)\n    # Initialize variables for the digits and the current digit index\n    digits = [int(digit) for digit in num_str]\n    current_digit_index = len(digits) - 1\n    # Rearrange the digits in reverse order and convert them back to an integer\n    result = int(''.join(map(str, digits[current_digit_index::-1])))\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    digits = [int(digit) for digit in num]\n    digits.sort(reverse=True)\n    new_num = ''.join(str(digit) for digit in digits)\n    return int(new_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    while n > 9:\n        n = sum([int(digit) * (9 - i) for i, digit in enumerate(str(n))])\n    return n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = [(-x, y) for x in nums1 for y in nums2][:k]\n    heapq.heapify(min_heap)\n    # Initialize the result list and the indices\n    result = []\n    i = j = 0\n    # Iterate through the indices of the min_heap\n    while i < len(nums1) and j < len(nums2):\n        # Check if the current pair is already in the result list\n        if (nums1[i], nums2[j]) not in result:\n            # If it's not, add it to the result list and update the indices\n            result.append((nums1[i], nums2[j]))\n            i += 1\n            j += 1\n            # If the result list has size k, remove the smallest pair from the result list and heap\n            if len(result) == k:\n                heapq.heappop(min_heap)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Initialize the priority queue to store the smallest pairs\n    min_heap = []\n\n    # Iterate through the first array and for each element,\n    # compare it with the second array and add the smallest pair to the priority queue if the size of the priority queue is less than k\n    for num1 in nums1:\n        for num2 in nums2:\n            # Calculate the sum of the two elements and add it as a tuple to the heap\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n\n            # Check if the size of the priority queue is less than k\n            if len(min_heap) < k:\n                continue\n\n            # If the size of the priority queue is equal to k,\n            # then return the smallest k pairs from the heap\n            result = []\n            for _ in range(k):\n                _, (num1, num2) = heapq.heappop(min_heap)\n                result.append((num1, num2))\n            return result\n\n    return []\n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store the smallest elements from both arrays\n    min_heap = []\n    for num1 in nums1:\n        heapq.heappush(min_heap, num1)\n    \n    # create a second min heap to store the smallest elements from the second array\n    second_min_heap = []\n    for num2 in nums2:\n        heapq.heappush(second_min_heap, num2)\n        \n    # initialize a list to store the k smallest pairs\n    k_smallest_pairs = []\n    \n    # loop through the first k elements from the min heap and the second k elements from the second min heap\n    for i in range(k):\n        num1 = heapq.heappop(min_heap)\n        num2 = heapq.heappop(second_min_heap)\n        \n        # add the current smallest pair to the list of k smallest pairs\n        k_smallest_pairs.append((num1, num2))\n        \n        # add the other elements from the min heap and second min heap to the min and second min heaps, respectively\n        if len(min_heap) < i + 1:\n            heapq.heappush(min_heap, num1)\n        else:\n            heapq.heappushpop(min_heap, num1)\n        \n        if len(second_min_heap) < i + 1:\n            heapq.heappush(second_min_heap, num2)\n        else:\n            heapq.heappushpop(second_min_heap, num2)\n            \n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    This function finds k number of smallest pairs from two given arrays.\n    The function takes three arguments:\n    nums1 - list of integers\n    nums2 - list of integers\n    k - integer\n    '''\n\n    # Define a function to compare two elements in the heap\n    def compare_elements(x, y):\n        return x[1] < y[1]\n\n    # Create a min heap to store the pairs of numbers with minimum distance\n    min_heap = []\n    heapq.heapify(min_heap, compare=compare_elements)\n\n    # Initialize two pointers to keep track of the start of the two arrays\n    i = 0\n    j = 0\n\n    # Iterate until we have found k pairs\n    while k > 0:\n        # If we have reached the end of one of the arrays, move the pointer to the other array\n        if i == len(nums1):\n            nums1 = nums2\n            i = 0\n            j += 1\n        if j == len(nums2):\n            nums2 = nums1\n            j = 0\n            i += 1\n\n        # Calculate the distance between the current pair of numbers\n        distance = abs(nums1[i] - nums2[j])\n\n        # If the distance is smaller than or equal to the current smallest pair,\n        # add it to the heap and decrement k\n        if k > 0 and distance <= min_heap[0][1]:\n            heapq.heappushpop(min_heap, [nums1[i], nums2[j], distance])\n            k -= 1\n\n    # Extract the k smallest pairs from the heap\n    pairs = []\n    for _ in range(k):\n        pairs.append(heapq.heappop(min_heap)[0:2])\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n    nums1 (list): A list of integers.\n    nums2 (list): A list of integers.\n    k (int): An integer.\n\n    Returns:\n    list: A list of tuples of size 2, where each tuple contains the indices of two elements from the input arrays that make up a smallest pair.\n    \"\"\"\n\n    def merge_sorted_arrays(nums1, nums2):\n        \"\"\"\n        Merge two sorted arrays into one.\n\n        Args:\n        nums1 (list): A list of integers.\n        nums2 (list): A list of integers.\n\n        Returns:\n        list: A list of integers.\n        \"\"\"\n\n        i = j = 0\n        merged_array = []\n\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] <= nums2[j]:\n                merged_array.append(nums1[i])\n                i += 1\n            else:\n                merged_array.append(nums2[j])\n                j += 1\n\n        merged_array += nums1[i:]\n        merged_array += nums2[j:]\n\n        return merged_array\n\n    nums1_sorted = sorted(nums1)\n    nums2_sorted = sorted(nums2)\n    merged_array = merge_sorted_arrays(nums1_sorted, nums2_sorted)\n\n    min_heap = []\n    result = []\n\n    for i in range(k):\n        heapq.heappush(min_heap, -merged_array[0])\n        result.append((0, 0))\n\n    for i in range(1, len(merged_array)):\n        if len(min_heap) > k:\n            min_heap[0] = -merged_array[i]\n            heapq.heapify(min_heap)\n\n        current_min = -merged_array[i]\n        index1, index2 = heapq.heappop(min_heap), heapq.heappop(min_heap)\n\n        result.append((index1 + 1, index2 + 1))\n\n        if i < len(merged_array) - 1:\n            min_heap.append(current_min - merged_array[i + 1])\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a min heap of size k to store the smallest pairs\n    min_heap = []\n\n    # Loop through the first array\n    for i in range(len(nums1)):\n        # Get the minimum element from the second array and add it to the heap\n        # If the heap size is greater than k, remove the smallest element from the heap\n        heapq.heappush(min_heap, (-nums2[i], (nums1[i], nums2[i])))\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Create a list to store the pairs\n    pairs = []\n\n    # Loop through the min heap\n    for _ in range(k):\n        # Get the minimum pair from the heap and add it to the pairs list\n        pair = (-heapq.heappop(min_heap)[1], -heapq.heappop(min_heap)[1])\n        pairs.append(pair)\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return [pair[1] for pair in heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of tuples with the smallest element as the first element and the second element as the second element\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if not min_heap or nums1[i] + nums2[j] < min_heap[0][0]:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    \n    # Extract the k smallest pairs from the min heap and return them as a list of tuples\n    pairs = []\n    while min_heap:\n        pairs.append(min_heap[0][1])\n        heapq.heappop(min_heap)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert lists into tuples for better sorting\n    nums1_tuple = tuple(nums1)\n    nums2_tuple = tuple(nums2)\n\n    # Sort the tuples based on the first element\n    sorted_nums1_tuple = sorted(nums1_tuple, key=lambda x: x[0])\n\n    # Initialize two heaps\n    min_heap1 = []\n    min_heap2 = []\n\n    # Add the first element of each tuple to the heaps\n    heapq.heappush(min_heap1, (-sorted_nums1_tuple[0][1], -sorted_nums1_tuple[0][0]))\n    heapq.heappush(min_heap2, (-sorted_nums1_tuple[0][1], -sorted_nums1_tuple[0][0]))\n\n    # Initialize the result list\n    result = []\n\n    # Iterate through the remaining k elements\n    for i in range(k):\n        # Get the minimum value from each heap\n        min1 = -heapq.heappop(min_heap1)[1]\n        min2 = -heapq.heappop(min_heap2)[1]\n\n        # If the minimum value from the first heap is less than the minimum value from the second heap, add it to the result list and add the pair to the second heap\n        if min1 < min2:\n            result.append((-min1, nums1[min1]))\n            heapq.heappush(min_heap2, (-min1, nums2[min1]))\n        # Otherwise, add it to the result list and add the pair to the first heap\n        else:\n            result.append((-min2, nums2[min2]))\n            heapq.heappush(min_heap1, (-min2, nums1[min2]))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Parameters:\n    nums1: list of integers\n    nums2: list of integers\n    k: integer\n\n    Returns:\n    list of tuples\n\n    \"\"\"\n\n    # create a set of tuples of the form (num1, num2)\n    # where num1 is in nums1 and num2 is in nums2\n    pairs = set()\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.add((num1, num2))\n\n    # sort the set of pairs by the sum of their elements\n    # and use heapq to return the first k smallest elements\n    pairs_sorted = sorted(pairs, key=lambda x: x[0] + x[1])\n    result = []\n    heapq.heapify(pairs_sorted)\n    for i in range(k):\n        pair = heapq.heappop(pairs_sorted)\n        result.append(pair)\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(lst):\n    '''\n    Finds the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be the largest possible integer\n    min_product = float('inf')\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples\n            product = list1[i][0] * list1[j][1]\n\n            # Update the minimum product if necessary\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    min_value = float('inf')\n    result = []\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_value:\n                min_value = product\n                result = [(list1[i], list1[j])]\n            elif product == min_value:\n                result.append((list1[i], list1[j]))\n\n    return min_value, result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Calculate the minimum product of a list of tuples.\n\n    :param lst: A list of tuples.\n    :return: The minimum product of the tuples in the list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            product = pair[0] * pair[1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of any two tuples in the list.\n    '''\n    \n    # Initialize variables to store the minimum product and the first tuple\n    min_product = list1[0][0] * list1[0][1]\n    first_tuple = list1[0]\n    \n    # Loop through the list and compare the products of tuples with the current minimum product\n    for i in range(1, len(list1)):\n        if list1[i][0] * list1[i][1] < min_product:\n            min_product = list1[i][0] * list1[i][1]\n            first_tuple = list1[i]\n            \n    # Return the minimum product and the first tuple\n    return min_product, first_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Find the minimum product of pairs of tuples from the given list.\n\n    Parameters:\n    list1 (list): List of tuples.\n\n    Returns:\n    int: The minimum product of pairs of tuples from the given list.\n    \"\"\"\n    # Initialize variables to store the minimum and maximum value of each tuple.\n    min_value = [float('inf')] * len(list1[0])\n    max_value = [float('-inf')] * len(list1[0])\n\n    # Iterate over the list of tuples and update the minimum and maximum value of each tuple.\n    for tup in list1:\n        for i in range(len(tup)):\n            min_value[i] = min(min_value[i], tup[i])\n            max_value[i] = max(max_value[i], tup[i])\n\n    # Calculate the minimum product of pairs of tuples.\n    min_product = 1\n    for i in range(len(min_value)):\n        min_product = min(min_product, max_value[i] - min_value[i])\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(lst):\n    '''\n    This function takes a list of tuples and returns the minimum product of the tuples.\n    '''\n    min_product = float('inf') # set the minimum product to infinity\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0]*lst[j][1] # calculate the product of the first element and second element of the pairs\n            if product < min_product:\n                min_product = product\n                \n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    for num in listval:\n        if num < min_val:\n            min_val = num\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = float('inf')\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to the first value in the list\n    min_val = listval[0]\n    # iterate over the list and compare each value to the current minimum value\n    for value in listval:\n        if value < min_val:\n            min_val = value\n    # return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        raise ValueError(\"The list is empty\")\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Initialize min value to the first element of the list\n    min_val = listval[0]\n\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n\n        # If current element is smaller than the current minimum, update min_val\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    min_val = listval[0]\n    \n    for val in listval:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # create a dictionary to count the frequency of each type of element in the list\n    count = {}\n    for x in listval:\n        if x in count:\n            count[x] += 1\n        else:\n            count[x] = 1\n    \n    # find the minimum value by iterating over the dictionary and keeping track of the minimum count\n    min_count = None\n    min_val = None\n    for k, v in count.items():\n        if min_count is None or v < min_count:\n            min_count = v\n            min_val = k\n    \n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list\")\n    elif len(listval) == 0:\n        raise ValueError(\"List cannot be empty\")\n    \n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('_(.)?')\n    camel_case = pattern.sub(lambda m: m.group(1).upper() if m.group(1) else '', word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to lowercase and split it into a list of words\n    words = word.lower().split('_')\n    # Capitalize the first letter of each word and join them into a camel case string\n    return ''.join([word.capitalize() for word in words])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('_(.)')\n    word = pattern.sub(lambda x: x.group(1).upper(), word)\n    return word.capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub(r'(?<!^)(?=[A-Z])', r' ', word)\n    camel_case = camel_case.strip().capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Splitting the word into individual words based on the space character\n    words = word.split()\n    # Converting the first letter of each word to uppercase\n    words[0] = words[0].upper()\n    # Joining the words back into a string\n    camel_case_word =''.join(words)\n    # Returning the camel case word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all words to lowercase and split them using underscore as a separator\n    words = word.lower().split('_')\n    # Initialize an empty string to store the camel case string\n    camel_case_string = ''\n    # Iterate over the words in the list and convert each word to camel case\n    for i, word in enumerate(words):\n        # Check if the current word is the last word in the list\n        if i == len(words) - 1:\n            camel_case_string += word\n        else:\n            camel_case_string += word.capitalize()\n    # Return the camel case string\n    return camel_case_string"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # replace snake case words with camel case words\n    camel_word = re.sub('_(.)', lambda m: m.group(1).upper(), word)\n    # remove any leading or trailing underscores\n    camel_word = re.sub('^_+', '', camel_word)\n    camel_word = re.sub('_+$', '', camel_word)\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Split the word into a list of words\n    words = word.split('_')\n    # Convert the first word to uppercase\n    first_word = words[0].capitalize()\n    # Remove the first word from the list of words\n    words = words[1:]\n    # Convert all other words to camel case\n    camel_case_words = [word.capitalize() for word in words]\n    # Join the camel case words with underscores\n    camel_case_word = '_'.join(camel_case_words)\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = []\n    for num in l:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    # Initialize an empty list to store the even numbers\n    even_list = []\n    # Loop through each number in the input list\n    for num in l:\n        # If the number is even, append it to the even_list\n        if num % 2 == 0:\n            even_list.append(num)\n    # Return the even_list\n    return even_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = []\n    for num in l:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        nth_element = list1[n-1]\n    except IndexError:\n        nth_element = \"Element not found\"\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if list1 is a list of tuples\n    if not all(isinstance(x, tuple) for x in list1):\n        raise TypeError(\"Input list must be a list of tuples.\")\n    \n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Extract the nth element from the list\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    '''\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n\n    # initialize an empty list to store the extracted elements\n    extracted_list = []\n\n    # loop through the list of tuples\n    for tup in list1:\n        # append the nth element of the tuple to the extracted_list\n        extracted_list.append(tup[n-1])\n\n    # return the extracted_list\n    return extracted_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # Use list comprehension to extract the nth element from each tuple in the list\n    extracted_list = [x[n-1] for x in list1]\n    return extracted_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [item for sublist in list1 for item in sublist]\n    else:\n        for i in range(len(list1)):\n            if i == n-1:\n                return list1[i]\n            else:\n                list1[i] = (list1[i][0], list1[i][1:])\n        return extract_nth_element(list1, n-1)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        print(\"Index out of range\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return 'Invalid index.'\n    else:\n        return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    # Check if any value in list1 exists in list2\n    for i in list1:\n        if i in list2:\n            return True\n    # If no value exists in list1, return False\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            print(item, \"exists in both lists\")\n        else:\n            print(item, \"does not exist in both lists\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # check if list1 is a subset of list2\n    if list1.issubset(list2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Find the intersection of two sequences using set intersection\n    intersection = set(list1) & set(list2)\n    # Check if any value in the intersection is present in the original sequences\n    return bool(intersection - set(list1) - set(list2))"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n\n    for value in list1:\n        if value in list2:\n            return True\n\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    max_product = float('-inf')\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max1 = arr[i]\n                max2 = arr[j]\n\n    return max1, max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_val = arr[0] * arr[1]\n    min_val = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i] * arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i] * arr[i]\n    return max_val, min_val"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i] * arr[j]\n            if prod > max_product:\n                max_product = prod\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    # sorting the array\n    arr.sort()\n    # finding the max and min values\n    max_val = arr[len(arr)-1]\n    min_val = arr[0]\n    \n    # calculating the product of max and min values\n    product = max_val * min_val\n    \n    # finding the pair with highest product\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j] > product:\n                pair = (arr[i],arr[j])\n                product = arr[i]*arr[j]\n    \n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    \n    # Sort the array in non-decreasing order\n    arr.sort(reverse=True)\n    \n    # Initialize two pointers to the first and last elements of the array\n    left = 0\n    right = len(arr) - 1\n    \n    # Initialize variables to store the maximum and minimum products\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    \n    # Loop through the array and find the pair with the highest product\n    for i in range(2, len(arr)):\n        if arr[i] * arr[right] > max_product:\n            max_product = arr[i] * arr[right]\n            left += 1\n        elif arr[i] * arr[right] < min_product:\n            min_product = arr[i] * arr[right]\n            right -= 1\n    \n    # Return the pair with the highest product\n    return (arr[left], arr[right])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) <= 1:\n        return arr\n    else:\n        max1 = arr[0]\n        min1 = arr[0]\n        max2 = arr[0]\n        min2 = arr[0]\n        \n        for i in range(1, len(arr)):\n            if arr[i] > max1:\n                max2 = max1\n                max1 = arr[i]\n            elif arr[i] > max2:\n                max2 = arr[i]\n            if arr[i] < min1:\n                min2 = min1\n                min1 = arr[i]\n            elif arr[i] < min2:\n                min2 = arr[i]\n                \n        return [max1, min1] + [max2, min2]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Initialize max_product_pair with two default values\n    max_product_pair = [float('-inf'), float('-inf')]\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the product of the two elements and compare it with the current max_product_pair\n            product = arr[i] * arr[j]\n            if product > max_product_pair[0]:\n                max_product_pair = [product, arr[i]]\n            elif product > max_product_pair[1]:\n                max_product_pair = [product, arr[j]]\n    \n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = (-1, -1)\n\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if j == i:\n                continue\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize two variables to store the highest and second highest products\n    max_product = float('-inf')\n    second_max_product = float('-inf')\n\n    # Loop through the array and update the variables as necessary\n    for num in arr:\n        if num > max_product:\n            second_max_product = max_product\n            max_product = num\n        elif num > second_max_product:\n            second_max_product = num\n\n    # Return the pair with the highest product\n    return (max_product, second_max_product)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Step 1: Initialize a set to store common elements\n    common_set = set()\n\n    # Step 2: Iterate over the list of tuples\n    for tup in Input:\n\n        # Step 3: Get the first element of the tuple\n        first_element = tup[0]\n\n        # Step 4: Add the first element to the set\n        common_set.add(first_element)\n\n    # Step 5: Convert the set to list and return the common element\n    return list(common_set)[0]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and finds the common first element in each tuple.\n    '''\n    for i in Input:\n        common_first = i[0]\n        for j in Input:\n            if j[0] == common_first:\n                print(\"Common first element in tuple:\", i)\n                print(\"Common first element in tuple:\", j)\n                break\n        else:\n            print(\"No common first element in tuple:\", i)\n    return"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                if Input[i][1]!= Input[j][1]:\n                    common_element.append((Input[i][0], Input[i][1]))\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_element = None\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if i!= j:\n                if Common_element == None:\n                    Common_element = Input[i][j]\n                elif Input[i][j] == Common_element:\n                    Common_element = Common_element\n    return Common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    unique_elements = set()\n    for element in Input: \n        unique_elements.add(element[0])\n    common_element = next(iter(unique_elements))\n    result = []\n    for element in Input: \n        if element[0] == common_element: \n            result.append(element)\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    # initialize an empty dictionary to store groups\n    groups = {}\n    # iterate over the input list of tuples\n    for tup in Input:\n        # get the first element of the tuple\n        first = tup[0]\n        # if the first element is not already in a group, create a new group\n        if first not in groups:\n            groups[first] = []\n        # add the tuple to the group\n        groups[first].append(tup)\n    # return the groups as a list of lists\n    return [groups[key] for key in sorted(groups)]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_element = None\n    for item in Input:\n        if not common_first_element:\n            common_first_element = item[0]\n        elif item[0] == common_first_element:\n            pass\n        else:\n            return None\n\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = set()\n    for tup in Input:\n        common_elements.add(tup[0])\n    return sorted(common_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples, each of which contains\n    all the elements from the input list of tuples with the same common first element.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        if Input[i][0] in common_elements:\n            common_elements.append(Input[i][0])\n    result = []\n    for i in range(len(Input)):\n        if Input[i][0] in common_elements:\n            result.append(Input[i])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_element = None\n    for tuple_obj in Input:\n        if Common_element is None:\n            Common_element = tuple_obj[0]\n        else:\n            if tuple_obj[0] == Common_element:\n                return Common_element\n            else:\n                Common_element = None\n    return None"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list\n    having the maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Finding the maximum length of the list\n    max_len = max(len(lst), len(str(lst)))\n    # Initializing the maximum length to -1\n    max_element = -1\n    # Initializing the maximum element to None\n    max_element_str = None\n    # Looping through the list\n    for i in range(len(lst)):\n        # If the length of the list is equal to the maximum length\n        if len(str(lst[i])) == max_len:\n            # If the element is greater than the current maximum element\n            if lst[i] > max_element:\n                # Updating the maximum element\n                max_element = lst[i]\n                # Updating the maximum element string\n                max_element_str = str(lst[i])\n    # Returning the maximum element string\n    return max_element_str"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # Initialize max_length and max_element variables\n    max_length = 0\n    max_element = None\n\n    # Loop through the list and update the max_length and max_element variables\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n\n    # Return the max_element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    max_len = 0 \n    max_elem = '' \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element that has the maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    max_length = len(lst[0])\n    max_element = lst[0]\n    \n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element having the maximum length in the list.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Initialize the sum to 0 and the length to 0\n    total_sum = 0\n    length = len(list1)\n\n    # Loop through each number in the list\n    for i in range(len(list1)):\n        # Round the number to 2 decimal places\n        rounded_num = round(list1[i], 2)\n\n        # Add the rounded number to the total sum\n        total_sum += rounded_num\n\n    # Multiply the total sum by the length of the list to get the final answer\n    final_answer = total_sum * length\n\n    # Print the final answer\n    print(\"The final answer is:\", final_answer)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # Initialize a variable to store the cube sum\n    cube_sum = 0\n\n    # Loop n times to find the cube sum of first n even natural numbers\n    for i in range(1, n+1):\n        # Check if the number is even\n        if i % 2 == 0:\n            # Add the cube of the even number to the cube sum\n            cube_sum += i**3\n\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize variables\n    total = 0\n    num = 0\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        num = 0\n        # loop through odd natural numbers from 3 to 2n\n        for j in range(3, 2*i+1, 2):\n            num += j**3\n        # add cube of current number to total\n        total += num**3\n    return total"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1,n+1,2):\n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(2, n+1, 2):\n        result += i**3\n    return result"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    # initialize sum variable to 0\n    sum = 0\n    # loop through first n even natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the cube of the even number\n        cube = i ** 3\n        # add the cube to the sum variable\n        sum += cube\n    # return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-2] # remove the last delimiter from the concatenated string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for i in range(len(test_tup)):\n        concatenated_string += str(test_tup[i])\n        if i < len(test_tup) - 1:\n            concatenated_string += \",\"\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple and a delimiter as input and concatenates each element of the tuple by the delimiter.\n    '''\n    concatenated_tuple = \"\"\n    for element in test_tup:\n        concatenated_tuple += str(element) + delimiter\n    return concatenated_tuple[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # join() method returns a string where all elements of the tuple are separated by the delimiter\n    concatenated_string = ', '.join(str(x) for x in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    result = delimiter.join([str(item) for item in test_tup])\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple and a delimiter as input and returns the concatenated string of the elements in the tuple.\n    '''\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return ', '.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**3\n    return total/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_cubes = 0\n    for i in range(1, n+1):\n        total_cubes += i**3\n    average_cube = total_cubes / n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of the cubes of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n\n    return sum(cubes)/len(cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Function to find the cube of a number\n    def cube_of_number(num):\n        return num ** 3\n\n    # Initialize a variable to store the sum of cubes\n    sum_of_cubes = 0\n\n    # Loop through the first n numbers\n    for i in range(1, n+1):\n        # Calculate the cube of the current number and add it to the sum of cubes\n        sum_of_cubes += cube_of_number(i)\n\n    # Calculate the average of the sum of cubes and return it\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    sum = 0\n    for i in range(1, n+1):\n        cube = i ** 3\n        sum += cube\n        count += 1\n    average = sum / count\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        result.append(item[-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i, string in enumerate(test_tuple):\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for index, element in enumerate(test_tuple):\n        if index == len(test_tuple) - 1:\n            rear_elements.append(element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_list.append(test_tuple[i][-1])\n        else:\n            raise TypeError(\"All elements in the tuple must be of type string\")\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if i == 0:\n            rear_list.append(test_tuple[i][rear_index])\n        else:\n            rear_list.append(test_tuple[i][rear_index + 1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [item[-1] for item in test_tuple]"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0  # initialize count variable to 0\n\n    for i in range(len(list1)):  # iterate over each sublist in the list\n        if x in list1[i]:  # check if x is present in the sublist\n            count += 1  # increment count by 1\n\n    return count  # return the count of sublists containing x"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(lst, x):\n    '''\n    This function takes a list and an element x as input and returns the number of sublists containing x in it.\n    '''\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if all(x in y for y in list1[:i+1]):\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    result = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n    formatted_dt = f'{day}-{month}-{year}'\n    return formatted_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    # define the regular expression pattern to match date in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # use the re.sub() function to replace the pattern in the given date with the desired format\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # Use the re.sub() function to replace the yyyy-mm-dd format with the desired dd-mm-yyyy format\n    dt_new = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    \n    # Return the new date in the desired format\n    return dt_new"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # use regex to split date into components\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n\n    # if match is found, convert date components and join with hyphens\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        # otherwise, return original date\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # replace '-' with '-' to match format in the date\n    dt = re.sub('-', '-', dt)\n\n    # split the date into year, month, and day components\n    year, month, day = map(int, dt.split('-'))\n\n    # convert year to four-digit format\n    year = str(year).zfill(4)\n\n    # combine the new year and day components to form the final date\n    final_dt = '-'.join([year, month, day])\n\n    return final_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_dt = re.sub(dt_pattern, r'\\3-\\2-\\1', dt)\n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Use regular expressions to extract the year, month, and day from the date string\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n\n    # Use the datetime module to convert the date to dd-mm-yyyy format\n    import datetime\n    d = datetime.datetime.strptime(dt, '%Y-%m-%d').strftime('%d-%m-%Y')\n\n    return d"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            temp = my_list[i]\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # The gap sequence\n    gap = len(my_list) // 2\n    \n    # Iterate through the array and sort it\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            # Swap adjacent elements if they are not in order\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap sequence\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n // 3:\n        h = 3 * h + 1\n    while h >= 1:\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            while j >= h and my_list[j - h] > key:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = key\n        h //= 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Define the increment sequence\n    increment = len(my_list) // 2\n    while increment > 0:\n        # Perform insertion sort on the increment sequence\n        for i in range(increment, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= increment and my_list[j-increment] > key:\n                my_list[j] = my_list[j-increment]\n                j -= increment\n            my_list[j] = key\n\n        # Reduce the increment value\n        increment //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # Step size = 1 (the smallest gap)\n    while n > 1:\n        # Move the gap one position to the right\n        gap = n // 2\n        # Iterate over the array from gap position to the last element\n        for i in range(gap, n):\n            # Swap the current element with the gap position\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap size\n        n = gap"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Calculate the gap (which is the number of elements to be sorted at each iteration)\n    gap = n // 2\n\n    while gap > 0:\n        # Move the gap elements to the right, to be sorted\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            # While the element is greater than the elements to its left, swap them\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            # Insert the element into its correct position in the sorted part of the array\n            my_list[j] = temp\n\n        # Reduce the gap size by a factor of 2\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # and the two elements together and add the result to a new tuple\n        test_tup3 = (test_tup1[i] & test_tup2[i],)\n        # add the new tuple to a list\n        result_list.append(test_tup3)\n    # return the list of elementwise and tuples\n    return result_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(*[zip(test_tup1, test_tup2)]))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if both tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must be the same length.')\n    # Use a list comprehension to extract the elementwise and tuples\n    return [(x1 & x2) for x1, x2 in zip(test_tup1, test_tup2)]"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] & test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as input and returns their elementwise and tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same number of elements.\")\n        return\n\n    and_tups = []\n    for i in range(len(test_tup1)):\n        and_tups.append(test_tup1[i] & test_tup2[i])\n\n    return and_tups"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extract the elements from the two input tuples\n    tup1_elements = test_tup1[0]\n    tup2_elements = test_tup2[0]\n    # Extract the lengths of the two input tuples\n    tup1_len = len(tup1_elements)\n    tup2_len = len(tup2_elements)\n    # Check if the two input tuples have the same length\n    if tup1_len!= tup2_len:\n        print(\"Error: The two input tuples have different lengths.\")\n        return None\n    # Extract the elementwise and tuples\n    and_tup = []\n    for i in range(tup1_len):\n        and_tup.append((tup1_elements[i] & tup2_elements[i]))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0: \n        directrix = (-b + discriminant**0.5)/(2*a)\n        return directrix\n    elif discriminant == 0: \n        directrix = -b/(2*a)\n        return directrix\n    else: \n        return \"No real root\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        return \"There are no real roots.\"\n    \n    elif discriminant == 0:\n        return \"The directrix is x = \" + str((-b)/2*a)\n    \n    else:\n        x1 = (-b + discriminant**(1/2)) / (2*a)\n        x2 = (-b - discriminant**(1/2)) / (2*a)\n        return \"The directrix is x = \" + str(x1) + \" and x = \" + str(x2) + \".\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (-b**2 + 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (-b**2 + 4*a*c)**0.5)/(2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    determinant = b**2 - 4*a*c\n    if determinant < 0:\n        raise ValueError(\"The parabola has no real roots\")\n    elif determinant == 0:\n        return (-b/(2*a))\n    else:\n        x1 = (-b + determinant**0.5)/(2*a)\n        x2 = (-b - determinant**0.5)/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the determinant of the second degree equation\n    det = b**2 - 4*a*c\n    \n    # Calculate the two roots of the determinant\n    root1 = (-b + det**0.5)/(2*a)\n    root2 = (-b - det**0.5)/(2*a)\n    \n    # Sort the roots in ascending order and take the middle one\n    directrix = sorted([root1, root2])[1]\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the values of the quadratic equation and the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if disc > 0:\n        # Calculate the values of the two roots\n        root1 = (-b + (disc**0.5)) / (2*a)\n        root2 = (-b - (disc**0.5)) / (2*a)\n        \n        # Check if the two roots are equal\n        if root1 == root2:\n            return root1\n        # Return the smaller root\n        else:\n            return min(root1, root2)\n    else:\n        # The discriminant is zero, so there is no real root\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is greater than 0\n    if discriminant > 0:\n        # Find the two roots of the discriminant\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Find the directrix of the parabola\n        directrix = (root1**2 - root2**2)/(2*a)\n        \n        # Return the directrix\n        return directrix\n    else:\n        # If the discriminant is less than 0, the directrix is a line segment\n        # between the two points of intersection\n        x1 = (-b)/(2*a)\n        x2 = c/(2*a)\n        \n        # Return the directrix as a tuple of x1 and x2\n        return (x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc < 0:\n        print(\"There is no directrix.\")\n    else:\n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n        print(\"The directrix is:\", x1)\n        print(\"The directrix is:\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    det = b**2 - 4*a*c\n    if det > 0:\n        x1 = (-b + det**0.5) / (2*a)\n        x2 = (-b - det**0.5) / (2*a)\n        return [x1, x2]\n    elif det == 0:\n        x1 = -b / (2*a)\n        return x1\n    else:\n        return 'No solution exists'"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the determinant of the matrix\n    det = a*b - c*c\n\n    # Calculate the second equation of the parabola\n    y = -b/(2*a)\n\n    # Calculate the third equation of the parabola\n    x = (b*b*b - 4*a*c*det + c*c*det)/(2*a*det)\n\n    # Calculate the directrix\n    directrix = (-b + x*x)/(2*a)\n\n    return directrix"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Initialize a set to store unique elements in list1\n    set1 = set(list1)\n    # Initialize a set to store unique elements in list2\n    set2 = set(list2)\n    # Check if there is at least one common element in both sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    \n    for item in list1:\n        if item in list2:\n            common = True\n    \n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # convert lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # check if there is a common element\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set to store the common elements\n    common_set = set()\n    # loop through each element in the first list\n    for element1 in list1:\n        # loop through each element in the second list\n        for element2 in list2:\n            # if the elements are the same, add them to the set\n            if element1 == element2:\n                common_set.add(element1)\n    # if the set is not empty, return true\n    if common_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n\n    area = 0.5 * base1 * base2\n    area = area + base1 + base2\n    area = area * height\n\n    area_perimeter = 0.5 * (base1 + base2) * height\n\n    median = area / area_perimeter\n    median = round(median, 2)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the first half of the trapezium\n    length1 = 0.5 * (base1 + base2)\n\n    # Calculate the length of the second half of the trapezium\n    length2 = 0.5 * height\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height\n\n    # Calculate the length of the trapezium's perimeter\n    perimeter = base1 + base2 + height\n\n    # Calculate the length of the median of the two halves of the trapezium\n    median1 = 0.5 * (length1 + length2)\n\n    # Calculate the length of the median of the entire trapezium\n    median2 = 0.5 * perimeter\n\n    # Compare the two medians to find the median length of the trapezium\n    if median1 > median2:\n        return median1\n    else:\n        return median2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Find the median length of a trapezium using the trapezoidal rule.\n\n    Args:\n    base1 (float): The length of the base of the first trapezium side.\n    base2 (float): The length of the base of the second trapezium side.\n    height (float): The height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n\n    Example:\n    >>> median_trapezium(2, 3, 4)\n    3.0\n    '''\n\n    # Calculate the area of each side of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    # Calculate the area of the total trapezium\n    area_total = area1 + area2\n\n    # Calculate the base of the trapezium that is taller than the height\n    base_taller = 0.5 * (base1 + base2)\n\n    # Calculate the area of the trapezium that is taller than the height\n    area_taller = 0.5 * (area1 + area2)\n\n    # Calculate the distance from the base to the height\n    distance = height / 2\n\n    # Calculate the area of the trapezium that is shorter than the distance\n    area_shorter = 0.5 * distance * (base1 - base_taller)\n\n    # Calculate the area of the trapezium that is shorter than the height\n    area_shorter_total = area_shorter - area_taller\n\n    # Calculate the area of the remaining area of the trapezium\n    area_remaining = area_total - area_shorter_total\n\n    # Calculate the length of the trapezium that is shorter than the distance\n    length_shorter = 0.5 * distance * (height / 2)\n\n    # Calculate the length of the remaining area of the trapezium\n    length_remaining = 0.5 * area_remaining / area_shorter_total\n\n    # Calculate the length of the trapezium that is shorter than the height\n    length_shorter_total = length_shorter + length_remaining\n\n    # Calculate the length of the trapezium that is taller than the height\n    length_taller = 0.5 * area_taller / area_shorter_total\n\n    # Calculate the length of the trapezium that is shorter than the distance\n    length_shorter_taller = 0.5 * distance * (height / 2) + length_shorter_total\n\n    # Calculate the length of the trapezium that is longer than the distance\n    length_longer = 0.5 * area_remaining / area_shorter_total\n\n    # Calculate the length of the trapezium that is longer than the height\n    length_longer_total = 0.5 * distance * (height / 2) - length_longer + length_shorter_taller\n\n    # Determine which length is closer to the base of the trapezium\n    length_trapezium = min(length_shorter, length_shorter_total, length_taller, length_longer, length_longer_total)\n\n    return length_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    trapezium_length = (2 * area) ** 0.5\n    left_half_length = (base1 + base2) / 2\n    right_half_length = height - left_half_length\n    \n    if left_half_length > right_half_length:\n        median = max(left_half_length, right_half_length)\n    else:\n        median = max(right_half_length, left_half_length)\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2 + height)\n\n    # Calculate the length of the base of each half\n    half1_length = trapezium_length / 2\n    half2_length = trapezium_length - half1_length\n\n    # Sort the lengths of each half in ascending order\n    half1_sorted = sorted(half1_length)\n    half2_sorted = sorted(half2_length)\n\n    # Determine which half has the larger length\n    if half1_sorted[-1] > half2_sorted[-1]:\n        largest_half = half1_sorted\n    else:\n        largest_half = half2_sorted\n\n    # Calculate the median length of the trapezium\n    median_length = largest_half[len(largest_half) // 2]\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of each half of the trapezium\n    half1 = base1 * height / 2\n    half2 = base2 * height / 2\n    \n    # Calculate the length of the trapezium\n    total_length = base1 + base2 + height\n    \n    # Sort the two halves and the trapezium\n    sorted_list = sorted([half1, half2, total_length])\n    \n    # Determine the median by taking the middle element\n    median = sorted_list[1]\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium using the formula A = base1 * height + base2 * height\n    A = base1 * height + base2 * height\n    \n    # Calculate the length of the trapezium using the formula L = 0.5 * base1 * height\n    L = 0.5 * base1 * height\n    \n    # Calculate the difference between the area and the length of the trapezium\n    diff = A - L\n    \n    # If the difference is positive, the median is at the bottom of the trapezium\n    if diff > 0:\n        # Calculate the top of the trapezium using the formula B = base2 * height\n        B = base2 * height\n        \n        # Calculate the height of the trapezium using the formula h = 0.5 * (B - A)\n        h = 0.5 * (B - A)\n        \n        # Calculate the median of the trapezium using the formula M = 0.5 * height + 0.5 * B - 0.5 * L\n        M = 0.5 * height + 0.5 * B - 0.5 * L\n        \n        return M\n    \n    # If the difference is negative, the median is at the top of the trapezium\n    else:\n        # Calculate the bottom of the trapezium using the formula C = base1 * height\n        C = base1 * height\n        \n        # Calculate the height of the trapezium using the formula h = 0.5 * (C - A)\n        h = 0.5 * (C - A)\n        \n        # Calculate the median of the trapezium using the formula M = 0.5 * height + 0.5 * C - 0.5 * L\n        M = 0.5 * height + 0.5 * C - 0.5 * L\n        \n        return M"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the length of each half of the trapezium\n    half_length1 = area / (base1 + base2)\n    half_length2 = area / (2 * base1)\n\n    # Find the median length of the two halves\n    median1 = 0.5 * (half_length1 + half_length2)\n    median2 = 0.5 * (half_length1 - half_length2)\n\n    # Find the median length of the trapezium\n    median = 0.5 * (median1 + median2)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculating the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculating the length of the trapezium\n    trapezium_length = (area / 2) ** 0.5\n\n    # Sorting the three sides of the trapezium\n    sorted_sides = sorted([base1, base2, height])\n\n    # Calculating the median\n    median = 0.5 * (sorted_sides[0] + sorted_sides[1])\n\n    # Returning the median\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_area = (base1 + base2) * height / 2\n    trapezium_perimeter = base1 + base2 + math.sqrt(math.pow(base1, 2) + math.pow(base2, 2))\n    median_length = (trapezium_area - trapezium_perimeter) / 2\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # loop through the array and compare each element with the number\n    for element in arr:\n        if element > number:\n            # if the element is greater than the number, return True\n            return True\n    # if the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    for i in arr:\n        if number > i:\n            print(f\"The number {number} is greater than {i}.\")\n            break\n    else:\n        print(f\"The number {number} is not greater than any element of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            print(True)\n            break\n        elif i == number:\n            print(False)\n            break\n    else:\n        print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(f\"The number {number} is greater than {num}.\")\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than = False\n    for element in arr:\n        if element > number:\n            greater_than = True\n            break\n    return greater_than"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    # Define the regular expression pattern for matching the required pattern\n    pattern = r'a(b*)'\n\n    # Use the regular expression module to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If no matches are found, return None\n    if not matches:\n        return None\n\n    # If a match is found, extract the groups from the match and return them as a tuple\n    else:\n        groups = matches[0]\n        return tuple(groups.split('b'))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,}b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.+b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a(b*)\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the number to a string\n    num = str(n)\n    # Extract the last character of the string\n    last = num[-1]\n    # Convert the last character to an integer and return it\n    return int(last)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_num = n % 10\n    return last_num"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # Extract the last digit of the number using integer division\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # converting the input number to string\n    num_str = str(n)\n    # getting the length of the string\n    length = len(num_str)\n    # extracting the last digit of the number\n    last_digit = num_str[length-1]\n    # returning the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # convert the given number to string\n    num_str = str(n)\n    # convert the string to list\n    num_list = list(num_str)\n    # get the last element of the list\n    last_digit = num_list[-1]\n    # return the last digit\n    return int(last_digit)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # converting the number to a string\n    num = str(n)\n    # accessing the last character of the string\n    last_char = num[-1]\n    # converting the last character to an integer\n    last_digit = int(last_char)\n    # returning the last digit\n    return last_digit"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list with the negative numbers from the original list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers in the input list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the new string\n    new_str = \"\"\n    \n    # loop through each character in the input string\n    for char in str1:\n        # if the character is odd, add it to the new string\n        if char % 2 == 1:\n            new_str += char\n    \n    # return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(string):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_characters = [char for char in string if ord(char) % 2!= 0]\n    return ''.join(odd_characters)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the even characters\n    even_str = \"\"\n    # loop through each character in the input string\n    for char in str1:\n        # check if the character is odd\n        if ord(char) % 2 == 0:\n            # if it is, add it to the even_str\n            even_str += char\n    # return the even_str as the output\n    return even_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if char.isdigit() or char =='':\n            pass\n        elif int(char) % 2 == 1:\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str\n\nprint(remove_odd(\"hello world\"))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function removes odd characters from a given string.\n    \"\"\"\n    return ''.join([c for c in str1 if c.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to hold the new string\n    new_str = ''\n    # Iterate through each character in the original string\n    for char in str1:\n        # If the character is odd, add it to the new string\n        if char % 2 == 1:\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    bidirectional_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                bidirectional_pairs += 1\n    return bidirectional_pairs"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]) or tuple(test_list[j]) == tuple(test_list[i]):\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if (test_list[i], test_list[j]) in test_list:\n                    if (test_list[j], test_list[i]) in test_list:\n                        bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        if isinstance(i, int):\n            result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n\n    Args:\n        L: a list of integers, where all the integers are greater than 0\n\n    Returns:\n        an integer, which is the sum of all the integers in the list L\n    \"\"\"\n    result = 0\n    for x in L:\n        result += x\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    # Iterate over the list of integers\n    for num in L:\n        # Check if the number is multiple of 5\n        if num % 5 == 0:\n            # If it is, add it to the sum\n            sum += num\n    # Return the sum\n    return sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        single_num *= num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to hold the single integer\n    single = 0\n    \n    # Iterate over each element in the list\n    for element in L:\n        # Check if the element is divisible by 3\n        if element % 3 == 0:\n            # If it is, add it to the single integer\n            single += element\n    \n    # Return the single integer\n    return single"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define a regular expression pattern for matching adverbs\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n\n    # Search the sentence for the pattern and return a list of positions\n    positions = re.findall(pattern, text)\n\n    # If there are no adverbs, return an empty list\n    if not positions:\n        return []\n\n    # Extract the first adverb and its position from the list of positions\n    adverb = text[positions[0]:positions[0]+len(positions[0])]\n    pos = positions[0]\n\n    # Return a list containing the adverb and its position\n    return [adverb, pos]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern for finding adverbs\n    pattern = r'\\b(a|an|the)\\b\\s*(adverb)\\b'\n    # Find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # If there are no matches, return None\n    if not matches:\n        return None\n    # Extract the adverbs and their positions from the matches list\n    adverbs = []\n    for match in matches:\n        adverb = match[0]\n        position = text.index(match[0])\n        adverbs.append((adverb, position))\n    # Return a tuple of the adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern for finding adverbs\n    pattern = r'\\b\\w*[a-zA-Z]+\\w*ed\\b'\n    # Find all the matches in the given text\n    matches = re.findall(pattern, text)\n    # If there is at least one match, print the adverb and its position in the sentence\n    if matches:\n        print(f\"The first adverb is: {matches[0]}\")\n        print(f\"The position of the adverb in the sentence is: {matches[0].start()}\")\n    # Otherwise, print that there is no adverb in the sentence\n    else:\n        print(\"There is no adverb in the sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the given sentence into words\n    words = text.split()\n    \n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n    \n    # Loop through each word in the list of words\n    for i in range(len(words)):\n        # If the word is an adverb, check if it is the first adverb in the sentence\n        if re.match(r'\\w+ing$', words[i]):\n            # If it is the first adverb, append its position to the list of adverb positions\n            if len(adverb_positions) == 0:\n                adverb_positions.append(i)\n    \n    # If there are no adverbs in the sentence, return None\n    if len(adverb_positions) == 0:\n        return None\n    \n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the sentence into words\n    words = re.findall(r'\\w+', text)\n    # Initialize an empty list to store adverbs and their positions\n    adverbs = []\n    # Loop through each word in the sentence\n    for i in range(len(words)):\n        # Check if the word is an adverb\n        if re.search(r'\\b(?:a|an|the)\\b', words[i], re.IGNORECASE):\n            # If it is, add it to the adverbs list and its position to the adverbs list\n            adverbs.append((words[i], i))\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression pattern for adverbs\n    pattern = r'\\b(also|also|finally|finally|only|only|although|although|nevertheless|nevertheless|but|but|when|when|where|where|how|how|why|why|why|whereas|whereas|whether|whether|if|if|since|since|as|as|until|until|although|yet|yet|although|also|further|further|then|then|however|however|thus|thus|therefore|therefore|although|how|when|if|since|as|until|yet|although|too|too)\\b'\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Check if there are any matches\n    if not matches:\n        return 'No adverbs found in the text.'\n    # Sort the matches based on their position in the text\n    sorted_matches = sorted(matches, key=lambda x: text.find(x))\n    # Print the first match and its position in the text\n    print(f\"The first adverb is '{sorted_matches[0]}' and its position in the text is {text.find(sorted_matches[0])+1}.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regex pattern to match adverbs\n    pattern = r'\\b(?:adverb)\\b'\n    \n    # Find all occurrences of adverbs in the sentence\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty dictionary to store adverb positions\n    adverb_positions = {}\n    \n    # Iterate over all matches and store their positions in the dictionary\n    for i, match in enumerate(matches):\n        adverb_positions[match] = i\n    \n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b(a|an|the|at|on|in|over|under|by|with|about|above|below|near|behind|ahead|between|among|about|to|during|before|after|against|for|against|against|from|through|throughout|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for|against|against|from|through|throughout|during|before|after|against|for|through|throughout|during|before|after|against|for|to|during|before|after|against|for"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern for adverbs\n    pattern = r'\\b\\w*adv\\w*+\\b'\n    \n    # Use the re.findall() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Create a dictionary to store the adverb and its positions\n    adverbs_positions = {}\n    \n    # Iterate through all the matches and add them to the dictionary\n    for i, match in enumerate(matches):\n        adverb = match.lower()\n        positions = [i]\n        adverbs_positions[adverb] = positions\n    \n    # Return the dictionary of adverbs and their positions\n    return adverbs_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(also|although|altho|as|at|before|between|but|by|concerning|despite|do|during|except|for|from|hence|in|inside|into|like|moreover|mostly|most|neither|nor|notwithstanding|of|off|on|onto|otherwise|past|per|plus|regarding|since|than|through|throughout|to|toward|under|until|up|upon|versus|with|within|without)\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print('Adverbs found:')\n        for index, match in enumerate(matches):\n            print(f'{index + 1}. {match}')\n    else:\n        print('No adverbs found.')"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l * l * l)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    print(f\"The surface area of a cube of length {l} is {surface_area} square units.\")"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l*l*l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i', [num for num in nums if num > 0])\n    if len(pos_nums) == 0:\n        return 0\n    else:\n        return len(pos_nums) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i')\n    negative = array('i')\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n        else:\n            negative.append(num)\n    if len(positive) == 0:\n        return 0.0\n    positive_sum = sum(positive)\n    negative_sum = sum(negative)\n    return positive_sum / negative_sum"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    if neg_count == 0:\n        return 0\n    else:\n        return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums) * 100"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n\n    Args:\n    nums (list): List of integers\n\n    Returns:\n    float: Ratio of positive numbers in the array\n\n    \"\"\"\n    # Convert the array to an array of integers\n    arr = array('i', nums)\n\n    # Count the number of positive numbers\n    pos_count = arr.count(1)\n\n    # Calculate the ratio of positive numbers\n    if pos_count == 0:\n        return 0.0\n    else:\n        return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_arr = array('i', nums)\n    count = 0\n    total = 0\n    \n    for num in num_arr:\n        if num > 0:\n            count += 1\n        total += 1\n    \n    pos_ratio = count / total if total > 0 else 0\n    \n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    \n    return pos_count, neg_count, zero_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_sum = 0\n    total_numbers = len(nums)\n\n    for num in nums:\n        if num > 0:\n            positive_sum += num\n\n    if total_numbers == 0:\n        return 0\n    else:\n        return positive_sum/total_numbers"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    total_count = len(nums)\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n\n    return pos_count / total_count"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0] # assuming the first element is the largest negative number\n    for i in range(1,len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest_neg:\n            largest_neg = list1[i]\n    return largest_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    max_neg = float('-inf') # initialize the maximum negative number to negative infinity\n    \n    for num in list1:\n        if num < 0: # if the current number is negative\n            if num > max_neg: # if the current number is greater than the current maximum negative number\n                max_neg = num # update the maximum negative number\n    \n    return max_neg # return the maximum negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < 0:\n            largest = max(largest, num)\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j+K <= len(test_list[i]):\n                del test_list[i][j:j+K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = tup[:K]\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(item[i:i+K]) for item in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i, tup in enumerate(test_list):\n        test_list[i] = tup[:K] + tup[K:]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        # trim each tuple by k in the given tuple list\n        trimmed_tup = tup[:K]\n        result.append(trimmed_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if i < j:\n                test_list[i][j] = None\n            else:\n                test_list[i][j] = None\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Parameters:\n    test_list (list): A list of tuples to be trimmed.\n    K (int): The number of elements to be removed from each tuple.\n\n    Returns:\n    A list of trimmed tuples.\n    \"\"\"\n    # Define an empty list to store the trimmed tuples\n    trimmed_list = []\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Define a list to store the trimmed elements\n        trimmed_tuple = []\n\n        # Loop through each element in the tuple\n        for elem in tup:\n            # Add the kth element to the new tuple\n            if len(trimmed_tuple) < K:\n                trimmed_tuple.append(elem)\n            else:\n                break\n\n        # Add the trimmed tuple to the list of trimmed tuples\n        trimmed_list.append(tuple(trimmed_tuple))\n\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = []\n        for elem in tup:\n            new_tup.append(elem)\n        result.append(tuple(new_tup[K:]))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for item in test_list:\n        new_list.append(item[:-K])\n    return new_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples should have the same length.\"\n    \n    # Calculate the multiplication of each element\n    result_tup = tuple(test_tup1[i]*test_tup2[i] for i in range(len(test_tup1)))\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_result = ()\n    for i in range(len(test_tup1)):\n        multiplication_result += (test_tup1[i] * test_tup2[i],)\n    return multiplication_result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuple lengths do not match.')\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the multiplication of corresponding elements of the two tuples.\n    '''\n    # Initialize an empty list to store the multiplication of elements\n    multiplication_list = []\n    # Check if both tuples have the same length\n    if len(test_tup1) == len(test_tup2):\n        # Loop through each index of the tuples\n        for i in range(len(test_tup1)):\n            # Multiply the elements of the tuples at the current index and append the result to the multiplication_list\n            multiplication_list.append(test_tup1[i] * test_tup2[i])\n        # Return the multiplication_list as a tuple\n        return tuple(multiplication_list)\n    else:\n        # If the tuples have different lengths, raise an error message\n        raise ValueError('Both tuples must have the same length.')"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Converting the tuple to a set to remove duplicates.\n    tup_set = set(tup)\n\n    # Creating a dictionary to store the count of each element in the tuple.\n    count_dict = {}\n\n    # Using the Counter function from the collections module to count the occurrences of each element in the tuple.\n    count_dict = Counter(tup_set)\n\n    # Counting the occurrences of each element in the list.\n    count_list = []\n    for i in lst:\n        count = count_dict[i] if i in count_dict else 0\n        count_list.append(count)\n\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    common_elements = set(lst).intersection(count_dict.keys())\n    count = Counter({x:count_dict[x] for x in common_elements})\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    for i in lst: \n        if i in count: \n            count[i] += 1 \n        else: \n            count[i] = 1 \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a dictionary to count the occurrence of each element in the list\n    count_dict = {}\n    for item in lst: \n        if item in count_dict: \n            count_dict[item] += 1 \n        else: \n            count_dict[item] = 1\n    \n    # Count the occurrence of each element in the tuple\n    count_tup = Counter(tup)\n    \n    # Find the common elements between the two dictionaries\n    common_elements = set(count_dict.keys()) & set(count_tup.keys())\n    \n    # Create a dictionary to store the count of common elements and their counts in both the tuple and list\n    common_count_dict = {}\n    for item in common_elements: \n        common_count_dict[item] = count_dict[item] + count_tup[item]\n    \n    return common_count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # convert tuple to list\n    tup_list = list(tup)\n\n    # count the occurrence of each element in the list\n    count = Counter(lst)\n\n    # initialize an empty dictionary\n    result = {}\n\n    # iterate over the count dictionary and add the count to the dictionary for each element in the tuple\n    for elem in tup_list:\n        if elem in count:\n            result[elem] = count[elem]\n\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Count the occurrence of all elements of list in a tuple using Counter function\n    count = Counter(tup)\n    # Get the elements of the list from which the count has to be obtained\n    lst_elements = set(lst)\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    # Iterate through the list and count the occurrence of each element in the tuple\n    for element in lst_elements:\n        if element in count:\n            count_dict[element] = count[element]\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input, and counts the occurrence of all elements of list in the tuple.\n    It returns a dictionary where the keys are the elements of the list and the values are their respective counts in the tuple.\n    '''\n    count_dict = {}\n    for element in lst:\n        count = tup.count(element)\n        count_dict[element] = count\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # converting the list to a set to remove duplicates\n    set_lst = set(lst) \n    # creating a dictionary to store the count of each element in the list\n    count_dict = {} \n    # iterating over each element in the tuple and counting its occurrence in the list\n    for elem in tup: \n        if elem in set_lst: \n            count_dict[elem] = count_dict.get(elem, 0) + 1 \n    # returning the dictionary with the counts of each element in the list\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for key, value in count.items():\n        if key in lst:\n            result[key] = value\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count:\n            result.append((i, count[i]))\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 1, 2, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300]\n    sum_perrin = sum(perrin_numbers[:n])\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum = 0\n    p = 1\n    while p <= n:\n        sum += p\n        p += 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    sum_perrin_numbers = 0\n    for num in perrin_numbers:\n        sum_perrin_numbers += num\n    return sum_perrin_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum_perrin = 0 \n    for i in range(n+1): \n        sum_perrin += (3*i**2) - (2*i) \n    return sum_perrin "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 0\n    sum_p = 0\n    for i in range(1, n+1):\n        p = i + 1\n        sum_p += p\n    return sum_p\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = [1,2,3,4,5,6,7,8,9]\n    sum_p = 0\n    for i in range(n):\n        sum_p += p[i]\n    return sum_p"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 0\n    for i in range(1, n+1):\n        p += i*(i+1)*(i+2) // 6\n    return p\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin = 1\n    sum_perrin = 0\n    while perrin <= n:\n        sum_perrin += perrin\n        perrin += 1\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    This function calculates the sum of Perrin numbers.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop from 1 to n\n    for i in range(1, n+1):\n        # Calculate the Perrin number and add to the sum\n        perrin = (i * (i + 1)) // 2\n        sum += perrin\n    # Return the final sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size as input and returns a list of strings of the specified size.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        extracted_list.append(str_list[i][:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Initialize an empty list to store the extracted strings\n    extracted_strings = []\n\n    # Loop through the list of strings\n    for i in range(len(str_list)):\n        # Check if the current string length is greater than or equal to the specified size\n        if len(str_list[i]) >= size:\n            # Append the extracted string to the extracted strings list\n            extracted_strings.append(str_list[i][:size])\n        else:\n            # If the current string is less than the specified size, append the entire string to the extracted strings list\n            extracted_strings.append(str_list[i])\n\n    # Return the extracted strings list\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    This function takes a list of strings and an integer l as input and returns a list of\n    strings of length l extracted from the input list. If l is greater than the length of the\n    input list, an empty list is returned.\n    \"\"\"\n    if l > len(str_list):\n        return []\n    else:\n        return [str_list[i][:l] for i in range(len(str_list)) if i < len(str_list) - l + 1]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(' ', l[i].find(' ') + 1)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(lst, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    if size > len(lst):\n        raise ValueError(\"Size is greater than length of list\")\n    return [s[:size] for s in lst]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n\n    Args:\n        str_list (list): List of string values.\n        size (int): Size of the string to extract.\n\n    Returns:\n        list: List of extracted string values.\n    \"\"\"\n    extracted_strings = []\n\n    for string in str_list:\n        extracted_strings.append(string[:size])\n\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:l] for s in l]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, length):\n    \"\"\"\n    This function takes a list of strings and a desired length for each string to extract. \n    It returns a new list containing only the strings of the desired length.\n    \"\"\"\n    new_list = []\n    for s in str_list:\n        if len(s) == length:\n            new_list.append(s)\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and returns a new list of strings with the specified size.\n    '''\n    new_list = []\n    for i in range(len(str_list)):\n        new_list.append(str_list[i][:size])\n    return new_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text) # Remove multiple whitespaces\n    text = re.sub(r'\\s', '', text) # Remove single whitespaces\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(' ', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Define a regular expression pattern to match whitespace characters\n    pattern = re.compile(r'\\s+')\n    # Use the pattern to split the string into words\n    words = pattern.split(text1)\n    # Join the words back into a string with no whitespaces\n    return ''.join(words)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = actual_cost/sale_amount\n    loss_amount = 0\n    if loss_percentage >= 0.05:\n        loss_amount = sale_amount * 0.1\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = (sale_amount / actual_cost) * 100\n    if loss_percentage > 50:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = 0.1\n    if actual_cost > sale_amount:\n        loss_amount = (actual_cost - sale_amount) * loss_percent\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # calculate the sum of even factors of n\n    even_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors += i\n    if n % 2 == 0:\n        even_factors += n\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n            if n // i!= i:\n                sum += n // i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    This function takes an integer n as input and returns the sum of even factors of the number.\n    '''\n    # Initialize the sum variable to zero \n    sum = 0 \n    # Loop through all even factors from 2 to sqrt(n) \n    for i in range(2, int(math.sqrt(n))+1): \n        # If the current factor is less than or equal to the square root of n, add it to the sum \n        if n % i == 0 and i % 2 == 0: \n            sum += i \n    # Return the sum of even factors \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer as input and returns the sum of even factors of the number.\n    '''\n\n    # initializing the sum variable\n    sum = 0\n\n    # iterating over all the factors of the given number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            # checking if the factor is even\n            if i % 2 == 0:\n                # adding the even factors to the sum\n                sum += i\n    \n    # returning the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum of even factors to 0\n    evenSum = 0\n    \n    # loop through all even numbers less than or equal to sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1, 2) : \n        # check if i is a factor of n\n        if n % i == 0 : \n            # if so, add it to the even sum\n            evenSum += i\n            \n    # return the sum of even factors\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n) : \n\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Initialize a variable to store the sum of even factors \n    sum = 0 \n\n    # Iterate from 2 to sqrt(n) \n    for i in range(2, int(math.sqrt(n))+1) : \n\n        # If n is divisible by i, add i to the sum \n        if n % i == 0 : \n            sum += i \n\n    # Return the sum of even factors \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenSum = 0\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if i is even and a factor of n\n        if i % 2 == 0 and n % i == 0:\n            # add i to the evenSum\n            evenSum += i\n    # return the evenSum\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactorsSum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i % 2 == 0:\n            evenFactorsSum += i\n    if n > 1:\n        evenFactorsSum += n\n    return evenFactorsSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = [i for i in range(2, int(math.sqrt(n))+1) if n % i == 0]\n    return sum(even_factors)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[A-Za-z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes in a string of text as input and returns a boolean value indicating whether\n    the string contains a word that contains the letter 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b')\n    return bool(pattern.search(text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\s+[a-zA-Z]+\\b\\s+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    # Find all words containing 'z' and return a list of those words\n    words_with_z = re.findall(r'\\b\\w+\\b', text)\n    return words_with_z"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 2 == 0:\n        if monthnum2 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n\nprint(check_monthnumb_number(2)) # Output: True\nprint(check_monthnumb_number(13)) # Output: False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"The given month number contains 31 days.\"\n    elif monthnum2 in [4, 6, 9, 11]:\n        return \"The given month number contains 30 days.\"\n    else:\n        return \"The given month number does not contain 31 or 30 days.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if 1 <= monthnum2 <= 12:\n        if monthnum2 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    if 1 <= monthnum2 <= 12:\n        if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n            print(\"31 days in this month\")\n        elif monthnum2 in [4, 6, 9, 11]:\n            print(\"30 days in this month\")\n        else:\n            print(\"28 or 29 days in this month\")\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 2:\n        return 29\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return 30\n    else:\n        return 31"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    days_in_month = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    if monthnum in days_in_month:\n        if days_in_month[monthnum] == 31:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    elif monthnum in ['04', '06', '09', '11']:\n        return False\n    else:\n        raise ValueError('Invalid month number')"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 <= 0 or monthnum2 > 12:\n        return False\n\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1] # use slicing to reverse the string\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list of sublists and returns the sublist \n    having the minimum length.\n    '''\n    min_len = len(lst[0]) # initialize minimum length to the length of the first sublist\n    min_sublist = lst[0] # initialize minimum sublist to the first sublist\n    for i in range(1, len(lst)): # loop through the remaining sublists\n        if len(lst[i]) < min_len: # check if the current sublist has a smaller length\n            min_len = len(lst[i]) # update minimum length if necessary\n            min_sublist = lst[i] # update minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list as input and returns the sublist with the minimum length.\n    \"\"\"\n    # Initialize the variable to store the minimum length\n    min_len = float('inf')\n\n    # Initialize the variable to store the minimum sublist\n    min_lst = []\n\n    # Loop through each sublist in the list\n    for i in range(len(lst)):\n        # Initialize the length of the sublist as the length of the list\n        sublist_len = len(lst)\n\n        # Loop through each element of the sublist\n        for j in range(sublist_len):\n            # Decrement the length of the sublist by 1\n            sublist_len -= 1\n\n            # If the current sublist is the minimum length, update the variables accordingly\n            if sublist_len == min_len:\n                min_lst = lst[i:j+1]\n                break\n\n        # If the current sublist is shorter than the current minimum length, update the variables accordingly\n        if sublist_len < min_len:\n            min_len = sublist_len\n            min_lst = lst[i:j+1]\n\n    # Return the minimum sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    # sort the list in ascending order based on the length of each sublist\n    lst = sorted(lst, key=len)\n    # find the sublist with minimum length\n    min_length = lst[0][-1]\n    min_sublist = lst[0]\n    # loop through the sorted list and find the sublist with minimum length\n    for i in range(1, len(lst)):\n        if lst[i][-1] == min_length:\n            min_sublist = lst[i]\n        else:\n            break\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf') \n    min_sub = [] \n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)): \n            if len(lst[i:j+1]) < min_len: \n                min_len = len(lst[i:j+1]) \n                min_sub = lst[i:j+1] \n    return min_sub"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n            \n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function removes uppercase substrings from a given string.\n    \"\"\"\n    pattern = r'[A-Z]+'\n    result = re.sub(pattern, '', string)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[A-Z]+', '', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # define the regular expression pattern for uppercase substrings\n    pattern = r'\\b[A-Z][A-Z0-9]*\\b'\n    # use re.findall() to find all the uppercase substrings in the string\n    matches = re.findall(pattern, str1)\n    # remove all the uppercase substrings from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings in the given string\n    uppercase_substrings = re.findall(r'[A-Z]', str1)\n    \n    # Remove all uppercase substrings from the original string\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # split the string into a list of words\n    words = str1.split()\n    # create a list of uppercase substrings\n    uppercase_words = [word for word in words if re.search(r'[A-Z]', word)]\n    # join the list of uppercase substrings back into a string\n    result =''.join(uppercase_words)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function takes a string as input and returns the same string with uppercase substrings removed.\n    \"\"\"\n    pattern = r'\\b[A-Z]+\\b'\n    string = re.sub(pattern, '', string)\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # convert string to lowercase\n    str1 = str1.lower()\n    # define regex pattern for uppercase substrings\n    pattern = r'\\b[A-Z]\\w*\\b'\n    # find all uppercase substrings in the string\n    matches = re.findall(pattern, str1)\n    # remove all matches from the string\n    str1 = re.sub(pattern, '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Replace all uppercase substrings with lowercase\n    str1 = re.sub('([A-Z])', lambda x: x.group(0).lower(), str1)\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for uppercase substrings\n    pattern = r'\\b[A-Z]\\w+\\b'\n\n    # Use the re.findall() method to find all uppercase substrings in the string\n    matches = re.findall(pattern, str1)\n\n    # Loop through all matches and remove them from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst: \n        yield sublist[0]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)): \n        lst[i] = lst[i][0]\n    return lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        res.append(sublist[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list with the \n    first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in string:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # To store the combinations\n    combinations = []\n\n    # Loop through each element in the list\n    for i in range(len(list1)):\n        # Initialize a list to store the remaining elements of the list\n        remaining_elements = list(list1[:i] + list1[i+1:])\n        # Loop through each remaining element to form a combination\n        for j in range(1, len(remaining_elements)+1):\n            # Append the combination to the list of combinations\n            combinations.append(remaining_elements[:j])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            if i > 0:\n                result.append(list1[i])\n            rest_list = list1[:i] + list1[i+1:]\n            combinations = combinations_list(rest_list)\n            for comb in combinations:\n                if i == 0:\n                    result.append([list1[0]])\n                else:\n                    result.append([list1[0]] + comb)\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize empty list to store combinations\n    comb_list = []\n    \n    # loop over all possible indices\n    for i in range(len(list1)):\n        # initialize an empty list to store the current combination\n        cur_comb = []\n        \n        # loop over all possible indices from i to the end of the list\n        for j in range(i, len(list1)):\n            # add the current element to the combination\n            cur_comb.append(list1[j])\n            \n            # if all elements have been added, add the combination to the list\n            if j == len(list1)-1:\n                comb_list.append(cur_comb)\n    \n    # return the list of combinations\n    return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Initialize a set to store the elements of the list that have already been used\n    used_elements = set()\n\n    # Iterate over the elements of the list\n    for i in range(len(list1)):\n        # If the element is not already in the used_elements set, add it to the list of combinations and its complement to the used_elements set\n        if list1[i] not in used_elements:\n            combinations.append(list1[i])\n            used_elements.add(list1[i])\n            if list1[i] in used_elements:\n                used_elements.remove(list1[i])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            sub_list = list1[j:j+i]\n            result.append(tuple(sub_list))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create an empty list to store the combinations\n    comb_list = []\n    # Loop through the original list\n    for i in range(len(list1)):\n        # Create a new list to store the elements in the combination\n        comb = []\n        # Loop through the remaining elements of the original list\n        for j in range(i+1, len(list1)+1):\n            # Append the current element to the combination list\n            comb.append(list1[j-1])\n            # Check if the combination is valid\n            if sum(comb) == 0:\n                # If it is valid, append the combination to the final list\n                comb_list.append(comb)\n    # Return the final list of combinations\n    return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n\n    for num in arr:\n        curr_product = max(curr_product * num, num)\n        max_product = max(max_product, curr_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n    \n    for num in arr:\n        current_product *= num\n        max_ending_here = max(max_ending_here * num, num)\n        max_product = max(max_product, max_ending_here)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    max_subarray = []\n\n    for num in arr:\n        current_product *= num\n        if current_product < 0:\n            current_product = 1\n\n        if current_product > max_product:\n            max_product = current_product\n            max_subarray = [num]\n        elif current_product == max_product:\n            max_subarray.append(num)\n\n    return max_subarray"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    max_product = max_ending_here\n    min_ending_here = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return max_product, max_subarray_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            current_product = arr[i]\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # convert the dictionary into a list of tuples\n    list_of_tuples = list(dict.items())\n    \n    # check if all the values in the list are same\n    for i in range(len(list_of_tuples)):\n        if list_of_tuples[i][1]!= list_of_tuples[0][1]:\n            return False\n    \n    # if all the values are same, then return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if all keys are present in the dictionary\n    if len(set(dict.keys()) - set(dict.values()))!= 0:\n        return False\n    \n    # Check if all values are same\n    for value in dict.values():\n        if value!= dict[n]:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and a value n as inputs and returns True if all values in the dictionary are equal to n, otherwise it returns False.\n    '''\n    values = list(dict.values())\n    for i in range(len(values)):\n        if values[i]!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 1\n    for value in dict.values():\n        if value!= dict[list(dict.keys())[0]]:\n            count += 1\n            if count == n:\n                return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= dict[list(dict.keys())[0]]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if len(set(dict[i])) == 1:\n            return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # check if the dictionary has only one key\n    if len(dict.keys()) == 1:\n        return True\n    # check if all values are same\n    for i in range(len(dict.values())):\n        if dict.values()[i]!= dict.values()[0]:\n            return False\n    # all values are same in the dictionary\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= 1:\n        return False\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    for key in dict1:\n        if not dict1[key]:\n            del dict1[key]"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    for key, value in dict1.items():\n        if value == \"\":\n            del dict1[key]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    def max_subsequence(arr):\n        max_so_far = max_ending_here = float('-inf')\n        for i in range(len(arr)):\n            if arr[i] > max_ending_here:\n                max_ending_here = arr[i]\n            else:\n                max_ending_here = max(max_ending_here * arr[i], max_ending_here)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    max_subsequence_length = len(arr)\n    max_subsequence_product = max_product_so_far = float('-inf')\n\n    for i in range(max_subsequence_length):\n        for j in range(i, max_subsequence_length):\n            subsequence = arr[i:j+1]\n            subsequence_product = 1\n            for num in subsequence:\n                subsequence_product *= num\n            max_subsequence_product = max(max_subsequence_product, subsequence_product)\n            max_subsequence_product = max(max_subsequence_product, subsequence_product)\n            max_product_so_far = max(max_product_so_far, max_subsequence_product)\n\n    return max_product_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # creating a 2D array to store the number of multiplications for each subarray\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    # initializing the base case as 1\n    dp[0][0] = 1\n\n    # filling the dp array\n    for i in range(1, n + 1):\n        for j in range(i):\n            if arr[i-1] > arr[j]:\n                # checking if the number to the left of i is greater than arr[j]\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j+1]) + arr[i-1]\n            else:\n                # if the number to the left of i is not greater than arr[j]\n                dp[i][j] = dp[i-1][j]\n\n    # finding the maximum product formed by multiplying numbers of an increasing subsequence of the array\n    ans = max(dp[n][0], dp[n][1])\n    return ans"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    n = len(arr)\n    if n == 1:\n        return 0\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(max_ending_here, arr[i])\n        min_ending_here = min(min_ending_here, arr[i])\n\n        product = max_ending_here * min_ending_here\n\n        if product > max_so_far:\n            max_so_far = product\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    dp = [[0]*n for _ in range(n)]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                dp[i][j] = dp[i-1][j] + arr[i]\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    max_product = float('-inf')\n    for i in range(n):\n        max_product = max(max_product, dp[n-1][i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) <= 1:\n        return 0\n\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize the maximum product and the current product as 1\n    max_product = 1\n    current_product = 1\n\n    # Loop through the array and update the current product and maximum product\n    for num in arr:\n        if num > 0:\n            current_product *= num\n        else:\n            current_product = 1\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    previous_product = 1\n    # Loop through the array\n    for i in range(len(arr)):\n        # Calculate the new product of the current number and the previous number\n        new_product = current_product * arr[i]\n        # Update the maximum product if necessary\n        if new_product > max_product:\n            max_product = new_product\n        # Update the current and previous products\n        current_product = previous_product\n        previous_product = new_product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            max_so_far = max(max_so_far, max_ending_here)\n        else:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n\n        if arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        else:\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here * arr[i], min_ending_here * arr[i])\n            min_ending_here = min(max_ending_here * arr[i], arr[i])\n            \n        max_product = max(max_product, max_ending_here)\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    def increasing_subsequence(arr, index, max_product):\n        if index == len(arr):\n            return max_product\n\n        if index == 0:\n            return increasing_subsequence(arr, index + 1, max_product)\n\n        if arr[index] > arr[index - 1]:\n            return increasing_subsequence(arr, index + 1, max_product)\n\n        return increasing_subsequence(arr, index + 1, max_product + arr[index] * arr[index - 1])\n\n    max_product = increasing_subsequence(arr, 0, 0)\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 0\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        for i in range(1, len(test_tup)-1):\n            test_tup[i] = test_tup[i] + test_tup[i-1] + test_tup[i+1]\n        return test_tup[-1]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i]+test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum of the first and second elements to 0\n    sum_1_2 = 0\n    \n    # Iterate over the tuple and add the pairwise sum of the elements to the sum_1_2 variable\n    for i in range(len(test_tup) - 1):\n        sum_1_2 += test_tup[i] + test_tup[i+1]\n        \n    # Return the sum_1_2 variable as the result\n    return sum_1_2"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[1:] + test_tup[:-1])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # get the length of the tuple\n    n = len(test_tup)\n    \n    # loop through the tuple\n    for i in range(1, n):\n        # add the current element and the next element to get the next element in the sequence\n        test_tup[i] += test_tup[i-1]\n    \n    # return the final modified tuple\n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Define a function to add pairwise\n    def pairwise_add(tup):\n        if len(tup) < 2:\n            return 0\n        else:\n            return tup[0] + pairwise_add(tup[1:])\n    \n    # Return the result of the pairwise addition\n    return pairwise_add(test_tup)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup) - 1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Define the length of the tuple\n    length = len(test_tup)\n    # Define the result variable\n    result = 0\n    # Loop through the tuple\n    for i in range(length - 1):\n        # Add the current element and the next element to the result\n        result += test_tup[i] + test_tup[i + 1]\n    # Return the result\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    neighboring_elements = []\n    for i in range(len(test_tup)-1):\n        neighboring_elements.append(test_tup[i] + test_tup[i+1])\n    return neighboring_elements"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        print(\"Tuple must have at least two elements.\")\n        return\n    \n    # initialize variables to store the sum of the first and second elements\n    pair_sum = test_tup[0] + test_tup[1]\n    \n    # loop through the remaining elements of the tuple\n    for i in range(2, len(test_tup)):\n        # add the current element to the sum of the previous two elements\n        pair_sum = pair_sum + test_tup[i]\n    \n    # print the result\n    print(pair_sum)"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array arr and an integer n, and returns the remainder of the product of the array modulo n.\n    '''\n    # initialize the result variable to 1\n    result = 1\n    # loop through the array\n    for i in arr:\n        # multiply the result by i and modulo n\n        result = (result * i) % n\n    # return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in two arrays and returns the product of their array multiplication modulo n.\n    '''\n    # Calculate the product of the arrays using array multiplication\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    \n    # Return the product modulo n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array of integers arr and an integer n as input and returns the remainder of the product of the array multiplication modulo n.\n    '''\n    # initialize variables for the product and remainder\n    product = 1\n    remainder = 0\n    \n    # iterate through the array and calculate the product\n    for i in arr:\n        product = (product * i) % n\n        \n    # return the remainder\n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = (result*i) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n\n    product = 1\n\n    for i in arr:\n        product = (product * i) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Find the product of the array using the modulo operator\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    # check if the list is empty\n    if not l:\n        return False\n\n    # get the first and last elements of the list\n    first = l[0]\n    last = l[-1]\n\n    # check if the list contains only one element\n    if first == last:\n        return True\n\n    # iterate over the rest of the list and check if the current element is consecutive to the previous one\n    for i in range(1, len(l)-1):\n        if l[i]!= last+1:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i+1] - l[i]!= 1: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]!= l[i]+1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    n = len(l)\n    if n == 0:\n        return False\n    \n    for i in range(n-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n            \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            print(\"The list contains consecutive numbers.\")\n            return True\n        else: \n            print(\"The list does not contain consecutive numbers.\")\n            return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i]+1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of all the elements in the first list\n    set1 = set(test_list1)\n    # Create a set of all the elements in the second list\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create an empty dictionary to store the count of each element in the first list\n    first_count = {}\n\n    # Iterate through the first list and count the occurrences of each element in the dictionary\n    for element in test_list1:\n        if element in first_count:\n            first_count[element] += 1\n        else:\n            first_count[element] = 1\n\n    # Create an empty dictionary to store the count of each element in the second list\n    second_count = {}\n\n    # Iterate through the second list and count the occurrences of each element in the dictionary\n    for element in test_list2:\n        if element in second_count:\n            second_count[element] += 1\n        else:\n            second_count[element] = 1\n\n    # Create an empty dictionary to store the common elements between the first and second list\n    common_count = {}\n\n    # Iterate through the common elements of the first and second lists and count their occurrences in the dictionary\n    for key in first_count:\n        if key in second_count and first_count[key] == second_count[key]:\n            if key in common_count:\n                common_count[key] += 1\n            else:\n                common_count[key] = 1\n\n    # Create an empty list to store the common elements between the two lists\n    common_list = []\n\n    # Iterate through the common elements dictionary and append the elements to the common list\n    for key in common_count:\n        common_list.append(key)\n\n    # Return the common list\n    return common_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # initialize an empty list to store the tuple intersection\n    result_list = []\n\n    # loop through both the list of tuples and check if each tuple is present in the other list\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            # if both tuples have the same elements, add it to the result list\n            if tup1 == tup2:\n                result_list.append(tup1)\n                break\n\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set to store unique elements from both lists\n    set_union = set(test_list1).union(set(test_list2))\n    # create a set to store intersection of elements in both lists\n    set_intersection = set(test_list1).intersection(set(test_list2))\n    # convert the set to a list and return it\n    return list(set_intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists of tuples as input and returns a new list of tuples containing the elements that are present in both lists irrespective of their order.\n    \"\"\"\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                result.append(tup1)\n                break\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Sort the input lists\n    test_list1 = sorted(test_list1)\n    test_list2 = sorted(test_list2)\n\n    # Initialize an empty set to store the intersection of tuples\n    result = set()\n\n    # Iterate through the sorted list1 and check if each tuple is present in the sorted list2\n    for item in test_list1:\n        if item in test_list2:\n            result.add(item)\n\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the tuple lists to sets to remove duplicates\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n    # Find the intersection of the sets\n    intersection = test_list1.intersection(test_list2)\n    # Convert the intersection back to a list\n    intersection_list = list(intersection)\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Sort the lists first\n    test_list1 = sorted(test_list1)\n    test_list2 = sorted(test_list2)\n\n    # Initialize an empty list to store the intersection of elements\n    result_list = []\n\n    # Iterate through both lists and check if the elements are equal\n    for item in test_list1:\n        if item in test_list2:\n            result_list.append(item)\n\n    # Return the sorted intersection list\n    return sorted(result_list)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Create a new string to store the modified string\n    modified_str = \"\"\n    # Loop through each character in the original string\n    for i in range(len(str1)):\n        # If the character is the specified character, replace it with the new character\n        if str1[i] == ch:\n            modified_str += newch\n        # If the character is not the specified character, append it to the modified string\n        else:\n            modified_str += str1[i]\n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = str1\n    result = result.replace(ch, newch)\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # initialize an empty string to store the modified string\n    modified_str = ''\n    # loop through each character in the original string\n    for char in str1:\n        # check if the character is equal to the replacement character\n        if char == ch:\n            # replace the character with the new character\n            modified_str += newch\n        # otherwise, add the character to the modified string as is\n        else:\n            modified_str += char\n    # return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces a given character in a string with another character.\n    \"\"\"\n    # create a new string with the same length as the original string\n    new_str = str1 * len(str1)\n    # iterate over each character in the string\n    for i in range(len(str1)):\n        # if the current character is the target character, replace it with the new character\n        if str1[i] == ch:\n            new_str = new_str[:i] + newch + new_str[i+1:]\n    # return the new string\n    return new_str"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert dictionary to a Counter object\n    c = Counter(dict1)\n    # sort the Counter object by values\n    sorted_c = sorted(c.items(), key=lambda x: x[1])\n    # convert sorted Counter object to a dictionary\n    sorted_dict = dict(sorted_c)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n    \n    # Sort the Counter object by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # Convert the sorted Counter object to a dictionary\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    c = Counter(dict1)\n\n    # Sort the Counter object by value in descending order\n    sorted_c = c.most_common()\n\n    # Create a dictionary from the sorted Counter object\n    sorted_dict = dict(sorted_c)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # create a Counter object from the input dictionary\n    counter = Counter(dict1)\n    # sort the Counter object by values in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # create a new dictionary from the sorted Counter object\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    c = Counter(dict1)\n    # sort the Counter object by values in descending order\n    sorted_c = sorted(c.items(), key=lambda x: x[1], reverse=True)\n    # create a new dictionary from the sorted Counter object\n    sorted_dict = dict(sorted_c)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = counter.most_common()\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_counter)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Find the largest and smallest values\n    largest = nums[len(nums)-1]\n    smallest = nums[0]\n    \n    # Return the sum of largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # sort the array in descending order\n    nums.sort(reverse=True)\n\n    # find the sum of the largest and smallest value\n    largest_sum = sum(nums)\n    smallest_sum = sum(nums[0])\n\n    # return the sum of the largest and smallest value\n    return largest_sum + smallest_sum\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # get the smallest and largest values in the array\n    smallest = max(nums)\n    largest = min(nums)\n\n    # add the smallest and largest values to get the sum\n    total = smallest + largest\n\n    return total"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n\n    # Find the largest and smallest values in the array\n    largest = nums[-1]\n    smallest = nums[0]\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # get the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # find the sum of the maximum and minimum values\n    sum_vals = max_val + min_val\n    \n    return sum_vals"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        print(\"Array must have at least 2 elements\")\n        return\n    \n    # Find the maximum value in the array\n    max_num = max(nums)\n    \n    # Find the minimum value in the array\n    min_num = min(nums)\n    \n    # Calculate the sum of the maximum and minimum values\n    sum_nums = max_num + min_num\n    \n    return sum_nums"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum value\n    max_val = max(nums)\n    # Find the minimum value\n    min_val = min(nums)\n    # Calculate the sum of the maximum and minimum values\n    result = max_val + min_val\n    # Return the result\n    return result"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Find the smallest and largest value in the array\n    smallest = float('inf')\n    largest = float('-inf')\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    # Return the sum of the largest and smallest value\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n\n    # Calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns the same string in lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Remove all lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    result = pattern.sub('', string)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]\\w+\\b' # find any lowercase word boundary followed by one or more word characters\n    substrings = re.findall(pattern, str1)\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function will remove lowercase substrings from the given string.\n    '''\n    lowercase = re.findall(r'[a-z]+', string)\n    return string.replace(' '.join(lowercase), '')"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings in the given string\n    lower_substrings = re.findall(r'[a-z]+', str1)\n    # Iterate through the substrings and remove them from the original string\n    for lower_substring in lower_substrings:\n        str1 = re.sub(lower_substring, '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # remove all lowercase substrings from the string\n    lowercase_substrings = re.findall(r'[a-z]+', string)\n    for substring in lowercase_substrings:\n        string = string.replace(substring, '')\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    This function takes a string as input and removes all the lowercase substrings present in it.\n    \"\"\"\n    # Using regex to match all lowercase substrings\n    substrings = re.findall(r'[a-z]+', string)\n    # Removing all lowercase substrings from the string\n    string = re.sub(r'\\b[a-z]+\\b', '', string)\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]\\w+\\b')\n    return re.sub(pattern, '', string).lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert string to lowercase and split into list of words\n    words = str1.lower().split()\n    \n    # Loop through each word and remove any substrings of lowercase characters\n    for i in range(len(words)):\n        # Check if word is all lowercase\n        if words[i].islower():\n            # Check if the next word is also all lowercase\n            if i+1 < len(words) and words[i+1].islower():\n                # Remove the two words if they are both lowercase\n                del words[i:i+2]\n                i = i-1 # decrement the loop counter to avoid deleting the last word\n            else:\n                # Remove the word if it is all lowercase\n                del words[i]\n    \n    # Join the words back into a string and return the result\n    return''.join(words)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    #convert the number to string\n    str_n = str(n)\n    #get the first character of the string\n    first_char = str_n[0]\n    #convert the first character to integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num = str(n)\n\n    # Check if the first character of the string is a digit\n    if num[0].isdigit():\n        # If the first character is a digit, return the digit\n        return int(num[0])\n    else:\n        # If the first character is not a digit, return -1\n        return -1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of the integer.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Extract the first digit of the given number and return it.\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Remove the decimal point and convert the number to integer\n    num = int(str(n).split('.')[0])\n    # Find the first digit of the number using modulus operator\n    first_digit = num % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Check if the given number is an integer\n    if type(n)!= int:\n        print(\"Error: Input must be an integer.\")\n        return\n\n    # Find the first digit of the given number\n    first_digit = n % 10\n\n    # Print the first digit of the given number\n    print(\"The first digit of\", n, \"is\", first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list of odd integers in the original list.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0: # checks if the number is odd using modulo operator\n            odd_list.append(num) # appends the odd number to the new list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and returns a new list containing only the odd integers from the input list.\n    '''\n    new_list = []\n    for num in list:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns the odd ones in the list.\n    \"\"\"\n    odd_list = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Loop through the list and return only the odd ones\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list: \n        if num % 2!= 0: \n            result.append(num) \n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_nums = sum(range(1, n+1))\n    return abs(sum_cubes - sum_nums)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # function to calculate the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        \"\"\"\n        Write a function to calculate the sum of cubes of the first n natural numbers.\n        \"\"\"\n        return sum([i**3 for i in range(1, n+1)])\n\n    # function to calculate the sum of the first n natural numbers\n    def sum_natural_numbers(n):\n        \"\"\"\n        Write a function to calculate the sum of the first n natural numbers.\n        \"\"\"\n        return sum(range(1, n+1))\n\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes_n = sum_cubes(n)\n\n    # calculate the sum of the first n natural numbers\n    sum_natural_numbers_n = sum_natural_numbers(n)\n\n    # return the difference between the two sums\n    return sum_cubes_n - sum_natural_numbers_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of the first n natural numbers\n    sum_of_first_n = sum(range(1, n+1))\n\n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n\n    # Calculate the difference between the two sums\n    difference_sum = abs(sum_of_first_n - sum_of_cubes)\n\n    # Return the difference between the two sums\n    return difference_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(num ** 3 for num in range(1, n+1))\n    sum_nums = sum(range(1, n+1))\n    return abs(sum_cubes - sum_nums)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initializing sum of cubes and sum of natural numbers\n    sum_cubes = 0\n    sum_natural = 0\n\n    # calculating sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n    \n    # calculating sum of natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n    \n    # calculating difference between sum of cubes and sum of natural numbers\n    diff = sum_cubes - sum_natural\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    # Function to calculate the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        return sum(i**3 for i in range(1, n+1))\n\n    # Function to calculate the sum of the first n natural numbers\n    def sum_numbers(n):\n        return sum(range(1, n+1))\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes_n = sum_cubes(n)\n\n    # Calculate the sum of the first n natural numbers\n    sum_n = sum_numbers(n)\n\n    # Calculate the difference between the two sums\n    difference = sum_cubes_n - sum_n\n\n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of natural numbers\n    sum_cubes = n * (n**2)\n    \n    # sum of natural numbers\n    sum_nums = n * n\n    \n    # difference between sum of cubes and sum of natural numbers\n    diff = sum_cubes - sum_nums\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n    \n    diff = sum_cubes - sum_natural\n    \n    return diff"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    # create a dictionary to store the frequency of each element in the list A\n    freq = {}\n    for i in A:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # calculate the xor value of each element in the list A\n    xor_value = 0\n    for i in A:\n        xor_value ^= i\n\n    # count the number of pairs whose xor value is odd\n    odd_count = 0\n    for i in range(N-1):\n        if xor_value % 2 == 1:\n            odd_count += 1\n        xor_value >>= 1\n\n    # return the count of odd pairs\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize count to zero\n    count = 0\n    \n    # Iterate through the array\n    for i in range(len(A)):\n        # Find the xor value of the current element and its complement\n        xor_value = A[i] ^ N\n        \n        # If the xor value is odd, increment the count\n        if xor_value % 2!= 0:\n            count += 1\n            \n    # Return the count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(string)):\n        # if the character is uppercase, convert it to lowercase\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # if the character is lowercase, convert it to uppercase\n        elif string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        new_string += chr(ord(char.lower()) ^ 32)\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        new_char = \"\"\n        if char.isupper():\n            new_char = char.lower()\n        elif char.islower():\n            new_char = char.upper()\n        else:\n            new_char = char\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char.upper())\n    return ''.join(result)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the two integers to lists of digits\n    num1_digits = list(str(n1))\n    num2_digits = list(str(n2))\n\n    # Find the minimum length of the digits\n    min_length = min(len(num1_digits), len(num2_digits))\n\n    # Initialize the sum of per-digit differences\n    sum_of_diff = 0\n\n    # Loop through each digit of the two numbers\n    for i in range(min_length):\n        # Compute the per-digit difference\n        digit_diff = abs(int(num1_digits[i]) - int(num2_digits[i]))\n\n        # Add the per-digit difference to the sum\n        sum_of_diff += digit_diff\n\n    # If the lengths of the digits are not equal, there is a carry from one number to the other\n    if len(num1_digits)!= len(num2_digits):\n        # Compute the per-digit difference\n        digit_diff = abs(int(num1_digits[-1]) - int(num2_digits[-1]))\n\n        # Add the per-digit difference to the sum\n        sum_of_diff += digit_diff\n\n    return sum_of_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # convert the integers to lists of digits\n    n1_list = [int(digit) for digit in str(n1)]\n    n2_list = [int(digit) for digit in str(n2)]\n\n    # loop through each digit in the lists and calculate the difference\n    total_difference = 0\n    for i in range(len(n1_list)):\n        digit_diff = abs(n1_list[i] - n2_list[i])\n        total_difference += digit_diff\n\n    # return the total difference\n    return total_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert both numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Find the number of digits in each number\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n\n    # Calculate the sum of the per-digit difference between each pair of digits\n    digit_diff_sum = 0\n    for i in range(max(n1_len, n2_len)):\n        if i < n1_len:\n            digit_diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n        if i < n2_len:\n            digit_diff_sum += abs(int(n2_str[i]) - int(n1_str[i]))\n\n    # Return the sum of the per-digit difference\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the input integers to lists of digits\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n    # Initialize the sum of differences to zero\n    digit_distance = 0\n    # Loop through each digit in each list\n    for i in range(len(n1_digits)):\n        digit_diff = abs(n1_digits[i] - n2_digits[i])\n        # Add the per-digit difference to the sum of differences\n        digit_distance += digit_diff\n    # Return the sum of differences\n    return digit_distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = abs(n1 - n2)\n    per_digit_difference = difference % 10\n    sum_of_differences = 0\n    for i in range(10):\n        if i!= per_digit_difference:\n            sum_of_differences += abs(per_digit_difference - i)\n    return sum_of_differences"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input integers to lists of digits\n    digits_n1 = [int(digit) for digit in str(n1)]\n    digits_n2 = [int(digit) for digit in str(n2)]\n\n    # Calculate the sum of the absolute differences between the two lists of digits\n    sum_diff = 0\n    for i in range(len(digits_n1)):\n        diff = abs(digits_n1[i] - digits_n2[i])\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_of_diff = 0\n    for i in range(10):\n        diff = abs(n1 % 10 - n2 % 10)\n        sum_of_diff += diff\n        n1 //= 10\n        n2 //= 10\n    return sum_of_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Calculate the sum of the per-digit difference between n1 and n2\n    sum_diff = 0\n    for i in range(10):\n        # Find the difference between the i-th digit of n1 and n2\n        diff = abs(n1%10 - n2%10)\n        # Add the difference to the sum of differences\n        sum_diff += diff\n        # Shift the digits of n1 and n2 one position to the left\n        n1 //= 10\n        n2 //= 10\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total = 0\n    for i in range(len(str(n1))):\n        if int(str(n1)[i])!= int(str(n2)[i]):\n            total += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return total"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    # Initialize a variable to store the sum of the per-digit differences between the two integers\n    digit_diff_sum = 0\n    \n    # Loop through each digit of the two integers\n    for i in range(10):\n        # Subtract the corresponding digits of the two integers and add the absolute value to the sum\n        digit_diff_sum += abs(n1 % 10 - n2 % 10)\n        # Remove the last digit from the first integer and last digit from the second integer\n        n1 //= 10\n        n2 //= 10\n    \n    # Return the sum of the per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i > 0 and current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size == 1:\n        return a[0]\n    else:\n        if a[0] > a[1]:\n            sublist = max_sub_array_sum(a[1:], size-1)\n        else:\n            sublist = max_sub_array_sum(a, size-1)\n        return max(a[0], sublist) + a[0]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist of length `size` in a list.\n\n    Args:\n        a: List[int] - the input list\n        size: int - the length of the largest contiguous sublist to find\n\n    Returns:\n        int - the sum of the largest contiguous sublist of length `size` in the input list\n    \"\"\"\n    max_sum = float('-inf')  # initialize max sum to negative infinity\n    current_sum = 0  # initialize current sum to 0\n    for i in range(len(a)):\n        # if the current element is greater than the max sum, update max sum and reset current sum\n        if a[i] > max_sum:\n            max_sum = a[i]\n            current_sum = a[i]\n        # if the current element is not greater than the max sum, add it to the current sum\n        else:\n            current_sum += a[i]\n        # if the current sum exceeds the size of the largest contiguous sublist, reset current sum\n        if current_sum > size:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size > len(a):\n        raise ValueError(\"Size must be smaller or equal to the length of the list.\")\n\n    max_sum = float('-inf')\n    curr_sum = 0\n    max_start = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_start = i\n        elif curr_sum < 0:\n            curr_sum = 0\n    return a[max_start:max_start+size]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples\n    merged_tup = test_tup1 + test_tup2\n    # Remove duplicates\n    unique_tup = list(set(merged_tup))\n    # Sort the unique tuple\n    sorted_tup = sorted(unique_tup)\n    # Print the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from the two tuples to get their unique elements\n    unique_set = set(test_tup1) | set(test_tup2)\n    \n    # Convert the set back to a tuple and sort it in ascending order\n    union_tuple = tuple(sorted(unique_set))\n    \n    # Output the sorted union tuple\n    print(union_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set of unique elements from both tuples\n    unique_elements = set(test_tup1 + test_tup2)\n    # convert set back to list and sort it\n    sorted_list = sorted(list(unique_elements))\n    # output the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert both tuples to sets to remove duplicates and sort them\n    set1 = sorted(set(test_tup1))\n    set2 = sorted(set(test_tup2))\n\n    # merge the two sets using the union operator\n    union = sorted(set1 + set2)\n\n    # convert the merged set back to a tuple and return it\n    return tuple(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # convert the tuples to sets and then to lists\n    set1 = list(set(test_tup1))\n    set2 = list(set(test_tup2))\n\n    # find the union of the two sets\n    union_set = list(set1 + set2)\n\n    # sort the union set and then convert it back to a tuple\n    sorted_union = tuple(sorted(union_set))\n\n    # return the sorted union set as output\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    return sorted(union_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples\n    union_tup = test_tup1 + test_tup2\n    \n    # Sort the combined tuple in ascending order\n    union_tup = sorted(union_tup)\n    \n    # Output the sorted union tuple\n    print(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Merge two tuples using a set and sorted() method\n    union_set = sorted(set(test_tup1) | set(test_tup2))\n\n    # Print the union set\n    print(union_set)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the two tuples into a single tuple\n    merged_tup = test_tup1 + test_tup2\n\n    # use set() to remove duplicates from the merged tuple\n    unique_tup = set(merged_tup)\n\n    # convert the set back to a tuple and sort it in ascending order\n    sorted_tup = tuple(sorted(unique_tup))\n\n    # output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Initialize an empty list to store the union of the elements\n    union_list = []\n\n    # Loop through each element in the first tuple and append it to the union list if it is not already in it\n    for item in test_tup1:\n        if item not in union_list:\n            union_list.append(item)\n\n    # Loop through each element in the second tuple and append it to the union list if it is not already in it\n    for item in test_tup2:\n        if item not in union_list:\n            union_list.append(item)\n\n    # Sort the union list in ascending order\n    union_list.sort()\n\n    # Return the sorted union list\n    return union_list"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:  \n        return 0  \n    max_length = 1  \n\n    for i in range(1, len(lst)):  \n        if len(lst[i]) > len(lst[i-1]):  \n            max_length += 1  \n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize a variable to store the length of the longest sublist\n    max_length = 0\n\n    # loop through each sublist of the list\n    for i in range(len(lst)):  \n\n        # initialize a variable to store the current sublist length\n        sublist_length = 0\n\n        # loop through each element in the sublist\n        for j in range(i, len(lst)):  \n\n            # if the element is not None, increment the length of the sublist\n            if lst[j] is not None:  \n                sublist_length += 1  \n\n            # if the length of the sublist is greater than the current maximum length, update the maximum length\n            if sublist_length > max_length:  \n                max_length = sublist_length\n\n    # return the maximum length of the sublists\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    sublist = []\n    for elem in lst:\n        if not sublist:\n            sublist.append(elem)\n            longest = 1\n        else:\n            if elem!= sublist[-1]:\n                sublist.append(elem)\n                longest = max(longest, len(sublist))\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            if len(lst[i:j+1]) > maxLength:  \n                maxLength = len(lst[i:j+1])  \n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n\n    # Loop through the list and check for sublists of length 1 to n-1\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            current_length = j - i\n            if current_length > max_length:\n                max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j-i+1 > max_length:\n                max_length = j-i+1\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    current_length = 1\n    start_index = 0\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n            start_index = i\n            \n    if current_length > max_length:\n        max_length = current_length\n        \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize the max length of any sublist as 0  \n    max_length = 0\n\n    # Iterate through the list of sublists  \n    for i in range(len(lst)):  \n        # Initialize the current length of the sublist as 0  \n        cur_length = 0\n\n        # Iterate through the remaining elements in the sublist  \n        for j in range(i, len(lst)):  \n            # Increment the current length and check if it is greater than the max length  \n            cur_length += 1\n            if cur_length > max_length:  \n                max_length = cur_length\n\n    # Return the maximum length of the sublists  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1,len(lst)+1):  \n            sublist = lst[i:j]  \n            if len(sublist) > max_length:  \n                max_length = len(sublist)  \n    return max_length  "
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")\\w+(?=\")' # matches words between double quotes\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r\"(?<=')([^']*)|(?<=\\\")([^\\\"])*|(?<=`)([^`]*)(?=\\')\"\n    matches = re.finditer(pattern, text)\n    values = [match.group(0) for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"[^\"]+\"|\\S+'  # pattern to match quoted values and unquoted values\n    matches = re.findall(pattern, text)  # find all non-overlapping matches of the pattern\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotes\n    pattern = r'\"(?:[^\"\\\\]|\\\\.)*\"'\n\n    # Use the re.findall() function to find all occurrences of the pattern in the string\n    values = re.findall(pattern, text)\n\n    # Return the list of values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?[^\\\\]\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return [match[1:-1] for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern for matching quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # Use the re.findall() method to extract all the matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the extracted values\n    values = []\n    # Loop through each match and extract the value\n    for match in matches:\n        # Remove any leading or trailing whitespace from the value\n        value = match.strip()\n        # Add the value to the values list\n        values.append(value)\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(?P<value>.*?)\"'\n    matches = re.finditer(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.group('value'))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of individual characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # initialize an empty list to store the characters\n    char_list = []\n    # loop through each character in the word\n    for char in word:\n        # append the character to the list\n        char_list.append(char)\n    # return the list of characters\n    return char_list"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string and then convert each character to an integer and add them up\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize sum variable to 0\n    total = 0\n    # Loop through each digit in the integer n\n    while n > 0:\n        # Extract the last digit of n\n        digit = n % 10\n        # Add the digit to the sum variable\n        total += digit\n        # Remove the last digit from n\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and sum its digits\n    return sum(int(d) for d in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n\n    # Convert the integer to a string\n    n_str = str(n)\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Loop through each character in the string\n    for digit in n_str:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit)\n\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Error: Please enter a non-negative integer.\"\n    else:\n        return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    \n    sum_ = 0\n    while n > 0:\n        sum_ += n % 10\n        n //= 10\n    return sum_"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n = n // 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the input integer to a string\n    str_n = str(n)\n    # initialize a variable to store the sum of the digits\n    sum = 0\n    # iterate over each character in the string and add its value to the sum variable\n    for digit in str_n:\n        sum += int(digit)\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # loop through the list and check if the next element is greater than the current element\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is already sorted\n    if len(list1) <= 1:\n        return True\n\n    # check if the list is sorted in ascending order\n    for i in range(len(list1)-1):\n        if list1[i] >= list1[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as input and returns True if it is sorted in ascending order and False otherwise.\n    \"\"\"\n    if len(list1) < 2:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the given list\n    for sublist in list1:\n        # convert each sublist item to a string and sort it\n        sublist.sort()\n        # convert the sorted sublist back to a list and store it back in the original list\n        list1[list1.index(sublist)] = list(sublist)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop over each sublist in the input list\n    for sublist in list1:\n        # Use sorted() to sort the sublist in place\n        sorted(sublist)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a list of numbers.\n    \"\"\"\n    # Create a set from the list to remove duplicates\n    unique_nums = set(nums)\n\n    # Convert the set back to a list\n    unique_nums = list(unique_nums)\n\n    # Return the list of unique numbers\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # remove duplicates from the list\n    unique_nums = list(set(nums))\n    # sort the unique numbers in ascending order\n    unique_nums.sort()\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set to keep track of unique numbers\n    unique_nums = set()\n    # Loop over each list in the input\n    for num_list in nums:\n        # Loop over each number in the list\n        for num in num_list:\n            # If the number is not in the set, add it\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists and returns a list of lists with duplicate numbers removed.\n    '''\n    unique_lists = []\n    for lst in nums:\n        lst = list(set(lst))  # remove duplicates using set and then list\n        if lst not in unique_lists:\n            unique_lists.append(lst)\n    return unique_lists"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Given a list of numbers, remove all duplicates and return a list with two unique numbers.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n            if len(unique_nums) == 2:\n                return unique_nums\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    return [x for x in nums if x not in seen and not seen.add(x)]"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    # create a set of unique numbers from the input list\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    # Use set to get the unique values in the list\n    unique_values = set(list_data)\n    # Calculate the product of the unique values\n    product = 1\n    for value in unique_values:\n        product *= value\n    # Return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    unique_list.sort()\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers as input and returns their product.\n    \"\"\"\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    unique_numbers.sort()\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes in a list of integers and returns the product of the unique numbers in the list.\n    '''\n    unique_numbers = []\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    \n    product = 1\n    for number in unique_numbers:\n        product *= number\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    unique_numbers_product = 1\n    for number in unique_numbers:\n        unique_numbers_product *= number\n    return unique_numbers_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    unique_product = 1\n    for num in unique_numbers:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = list(set(list_data))\n    product = 1\n\n    for num in unique_nums:\n        product *= num\n\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    # create a set to remove duplicates from the list\n    unique_numbers = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi * r**2 * h + 2 * math.pi * r * h**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 2*math.pi*(r**2 + h**2)\n    return s"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of a cylinder using the formula:\n    # surface area = pi * r^2 * h\n    surface_area = 3.141592653589793 * r**2 * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function takes two parameters, r and h, representing the radius and height of the cylinder respectively.\n    It calculates the surface area of the cylinder using the formula:\n    \n    surface area = 2 * pi * r * h\n    \n    and returns the result as a float.\n    \"\"\"\n    \n    surface_area = 2 * 3.14159 * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area using the formula:\n    # A = pi * r^2 * h\n    A = 3.14 * r**2 * h\n    # return the result\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # pi is a mathematical constant that represents approximately 3.14159\n    pi = 3.14159\n    # radius of the cylinder\n    R = r\n    # height of the cylinder\n    H = h\n    # surface area of the cylinder\n    A = 2 * pi * R * H + 2 * pi * R**2\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14*r*h\n    print(\"The surface area of the cylinder is:\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * 3.14159 * r * h + 2 * 3.14159 * r**2 + 2 * 3.14159 * h**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (2*3.14159*(r**2)) + (2*3.14159*r*h) + (2*3.14159*h**2)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = math.pi * r**2 + 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if B is a sublist of A\n    for i in range(len(A)-len(B)+1): \n        if A[i:i+len(B)] == B: \n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n\n    if len(B) > len(A): \n        return False \n\n    for i in range(len(B)): \n        if B[i] not in A: \n            return False \n\n    return True \n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if A==[] or B==[]:\n        return False\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    if len(A) > len(B): \n        A,B = B,A \n        \n    for i in range(len(B)): \n        if B[i:i+len(A)] == A: \n            return True\n        \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(B):\n        if i == len(A):\n            return True\n        if B[j] == A[i]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if the first list is a sublist of the second list\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    # if no elements match, return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False \n    i = 0 \n    j = 0 \n    while i < len(A) and j < len(B): \n        if A[i] == B[j]: \n            i += 1 \n            j += 1 \n        else: \n            i = i - j + 1 \n            j = 0 \n            if i >= len(A): \n                return True \n    return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and returns True if A is a sublist of B, False otherwise.\n\n    Args:\n    A: list\n    B: list\n\n    Returns:\n    bool: True if A is a sublist of B, False otherwise.\n    \"\"\"\n\n    # Check if the length of A is less than or equal to the length of B\n    if len(A) > len(B):\n        return False\n\n    # Initialize two pointers i and j, pointing to the beginning of A and B respectively\n    i = 0\n    j = 0\n\n    # Check if all elements of A are present in B using two while loops\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n\n    # If all elements of A are present in B, it means that A is a sublist of B\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if A is a sublist of B\n    if B in A:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists A and B and checks if B is a sublist of A.\n    If B is a sublist of A, the function will return True, else it will return False.\n    '''\n    if len(B) > len(A):\n        return False\n    else:\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string\n    n = str(n)\n    # Convert the first digit of the string to an integer\n    digit = int(n[0])\n    # Find the factorial of the number without the first digit\n    factorial = 1\n    for i in range(1, len(n)):\n        factorial *= int(n[i])\n    # Divide the factorial by 10 to get the last digit\n    last_digit = factorial // 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to a string\n    num = str(n)\n    # find the length of the string\n    length = len(num)\n    # multiply all digits by 10 raised to their respective positions\n    last_digit = int(num[length-1]) * 10 ** (length - 1)\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the given number to a string\n    str_n = str(n)\n    # get the length of the string\n    length = len(str_n)\n    # get the last digit of the factorial\n    last_digit = int(str_n[-1])\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Extract the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the input number to a string\n    n = str(n)\n    # Initialize the last digit to 0\n    last_digit = 0\n    # Iterate through each digit of the input number\n    for digit in n:\n        # Convert the digit to an integer\n        digit = int(digit)\n        # Multiply the current last digit by the corresponding factorial\n        last_digit = last_digit * (digit - 1)\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string\n    n = str(n)\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each digit of the number\n    for digit in n:\n        # Convert the digit to an integer\n        digit = int(digit)\n        # Add the factorial of the digit to the sum\n        sum += digit * factorial(int(digit))\n    # Return the last digit of the sum\n    return sum % 10\n\ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n    # Recursive case\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the variable to store the factorial\n    factorial = 1\n    # Loop through the digits of the number\n    while n > 0:\n        # Calculate the next digit of the factorial\n        digit = n % 10\n        # Multiply the factorial by the digit\n        factorial = factorial * digit\n        # Remove the last digit of the number\n        n = n // 10\n    # Return the last digit of the factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Get the last digit in the factorial\n    last_digit = factorial // 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # initialize an empty list to hold the interleaved list\n    interleaved_list = []\n    # loop through each element in the 3 lists\n    for i in range(len(list1)):\n        # add the ith element of each list to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # check if the lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('The lists must have the same length.')\n    \n    # initialize an empty list to hold the final result\n    result = []\n    \n    # iterate through each index of the lists\n    for i in range(len(list1)):\n        # append the first element of each list to the result list\n        result.append(list1[i])\n        # append the second element of each list to the result list\n        result.append(list2[i])\n        # append the third element of each list to the result list\n        result.append(list3[i])\n    \n    # return the final result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns a single flat list containing the elements of all three lists.\n    \"\"\"\n    # create an empty list to store the final result\n    result = []\n    # loop through the three input lists\n    for i in range(len(list1)):\n        # add the element from the first list to the result list\n        result.append(list1[i])\n        # add the element from the second list to the result list\n        result.append(list2[i])\n        # add the element from the third list to the result list\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    while i < len(list1) and j < len(list2) and k == len(list3):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    while i < len(list1) and j == len(list2) and k < len(list3):\n        if list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    while i < len(list1) and j == len(list2) and k == len(list3):\n        result.append(list1[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Create an empty list to store the interleaved list\n    result = []\n    \n    # Iterate through each list in turn\n    for i in range(len(list1)):\n        # Append the first element from the first list to the result list\n        result.append(list1[i])\n        \n        # Append the second element from the second list to the result list\n        result.append(list2[i])\n        \n        # Append the third element from the third list to the result list\n        result.append(list3[i])\n    \n    # Return the interleaved list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create an empty list to store the interleaved list\n    interleaved_list = []\n    # Loop through the 3 lists and add each element to the interleaved_list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check that all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    \n    # Create an empty list to hold the interleaved elements\n    interleaved = []\n    \n    # Iterate over the lists and append their elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Iterate through the tuples and compare each element\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # If there is a difference, add it to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Define a dictionary to store the count of each element in the tuples\n    count_dict = {}\n\n    # Iterate through each element of the first tuple and count the occurrences in the second tuple\n    for element in test_tup1:\n        if element in test_tup2:\n            count_dict[element] = count_dict.get(element, 0) + 1\n\n    # Iterate through each element of the second tuple and count the occurrences in the first tuple\n    for element in test_tup2:\n        if element in test_tup1:\n            count_dict[element] = count_dict.get(element, 0) + 1\n\n    # Iterate through the dictionary and find the dissimilar elements\n    dissimilar_elements = []\n    for element, count in count_dict.items():\n        if count == 1:\n            dissimilar_elements.append(element)\n\n    # Return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set of elements in the first tuple\n    set1 = set(test_tup1)\n    # Create a set of elements in the second tuple\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    common_set = set1.intersection(set2)\n    # Find the elements in the first tuple that are not in the common set\n    dissimilar_set1 = set1.difference(common_set)\n    # Find the elements in the second tuple that are not in the common set\n    dissimilar_set2 = set2.difference(common_set)\n    # Find the elements that are in both sets but not in the same order\n    same_order_set = set1.symmetric_difference(set2)\n    # Combine the dissimilar sets into a single set\n    dissimilar_set = dissimilar_set1.union(dissimilar_set2)\n    # Return the combined set\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            dissimilar_list.append(item)\n    for item in test_tup2:\n        if item not in test_tup1:\n            dissimilar_list.append(item)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate through both tuples\n    for i in range(len(test_tup1)):\n        # If the values at the same index are not equal, append it to the dissimilar list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create two lists to store the elements of the tuples\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Create a dictionary to store the count of each element in list1\n    count1 = {}\n    for i in list1:\n        if i in count1:\n            count1[i] += 1\n        else:\n            count1[i] = 1\n\n    # Create a dictionary to store the count of each element in list2\n    count2 = {}\n    for i in list2:\n        if i in count2:\n            count2[i] += 1\n        else:\n            count2[i] = 1\n\n    # Create a set of elements that are present in list1 but not in list2\n    dissimilar = set(list1).symmetric_difference(set(list2))\n\n    # Return the dissimilar elements as a list\n    return list(dissimilar)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of the elements that are\n    present in the first tuple but not in the second tuple.\n    \"\"\"\n    # Create a set of the elements in the first tuple\n    set_1 = set(test_tup1)\n    # Create an empty set to store the elements in the second tuple that are not present in the first tuple\n    set_2 = set()\n    # Loop through the elements in the second tuple and add them to the set_2 if they are not present in the set_1\n    for element in test_tup2:\n        if element not in set_1:\n            set_2.add(element)\n    # Return the set of elements in set_2 as a list\n    return list(set_2)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, (list, tuple)):\n            new_tuple.append(even_ele(i, even_fnc))\n        elif isinstance(i, even_fnc):\n            new_tuple.append(i)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [i for sublist in test_tuple for i in sublist if even_fnc(i)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif isinstance(item, list):\n            new_tuple.append([even_fnc(ele) for ele in item])\n        else:\n            new_tuple.append(even_fnc(item))\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for tup in test_tuple:\n        if all(even_fnc(x) for x in tup):\n            new_tuple.append(tup)\n    return new_tuple\n\ndef even(x):\n    return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    even_list = []\n    for sublist in test_tuple:\n        for item in sublist:\n            if even_fnc(item):\n                even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_elements = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            uneven_elements.extend(even_ele(element, even_fnc))\n        else:\n            if even_fnc(element):\n                uneven_elements.append(element)\n    return uneven_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Loop through each element in the tuple\n    for elem in test_tuple:\n        # Check if the element is an even number using the even_fnc function\n        if even_fnc(elem):\n            # If it is, add it to a new list\n            even_list.append(elem)\n    # Return the even list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def clean_tuple(test_tuple):\n        if isinstance(test_tuple, tuple):\n            return [clean_tuple(sub_tuple) for sub_tuple in test_tuple]\n        else:\n            return even_fnc(test_tuple)\n    \n    return clean_tuple(test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # flatten the tuple\n    flattened_list = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            flattened_list.extend(i)\n        else:\n            flattened_list.append(i)\n    # filter out even elements using the even_fnc function\n    even_list = [i for i in flattened_list if even_fnc(i)]\n    return even_list\n\n\ndef is_even(num):\n    '''\n    Helper function to check if a number is even or not.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    print(\"The surface area of the pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) / 2 + (b * b) * s + b * b * b\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*(b**2) + (2*b*s) + (2*s**2)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(base_edge, height):\n    \"\"\"\n    This function calculates the surface area of a square pyramid given the base edge and height.\n\n    Args:\n    base_edge (float): The length of one edge of the pyramid.\n    height (float): The height of the pyramid.\n\n    Returns:\n    float: The surface area of the pyramid.\n    \"\"\"\n\n    area = (base_edge * height) / 2\n\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s #calculating the surface area of a square pyramid using Heron's formula\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Finding the area of the base\n    baseArea = 2 * b * s\n    \n    # Finding the surface area of the pyramid\n    surfaceArea = (3 * baseArea) / 2 + (3 * b * s) / 2\n    \n    return surfaceArea"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Formula to calculate surface area of square pyramid\n    surface_area = (4 * b * s) + (6 * b * b * s)\n    \n    # Return the surface area of the square pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b * s ** 2 + (b - 2 * s) * s * b * b / 2 + b * (b + 2 * s) * s ** 2 / 6\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 4 * b * s + 6 * b * b + 4 * b * b\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*b*b"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if dict1 == {}:\n        return \"True\"\n    else:\n        return \"False\""
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not any(dict1):\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * catalan_number(n//2) + catalan_number(n//2)\n    else:\n        return 2 * catalan_number(n//2) - catalan_number(n//2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (4 * catalan_number(n-1) ** 2 - catalan_number(n-2) ** 2) / (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    # Initialize the first two terms of the series\n    c = [1]\n    p = [1]\n\n    # Iterate till num terms are calculated\n    for i in range(2, num+1):\n        # Calculate the nth term\n        n = i*(2*i-1)\n        c.append(c[-1] + p[-1])\n        p.append(p[-1]*n//(i-1))\n\n    # Return the nth term\n    return c[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [0] * (n+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n+1):\n        catalan[i] = (2*i-1) * (catalan[i-1]+catalan[i-2])\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + 2*catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    # initialize the matrix\n    C = [[1] * 5 for i in range(6)]\n    for i in range(5):\n        C[i][i] = 1\n\n    # fill the matrix\n    for i in range(4, num+1):\n        for j in range(i):\n            C[i][j] = C[i-1][j] + C[i-1][j+1]\n\n    # return the nth catalan number\n    return C[num][0]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * 2**num / (factorial(2*num-1) * factorial(num))\n\ndef factorial(n):\n    \"\"\"\n    Write a function which returns the factorial of a number.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(2, n + 1):\n            result += catalan_number(i-1) * catalan_number(n-i)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * catalan_number(n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    # Initialize the Catalan numbers\n    C = [0] * (n + 1)\n    C[0] = 1\n    C[1] = 1\n    for i in range(2, n + 1):\n        C[i] = (2 * i - 1) * C[i - 1] // (i + 1)\n    return C[n]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    \n    # Use the re.findall() method to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return a list of tuples containing the adverb and its position in the text\n    return [(match, text.index(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n\n    :param text: A string containing text.\n    :return: A list of tuples, where each tuple contains the first adverb ending with \"ly\" and its positions.\n    \"\"\"\n    # Define the regular expression pattern for finding adverbs ending with \"ly\"\n    pattern = r'\\bly\\b'\n\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverb positions and their corresponding adverbs\n    adverbs = []\n\n    # Iterate over the matches and add them to the adverb positions list\n    for match in matches:\n        # Split the match into its components (word before \"ly\", \"ly\", word after \"ly\")\n        before, after = match.split(\"ly\")\n\n        # Add the start position of the \"ly\" to the before and end position of the \"ly\" to the after\n        before_pos = text.index(before)\n        after_pos = before_pos + len(before) + 2\n\n        # Add the adverb position and its corresponding adverb to the adverb positions list\n        adverbs.append((before_pos, after_pos))\n\n    # Return the adverb positions list\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly)\\b'\n    matches = re.findall(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverbs.append((match, text.find(match)))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r\"\\bly\\b\"\n    adverbs = re.findall(pattern, text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'(?<![a-zA-Z])(ly)[a-zA-Z]*(?=[a-zA-Z]|$)'\n\n    # Use the re.search() function to search for the pattern in the given text\n    match = re.search(pattern, text)\n\n    # If a match is found, return the adverb and its position\n    if match:\n        return match.group(), match.start()\n    # If no match is found, return a message saying so\n    else:\n        return \"No adverb ending with ly found in the text.\", -1"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r\"\\bly\\b\"\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Loop through each match and print its position and adverb\n    for match in matches:\n        print(f\"{text.find(match):5d} - {match}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define a regular expression pattern for adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Use the re.finditer() function to find all occurrences of adverbs in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n\n    # Iterate over all matches and store their positions in the adverb_positions list\n    for match in matches:\n        adverb_positions.append(match.start())\n\n    # Return the adverb_positions list\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w*[ly][\\'\\s]*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern for adverbs ending with ly\n    pattern = r'\\b([a-zA-Z]+ly)\\b'\n    \n    # Use the re.findall() function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # If the matches list is not empty, print the adverbs and their positions\n    if matches:\n        print(\"Adverbs ending with 'ly':\")\n        for i, match in enumerate(matches, 1):\n            print(f\"{i}. {match[0]} at position {match.start()}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b[a-z]+ly\\b'\n\n    # Use the re.finditer() function to search for all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Initialize an empty list to store the adverb positions and the matched words\n    adverb_positions = []\n\n    # Loop through each match and add the position and word to the adverb_positions list\n    for match in matches:\n        adverb_positions.append((match.start(), match.group()))\n\n    return adverb_positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap to keep track of the n most expensive items\n    heap = []\n    # loop through the items and add them to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n        # if the heap size exceeds n, remove the smallest item\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # return the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    heap = []\n    for i in range(n):\n        # Insert the i-th most expensive item in the heap\n        heapq.heappush(heap, items[i])\n    # Remove the i-th most expensive item from the heap\n    for i in range(n, len(items)):\n        # Remove the i-th most expensive item from the heap\n        heapq.heappop(heap)\n        # Insert the i-th most expensive item in the heap\n        heapq.heappush(heap, items[i])\n    # Return the n most expensive items from the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        items (list): A list of items in the dataset.\n        n (int): The number of most expensive items to find.\n\n    Returns:\n        A list of the n most expensive items.\n    \"\"\"\n    # Create a min heap with a maximum value to get the n most expensive items\n    min_heap = [-item[1] for item in items]\n    heapq.heapify(min_heap)\n\n    # Extract the n most expensive items from the min heap and return them\n    return [item[0] for item in heapq.nsmallest(n, min_heap)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to store the top n items\n    heap = []\n    # Initialize a counter to keep track of the number of items in the heap\n    count = 0\n    # Iterate over the items in the dataset\n    for item in items:\n        # If the heap is not empty and the current item is more expensive than the top item in the heap,\n        # pop the top item from the heap and add the current item to the heap\n        if heap and item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n        # If the heap is empty or if the current item is not more expensive than the top item in the heap,\n        # add the current item to the heap\n        else:\n            heapq.heappush(heap, item)\n        # If the number of items in the heap is equal to n, remove the item with the least price\n        # from the heap. This ensures that the heap contains the n most expensive items.\n        if count == n:\n            heapq.heappop(heap)\n        # Increment the counter\n        count += 1\n    # Return the items in the heap in descending order\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n    \n    # Iterate through the items and add them to the heap if the heap is not full\n    for item in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        # If the heap is full, remove the smallest item and add the new item\n        else:\n            if item < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, item)\n    \n    # Return the n most expensive items in the dataset\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items in descending order of price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Create a min heap of size n\n    min_heap = []\n\n    # Iterate through the sorted items\n    for item in sorted_items:\n        # If the heap is full, remove the smallest item\n        if len(min_heap) == n:\n            heapq.heappop(min_heap)\n\n        # Add the item to the heap\n        heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items in the dataset\n    return [item[0] for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    # Return the top n most expensive items from the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap with a maximum size of n\n    min_heap = []\n\n    # Add the first n items to the min heap\n    for item in items[:n]:\n        heapq.heappush(min_heap, -item)\n\n    # Add the remaining items to the min heap\n    for item in items[n:]:\n        if -item > heapq.heappop(min_heap):\n            heapq.heappush(min_heap, -item)\n\n    # Return the n most expensive items in decreasing order\n    return [-heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the length of the list is greater than n\n    if len(l) <= n:\n        # return the list if n is greater than the length of the list\n        return l\n    # split the list at the nth element\n    mid = len(l) // 2\n    left = l[:mid]\n    right = l[mid:]\n    # add the first part to the end of the right half\n    right.append(left[0])\n    # concatenate the two parts\n    result = left + right\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        part = l[:n]\n        rest = l[n:]\n        return part + [rest[0]] + split_Arr(rest[1:], n)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # split the list into two parts\n    split_list = l[:n] + [l[n]]\n\n    # reverse the list\n    split_list.reverse()\n\n    # add the first part of the original list to the end\n    new_list = split_list + l\n\n    # return the new list\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    mid = len(l) // 2\n    if mid == n:\n        return [l[mid:]] + [l[:mid]]\n    elif mid < n:\n        return [l[mid+1:]] + [l[:mid+1]]\n    else:\n        return [l[mid:]] + [l[:mid]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Error: n is greater than the length of the list.\"\n    else:\n        part1 = l[:n]\n        part2 = l[n:]\n        return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        raise ValueError(\"List length should be greater than or equal to the split index\")\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == len(l):\n        return l\n    else:\n        return l[n:] + [l[:n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 1 or n > len(l):\n        return \"Invalid input\"\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if n is greater than the length of the list\n    if n > len(l):\n        print(\"Error: n is greater than the length of the list.\")\n        return\n    \n    # Split the list at n element\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    # Add the first part to the end of the second part\n    l = second_part + first_part\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # Check if the length of the list is less than or equal to n\n    if len(l) <= n:\n        print(\"Error: List length is less than or equal to n\")\n        return\n\n    # Split the list at the nth element\n    mid = len(l) // 2\n    first_part = l[:mid]\n    second_part = l[mid+1:]\n\n    # Add the first part to the end of the second part\n    l = first_part + second_part\n\n    # Return the modified list\n    return l"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n    \n    :param listx: A list object.\n    :type listx: list\n    \n    :returns: A tuple object.\n    :rtype: tuple\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    # Calculate the difference between the largest and smallest values\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest value in the list\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # iterate through the list and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # calculate the difference between largest and smallest values\n    diff = largest - smallest\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize variables to store the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    # Loop through each value in the list\n    for num in nums:\n        # Update the largest and smallest values\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # Return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest values in the list\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    # calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n\n    # Return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if not nums:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) == 0:\n        return None\n    \n    # Initialize the largest and smallest values to the first element of the list\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Loop through the list and update largest and smallest values as needed\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            print(i, end=' ')"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # initialize a counter variable\n    counter = 0\n    \n    # check if a is less than b\n    if a < b:\n        # set a and b to their respective values\n        a, b = b, a\n    \n    # check for perfect squares between a and b\n    while b >= a:\n        # add one to the counter variable\n        counter += 1\n        \n        # calculate the next perfect square\n        b = int(b / 2)\n    \n    # return the counter variable\n    return counter"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Check if a is less than b\n    if a < b:\n        # If not, swap the values of a and b\n        a, b = b, a\n\n    # Initialize variables for the result and the current square\n    result = []\n    current_square = a\n\n    # Loop while current square is less than or equal to b\n    while current_square <= b:\n        # If the current square is a perfect square, add it to the result list\n        if current_square**2 == current_square:\n            result.append(current_square)\n\n        # Increase the current square by 1\n        current_square += 1\n\n    # Return the list of perfect squares\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num == int(num**0.5)+1 and num!= 1:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through all the numbers between a and b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        if num ** 0.5 == int(num ** 0.5):\n            # if it is, print the number\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    for i in range(a, b+1):\n        if i**2 == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(int(a), int(b)+1):\n        if i**2 == int(i**2):\n            squares.append(int(i**2))\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a**(0.5))+1, int(b**(0.5))+1):\n        if i**2 == a or i**2 == b:\n            print(i, end=' ')"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize an empty list to store perfect squares\n    perfect_squares_list = []\n\n    # loop through each number between a and b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        if num == int(num**0.5**2):\n            perfect_squares_list.append(num)\n\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    i = a\n    while i <= b:\n        j = i * i\n        while j <= b:\n            result.append(i)\n            j += i\n        i += 1\n    return result"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x) * cmath.exp(1j * cmath.pi * y/180)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert radians to degrees\n    theta = cmath.phase(theta) * 180 / cmath.pi\n    \n    # Calculate rectangular coordinates\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    \n    # Return the rectangular coordinates\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n        r (float): The radius of the polar coordinate.\n        theta (float): The angle of the polar coordinate in radians.\n\n    Returns:\n        tuple: The rectangular coordinates (x, y) of the polar coordinate.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return (x_rect.real, y_rect.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to cartesian coordinates\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n\n    # Return cartesian coordinates\n    return (x,y)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # check if the length is greater than 1\n    if length > 1:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # print the updated list\n        print(newList)\n    else:\n        print(\"The list should have at least two elements to be swapped.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list is empty\n    if not newList:\n        return []\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        return [newList[-1], newList[0]] + newList[:-1]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"The given list has less than two elements.\")\n        return None"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    product = 1\n    sum = 0\n\n    for i in range(1,k+1):\n        product *= n-i+1\n        sum += product\n\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    sum = 0\n\n    for i in range(1, k+1):\n        factorial = 1\n        for j in range(1, n-i+1):\n            factorial *= j\n        for j in range(1, i+1):\n            factorial /= j\n        sum += factorial\n\n    return sum\n\nn = 5\nk = 3\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    # Calculate the binomial coefficient\n    for i in range(k, n+1):\n        sum += i * binomial_Coeff(n-1, i-1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n or k < 0:\n        return 0\n\n    product = 1\n    count = 1\n\n    while count <= k:\n        product *= n - count + 1\n        count += 1\n\n    return product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n-1,k-1)*n/k"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Check if n and k are valid inputs\n    if n < 0 or k < 0 or k > n:\n        return \"Invalid input\"\n\n    # Initialize the sum of the product of consecutive binomial co-efficients\n    product_sum = 0\n\n    # Compute the product of consecutive binomial co-efficients\n    for i in range(k+1):\n        product_sum += (1/factorial(n-i))\n\n    # Return the sum of the product of consecutive binomial co-efficients\n    return product_sum\n\ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given integer n.\n    '''\n\n    # Check if n is valid input\n    if n < 0:\n        return \"Invalid input\"\n\n    # Initialize the factorial of n\n    factorial = 1\n\n    # Compute the factorial of n using recursion\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Return the factorial of n\n    return factorial"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # base case for k=0 or k=n\n    if k == 0 or k == n:\n        return 1\n\n    # base case for k>n\n    elif k > n:\n        return 0\n\n    # recursive case\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Loop through all possible values of k\n    for i in range(k, n+1):\n\n        # Calculate the binomial coefficient\n        bin_coeff = (n+1-k+i) / i\n\n        # Multiply it with the product of all previous values of k\n        if i == k:\n            sum = bin_coeff\n        else:\n            sum += bin_coeff * binomial_Coeff(n, i-1)\n\n    # Return the sum of all products\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize variables\n    numerator = 1\n    denominator = 1\n\n    # Calculate the product of the first k elements of the Fibonacci sequence\n    for i in range(k):\n        numerator *= (n - i)\n        denominator *= i + 1\n\n    # Calculate the product of the first k elements of the binomial coefficient sequence\n    for i in range(k):\n        numerator *= (n + i) // (i + 1)\n        denominator *= (n - i) // (i + 1)\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    return numerator // denominator"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Calculate the binomial coefficient for (n,k) using formula:\n    # C(n,k) = n!/(k!*(n-k)!)\n    # with n! being the factorial of n and k! being the factorial of k.\n    n_factorial = 1\n    k_factorial = 1\n    for i in range(1, n+1):\n        n_factorial *= i\n    for i in range(1, k+1):\n        k_factorial *= i\n    binomial_coeff = n_factorial // k_factorial // (k_factorial - 1)\n\n    # Calculate the product of consecutive binomial co-efficients using a loop.\n    product = 1\n    for i in range(k, n+1):\n        product *= binomial_coeff\n    return product"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    ip_obj = re.search(ip_pattern, ip)\n    if ip_obj:\n        return re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+\\.0*$', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'(\\b\\d{1,2}\\b)(0{1,3}\\b)', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+(?=\\d)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(0\\.0\\.0\\.0|10\\.0\\.0\\.0|172\\.(1[6-9]|2\\d|3[01])\\.0\\.0|192\\.168\\.0\\.0)'\n    return re.sub(pattern, '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"^0*(?:\\d+\\.){3}\\d+$\", \"\", ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function removes leading zeroes from an IP address.\n    '''\n\n    # Use regular expressions to remove leading zeroes from the IP address\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    ip = re.sub(pattern, r'\\1.\\2.\\3.\\4', ip)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        # remove leading zeroes from each octet\n        ip = re.sub(r'^(\\d+\\.\\d+\\.\\d+\\.\\d+)[0]\\.(\\d+\\.\\d+\\.\\d+\\.\\d+)', r'\\1\\2', ip)\n        ip = re.sub(r'^(\\d+\\.\\d+\\.\\d+\\.\\d+)[0]\\.(\\d+\\.\\d+\\.\\d+\\.\\d+)[0]\\.(\\d+\\.\\d+\\.\\d+\\.\\d+)', r'\\1\\2\\3', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(0{1,3}\\.){3}(0{1,3})$', r'\\1\\3', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        \n        if even == 2 and odd == 1:\n            return num - list1[0]\n    \n    return \"There is no difference in the first even and first odd number of the list.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables to store even and odd numbers\n    even = None\n    odd = None\n    \n    # Loop through the list of numbers\n    for num in list1:\n        # If the number is even\n        if num % 2 == 0:\n            # If the even number is still None\n            if even is None:\n                # Set the even number to the current number\n                even = num\n            # If the even number has already been set\n            else:\n                # Find the difference between the current number and the even number\n                diff = num - even\n                # Return the difference\n                return diff\n        # If the number is odd\n        else:\n            # If the odd number is still None\n            if odd is None:\n                # Set the odd number to the current number\n                odd = num\n            # If the odd number has already been set\n            else:\n                # Find the difference between the current number and the odd number\n                diff = num - odd\n                # Return the difference\n                return diff\n    \n    # If the loop completes without finding a difference\n    # Return None\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(lst):\n    even_num = lst[0]\n    odd_num = lst[1]\n    if lst[0] % 2 == 0 and lst[1] % 2 == 0:\n        return abs(even_num - odd_num)\n    elif lst[0] % 2 == 0 and lst[1] % 2 == 1:\n        return abs(even_num - lst[1])\n    elif lst[0] % 2 == 1 and lst[1] % 2 == 0:\n        return abs(lst[0] - odd_num)\n    elif lst[0] % 2 == 1 and lst[1] % 2 == 1:\n        return abs(lst[0] - lst[1])"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n\n    # Iterate through the list and count the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Calculate the difference between even_count and odd_count\n    diff = abs(even_count - odd_count)\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                diff = abs(even_num - num)\n                return diff\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                diff = abs(odd_num - num)\n                return diff\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    if even % 2 == 0:\n        diff = even - odd\n    else:\n        diff = odd - even\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(lst):\n    '''\n    Find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return lst[0] - lst[even_count + odd_count]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return odd - even"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and first odd numbers in the list.\n    \"\"\"\n    first_even = [num for num in list1 if num % 2 == 0][0]\n    first_odd = [num for num in list1 if num % 2 == 1][0]\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0 or odd_count == 0:\n        return \"The list does not contain even and odd numbers.\"\n\n    return abs(lst[0] - lst[1])"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    # Converting the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # Initializing the minimum number of swaps to infinity\n    min_swaps = float('inf')\n    # Iterating through all possible swaps\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            # Checking if the swaps are valid\n            if i!= j and (str1[i] == '1' and str2[j] == '1' or str1[i] == '0' and str2[j] == '0'):\n                # Updating the minimum number of swaps\n                min_swaps = min(min_swaps, abs(i - j))\n    # Returning the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both binary strings into integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize a variable to store the number of swaps required\n    swaps = 0\n\n    # While num1 and num2 are not equal, swap the bits of num1 and num2 and increment swaps\n    while num1!= num2:\n        temp = num1 & num2\n        num1 = num1 ^ num2\n        num2 = temp ^ num1\n        swaps += 1\n\n    # Return the number of swaps required to convert num1 to num2\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as strings and returns the minimum number of swaps required to convert them.\n    \n    :param str1: a binary number as a string\n    :type str1: str\n    :param str2: a binary number as a string\n    :type str2: str\n    :return: the minimum number of swaps required to convert the two binary numbers\n    :rtype: int\n    \"\"\"\n    # Convert the binary numbers to lists of bits\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n\n    # Initialize variables to keep track of the positions of the 1's in the two lists\n    pos1 = 0\n    pos2 = 0\n\n    # Initialize variables to keep track of the number of swaps required\n    count = 0\n\n    # Iterate through the lists of bits in reverse order\n    for i in range(len(list1)-1, -1, -1):\n        # If the bits are not equal, swap them\n        if list1[i]!= list2[i]:\n            # If the positions of the 1's are different, swap them\n            if pos1!= pos2:\n                # Swap the bits at the current positions\n                list1[i], list1[pos1] = list1[pos1], list1[i]\n                list2[i], list2[pos2] = list2[pos2], list2[i]\n\n                # Increment the number of swaps\n                count += 1\n\n            # Increment the position of the 1's in the first list\n            pos1 += 1\n            # Increment the position of the 1's in the second list\n            pos2 += 1\n\n    # Return the number of swaps required\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings into binary arrays\n    arr1 = [int(i) for i in str1]\n    arr2 = [int(i) for i in str2]\n\n    # Initialize the minimum swaps\n    swaps = 0\n\n    # Compare each digit of the binary strings\n    for i in range(len(arr1)):\n        if arr1[i]!= arr2[i]:\n            # Swap the digits\n            arr1[i], arr2[i] = arr2[i], arr1[i]\n            # Increment the swaps counter\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize a dictionary to store the frequency of each bit in the strings\n    freq_dict = {'0': 0, '1': 0}\n    # Loop through each bit in the strings\n    for bit in str1 + str2:\n        # Increment the count of the corresponding bit in the dictionary\n        freq_dict[bit] += 1\n    # Find the number of swaps required to convert the binary strings to their decimal equivalent\n    swaps = 0\n    for i in range(32):\n        # If the current bit in the original binary string is not equal to the current bit in the new binary string, add a swap\n        if freq_dict[str1[i]]!= freq_dict[str2[i]]:\n            swaps += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    # Find the length of the binary number\n    n = len(str1)\n\n    # Initialize a dictionary to store the frequency of characters in the binary number\n    freq = {}\n\n    # Iterate through the binary number and update the frequency of characters in the dictionary\n    for i in range(n):\n        if str1[i] == '1':\n            if str1[i] not in freq:\n                freq[str1[i]] = 1\n            else:\n                freq[str1[i]] += 1\n        elif str1[i] == '0':\n            if str1[i] not in freq:\n                freq[str1[i]] = 0\n            else:\n                freq[str1[i]] += 0\n\n    # Initialize an empty list to store the swaps required\n    swap = []\n\n    # Iterate through the binary number and find the minimum number of swaps required\n    for i in range(n):\n        if str2[i] == '1':\n            if str2[i] not in freq:\n                freq[str2[i]] = 1\n            else:\n                freq[str2[i]] += 1\n        elif str2[i] == '0':\n            if str2[i] not in freq:\n                freq[str2[i]] = 0\n            else:\n                freq[str2[i]] += 0\n\n        # Compare the frequencies of characters in the two binary numbers\n        if freq[str1[i]] > freq[str2[i]]:\n            # If the frequency of the first character in the first binary number is greater than the second character in the second binary number,\n            # then we need to swap the first and second characters. So, append the swap to the list\n            swap.append([str1[i], str2[i]])\n\n        # Remove the frequency of the characters from the dictionary\n        del freq[str1[i]]\n        del freq[str2[i]]\n\n    # Return the minimum number of swaps required\n    return len(swap)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    if n!= len(str2):\n        raise ValueError(\"Both strings must have the same length\")\n    if str1 == str2:\n        return 0\n    swap_count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            # if str1[i] is smaller, swap it with the current position of str1[i]\n            swap_count += min(i, n - i - 1)\n            if str1[i] == '0':\n                str2 = str2[:i] + '1' + str2[i+1:]\n            else:\n                str2 = str2[:i] + '0' + str2[i+1:]\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as strings as input and returns the minimum number of swaps required to convert one binary number to the other.\n\n    Args:\n        str1 (str): A binary number represented as a string.\n        str2 (str): Another binary number represented as a string.\n\n    Returns:\n        int: The minimum number of swaps required to convert one binary number to the other.\n    \"\"\"\n\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Calculate the number of swaps required to convert num1 to num2\n    swaps = 0\n    while num1!= num2:\n        # Check if the least significant bit is set in num1\n        if (num1 & 1)!= (num2 & 1):\n            # If it is, swap the least significant bits of num1 and num2\n            num1 = (num1 << 1) ^ num2\n            num2 = (num2 >> 1) ^ num1\n            swaps += 1\n        else:\n            # If it isn't, shift num1 by one and set the least significant bit to zero\n            num1 = (num1 << 1) & ((1 << n1) - 1)\n            num2 = (num2 >> 1) & ((1 << n2) - 1)\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function will take two binary numbers represented as strings and return the minimum number of swaps required to convert one to the other.\n    '''\n    # get the length of the binary strings\n    n = len(str1)\n    # convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # create a list to store the swaps\n    swaps = []\n    # iterate over the integers and find the swaps required\n    for i in range(n-1, -1, -1):\n        if (num1 & (1 << i))!= (num2 & (1 << i)):\n            # swap the bits at positions i and n-1-i\n            num1 ^= (1 << i)\n            num2 ^= (1 << n-1-i)\n            # append the swap to the list of swaps\n            swaps.append((i, n-1-i))\n    # return the length of the list of swaps\n    return len(swaps)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2): \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n    Input: \n    str1, str2 - strings representing binary numbers. \n\n    Output: \n    The minimum number of swaps required to convert str1 to str2.\n\n    Note: \n    We are given two binary numbers str1 and str2. We need to count minimum number of swaps required to convert one binary number to another. \n\n    We can convert a binary number to another by swapping its digits. For example, \n    str1 = 10101 \n    str2 = 01110 \n    We can convert str1 to str2 by swapping the first two digits: \n    10101 -> 10010 \n    01110 -> 11100 \n    So, the minimum number of swaps required to convert str1 to str2 is 3. \n\n    Algorithm: \n    1. Compare the lengths of str1 and str2. If str1 is shorter, swap the remaining digits of str1 with the corresponding digits of str2. \n    2. If str2 is shorter, swap the remaining digits of str2 with the corresponding digits of str1. \n    3. Return the minimum number of swaps required to convert str1 to str2. \n\n    Time Complexity: O(log n) \n    where n is the length of the input strings. \n\n    Space Complexity: O(1) \n    '''\n\n    # Convert str1 to int to get the length \n    str1_len = len(str1) \n\n    # Compare lengths and swap digits if necessary \n    if str1_len > str2_len: \n        str1, str2 = str2, str1 \n\n    # Count swaps required to convert str1 to str2 \n    swaps = 0 \n    for i in range(str1_len): \n        if int(str1[i]) > int(str2[i]): \n            swaps += 1 \n\n    return swaps "
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.stdout.write(f\"Tuple Size: {sys.getsizeof(tuple_list)} bytes\\n\")"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        for item in tup:\n            size = sys.getsizeof(item)\n            if size > 0:\n                total_size += size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        # calculate size of item in bytes\n        size = sys.getsizeof(item)\n        # add item size to total size\n        total_size += size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_bytes = sys.getsizeof(tuple_list)\n    return size_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        if isinstance(item, str):\n            total_size += len(item.encode('utf-8')) * sys.getsizeof(str(item))\n        elif isinstance(item, tuple):\n            total_size += tuple_size(item)\n        elif isinstance(item, int):\n            total_size += sys.getsizeof(item)\n        else:\n            total_size += sys.getsizeof(type(item).__name__)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = 0\n    \n    for element in tuple_list:\n        size_of_tuple += sys.getsizeof(element)\n        \n    return size_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        tup_size = sys.getsizeof(tup)\n        total_size += tup_size\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three parameters: arr1, arr2, and k.\n    It checks if arr1 is a sorted array or not, if not it converts it to a sorted array.\n    Then it checks if arr2 is a sorted array or not, if not it converts it to a sorted array.\n    Finally, it finds the kth element in both arrays and returns it.\n    \"\"\"\n    # Checking if arr1 is a sorted array\n    if not all(arr1[i] <= arr1[i+1] for i in range(len(arr1)-1)):\n        arr1 = sorted(arr1)\n    # Checking if arr2 is a sorted array\n    if not all(arr2[i] <= arr2[i+1] for i in range(len(arr2)-1)):\n        arr2 = sorted(arr2)\n    \n    # Finding the kth element in both arrays\n    i = j = k - 1\n    while i >= 0 and j < len(arr1) and i < len(arr2):\n        if arr1[i] <= arr2[j]:\n            k -= 1\n            i -= 1\n        else:\n            i += 1\n    return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n    if k == 0:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    if i == len(arr1) and j < len(arr2):\n        return arr2[j]\n    elif i < len(arr1) and j == len(arr2):\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None if k > len(arr1) else arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1, n2 = len(arr1), len(arr2)\n    i, j = 0, 0\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) == 0 and len(arr2) == 0:\n        return None\n    elif len(arr1) == 0:\n        return arr2[k-1]\n    elif len(arr2) == 0:\n        return arr1[k-1]\n    elif arr1[0] < arr2[0]:\n        if k == 1:\n            return arr1[0]\n        elif k > 1:\n            return find_kth(arr1[1:], arr2, k)\n    else:\n        if k == 1:\n            return arr2[0]\n        elif k > 1:\n            return find_kth(arr1, arr2[1:], k)\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    if not arr1 or not arr2:\n        raise ValueError(\"Both arrays must be non-empty.\")\n    \n    # Find the length of the smaller array\n    min_len = min(len(arr1), len(arr2))\n    \n    # Initialize the index pointers\n    i = 0\n    j = 0\n    \n    # Initialize the result array\n    result = []\n    \n    # Loop until we have found the kth element\n    while i < min_len and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        elif arr1[i] > arr2[j]:\n            result.append(arr2[j])\n            j += 1\n        else:\n            result.append(arr1[i])\n            i += 1\n            j += 1\n    \n    # If the remaining elements in the first array are less than k,\n    # add them to the result array\n    if i < min_len:\n        result += arr1[i:]\n    \n    # If the remaining elements in the second array are less than k,\n    # add them to the result array\n    if j < len(arr2):\n        result += arr2[j:]\n    \n    # Return the kth element from the result array\n    return result[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three arguments:\n    1. arr1: a sorted array\n    2. arr2: another sorted array\n    3. k: the index of the element that needs to be found in the sorted array\n    \n    The function returns the kth smallest element from the two sorted arrays.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = 0\n    j = 0\n    \n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    \n    if i < n1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Calculate the sum of the cubes of each digit\n    sum_of_cubes = 0\n    for digit in number_str:\n        digit_int = int(digit)\n        sum_of_cubes += digit_int ** 3\n\n    # Check if the sum of cubes of digits is equal to the original number\n    if sum_of_cubes == number:\n        print(number, \"is an Armstrong number\")\n    else:\n        print(number, \"is not an Armstrong number\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string and remove any non-numeric characters\n    number_str = ''.join(filter(str.isdigit, str(number)))\n    # Calculate the sum of the powers of each digit in the number\n    sum_of_powers = sum([int(digit)**len(number_str) for digit in number_str])\n    # Check if the sum of the powers is equal to the original number\n    return sum_of_powers == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_digits = len(str(number))\n    sum_of_digits = 0\n    temp_num = number\n\n    while temp_num > 0:\n        digit = temp_num % 10\n        sum_of_digits += digit ** num_digits\n        temp_num //= 10\n\n    if sum_of_digits == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    num_str = str(num)\n    num_len = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_len\n    return num == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(num):\n    '''\n    This function takes an integer as input and returns True if it is an Armstrong number,\n    else it returns False.\n    '''\n    num_str = str(num)\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** len(num_str)\n        temp //= 10\n    return num == sum\n\ndef armstrong_number(number):\n    '''\n    This function takes an integer as input and returns True if it is an Armstrong number,\n    else it returns False.\n    '''\n    num_str = str(number)\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        temp //= 10\n        sum += digit ** len(num_str)\n    return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    if number < 10:\n        return False\n    \n    # Compute the sum of cubes of each digit in the number\n    digits = [int(digit) for digit in str(number)]\n    cubes = [digit**3 for digit in digits]\n    sum_of_cubes = sum(cubes)\n    \n    # Check if the sum of cubes is equal to the original number\n    return sum_of_cubes == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the input number to a string\n    num_str = str(number)\n    \n    # Initialize the sum of the digits to 0\n    sum_of_digits = 0\n    \n    # Iterate through each digit of the number\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum of the digits\n        sum_of_digits += int(digit)\n    \n    # Compare the sum of the digits with the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    num_len = len(num_str)\n    sum_of_squares = 0\n    for i in range(num_len):\n        power = num_len - i - 1\n        digit = int(num_str[i])\n        sum_of_squares += digit ** power\n    return sum_of_squares == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Initialize a variable to store the sum of the square of each digit\n    digit_sum = 0\n    \n    # Convert the number to a string to loop through its digits\n    num_str = str(number)\n    \n    # Loop through each digit of the number and add its square to the digit_sum\n    for digit in num_str:\n        digit_sum += int(digit) ** len(num_str)\n    \n    # Return whether the digit_sum is equal to the original number\n    return digit_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # converting the number to a list of digits\n    digits = [int(d) for d in str(number)]\n    # computing the sum of the digits raised to the power of the length of the list\n    sum_of_digits = sum([d**len(digits) for d in digits])\n    # comparing the sum with the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Initialize variables\n    sum_list = []\n    sum_total = 0\n    count = 0\n    sum_average = 0\n    # Loop through numbers from 1 to n\n    for i in range(1, number+1):\n        # Add each number to the sum list\n        sum_list.append(i)\n        # Add the number to the sum total\n        sum_total += i\n        # Increment the count\n        count += 1\n    # Calculate the sum average\n    if count!= 0:\n        sum_average = sum_total/count\n    # Return the sum and average\n    return sum_list, sum_average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"Sum of first {} natural numbers is: {}\".format(number, sum))\n    print(\"Average of first {} natural numbers is: {}\".format(number, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    avg = total / n\n    return total, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables to 0\n    sum = 0\n    count = 0\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # add each number to the sum and increment count\n        sum += i\n        count += 1\n    # calculate the average by dividing the sum by the count\n    average = sum / count\n    # return the sum and average as a tuple\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_value = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_value += i\n        count += 1\n    average = sum_value / count\n    return sum_value, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total/count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count of natural numbers\n    sum_ = 0\n    count = 0\n\n    # loop n times\n    for i in range(1, n+1):\n        # add the natural number to the sum\n        sum_ += i\n\n        # increment the count\n        count += 1\n\n    # find the average\n    average = sum_ / count\n\n    # print the sum and average\n    print(\"The sum of the first {} natural numbers is: {}\".format(n, sum_))\n    print(\"The average of the first {} natural numbers is: {}\".format(n, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function finds the sum and average of the first n natural numbers.\n    \"\"\"\n    sum_n = 0\n    for i in range(1, n+1):\n        sum_n += i\n\n    average = sum_n/n\n\n    return sum_n, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initializing sum and count variables\n    sum = 0\n    count = 0\n    # iterating through first n numbers\n    for i in range(1, number+1):\n        # updating sum and count variables\n        sum += i\n        count += 1\n    # calculating average\n    average = sum / count\n    # returning the result as a tuple\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    # Initialize the sum and count variables to zero\n    sum = 0\n    count = 0\n\n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum += i\n\n    # Calculate the average of the first n natural numbers\n    average = sum / n\n\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if the number is even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer input and returns True if it is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        print(f'{n} is even.')\n    else:\n        print(f'{n} is odd.')"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # Find the first repeated character\n    first_char = None\n    for char, count in freq.items():\n        if count > 1:\n            first_char = char\n            break\n    \n    return first_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Returns the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = char_count.get(char, 0) + 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already present in the dictionary, return the first repeated character\n        if char in freq_dict:\n            return char\n        # If the character is not present in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[char] = 1\n\n    # If all characters are unique, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in it.\n    '''\n    char_list = list(str1)\n    char_count = {}\n    for char in char_list:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Loop through each character in the string\n    for char in str1:\n\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it to the dictionary with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Initialize the first repeated character to None\n    first_rep_char = None\n\n    # Loop through the frequency dictionary to find the first repeated character\n    for char, freq_val in freq.items():\n\n        # If the frequency of the current character is greater than 1, update the first repeated character\n        if freq_val > 1:\n            first_rep_char = char\n\n    return first_rep_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Iterate through the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterate through the dictionary and find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    \n    # If no character is repeated, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # convert the string to a set to remove any duplicates\n    unique_chars = set(str1)\n    # loop through the set to find the first repeated character\n    for char in unique_chars:\n        if unique_chars.count(char) > 1:\n            return char"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Define a helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Define a helper function to find the next lucid number\n    def next_lucid(num):\n        if is_prime(num + 1):\n            return num + 1\n        else:\n            return num\n\n    # Initialize the result list\n    result = []\n\n    # Loop through all numbers from 1 to n\n    for num in range(1, n + 1):\n        # Check if the current number is a lucid number\n        if is_prime(num) and is_prime(next_lucid(num)):\n            result.append(num)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    if n == 0:\n        return [0]\n    else:\n        return [i for i in range(n, 0, -1) if i % 3 == 0 and i % 5 == 0]"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for num in range(1, n):\n        is_lucid = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(num)\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = 1\n    while lucid <= n:\n        yield lucid\n        lucid += 1"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                break\n        else:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize an empty list to store the lucid numbers\n    lucid_nums = []\n    # Initialize a variable to keep track of the current number\n    num = 1\n    # While num is less than or equal to n, add it to the lucid_nums list and increment num\n    while num <= n:\n        lucid_nums.append(num)\n        num += 1\n    # Return the lucid_nums list\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if i in lucid_numbers:\n            pass\n        else:\n            lucid_numbers.append(i)\n            i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize a list to store the lucid numbers\n    lucid_numbers = []\n    \n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a lucid number or not\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    \n    # Return the lucid numbers\n    return lucid_numbers\n\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a given number is a lucid number or not.\n    '''\n    # Check if the number is equal to 1\n    if num == 1:\n        return True\n    \n    # Check if the number is divisible by 11\n    if num % 11 == 0:\n        return True\n    \n    # Initialize a variable to store the last digit of the number\n    last_digit = 0\n    \n    # Loop through all the digits of the number\n    for digit in str(num):\n        # Convert the digit to an integer and add it to the last digit variable\n        last_digit += int(digit)\n    \n    # Check if the last digit is divisible by 11\n    if last_digit % 11 == 0:\n        return True\n    \n    # If none of the above conditions are met, the number is not a lucid number\n    return False"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = [i for i in range(1, n+1)]\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words using the split() function and remove empty strings\n    words = [word for word in s.split() if word!= '']\n    # reverse the words in the list using the reverse() function\n    words.reverse()\n    # join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Reverse each word and join them back into a string\n    return \" \".join([word[::-1] for word in words])"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for i in range(len(words)-1, -1, -1):\n        reversed_words.append(words[i])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)//2):\n        words[i], words[-i-1] = words[-i-1], words[i]\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(n):\n    '''\n    A function to check if a given number is a prime number.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    This function checks if a given integer is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(7))  # Output: True\nprint(is_prime(12))  # Output: False\nprint(is_prime(13))  # Output: True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            start = match.start()\n            end = match.end()\n            literal = text[start:end]\n            return literal, start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        start_index = text.find(matches[0])\n        end_index = start_index + len(matches[0])\n        return matches[0], start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    This function takes a string and a regex pattern as input, searches the string for the pattern using re.search() method and returns a tuple containing the matched sub-string, the start index of the sub-string, and the end index of the sub-string.\n    \"\"\"\n    matches = re.search(pattern, text)\n    if matches:\n        return matches.group(), matches.start(), matches.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use finditer to find all matches in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the matches\n    literal_matches = []\n\n    # Loop through all matches and add them to the list\n    for match in matches:\n        literal_matches.append((match.group(), match.start(), match.end()))\n\n    # Return the list of literal matches\n    return literal_matches"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        literal = text[start_index:end_index]\n        return literal, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = matches[0].start()\n        end_index = matches[-1].end()\n        return matches[0], start_index, end_index\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # Search the text for the pattern and return the matching substrings, start and end indices\n    literals = re.findall(pattern, text)\n    for literal in literals:\n        start_index = text.find(literal)\n        end_index = start_index + len(literal)\n        print(\"Found literal: {} at indices {} to {}\".format(literal, start_index, end_index))\n\n    return literals"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Bell Number is a number in the sequence of numbers 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676211, 23416728348467675, 37889062373143886, 61305790721611561, 99194853094755447, 160500643816366968, 259695496911122415, 420196140727489383, "
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        b = 1\n        for i in range(2, n+1):\n            b = (2*b*i) % 1000000007\n        return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (4**(n-1))//(2*n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676211, 23416728348467675, 37889062373143886, 61305790721611561, 99194853094755447, 160500643816367008, 2596954969"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = 1\n    for i in range(1, n+1):\n        bell_num = bell_num * (2 * i - 1) / (2 * i)\n    return bell_num\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0: \n        print(\"Invalid input. Please enter a non-negative integer.\")\n        return\n    \n    if n == 0: \n        return 0\n    \n    if n == 1: \n        return 1\n    \n    bell = [0, 1]\n    for i in range(2, n+1): \n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and an integer L as inputs.\n    The function then returns a list with the same elements, but the L'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = int(input(\"Enter the value of k: \"))\n    return list1[:L] + list1[L+k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    for i in range(len(list1)):\n        if i == k - 1:\n            del list1[i]\n            return list1\n        elif i < k - 1:\n            list1[i], list1[k - 1] = list1[k - 1], list1[i]\n            k -= 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = L - 1  # index of the kth element to be removed\n    list1.pop(k)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # If L is greater than the length of the list, return the list as is.\n    if L > len(list1):\n        return list1\n    # Remove the k'th element from the list and return it.\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L < 1 or L > len(list1):\n        return \"Invalid input. Please enter a positive integer less than or equal to the length of the list.\"\n    else:\n        k = len(list1) - L\n        list1 = list(set(list1))\n        list1.pop(k-1)\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(lst, k):\n    '''\n    This function takes a list and an integer k and returns a new list with the kth element removed.\n    '''\n    return lst[:-k]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L.remove(list1[L.index(min(list1))])\n    return L"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # find the length of the first row in the matrix\n    n = len(test_list[0])\n    # initialize an empty list to store the max values\n    max_list = []\n    # loop through each row in the matrix\n    for i in range(n):\n        # loop through each column in the matrix, starting from the nth column\n        for j in range(n-N+1):\n            # add the value of the nth column to the list of max values\n            max_list.append(test_list[j][i])\n    # return the max value in the list of max values\n    return max(max_list)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Initialize the maximum value as the first element of the first row of the matrix\n    max_val = test_list[0][0]\n    # Iterate over the remaining elements of the matrix\n    for i in range(len(test_list[0])):\n        # Check if the value of then'th column is greater than the current maximum value\n        if test_list[0][i] > max_val:\n            max_val = test_list[0][i]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize an empty list to store the max values of then'th column\n    max_list = []\n    # Loop through each row of the matrix\n    for row in test_list:\n        # Get the nth column of the row as a list\n        nth_column = [row[i] for i in range(len(row)) if i % N == 0]\n        # Get the maximum value of the nth column\n        max_value = max(nth_column)\n        # Add the maximum value to the max_list\n        max_list.append(max_value)\n    # Return the list of maximum values of then'th column\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list[0])\n    for i in range(n):\n        max_val = max(test_list[j][i] for j in range(len(test_list)))\n        print(max_val)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the length of the list\n    length = len(test_list)\n\n    # check if the length of the list is greater than 0\n    if length == 0:\n        return None\n\n    # initialize the maximum value to a very small number\n    max_value = float('-inf')\n\n    # loop through each row in the list\n    for row in test_list:\n        # check if the row length is greater than N\n        if len(row) > N:\n            # get then'th value in the row\n            value = row[N - 1]\n            # check if the value is greater than the current maximum\n            if value > max_value:\n                max_value = value\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = -float('inf')\n    for row in test_list:\n        if max_val < row[N-1]:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Find the length of the first row of the matrix\n    n = len(matrix[0])\n    # Initialize the variable to store the maximum value of then'th column\n    max_value = float('-inf')\n    # Loop through each row of the matrix and compare the value of then'th column to the current maximum value\n    for row in matrix:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if not test_list:\n        return None\n    for i in range(len(test_list)):\n        if len(test_list[i]) < N:\n            return None\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if i % N == 0:\n            max_val = max(max_val, max(test_list[i]))\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    return max(max(row[N-1] for row in test_list) for i in range(len(test_list)))"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        first_elem = lst[i][0]\n        second_elem = lst[i][1]\n        merged_lst.append([first_elem, second_elem])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # initialize an empty list to hold the merged list\n    merged = []\n    # loop through each sublist in the original list\n    for sublist in lst:\n        # check if the sublist has two elements\n        if len(sublist) == 2:\n            # if it does, append the first and second elements to a new list\n            merged.append([sublist[0], sublist[1]])\n        # if the sublist has more than two elements, raise an error\n        else:\n            raise ValueError(\"Each sublist should have two elements.\")\n    # return the merged list\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []  \n    for sublist in lst:  \n        merged_list.append([sublist[0], sublist[1]])  \n    return merged_list  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []  \n    for i in range(len(lst)):  \n        merged_lst.append([lst[i][0], lst[i][1]])  \n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in lst:\n        merged_lst.append([i[0], i[1]])\n    return merged_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n\n    # Initialize an empty list to store the cumulative sum\n    cum_sum = []\n\n    # Iterate over each tuple in the given list\n    for tup in test_list:\n        # Iterate over each value in the current tuple and add it to the cumulative sum\n        for val in tup:\n            cum_sum.append(val)\n\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i][0], (int, float)):\n            cumsum += test_list[i][0]\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Find the cumulative sum of all the values in the given tuple list.\n\n    Parameters:\n    test_list (list of tuples): A list of tuples, where each tuple contains a number and a string.\n\n    Returns:\n    int: The cumulative sum of all the values in the given tuple list.\n    \"\"\"\n\n    # Initialize the cumulative sum to 0\n    total = 0\n\n    # Loop through each tuple in the list\n    for number, string in test_list:\n\n        # If the string is \"plus\", add the number to the cumulative sum\n        if string == \"plus\":\n            total += number\n\n    # Return the cumulative sum\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Extract the values from the tuple\n        val1, val2, val3 = tup\n        # Add the values to the cumulative sum\n        cum_sum += val1 + val2 + val3\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the cumulative sum of all the values that are present in the list.\n    \"\"\"\n    # Initialize the cumulative sum variable with the first element of the list\n    cum_sum = test_list[0]\n    # Loop through the list starting from the second element and add each element to the cumulative sum\n    for i in range(1, len(test_list)):\n        cum_sum += test_list[i]\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    averages = []\n    for tup in nums:\n        for num in tup:\n            total += num\n            count += 1\n        averages.append(total / count)\n        total = 0\n        count = 0\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        count = len(num)\n        average = total / count\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        averages.append(sum(nums[i])/len(nums[i]))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for i in nums:\n        for j in i:\n            total += j\n            count += 1\n    avg_list = []\n    for i in range(count):\n        avg_list.append(total/count)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create a list of lists to store the averages for each tuple\n    result = []\n    for num in nums:\n        # calculate the average for this tuple\n        avg = sum(num) / len(num)\n        # append the average to the result list\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create an empty list to store the average values\n    avg_list = []\n    # Loop through each tuple in the input tuple of tuples\n    for i in nums:\n        # Calculate the sum of all the values in the tuple\n        sum_values = sum(i)\n        # Calculate the average value of the tuple\n        avg_value = sum_values / len(i)\n        # Append the average value to the average list\n        avg_list.append(avg_value)\n    # Return the average list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for tup in nums:\n        for num in tup:\n            total += num\n            count += 1\n    return [total/count for _ in range(len(nums[0]))]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in range(len(nums)):\n        average = sum(nums[i]) / len(nums[i])\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Using list comprehension to perform element-wise modulo\n    result_tup = [(test_tup1[i] % test_tup2[i]) for i in range(len(test_tup1))]\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    # Perform element wise modulo and return the result\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuple lengths are not equal.\"\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The input tuples must have the same length.\"\n    \n    # Perform element-wise modulo\n    result_tup = tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of equal length\")\n        return None\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element-wise modulo operation.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    return tuple(map(lambda x,y: x % y, test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    # function to calculate minimum jumps required for given steps and distance\n    def min_jumps(steps, d):\n        # base case: distance is zero or steps is less than or equal to 0, so no jumps required\n        if d == 0 or steps <= 0:\n            return 0\n        # recursive case: check if steps are greater than 0, since minimum jumps required is always greater than 0\n        if steps > 0:\n            # calculate minimum jumps for the remaining steps and distance\n            jumps1 = min_jumps(steps-1, d)\n            # calculate minimum jumps for the remaining steps and distance where we can move at most d distance\n            jumps2 = min_jumps(steps-1, max(0, d-1))\n            # calculate minimum jumps required by adding the minimum number of jumps for both cases\n            return min(jumps1, jumps2) + 1\n    # call the function to calculate minimum jumps required\n    return min_jumps(steps, d)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes the number of steps required and the distance (d) as input parameters.\n    It returns the minimum number of jumps required to reach the point (d, 0) from the origin.\n    '''\n\n    # initialize variables to store the minimum jumps required and the remaining steps\n    min_jumps = steps\n    remaining_steps = steps\n\n    # loop through the remaining steps and calculate the minimum jumps required\n    for i in range(steps):\n        # calculate the distance covered by each jump\n        step_distance = i + d\n\n        # check if the remaining step will cover the distance\n        if remaining_steps >= step_distance:\n            # if it will, update the minimum jumps required\n            min_jumps = min(min_jumps, i + 1)\n            # update the remaining steps\n            remaining_steps -= step_distance\n        else:\n            # if it won't, break out of the loop\n            break\n\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    # Create a 2D array to store the number of jumps to reach each point\n    dp = [[0] * (d + 1) for _ in range(steps + 1)]\n\n    # Base case: if the distance is zero, there is no jump\n    for step in range(1, steps + 1):\n        dp[step][0] = 0\n\n    # Fill the array using dynamic programming\n    for step in range(1, steps + 1):\n        for distance in range(1, d + 1):\n            # If the distance is greater than the current point, there is no jump\n            if distance > step:\n                dp[step][distance] = dp[step - 1][distance]\n            # If the distance is equal to the current point, there is one jump\n            elif distance == step:\n                dp[step][distance] = dp[step - 1][distance] + 1\n\n    # Return the minimum number of jumps required to reach the given point\n    return dp[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current = 0\n    while current <= steps:\n        if current + d >= steps:\n            jumps += 1\n            break\n        current += d\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    steps = list(range(steps))\n    steps.append(steps[-1] + d)\n    for i in range(1, len(steps)-1):\n        if steps[i] == 0:\n            jumps += 1\n            steps.append(steps[i] + d)\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Start at (0, 0)\n    i = j = 0\n\n    # Count the number of jumps required to reach (d, 0)\n    count = 0\n    while i < len(steps) and j < len(steps[i]) and steps[i][j] < d:\n        i += 1\n        count += 1\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    i = 0\n    steps.sort()\n    jumps = 0\n    while i < len(steps) and steps[i] <= d:\n        jumps += 1\n        i += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize variables for current position, destination, and jumps required\n    pos = 0\n    dst = d\n    jumps = 0\n    \n    # Loop through the steps and calculate the number of jumps required to reach the destination\n    for i in range(steps):\n        if pos >= dst:\n            # Stop if we reach the destination\n            break\n        \n        # Calculate the next position and distance\n        pos += steps - 1\n        dst -= 1\n        jumps += 1\n    \n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    if steps < 1 or d < 1: \n        return \"Invalid Input\" \n    if d == 1: \n        return steps \n    jumps = 0\n    next_steps = steps \n    while next_steps > 0: \n        jumps += 1 \n        if jumps == d: \n            next_steps -= 1 \n        else: \n            next_steps -= 2 \n    return jumps "
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps <= 0:\n        return 0\n\n    # initialize variables\n    current_x = 0\n    current_y = 0\n    current_distance = 0\n    current_jump = 1\n    min_jumps = 1\n\n    # iterate over the steps\n    for i in range(steps):\n        # calculate the new position\n        new_x = current_x + d * current_jump\n        new_y = current_y + d * current_jump\n\n        # check if the new position is outside the grid\n        if new_x < 0 or new_x >= steps or new_y < 0 or new_y >= steps:\n            return 0\n\n        # calculate the new distance\n        new_distance = current_distance + abs(new_x - current_x) + abs(new_y - current_y)\n\n        # update the current position and distance\n        current_x = new_x\n        current_y = new_y\n        current_distance = new_distance\n\n        # check if we need to increase the jump\n        if new_x == d or new_y == d:\n            min_jumps = min(min_jumps, current_jump)\n            current_jump += 1\n\n    # check if we need to increase the jump\n    if current_x == d or current_y == d:\n        min_jumps = min(min_jumps, current_jump)\n\n    return min_jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: Cannot divide by zero.\")\n            return\n        result.append(nums1[i] // nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists should have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the lengths of the lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not equal in length\")\n        return None\n    \n    # divide each element of the lists\n    divided_list = []\n    for i in range(len(nums1)):\n        divided_list.append(nums1[i] / nums2[i])\n    \n    return divided_list"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n\n    Args:\n    nums1 (list): List of numbers to be divided.\n    nums2 (list): List of numbers to divide by.\n\n    Returns:\n    list: List of the same length as `nums1`, with the element-wise division of `nums1` by `nums2`.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should be of equal length!\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length\")\n        return None\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(test_str)\n\n    # Initialize two pointers to keep track of the start and end of the number section\n    start_num = 0\n    end_num = 0\n\n    # Loop through each character in the list\n    for i in range(len(char_list)):\n        # Check if the current character is a number\n        if char_list[i].isdigit():\n            # If it is, update the end pointer to the current index\n            end_num = i\n        # If the current character is not a number, update the start pointer to the current index\n        else:\n            start_num = i\n\n    # If there were no numbers in the string, return the original string\n    if start_num == 0:\n        return test_str\n\n    # Reverse the number section of the string using slicing\n    rev_num_str = ''.join(char_list[start_num:end_num][::-1])\n\n    # Combine the number section with the non-number section of the string\n    final_str = rev_num_str + test_str[start_num:end_num]\n\n    # Return the final string\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n\n    # initialize variables\n    num_list = []\n    move_list = []\n\n    # split the string into words\n    words = test_str.split()\n\n    # iterate over the words\n    for word in words:\n        # check if the word is a number\n        if word.isdigit():\n            # add the number to the num_list\n            num_list.append(word)\n        else:\n            # add the word to the move_list\n            move_list.append(word)\n\n    # join the move_list and the num_list to get the final string\n    result = ''.join(move_list) + ''.join(num_list)\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if num_list:\n        test_str = ''.join(num_list)\n        return test_str + num_list\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for i in test_str:\n        if i.isdigit():\n            numbers.append(i)\n    return test_str + ''.join(numbers)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Find all the numbers in the string\n    nums = re.findall(r'\\d+', test_str)\n\n    # Reverse the list of numbers\n    nums.reverse()\n\n    # Join the list of numbers back into a string\n    new_str = ''.join(nums)\n\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Create a list of all the characters in the string\n    char_list = list(test_str)\n\n    # Iterate over the characters in the list\n    for i in range(len(char_list)):\n        # Check if the character is a number\n        if char_list[i].isdigit():\n            # Move the number to the end of the list\n            temp = char_list.pop(i)\n            char_list.append(temp)\n\n    # Join the list of characters back into a string\n    final_str = ''.join(char_list)\n\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if num_list:\n        num_str = ''.join(num_list)\n        result_str = test_str.replace(num_str, '')\n        return result_str + num_str\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Define a list to hold the numbers\n    nums = []\n\n    # Loop over each character in the string\n    for char in test_str:\n        # If the character is a number, add it to the nums list\n        if char.isdigit():\n            nums.append(char)\n\n    # Sort the nums list in reverse order\n    nums.sort(reverse=True)\n\n    # Join the sorted list of numbers into a new string\n    new_str = ''.join(nums)\n\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # initialize an empty list to store the numbers\n    num_list = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # otherwise, add the character to the end of the string\n        else:\n            test_str = test_str.replace(char, \"\") + char\n    # concatenate the numbers and non-numbers to form the final string\n    final_str = \"\".join(num_list) + test_str\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for char in test_str:\n        if char.isdigit():\n            result += char\n        else:\n            result += test_str.count(char) * char\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n    # Initialize the variables\n    max_subset = 0\n    current_subset = [a[0]]\n    # Loop through the list\n    for i in range(1, len(a)):\n        # Check if the current number is divisible by the previous number in the current subset\n        if a[i] % current_subset[-1] == 0:\n            # If it is, add the number to the current subset and update the maximum subset size\n            current_subset.append(a[i])\n            max_subset = max(max_subset, len(current_subset))\n        else:\n            # If it isn't, reset the current subset and try to find a new subset that is divisible\n            current_subset = [a[i]]\n    # Return the maximum subset size\n    return max_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables\n    size = 1\n    prev = a[0]\n\n    # loop through the list\n    for i in range(1, len(a)):\n        # if the current element is not divisible by the previous element, update the size and reset prev\n        if a[i] % prev!= 0:\n            size = i - prev + 1\n            prev = a[i]\n        # if the current element is divisible by the previous element, increment size and update prev\n        else:\n            size += 1\n            prev = a[i]\n\n    # return the size of the largest subset\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    # initialize variables\n    max_size = 0\n    current_size = 0\n\n    # loop through the list of numbers\n    for num in a:\n        # calculate the size of the current subset\n        if num % 3 == 0:\n            current_size += 1\n        else:\n            current_size = 0\n\n        # update the maximum size of the subset\n        if current_size > max_size:\n            max_size = current_size\n\n    # return the maximum size of the subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort() # sort the list in ascending order\n    n = len(a) # number of elements in the list\n    count = 0 # number of pairs found\n\n    for i in range(n):\n        j = i + 1\n        while j < n and a[i] % a[j]!= 0: # skip numbers that are not divisible by the current number\n            j += 1\n\n        count += j - i # update the count with the number of pairs found\n\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    n = len(a)\n    # Create a boolean array 'is_divisible' of size 2n+1\n    is_divisible = [True] * (2*n+1)\n    # Initialize 'largest_subset' to 0\n    largest_subset = 0\n    # Iterate through the array from the first element to the second last element\n    for i in range(1, n):\n        # If the element at position 'i' is divisible by 2\n        if a[i] % 2 == 0:\n            # Iterate through the array from 'i' to the second last element\n            for j in range(i, n):\n                # If the element at position 'j' is divisible by 2\n                if a[j] % 2 == 0:\n                    # If 'is_divisible[j+1]' is true, then the pair (a[i], a[j]) is divisible\n                    if is_divisible[j+1]:\n                        # Update 'largest_subset' if the size of the current subset is greater than 'largest_subset'\n                        if j-i+1 > largest_subset:\n                            largest_subset = j-i+1\n    # Return the value of 'largest_subset'\n    return largest_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # initialize a set to store the numbers already included in the subset\n    included = set()\n    # initialize a variable to store the length of the largest subset found so far\n    max_length = 0\n    # loop through the list of numbers\n    for num in a:\n        # if the number is not already in the included set and is divisible by 2, add it to the included set and update max_length\n        if num not in included and num % 2 == 0:\n            included.add(num)\n            max_length = max(max_length, len(included))\n    # return the maximum length of the subset found\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables\n    n = len(a)\n    dp = [1] * n\n    max_size = 1\n    current_size = 1\n\n    # Iterate through the list\n    for i in range(1, n):\n        # If the current number is not divisible by the i-th number, increment the current size and check if it is greater than the maximum size\n        if a[i] % a[i-1]!= 0:\n            current_size += 1\n            if current_size > max_size:\n                max_size = current_size\n        else:\n            current_size = 1\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # create a dictionary to store the count of each number in the list\n    count = {}\n    \n    # iterate through the list and count the number of times each number appears\n    for num in a:\n        count[num] = count.get(num, 0) + 1\n    \n    # create a list to store the current subset\n    subset = []\n    \n    # initialize variables to keep track of the largest subset size and the current subset size\n    largest_size = 0\n    current_size = 0\n    \n    # iterate through the list of numbers and find the largest subset that is divisible by every number\n    for num in a:\n        # check if the number is divisible by the current number in the subset\n        if num % subset[-1] == 0:\n            current_size += count[num]\n        else:\n            # if the number is not divisible by the current number in the subset, add it to the subset and reset the current size\n            current_size = count[num]\n            subset.append(num)\n            largest_size = max(largest_size, current_size)\n    \n    # if the subset does not contain all the numbers in the list, it must be a subset that is larger than any subset that is divisible by all the numbers\n    if len(subset)!= len(a):\n        largest_size = len(a)\n    \n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    # Creating a 2D list to store the subset sizes of every possible subset of size k\n    subsets = [[0] * n for _ in range(n+1)]\n    \n    # Initialize the base case of the recursive function to all zeros\n    for i in range(n+1):\n        subsets[i][i] = 0\n        \n    # Fill in the rest of the subsets\n    for k in range(2, n+1):\n        for i in range(n-k+1):\n            j = i + k\n            subsets[i][j] = max(subsets[i][j], subsets[i][i] + subsets[i+1][j-1])\n            \n    # Return the maximum subset size\n    return max(subsets[0][n-1])"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Find the maximum value in the list\n    max_val = max(a)\n    # Initialize a dictionary to store the count of each number in the list\n    count = {}\n    # Initialize the result to be 0\n    result = 0\n    # Iterate through the list and update the count dictionary and the result\n    for num in a:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n        # Update the result if every pair is divisible\n        if count[num] * num % max_val == 0:\n            result = max(result, num)\n    # Return the result\n    return result"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    sorted_list = arr1 + arr2\n    sorted_list.sort()\n    \n    # If the size of the list is odd, the median is the middle element\n    if n % 2 == 1:\n        return sorted_list[n//2]\n    # If the size of the list is even, the median is the average of the two middle elements\n    else:\n        return (sorted_list[n//2-1] + sorted_list[n//2])/2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists into a single sorted list\n    merged = arr1 + arr2\n\n    # Find the middle index of the merged list\n    mid = n // 2\n\n    # If the length of the merged list is odd, the median is the middle element\n    if n % 2 == 1:\n        return merged[mid]\n\n    # If the length of the merged list is even, the median is the average of the middle two elements\n    else:\n        return (merged[mid - 1] + merged[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge both lists into a single list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    # Find the median\n    if len(merged_list) % 2 == 0:\n        # If the length of the list is even, return the average of the two middle elements\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        # If the length of the list is odd, return the middle element\n        median = merged_list[n//2]\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of same size, n, and returns their median.\n    If the length of one list is less than n, then the function will take the remaining elements of the other list as well.\n    \"\"\"\n    # Find the median of the two sorted lists\n    sorted_list = sorted(arr1 + arr2)\n    n = len(sorted_list)\n\n    if n % 2 == 0:\n        # If the length of the sorted list is even, then the median is the average of the middle two elements\n        median = (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        # If the length of the sorted list is odd, then the median is the middle element\n        median = sorted_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n\n    mid1 = n // 2\n    mid2 = n // 2\n    if n % 2 == 0:\n        return (arr1[mid1 - 1] + arr1[mid1]) / 2\n    else:\n        return arr1[mid1]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted arrays and a size n as input and returns the median of the two arrays.\n    \"\"\"\n    # Combine the two arrays and sort them in ascending order\n    combined_arr = arr1 + arr2\n    combined_arr.sort()\n\n    # Find the median index\n    median_index = n // 2\n\n    # Check if the size of the array is odd or even\n    if n % 2 == 0:\n        # Find the average of the middle two elements\n        median = (combined_arr[median_index - 1] + combined_arr[median_index]) / 2\n    else:\n        # Find the middle element\n        median = combined_arr[median_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Find the median of the two arrays\n    median1 = (arr1[n//2] + arr1[(n//2)-1]) / 2\n    median2 = (arr2[n//2] + arr2[(n//2)-1]) / 2\n    # Return the median\n    return (median1 + median2) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists into a single sorted list\n    sorted_list = arr1 + arr2\n\n    # find the middle index of the sorted list\n    mid = n // 2\n\n    # if the length of the sorted list is odd, the median is the middle element\n    if n % 2 == 1:\n        return sorted_list[mid]\n\n    # if the length of the sorted list is even, the median is the average of the middle two elements\n    else:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Sort the lists\n    arr1.sort()\n    arr2.sort()\n\n    # Find the median\n    if len(arr1) == len(arr2):\n        if n % 2 == 0:\n            return (arr1[n//2-1] + arr2[n//2-1]) / 2\n        else:\n            return arr1[n//2]\n    elif len(arr1) > len(arr2):\n        return get_median(arr1[n//2:], arr2, n-(n//2))\n    else:\n        return get_median(arr1, arr2[n//2:], n-(n//2))"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes three parameters: the two sorted lists, n, which is the size of the lists.\n    It then calculates the median of the two lists and returns the median.\n    '''\n    # first, find the median of arr1 and arr2\n    mid = n // 2\n    if n % 2 == 0:\n        # if n is even, take the average of the middle two elements\n        median1 = (arr1[mid-1] + arr1[mid]) / 2.0\n        median2 = (arr2[mid-1] + arr2[mid]) / 2.0\n    else:\n        # if n is odd, take the middle element\n        median1 = arr1[mid-1]\n        median2 = arr2[mid-1]\n    \n    # now, find the median of the two medians\n    median_median = (median1 + median2) / 2.0\n    \n    return median_median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # initialize an empty list to store the results\n    results = []\n    # loop over each number in the input list\n    for num in nums:\n        # compute the nth power of the number and append it to the results list\n        results.append(num ** n)\n    # return the list of results\n    return results"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppercase_string = string.upper()\n    print(uppercase_string)"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the string to uppercase and return it\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # convert the string to uppercase and return it\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = string.upper()\n    return new_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the length is less than 2\n    if length < 2:\n        return newList\n    \n    # Get the first and last element in the list\n    first = newList[0]\n    last = newList[length - 1]\n    \n    # Set the first element as the last element and the last element as the first element\n    newList[0] = last\n    newList[length - 1] = first\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the length of the list is even or odd\n    if length % 2 == 0:\n        # If the length is even, swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        # If the length is odd, swap the first and second-to-last elements\n        newList[0], newList[-2] = newList[-2], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the input list is empty\n    if len(newList) == 0:\n        return newList\n\n    # Interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # length of the list\n    n = len(newList)\n    # if the length of the list is less than 2, then there is no need to swap\n    if n < 2:\n        return newList\n    else:\n        # swap the first and last elements of the list\n        newList[0], newList[n-1] = newList[n-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        print(\"The list should have at least 2 elements.\")\n    else:\n        # Interchange the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"The new list after swapping the first and last elements is: \", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    first, last = newList[0], newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula to find the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    area = 3 * r * r\n    \n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the circumference of the semicircle\n    c = 2 * 3.14 * r\n\n    # Calculate the area of a triangle with the given sides\n    a = 0.5 * c ** 2\n    b = 0.5 * c\n    h = 2 * b\n\n    # Calculate the area of the largest triangle\n    area = max(a, b, h)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # Calculate the area of a triangle using Heron's formula\n    def herons_formula(s):\n        a = (s*(s-r)**2)/(2*math.tan(math.pi/s))\n        return math.sqrt(a)\n\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle\n    area = 0\n    for s in range(1, r+1):\n        area = max(area, herons_formula(s))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(3):\n        area += r\n        r -= 1\n    return area / 2"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # area of a triangle\n    def triangle(s):\n        return 0.5 * s * s\n\n    # area of a square\n    def square(s):\n        return s * s\n\n    # area of a parallelogram\n    def parallelogram(a, b):\n        return a * b\n\n    # area of the largest triangle inscribed in a semicircle with radius r\n    def largest_triangle(r):\n        # half the diameter of the semicircle\n        h = r * math.sqrt(3) / 2\n        # area of the largest triangle that can be inscribed in the semicircle\n        t1 = triangle(h)\n        # area of the largest triangle that can be inscribed in a square with side length h\n        t2 = square(h)\n        # area of the largest triangle that can be inscribed in a parallelogram with base a and height b\n        t3 = parallelogram(h, h)\n        # maximum area among the three triangles\n        return max(t1, t2, t3)\n\n    # area of the largest triangle inscribed in a semicircle with radius r\n    return largest_triangle(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area_of_triangle(a, b, c):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return area\n    \n    # calculate the area of a triangle with sides of length 2r and 2r/2\n    a = 2 * r\n    b = 2 * r / 2\n    c = 2 * r\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_area = area_of_triangle(a, b, c)\n    \n    # calculate the area of a triangle with sides of length 2r and 2r/2\n    a = 2 * r\n    b = 2 * r / 2\n    c = 2 * r / 2\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    if area_of_triangle(a, b, c) > max_area:\n        max_area = area_of_triangle(a, b, c)\n    \n    # calculate the area of a triangle with sides of length 2r and 2r/4\n    a = 2 * r\n    b = 2 * r / 4\n    c = 2 * r / 4\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    if area_of_triangle(a, b, c) > max_area:\n        max_area = area_of_triangle(a, b, c)\n    \n    # calculate the area of a triangle with sides of length 2r and 2r/4\n    a = 2 * r\n    b = 2 * r / 8\n    c = 2 * r / 8\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    if area_of_triangle(a, b, c) > max_area:\n        max_area = area_of_triangle(a, b, c)\n    \n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    semi_perimeter = 2 * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = math.pi * semi_perimeter**2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * (3*r**2)\n    return area\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int, optional): The starting index of the range of numbers to search (default is 0).\n        end (int, optional): The ending index of the range of numbers to search (default is the last index of the array).\n\n    Returns:\n        int: The smallest missing number in the array.\n\n    Raises:\n        ValueError: If the array is not sorted or contains duplicate values.\n    '''\n\n    # Check if the array is sorted and contains unique values\n    if len(array)!= len(set(array)):\n        raise ValueError('Array must be sorted and contain unique values.')\n\n    # Check if the starting index is valid\n    if start < 0 or start >= len(array):\n        raise ValueError('Starting index must be within the range of the array.')\n\n    # Check if the ending index is valid\n    if end is None:\n        end = len(array) - 1\n    elif end < start or end >= len(array):\n        raise ValueError('Ending index must be within the range of the array.')\n\n    # Find the smallest missing number in the array\n    for i in range(start, end+1):\n        if i!= array[i]:\n            return i\n\n    # If no missing number was found, return the length of the array\n    return len(array)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end == None:\n        end = len(array)-1\n    missing = start\n\n    for i in range(start,end+1):\n        if array[i] == missing:\n            missing += 1\n        else:\n            array[i],array[array[i]-1] = array[array[i]-1],array[i]\n\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    If the input list is not sorted, it can be sorted using the built-in sorted function.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers and returns the smallest missing number.\n\n    :param array: A list of natural numbers, sorted in ascending order.\n    :param start: The starting index of the array. Default is 0.\n    :param end: The ending index of the array. Default is None. If None, the last index will be used.\n    :return: The smallest missing number in the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i + 1 not in array:\n            return i + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    This function takes a sorted list of natural numbers as an input and returns the smallest missing number.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if not end:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = max(array)\n\n    for i in range(start, end+1):\n        if i not in array:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function will find the smallest missing number from a sorted list of natural numbers.\n    \n    Parameters:\n    -----------\n    array: List of integers. List of numbers to search for the smallest missing number.\n    start: Optional, int. Starting index of the search range. Default is 0.\n    end: Optional, int. Ending index of the search range. Default is None.\n    \n    Returns:\n    --------\n    The smallest missing number from the given sorted list of natural numbers.\n    \n    \"\"\"\n\n    if not array:\n        raise ValueError(\"Array cannot be empty.\")\n    \n    if end is None:\n        end = len(array) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if mid > 0 and array[mid] == array[mid - 1]:\n            start = mid + 1\n        elif mid < len(array) - 1 and array[mid] == array[mid + 1]:\n            end = mid - 1\n        else:\n            return mid\n            \n    raise ValueError(\"No missing number found in the given sorted list.\")"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers as input and returns the first missing number in the array.\n    The array should be sorted in non-decreasing order.\n    If the array is not sorted, the function will use binary search to find the missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    if start < 0 or start > end:\n        return \"Invalid input. Start index should be between 0 and end index.\"\n\n    if start > end:\n        return \"Invalid input. Start index should be less than or equal to end index.\"\n\n    if array[start] < 1:\n        return \"Invalid input. All elements in the array should be positive integers.\"\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if mid == 0 or array[mid]!= mid:\n            return mid\n\n        if array[mid] == mid + 1:\n            return mid + 1\n\n        if array[mid] == mid:\n            if mid == end:\n                return mid + 1\n            if mid == start:\n                return mid - 1\n            else:\n                if array[mid - 1] == mid - 1:\n                    return mid - 1\n                else:\n                    return mid\n\n    return \"Invalid input. All elements in the array should be unique.\"\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = [] \n    for num in list: \n        if num % 2 == 0: \n            result.append(num) \n    return result "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adjacent = []\n    x, y = ele\n    if x > 0:\n        adjacent.append((x-1, y))\n    if x < len(sub)-1:\n        adjacent.append((x+1, y))\n    if y > 0:\n        adjacent.append((x, y-1))\n    if y < len(sub[0])-1:\n        adjacent.append((x, y+1))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 2:\n        sub.append(ele)\n    else:\n        for i in range(len(ele)):\n            sub.append((ele[i], ele[i+1]))\n            sub.append((ele[i], ele[i-1]))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        sub = []\n    sub.append(ele)\n\n    if len(ele) == 2:\n        return [(ele[0] + 1, ele[1]), (ele[0] - 1, ele[1]), (ele[0], ele[1] + 1), (ele[0], ele[1] - 1)]\n    elif len(ele) == 3:\n        return [(ele[0] + 1, ele[1], ele[2]), (ele[0] - 1, ele[1], ele[2]), (ele[0], ele[1] + 1, ele[2]), (ele[0], ele[1] - 1, ele[2]),\n                (ele[0], ele[1], ele[2] + 1), (ele[0], ele[1], ele[2] - 1)]\n    else:\n        print(\"Invalid coordinate tuple.\")\n        return []"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0: \n        sub.append((x-1, y))\n    if x < 3: \n        sub.append((x+1, y))\n    if y > 0: \n        sub.append((x, y-1))\n    if y < 3: \n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # get the adjacent coordinates of the given coordinate tuple\n    x, y = ele\n    adj_coords = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    \n    # append the adjacent coordinates to the sublist\n    sub.extend(adj_coords)\n    \n    # recursively call the function for all the adjacent coordinates\n    for coord in adj_coords:\n        adjac(coord, sub)\n        \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n\n    # Adjacent coordinates in the 4 directions\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n\n    # Filter out coordinates that are already in the sublist\n    adj = list(set(adj).difference(set(sub)))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adjacent = []\n    x, y = ele\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                adj_x, adj_y = x + i, y + j\n                if (adj_x, adj_y) not in sub:\n                    sub.append((adj_x, adj_y))\n                    adjacent.append((adj_x, adj_y))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if isinstance(ele, tuple):\n        x, y = ele\n        if (x, y-1) not in sub:\n            sub.append((x, y-1))\n        if (x, y+1) not in sub:\n            sub.append((x, y+1))\n        if (x-1, y) not in sub:\n            sub.append((x-1, y))\n        if (x+1, y) not in sub:\n            sub.append((x+1, y))\n    elif isinstance(ele, list):\n        for item in ele:\n            sub.extend(adjac(item, sub))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n\n    if x > 0:\n        adj.append((x-1, y))\n    if x < n-1:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < m-1:\n        adj.append((x, y+1))\n\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for char in text:\n        if char =='':\n            text = text.replace(char, '_')\n        elif char == '_':\n            text = text.replace(char,'')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # convert spaces to underscores\n    text = text.replace(\" \", \"_\")\n    # convert underscores to spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    text = text.replace(' ', '_')\n\n    # Replace underscores with whitespaces\n    text = text.replace('_','')\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for char in text:\n        if char =='':\n            result += '_'\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Define the mapping of characters to replace\n    mapping = {' ': '_', '_':''}\n    # Iterate through each character in the string\n    for i in range(len(text)):\n        # If the character is a space, replace it with an underscore\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        # If the character is an underscore, replace it with a space\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n        # If the character is neither space nor underscore, do nothing\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # initialize two pointers for the start and end of the list\n    start = 0\n    end = len(num_list) - 1\n    \n    # loop through the list and swap if the current element is zero\n    while start < end:\n        if num_list[start] == 0:\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            start += 1\n        else:\n            end -= 1\n\n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_indices = []\n\n    # find all the indices of the zeroes in the list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_indices.append(i)\n\n    # move the zeroes to the end of the list\n    for i in reversed(zero_indices):\n        num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers: one at the beginning of the list and one at the end of the list.\n    left = 0\n    right = len(num_list) - 1\n\n    # While the left pointer is less than the right pointer, swap the elements if the left element is zero.\n    while left < right:\n        if num_list[left] == 0:\n            # Move the zero element to the end of the list.\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            # Update the pointers.\n            left += 1\n            right -= 1\n        else:\n            # Move the non-zero element to its correct position.\n            left += 1\n    \n    # Print the final list.\n    print(num_list)\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0  # starting index\n    while i < len(num_list):\n        if num_list[i] == 0:\n            # swap the element with the next element\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n            # move the index to the next position\n            i += 1\n        else:\n            # increment the index\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Create a new list to store non-zero values\n    non_zero_list = []\n\n    # Iterate through the input list\n    for num in num_list:\n        # If the value is not zero, append it to the new list\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # Append all zeroes to the end of the new list\n    non_zero_list.extend([0] * num_list.count(0))\n\n    # Return the new list with zeroes at the end\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    # Create a new list to store non-zero numbers\n    non_zero_list = []\n    # Iterate through the given list\n    for num in num_list:\n        # If the number is not zero, append it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n    # Append all zeroes to the end of the non_zero_list\n    non_zero_list.extend([0]*num_list.count(0))\n    # Return the non-zero list with all zeroes moved to the end\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.remove(num_list[i])\n            num_list.append(0)\n            i += 1\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    :param num_list: a list of integers\n    :return: the modified list with all zeroes moved to the end\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_index = index\n            break\n    if zero_index!= -1:\n        num_list[len(num_list)-1], num_list[zero_index] = num_list[zero_index], num_list[len(num_list)-1]\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers arr and its length n as input and returns the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    # XOR operation is defined as A^B = A(1-B)\n    # So XOR of two elements is the same as XOR of their XOR's\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i] ^ arr[n-1-i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list of integers arr and its size n as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    # initialize two variables to keep track of the xor of the previous pair and the xor of the first pair\n    xor1 = xor2 = 0\n\n    # loop through the list and update the xor of the previous pair and the xor of the first pair\n    for i in range(n):\n        xor1 = xor1 ^ arr[i]\n        xor2 = xor2 ^ arr[i]\n\n    # return the sum of xor of all pairs of numbers in the list\n    return (xor1 ^ xor2)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n\n    # Convert the list to a heap\n    hq.heapify(iterable)\n\n    # Pop the maximum element from the heap and append it to the result list\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the list to a min-heap\n    hq.heapify(iterable)\n\n    # Extract elements from the heap one by one and append them to the result list\n    result = []\n    while hq.heappop(iterable) is not None:\n        result.append(hq.heappop(iterable))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    return [heapq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Convert the list to a min-heap\n    hq.heapify(iterable)\n    \n    # Build a max-heap using the list as a base\n    while len(iterable) > 1:\n        # Swap the root with the last element of the heap\n        hq.heappop(iterable)\n        hq.heappush(iterable, iterable[-1])\n    \n    # Return the sorted list\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a min heap.\n    '''\n    heap = hq.nsmallest(len(iterable), iterable, key=lambda x: x)\n    return [heapq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using heap sort algorithm.\n    \"\"\"\n    # Convert the input iterable to a list\n    lst = list(iterable)\n\n    # Build a max heap from the list\n    hq.heapify(lst)\n\n    # Build a new list by popping elements from the max heap and adding them to the new list\n    result = []\n    while lst:\n        result.append(hq.heappop(lst))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using the heap sort algorithm.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while hq.heapify(iterable):\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a max heap from the list\n    hq.heapify(iterable)\n\n    # Extract elements from the heap and append them to a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    while iterable:\n        hq.heappop(iterable)\n    return iterable"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount >= 0:\n        return \"No profit and no loss\"\n    else:\n        return \"Profit\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        print('No profit and no loss found')\n    elif profit == 0:\n        print('Profit and no loss found')\n    else:\n        print('No profit found')"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit > 0 or sale_amount == 0:\n        print(\"The given amount has no profit and no loss.\")\n        return True\n    else:\n        print(\"The given amount has a profit or loss.\")\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    This function checks whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return \"No profit and no loss\"\n    else:\n        return \"Profit\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss from the sale\n    profit = sale_amount - actual_cost\n\n    # Check if the profit and loss is zero or negative\n    if profit >= 0 and sale_amount > actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes the actual cost of the product and the amount sold for the product as input.\n    It returns True if the product has no profit and no loss, else it returns False.\n\n    >>> noprofit_noloss(100, 10)\n    True\n    >>> noprofit_noloss(50, 25)\n    False\n    >>> noprofit_noloss(50, 100)\n    False\n    \"\"\"\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n\n    if actual_cost <= sale_amount:\n        print(\"The given amount has no profit and no loss\")\n        return True\n    else:\n        print(\"The given amount has profit and loss\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount >= 0 and actual_cost - sale_amount <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    if profit > 0 and loss > 0:\n        return \"No profit or loss\"\n    else:\n        return \"Profit or loss\""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 0:\n        if t > 0:\n            if t < 10:\n                return int(round((13.12 + 0.6215 * t) * v / 100))\n            else:\n                return int(round((11.37 + 0.3965 * (t - 10)) * v / 100))\n        else:\n            return 0\n    else:\n        return 0"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 1.60934 # convert km/h to m/s\n    f = (9/5)*(t+273.15)+32 # convert temperature from Celsius to Fahrenheit\n    c = (f - 32) * 5/9 # convert temperature from Fahrenheit to Celsius\n    wc = c - 273.15 # calculate temperature in Kelvin\n    wi = math.sqrt(wc**2 + 2*4.37*wi + 42.47) # calculate wind chill index in K\n    wc_rounded = round(wi) # round wind chill index to the nearest integer\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    celsius = t - 273.15 # convert celsius to Fahrenheit\n    wind_speed = v * 1.60934 # convert km/h to m/s\n    k = 0.0065 # constant for converting F to C\n    wc = 35.74 + 0.6215 * celsius - 35.75 * math.log(wind_speed) + 0.4275 * math.log(wind_speed) ** 2\n    wc = max(0, round(wc)) # round wind chill to the nearest integer\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t >= -10:\n        return round(35.74 + 0.6215*t - 35.75*math.exp((17.62*t)/(t+243.5)) + 0.4275*v + 441.8)\n    elif t >= -30:\n        return round(35.75 + 0.6215*t - 35.75*math.exp((17.62*t)/(t+243.5)) + 0.4275*v + 441.8)\n    else:\n        return round(35.75 + 0.6215*t - 35.75*math.exp((17.62*t)/(t+243.5)) + 0.4275*v)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert wind velocity to m/s\n    v = v * 1000\n\n    # Calculate the dew point temperature\n    dew_point = 243.12 * ((1 - 0.0065 * t) * math.exp((17.67 * t) / (t + 243.5)) / (0.0065 * t + math.exp((17.67 * t) / (t + 243.5))))\n\n    # Calculate the wind chill index\n    wci = 240.7 + 0.042195 * v + 0.016718 * t - 0.010325 * dew_point + 0.000146 * t * t\n\n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n\n    # Convert temperature to Fahrenheit\n    fahrenheit = (t * 9/5) + 32\n\n    # Calculate wind chill index\n    ci = round((13.12 + (0.6215 * v) + (0.3965 * (fahrenheit - 32))) * 0.8)\n\n    # Return the wind chill index rounded to the nearest integer\n    return ci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    tc = t - 273.15 # convert to celsius\n    \n    if v < 3.1 or v > 15.0: # check for valid wind velocity\n        print(\"Invalid wind velocity\")\n        return None\n    \n    w = (1.34*tc)/(v**1.16) # calculate the wind chill index\n    \n    if w < 0: # check for negative wind chill index\n        w = 0\n    \n    return math.ceil(w) # round to the nearest integer\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index using the formulae for air temperature and relative humidity\n    c = (11.34 + 0.6215*t - 11.37*math.pow(t, 2) + 0.3965*math.pow(t, 3) - 0.114*math.pow(t, 4) + 0.00126*math.pow(t, 5))\n    c = c + 0.00036*math.pow(v, 2) + 0.000013*math.pow(v, 3)\n    wci = math.floor(c)\n    \n    # Check if the wind chill index is less than zero, then return the maximum value of 32767\n    if wci < 0:\n        wci = 32767\n        \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert the temperature to Kelvin\n    k = t + 273.15\n    \n    # Calculate the wind chill index\n    wc = -459.67 + (0.0065 * v) + (0.017 * k) - (0.00037 * k**2)\n    \n    # Round the wind chill index to the nearest integer\n    wc = int(round(wc))\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # calculate the wind chill index based on the formula provided in the problem statement\n    wc = 13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.3965 * t * math.log(v) - 0.143 * math.log(v) * math.log(v) + 0.0141 * (t - 273.15)**2\n    # round the result to the next integer\n    wc_rounded = round(wc)\n    return wc_rounded"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name.startswith('a'):\n            continue\n        result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            length_sum += len(name)\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    # Initialize the sum to 0\n    total_length = 0\n\n    # Iterate over the list of names\n    for name in sample_names:\n        # Remove leading and trailing whitespace from the name\n        name = name.strip()\n\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it and move on to the next name\n            continue\n\n        # Add the length of the name to the total\n        total_length += len(name)\n\n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    return sum(len(name) for name in filtered_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of names' lengths\n    length_sum = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the first character of the name is a lowercase letter\n        if name[0].islower():\n            # If it is, skip the name and move on to the next one\n            continue\n        # Add the length of the name to the sum\n        length_sum += len(name)\n        \n    # Return the sum of names' lengths\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Loop through the list of names\n    total_length = 0\n    for name in sample_names:\n        # If the name starts with a lowercase letter, skip it\n        if name[0].islower():\n            continue\n        # Otherwise, add the length of the name to the total\n        else:\n            total_length += len(name)\n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if not name[0].islower():\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define a list of characters that should not be counted as a part of the name\n    not_chars = ['-', '.', ',', '(', ')', ';', ':', '\"', '\\'', '[', ']', '{', '}']\n    # Initialize a variable to store the sum of the lengths of the names\n    name_length_sum = 0\n    # Iterate through the list of names\n    for name in sample_names:\n        # Convert the name to lowercase and split it into words\n        name_words = name.lower().split()\n        # Initialize a variable to store the length of the name\n        name_length = 0\n        # Iterate through the list of words in the name\n        for word in name_words:\n            # Check if the word does not start with a lowercase letter\n            if word[0] not in not_chars:\n                # Add the length of the word to the running total\n                name_length += len(word)\n        # Add the length of the name to the running total\n        name_length_sum += name_length\n    # Return the sum of the lengths of the names after removing the names that start with a lowercase letter\n    return name_length_sum"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.strip() # remove any leading or trailing spaces\n    items = re.sub(r'(\\(|\\)|\\[|\\]|\\{|\\})', '', items) # remove parenthesis\n    items = re.sub(r'\\s+','', items) # remove multiple spaces\n    items = items.strip() # remove any leading or trailing spaces\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis from the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Remove the white spaces around the items\n    items = items.strip()\n    # Return the cleaned string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\((.*?)\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and returns a new string without the parenthesis and what's inbetween them.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n    elif n == 1:\n        return 1\n    else:\n        nonagonal = 1\n        for i in range(1, n):\n            nonagonal += (i + 1)\n        return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    This function takes a positive integer n and returns the nth nonagonal number.\n    '''\n\n    if n < 1:\n        return \"Invalid input. n must be a positive integer.\"\n    \n    # Calculate the sum of the first n natural numbers\n    sum_natural = 1\n    for i in range(1, n+1):\n        sum_natural += i\n    \n    # Calculate the sum of the squares of the first n natural numbers\n    sum_squares = 0\n    for i in range(1, n+1):\n        sum_squares += i*i\n    \n    # Calculate the nonagonal number\n    nonagonal = sum_natural - sum_squares\n    \n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n-1)*(2*n-1)\n\nn = int(input(\"Enter a positive integer: \"))\nif n <= 0:\n    print(\"Please enter a positive integer greater than zero.\")\nelse:\n    print(\"The\", n, \"nonagonal number is\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0: \n        return None\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        return 4 * is_nonagonal(n-2) - 4 * is_nonagonal(n-1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    This function takes an integer n as input and returns True if n is a nonagonal number, and False otherwise.\n    A nonagonal number is a positive integer that is both a square and an odd number.\n    For example, 6 is a nonagonal number, since it is both a square and an odd number: 1^2 + 2^2 = 1 + 4 = 5, and 6 is odd.\n    '''\n\n    # Check if n is a positive integer\n    if n <= 0:\n        return False\n    \n    # Check if n is a square number\n    square = int(n**0.5)\n    if n!= square**2:\n        return False\n    \n    # Check if n is an odd number\n    if n % 2 == 0:\n        return False\n    \n    # If all checks pass, n is a nonagonal number\n    return True"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return (n * (n - 1)) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize variables\n    nonagonal_count = 1\n    current_num = 1\n\n    # Loop through numbers from 1 to n\n    while nonagonal_count < n:\n\n        # Calculate next nonagonal number\n        next_nonagonal = current_num * (current_num + 1) / 2\n\n        # Check if the next nonagonal number is greater than n\n        if next_nonagonal > n:\n            return current_num\n\n        # Update variables\n        nonagonal_count += 1\n        current_num = next_nonagonal\n\n    # If the loop completes, return -1 as there are no more nonagonal numbers\n    return -1\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    nonagonal_number = (n * (n + 1) // 2) ** 2\n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer `n` as input and returns True if the number is a nonagonal number, and False otherwise.\n\n    A nonagonal number is a number that can be expressed as the sum of two smaller nonagonal numbers. For example, 1^2 + 2^2 = 5^2, but 3^2 + 4^2 = 9^2, so 3^2 + 4^2 = 19^2 is not a nonagonal number.\n\n    The function works by first defining a list of all the nonagonal numbers up to `n`. Then, it iterates through the list, checking if each number is a nonagonal number. If it is, the function returns True. Otherwise, it continues to iterate through the list until it finds a nonagonal number or reaches the end of the list. If it reaches the end of the list without finding a nonagonal number, the function returns False.\n    '''\n\n    # Define a list of all the nonagonal numbers up to n\n    nonagonal_numbers = [i**2 + j**2 for i in range(1, n+1) for j in range(i+1, n+1)]\n\n    # Iterate through the list and check if each number is a nonagonal number\n    for num in nonagonal_numbers:\n        if num == (n**2 + (n-num))**2:\n            return True\n\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n-1) * 2"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+\\b(?!.*\\b[a-zA-Z]+\\b)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall('\\b\\w+\\b', text)\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b') # match words with a-z and A-Z\n    matches = re.findall(pattern, text) # find all the words in the text\n    \n    for match in matches:\n        if match[0] == 'z' and match[-1] == 'z': # check if the first and last characters are 'z'\n            print(match)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    # Use regular expression to find all instances of 'z' in the text\n    z_matches = re.findall(r'\\b\\w+z\\b', text)\n    \n    # Iterate through each instance of 'z' and check if it's at the start or end of the word\n    for match in z_matches:\n        if match[0].islower() and match[-1].islower():\n            print(f'\"{match}\" is at the start and end of a word, which is not allowed.')\n        elif match[0].isupper() and match[-1].isupper():\n            print(f'\"{match}\" is at the start and end of a word, which is not allowed.')\n        else:\n            continue\n    \n    # Return the number of instances of 'z' found in the text\n    return len(z_matches)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-word characters (except whitespace) from the text\n    cleaned_text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Split the cleaned text into individual words\n    words = cleaned_text.split()\n\n    # Iterate through each word\n    for word in words:\n        # Check if the word starts with 'z' and ends with 'z' (except when it's the first or last word)\n        if word.startswith('z') and (word.endswith('z') or word == 'z'):\n            # If the word meets the criteria, print it\n            print(word)\n\n    return"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b(?!.*\\W)[zZ]\\b')\n    return pattern.search(text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    wordz_pattern = re.compile(r\"(?<![a-zA-Z])z(?![a-zA-Z])\", re.IGNORECASE)\n    return wordz_pattern.search(text) is not None"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input\n    else:\n        input[k], input[-1] = input[-1], input[k]\n        return reverse_Array_Upto_K(input, k+1)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Check if the length of the input array is greater than or equal to k.\n    if len(input) < k: \n        return None\n    \n    # Create a new list to store the reversed part of the array.\n    reversed_list = []\n    \n    # Reverse the first k elements of the array.\n    for i in range(k):\n        reversed_list.append(input[i])\n    \n    # Reverse the remaining part of the array.\n    for i in range(len(input)-k):\n        reversed_list.append(input[i+k])\n        \n    # Reverse the new reversed_list.\n    reversed_list.reverse()\n    \n    # Return the reversed array.\n    return reversed_list"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if k is within the range of the array\n    if k >= len(input):\n        return input\n    \n    # Reverse the array from the first k elements to the end\n    for i in range(k-1, len(input)-1, -1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Reverse the array up to a given position.\n    \"\"\"\n    # Check if k is a valid index\n    if k < 0 or k >= len(input):\n        raise ValueError(\"Invalid index\")\n\n    # Initialize two pointers: one at the start and one at the end of the array\n    left, right = 0, len(input) - 1\n\n    # While the left pointer is less than k, swap elements at the pointers\n    while left < k:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n\n    # Reverse the remaining elements in the array\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes in an array and a position k and reverses the array upto the position k.\n    \"\"\"\n    # Initialize variables to keep track of the start and end of the array\n    start = 0\n    end = len(input) - 1\n    \n    # Reverse the array upto the position k\n    while start < k:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    if k > len(input) or k <= 0:\n        return \"Invalid input\"\n    else:\n        reverse_array = input[0:k-1]\n        for i in range(k-1, len(input)-1):\n            reverse_array.append(input[i])\n        reverse_array.append(input[len(input)-1])\n        return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and a position k as input and reverses the array upto the given position.\n    '''\n    # find the length of the array\n    n = len(input)\n\n    # if k is greater than or equal to the length of the array, reverse the whole array\n    if k >= n:\n        input.reverse()\n\n    # if k is less than the length of the array, reverse the array from position 0 to k-1\n    elif k > 0:\n        input[:k].reverse()\n        input[k:].reverse()\n\n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if the input is a list or not\n    if not isinstance(input, list):\n        raise TypeError('Input must be a list.')\n    \n    # Check if k is less than 1 or not\n    if k < 1:\n        raise ValueError('k must be greater than or equal to 1.')\n    \n    # If k is greater than the length of the list, reverse the entire list\n    if k > len(input):\n        input.reverse()\n        return input\n    \n    # Reverse the first k elements of the list\n    input[:k] = input[:k][::-1]\n    \n    # Reverse the remaining elements of the list\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k):\n        input.pop()\n\n    input.reverse()\n\n    for i in range(k):\n        input.pop(0)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create a new dictionary by updating the original dictionary with the values from the second dictionary\n    updated_dict = dict(test_dict)\n    # Create a new tuple by concatenating the original tuple with the new dictionary\n    updated_tuple = test_tup + (updated_dict,)\n    # Return the updated tuple\n    return updated_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Combine the tuple and the dictionary into a new dictionary\n    combined_dict = {**test_dict, **test_tup}\n    # Convert the dictionary to a tuple\n    result = tuple(combined_dict.items())\n    return result"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += tuple(test_dict.items())\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict['name'] = 'Alice'\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Combine the two dictionaries into a single dictionary\n    combined_dict = {**test_dict, **test_tup}\n    # Convert the combined dictionary to a tuple\n    combined_tup = tuple(combined_dict.items())\n    return combined_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Use list comprehension to create a new tuple with the dictionary added to the original tuple\n    new_tup = [(k, v) for k, v in test_tup.items()]\n    new_tup.append(test_dict)\n    return tuple(new_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup.append(test_dict[key])\n    return tuple(test_tup)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # add the dictionary to the tuple\n    updated_tup = test_tup + (test_dict,)\n    return updated_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup[0], test_dict, test_tup[2])"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for i in range(N)]\n\n    # Initialize the first cell with 0\n    dp[0][0] = 0\n\n    # Initialize the dp table for other cells\n    for i in range(1, N):\n        for j in range(1, N):\n            # If the cell has not been visited yet\n            if dp[i-1][j] == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i-1][j]\n\n    # Compute the maximum average path\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n\n    # Initialize top-left and bottom-right paths\n    for i in range(N):\n        dp[0][i] = dp[i][0] = cost[0][i]\n    dp[0][0] = 0\n\n    # Fill the rest of the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average path\n    max_avg = max(dp[N-1][N-1], dp[N-1][N-2])\n    for i in range(N-3, -1, -1):\n        for j in range(N-3, -1, -1):\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": ""
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    max_cost = float('-inf')\n    visited = set()\n    path = []\n    \n    # Traverse the matrix and find all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            visited.add((i, j))\n            if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                max_cost = max(max_cost, cost[i][j])\n            else:\n                if (i, j) not in visited:\n                    path.append((i, j))\n                    max_cost = max(max_cost, cost[i][j])\n                    visited.add((i, j))\n                    if len(path) == len(cost):\n                        max_path_cost = sum(cost[i][j] for i, j in path)\n                        max_avg_cost = max_path_cost / len(path)\n                        if max_avg_cost > max_cost:\n                            max_cost = max_avg_cost\n    \n    return max_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = 0\n    for i in range(n):\n        # Start with the first row or column\n        if i == 0:\n            for j in range(n):\n                # Start with the first cell in the first row or column\n                if j == 0:\n                    avg = cost[0][0]\n                    path = [[0, 0]]\n                else:\n                    avg = avg - cost[0][j-1] + cost[i][j-1]\n                    path = path + [[0, j-1]]\n                # Update the maximum average and path for this path\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = path\n                # Move to the next cell\n                avg = avg - cost[i][j] + cost[i+1][j]\n                path = path + [[i+1, j]]\n        # Start with the last row or column\n        else:\n            for j in range(n-1, -1, -1):\n                # Start with the last cell in the last row or column\n                if j == n-1:\n                    avg = cost[n-1][n-1]\n                    path = [[n-1, n-1]]\n                else:\n                    avg = avg - cost[n-1][j+1] + cost[n-1][j]\n                    path = path + [[n-1, j+1]]\n                # Update the maximum average and path for this path\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = path\n                # Move to the previous cell\n                avg = avg - cost[i][j] + cost[i][j-1]\n                path = path + [[i, j-1]]\n    # Convert the list of paths to a matrix\n    max_matrix = [[0 for j in range(n)] for i in range(n)]\n    for path in max_path:\n        max_matrix[path[0]][path[1]] = 1\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    for i in range(N):\n        max_avg = max(max_avg, sum([cost[j][i] for j in range(N)]) / (i+1))\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    visited = [[False for j in range(N)] for i in range(N)]\n    total_cost = 0\n    max_average = 0\n    max_path = []\n    \n    def helper(i, j, path, current_cost):\n        visited[i][j] = True\n        \n        if i == N-1 and j == N-1:\n            total_cost += current_cost\n            if max_average < current_cost/len(path):\n                max_average = current_cost/len(path)\n                max_path = path\n            return\n        \n        if i < N-1:\n            if not visited[i+1][j]:\n                path.append(i+1)\n                helper(i+1, j, path, current_cost+cost[i+1][j])\n                path.pop()\n        \n        if j < N-1:\n            if not visited[i][j+1]:\n                path.append(j+1)\n                helper(i, j+1, path, current_cost+cost[i][j+1])\n                path.pop()\n        \n        visited[i][j] = False\n    \n    for i in range(N):\n        for j in range(N):\n            if not visited[i][j]:\n                path = [i, j]\n                helper(i, j, path, cost[i][j])\n    \n    return max_average, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    def dfs(i, j, path, total_cost, visited_cells):\n        if i == N - 1 and j == N - 1:\n            nonlocal max_avg\n            if len(path) > max_path_len:\n                max_path_len = len(path)\n            max_avg = max(max_avg, total_cost / visited_cells)\n            return\n        if i < 0 or j < 0 or i >= N or j >= N:\n            return\n        if i == 0 or j == 0 or (i > 0 and cost[i - 1][j] > cost[i][j]) or (j > 0 and cost[i][j - 1] > cost[i][j]):\n            dfs(i + 1, j, path + [(i, j)], total_cost + cost[i][j], visited_cells + 1)\n            dfs(i, j + 1, path + [(i, j)], total_cost + cost[i][j], visited_cells + 1)\n\n    max_avg = float('-inf')\n    max_path_len = 0\n    N = len(cost)\n    dfs(0, 0, [(0, 0)], 0, 1)\n    return max_avg / max_path_len"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Calculate the total number of cells in the matrix\n    N = len(cost)\n    \n    # Initialize the maximum average and the current path\n    max_avg = 0\n    curr_path = []\n    \n    # Iterate over the cells in the matrix\n    for i in range(N):\n        for j in range(N):\n            # If the cell is empty, skip it\n            if cost[i][j] == 0:\n                continue\n            \n            # Check if the current path can be extended by moving to the next cell\n            if (i, j) not in curr_path:\n                curr_path.append((i, j))\n                # Calculate the average of the new path\n                curr_avg = sum([cost[i][j] for i, j in curr_path]) / len(curr_path)\n                # Update the maximum average if necessary\n                if curr_avg > max_avg:\n                    max_avg = curr_avg\n                # Backtrack and remove the last cell from the path\n                curr_path.pop()\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize the maximum average and path length as 0\n    max_avg = 0\n    max_length = 0\n\n    # Iterate through all possible paths starting from the top-left cell\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # If the current cell is already visited, skip it\n            if cost[i][j] == 0:\n                continue\n\n            # Initialize the current path length and total cost\n            path_length = 1\n            current_cost = cost[i][j]\n\n            # Iterate through all possible paths starting from the current cell\n            for k in range(i+1, len(cost)):\n                for l in range(j, len(cost[0])):\n                    # If the current cell is already visited, skip it\n                    if cost[k][l] == 0:\n                        continue\n\n                    # Compute the new cost and add it to the current path length\n                    new_cost = current_cost + cost[k][l]\n                    path_length += 1\n\n                    # If the new cost is greater than the maximum, update the maximum\n                    if new_cost > current_cost:\n                        current_cost = new_cost\n\n                    # If the new cost is greater than the maximum average so far, update the maximum average and path length\n                    if new_cost > max_avg:\n                        max_avg = new_cost\n                        max_length = path_length\n\n    # If there are no paths, return 0\n    if max_length == 0:\n        return 0\n\n    # Return the maximum average divided by the maximum path length\n    return max_avg / max_length"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[student] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter students whose height is above the minimum height and weight is above the minimum weight\n    filtered_students = {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # filter students with height and weight above the minimum\n    filtered_students = {k:v for k,v in students.items() if v[0] > h and v[1] > w}\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0] > h and v[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # filter students with height above the minimum\n    filtered_students = {k: v for k, v in students.items() if v[0] > h}\n\n    # filter students with weight above the minimum\n    for k, v in filtered_students.items():\n        if v[1] > w:\n            del filtered_students[k]\n\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    same_pairs = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            same_pairs += 1\n    return same_pairs"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_count += 1\n    return same_count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # initialize sum variable\n    result = 0\n\n    # loop through each digit in the base\n    for digit in str(base):\n        # convert the digit to an integer and add it to the sum\n        result += int(digit) ** power\n\n    # return the sum\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Convert the power to a string\n    power_str = str(power)\n    # Initialize the sum to 0\n    sum = 0\n    # Initialize a flag to keep track of whether the current digit should be added to the sum or not\n    carry = 0\n    # Loop through each digit of the base and power and calculate the sum accordingly\n    for i in range(len(base_str)):\n        # Calculate the current digit of the base\n        base_digit = int(base_str[i])\n        # Calculate the current digit of the power\n        power_digit = int(power_str[i])\n        # Calculate the sum of the current digit and the carry\n        new_sum = base_digit + power_digit + carry\n        # Update the carry\n        carry = new_sum // 10\n        # Update the sum\n        sum += new_sum % 10\n    # If there is a carry, add it to the sum\n    if carry:\n        sum += carry\n    # Return the sum of the digits raised to the power\n    return sum ** int(power_str)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Calculate the sum of all digits of the base to the specified power\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit ** power\n        power //= 10\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string to make it easier to work with\n    base_str = str(base)\n    \n    # initialize the sum to 0\n    total_sum = 0\n    \n    # loop through each digit in the base string\n    for digit in base_str:\n        # convert the digit to an integer and add it to the total sum\n        total_sum += int(digit) ** power\n    \n    # return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to 0\n    sum_of_digits = 0\n    \n    # Use a loop to calculate the sum of all digits of the base to the specified power\n    for i in range(power):\n        # Calculate the sum of digits of base\n        sum_of_digits += sum(int(digit) for digit in str(base))\n        \n        # Update the base by taking the last digit and removing it\n        base = str(base)[1:]\n    \n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    #convert the base to string\n    base_str = str(base)\n    #convert the power to integer\n    power_int = int(power)\n    #loop through the digits of the base string and multiply the result by 10 to the power of the index of the digit in the string\n    for i, digit in enumerate(base_str):\n        result += int(digit) ** power_int\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Initialize the sum to 0\n    result = 0\n\n    # Loop over all the digits of the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Calculate the sum of the digit raised to the power\n        result += digit_int ** power\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    # Calculate the sum of all digits of the base to the specified power\n    sum_of_digits = sum(int(digit) ** power for digit in str(base))\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    power_base = base ** power\n    for digit in str(power_base):\n        total_sum += int(digit)\n    return total_sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'  # regex pattern to match any quote\n    matches = re.findall(pattern, text1)\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    quotation = re.findall(pattern, text1)\n    return quotation"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Use regex to extract the values between the quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    # Return the extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Extract values between quotation marks \" \" of the given string.\n    '''\n    # Find all occurrences of double quotes \" \" in the string\n    double_quotes = re.findall(r'(\"(?:[^\"\\\\]|\\\\.)*\")', text)\n    # Remove duplicates and return the values between double quotes\n    return list(set([value.strip('\"') for value in double_quotes]))"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(?:[^\"\\\\]|\\\\.)*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks \" \".\n    '''\n    # define the regular expression pattern to match quotation marks\n    pattern = r'\"(.*?)\"'\n    # use the re.findall() function to extract all the matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n    # return a list of all the extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.+?)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Get the length of the input tuple\n    N = len(test_tup)\n    # Create an empty tuple to store the result\n    result_tup = ()\n    # Loop through each element of the input tuple\n    for i in range(N-1):\n        # Add the product of the current element and the next element to the result tuple\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = [0] * N\n    for i in range(N):\n        result_tup[i] = test_tup[i] * test_tup[i+1]\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Define a new tuple to hold the results\n    result_tup = []\n    # Loop over the tuple and multiply each element with the next element in the tuple\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    # Add the last element of the tuple to the result tuple\n    result_tup.append(test_tup[-1])\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup) - 1):\n        result += (test_tup[i] * test_tup[i+1],)\n    result += (test_tup[-1] * test_tup[0],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N+1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    multiplied_tup = []\n    for i in range(N):\n        multiplied_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(multiplied_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2  # Number of elements in the tuple\n    new_tup = ()\n    for i in range(N):\n        new_tup += (test_tup[i] * test_tup[i+N],)  # Multiply elements at indices i and i+N\n    return new_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i + j for i in lst1 for j in lst2]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initializing an empty list to store the result\n    result = []\n    # Iterating over each element of the first list\n    for i in range(len(lst1)):\n        # Adding the corresponding element of the second list to the result list\n        result.append(lst1[i] + lst2[i])\n    # Returning the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            yield from group\n        else:\n            yield group[0]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the numbers by their value and keep the last one\n    grouped_nums = groupby(nums, lambda x: x)\n    # initialize a new list to store the non-consecutive duplicates\n    result = []\n    # iterate over the grouped numbers and keep the non-consecutive duplicates\n    for key, group in grouped_nums:\n        if key is None:\n            continue\n        # if the next key is not None, add the current number to the result list\n        if key!= group.next():\n            result.append(key)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return [num for group in groupby(sorted(nums)) if not group.grouper[-1]]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Using groupby function to group the consecutive duplicates of the list\n    grouped_nums = groupby(nums)\n    # Converting the grouped_nums to a list and removing duplicates\n    unique_nums = list(set(grouped_nums))\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        if not key:\n            continue\n        if len(list(group)) == 1:\n            result.extend(group)\n        else:\n            result.append(list(group)[0])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use itertools to group consecutive duplicates by their indices\n    indices = [k for k, g in groupby(enumerate(nums), lambda x: x[1] == nums[x[0] - 1])]\n    # Remove the first and last indices from the list as they don't have any consecutive duplicates\n    indices.pop(0)\n    indices.pop()\n    # Convert the list of indices back to a list of numbers\n    result = [nums[i] for i in indices]\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    This function takes a list of integers and removes consecutive duplicates of the integers.\n    Returns a new list with consecutive duplicates removed.\n    \"\"\"\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i, num in enumerate(nums):\n        if i > 0 and num == nums[i - 1]:\n            nums.pop(i - 1)\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the lateral surface area of the cone using the formula:\n    # (1/2) * pi * (r^2 + h^2)\n    lateral_surface = (1/2) * math.pi * (r**2 + h**2)\n\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * math.cos(math.pi/3) # assuming the angle between the axis of the cone and the x-axis is pi/3 radians"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the area of the base\n    area_base = math.pi * r**2\n\n    # Calculate the area of the cone\n    area_cone = math.pi * r**2 * (h/2)**2\n\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = 2 * area_base + area_cone\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * r * math.sin(math.pi/4) + 2 * r * math.sin(math.pi/2) + 2 * h * math.cos(math.pi/4)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h / 3"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area using the Pythagorean theorem\n    area = math.pi * (r**2) * h\n    # return the lateral surface area of the cone\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the lateral surface area of the cone\n    lateral_area = math.pi * r**2 * h\n\n    # Return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    area = math.pi * (r**2) * h  # calculate area using formula for cone\n\n    return area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[,.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with colon\n    text = re.sub(' ', ':', text)\n    # Replace commas with colon\n    text = re.sub(',', ':', text)\n    # Replace dots with colon\n    text = re.sub('.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s', '', text) # replace spaces with empty string\n    text = re.sub(r'\\,', '', text) # replace commas with empty string\n    text = re.sub(r'\\.', '', text) # replace dots with empty string\n    text = re.sub(r'[^\\w\\s\\:','', text) # replace all non-word, non-space, non-colon characters with a space\n    text = re.sub(r'(\\w+):', r'\\1:', text) # replace all occurrences of a colon at the beginning of a word with a colon\n    return text.strip() # remove leading and trailing spaces"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Using regular expression to replace special characters with colon\n    text = re.sub(r'[\\s,.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces, commas, or dots with a colon\n    text = re.sub(r'[\\s,\\.]', ':', text)\n    # Remove any extra spaces\n    text = re.sub(r'[:\\s]+', ':', text)\n    # Remove any leading or trailing colons\n    text = re.sub(r'^[:]+', '', text)\n    text = re.sub(r':+$', '', text)\n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'[\\s]+', ':', text)\n    text = re.sub(r'[\\.,]+', '', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Use regular expression to replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[^a-zA-Z0-9_]+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s.,;:]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^\\w\\s]')\n    text = pattern.sub(':', text)\n    pattern = re.compile(r'[^a-zA-Z\\s]')\n    text = pattern.sub('', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in a sorted array A and a number x and returns the index of the first occurrence of x in the array.\n    \"\"\"\n\n    # find the leftmost index where x is greater than A[i]\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # x is not found in the array\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    if not A or not A[0]:\n        return None\n    \n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return None"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize left and right pointers to the start and end of the array\n    left = 0\n    right = len(A) - 1\n\n    # While left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the midpoint of the array\n        mid = left + (right - left) // 2\n\n        # If the midpoint element is equal to the given number\n        if A[mid] == x:\n            # Initialize count to 1\n            count = 1\n\n            # Initialize left_ptr to midpoint plus one\n            left_ptr = mid + 1\n\n            # While left_ptr is less than the length of the array\n            while left_ptr < len(A):\n                # If the left_ptr element is equal to the given number\n                if A[left_ptr] == x:\n                    # Increment count\n                    count += 1\n\n                # If the left_ptr element is not equal to the given number, break the loop\n                else:\n                    break\n\n                # Increment left_ptr\n                left_ptr += 1\n\n            # If count is equal to the length of the array, return mid\n            if count == len(A):\n                return mid\n\n            # If count is less than the length of the array, update right pointer to mid\n            else:\n                right = mid - 1\n\n        # If the midpoint element is greater than the given number\n        elif A[mid] > x:\n            # Update right pointer to mid\n            right = mid - 1\n\n        # If the midpoint element is less than the given number\n        else:\n            # Update left pointer to mid\n            left = mid + 1\n\n    # If the given number is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Initialize the left and right pointers\n    left, right = 0, len(A) - 1\n\n    # Loop until the left pointer is less than or equal to the right pointer\n    while left <= right:\n\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the element at the middle index is equal to x, return the middle index\n        if A[mid] == x:\n            return mid\n\n        # If the element at the middle index is greater than x, update the left pointer to mid+1\n        elif A[mid] > x:\n            right = mid - 1\n\n        # If the element at the middle index is less than x, update the right pointer to mid-1\n        else:\n            left = mid + 1\n\n    # If the function reaches this point, it means the element was not found in the array\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # find the first occurrence of x in A\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Initialize the left and right pointers to the first and last indices of the array, respectively\n    left = 0\n    right = len(A) - 1\n\n    # Loop until the left pointer is greater than or equal to the right pointer\n    while left <= right:\n        # Compute the midpoint index\n        mid = (left + right) // 2\n\n        # If the midpoint value is equal to the target value, return its index\n        if A[mid] == x:\n            return mid\n\n        # If the midpoint value is less than the target value, move the right pointer to the right\n        elif A[mid] < x:\n            left = mid + 1\n\n        # If the midpoint value is greater than the target value, move the left pointer to the left\n        else:\n            right = mid - 1\n\n    # If the target value is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            # check if there is another occurrence of x\n            if mid > 0 and A[mid-1] == x:\n                return mid\n            else:\n                # found the first occurrence\n                return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    # x is not in A\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    A (list): The sorted array in which the given number is to be searched.\n    x (int): The number whose index is to be found.\n\n    Returns:\n    int: The index of the first occurrence of x in A, if it exists. -1 otherwise.\n    \"\"\"\n    # Initialize variables\n    i, j = 0, len(A) - 1\n    result = -1\n\n    # Find the index of x in A\n    while i <= j:\n        mid = (i + j) // 2\n        if A[mid] == x:\n            result = mid\n            j = mid - 1\n        elif A[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            # Found the first occurrence\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [0] * n\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] + arr[i-1]\n\n    suffix_prod = [0] * n\n    for i in range(n-2, -1, -1):\n        suffix_prod[i] = suffix_prod[i+1] + arr[i+1]\n\n    subarray_prod = []\n    for i in range(n):\n        subarray_prod.append(prefix_prod[i] * suffix_prod[i])\n\n    return sum(subarray_prod)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize an empty list to store sum of products\n    subarray_products = []\n\n    # Calculate the product of the first element of the array\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n\n    # Append the product to the list\n    subarray_products.append(prod)\n\n    # Calculate the sum of products of all possible subarrays\n    for i in range(1, len(arr)):\n        # Calculate the product of the next element of the array\n        new_prod = prod * arr[i]\n        # Append the new product to the list\n        subarray_products.append(new_prod)\n        # Update the product to the previous element\n        prod = arr[i-1]\n\n    # Return the sum of products of all possible subarrays\n    return sum(subarray_products)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # initialize variables\n    n = len(arr)\n    mod = 1000000007\n    \n    # calculate sum of all subarray products\n    subarray_products = []\n    prefix_sum = 1\n    for i in range(1, n):\n        prefix_sum = (prefix_sum * arr[i-1]) % mod\n        subarray_products.append(prefix_sum)\n        \n    # calculate sum of all products of subarrays\n    subarray_product = 1\n    sum_of_products = 0\n    for i in range(n):\n        sum_of_products = (sum_of_products + subarray_products[i] * subarray_product) % mod\n        subarray_product = (subarray_product * arr[i]) % mod\n        \n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[1] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i][j] = dp[i][j] * arr[j]\n            dp[i][j] = dp[i][j] // dp[j][j - 1]\n            dp[i][j] = dp[i][j] * dp[i - j][j - 1]\n\n    return dp[n][0]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    result = 0\n\n    # Traverse through all possible subarrays and calculate their products\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n        result += prod\n\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n < 1:\n        return 0\n    # Initialize sum and product variables\n    sum_p = 0\n    prod_sum = 1\n    # Traverse through all sublists and calculate sum and product\n    for i in range(1, n):\n        prod_sum *= arr[i]\n        sum_p += prod_sum\n        # Check if the sublist crosses the zero axis\n        if i > 1 and prod_sum < 0:\n            prod_sum = 1\n            sum_p -= prod_sum\n    return sum_p"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n\n    Args:\n    arr: list of integers\n\n    Returns:\n    integer: sum of products of all possible sublists of arr\n\n    \"\"\"\n    arr_len = len(arr)\n    prefix_sum = [0] * arr_len\n    for i in range(1, arr_len):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n\n    prefix_sum_len = len(prefix_sum)\n    max_subarray_length = max_product = 0\n    for subarray_length in range(2, prefix_sum_len+1):\n        for start_index in range(prefix_sum_len - subarray_length + 1):\n            end_index = start_index + subarray_length - 1\n            subarray_prod = 1\n            for j in range(start_index, end_index+1):\n                subarray_prod *= arr[j]\n            if subarray_prod > max_product:\n                max_product = subarray_prod\n                max_subarray_length = subarray_length\n\n    sum_of_products = 0\n    for subarray_length in range(2, max_subarray_length+1):\n        for start_index in range(prefix_sum_len - subarray_length + 1):\n            end_index = start_index + subarray_length - 1\n            subarray_prod = 1\n            for j in range(start_index, end_index+1):\n                subarray_prod *= arr[j]\n            sum_of_products += subarray_prod\n\n    return sum_of_products\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = arr[0]\n\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] * arr[i-1]\n\n    subarray_prods = []\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            subarray_prods.append(dp[j] // dp[i-1])\n\n    return sum(subarray_prods)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Compute the prefix sum array\n    prefix_sum = [0] * len(arr)\n    prefix_sum[0] = arr[0]\n    for i in range(1, len(arr)):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i]\n\n    # Initialize the sum of products\n    subarray_prod_sum = 0\n\n    # Find the maximum subarray length that can be formed from the given array\n    max_subarray_length = len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i, len(arr)):\n            if j-i+1 > max_subarray_length:\n                break\n            subarray_prod_sum += prefix_sum[j] - prefix_sum[i-1] * prefix_sum[j]\n\n    return subarray_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # initialize variables\n    n = len(arr)\n    subarray_sum = [0] * (n + 1)\n    subarray_prod = [0] * (n + 1)\n\n    # initialize subarray_sum[i] with sum of subarrays of length i\n    subarray_sum[0] = arr[0]\n    for i in range(1, n + 1):\n        subarray_sum[i] = subarray_sum[i - 1] + arr[i - 1]\n\n    # initialize subarray_prod[i] with product of subarrays of length i\n    subarray_prod[0] = 1\n    for i in range(1, n + 1):\n        subarray_prod[i] = subarray_prod[i - 1] * arr[i - 1]\n\n    # calculate the sum of products of all possible sublists\n    subarray_sum_prod = [0] * (n + 1)\n    subarray_sum_prod[0] = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            subarray_sum_prod[j] += subarray_prod[j] * (subarray_sum[j] - subarray_sum[i - 1])\n\n    # return the sum of products of all possible sublists\n    return subarray_sum_prod[n]"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # initialize the leftmost and rightmost bits to be 1\n    leftmost_bit = n & 1\n    rightmost_bit = n & (1 << (n.bit_length() - 1))\n    # toggle the middle bits by bitwise XORing them with 1\n    n ^= leftmost_bit ^ rightmost_bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # get the first and last bits of the number\n    first_bit = (n & 1) ^ 1  # toggle the first bit\n    last_bit = (n >> 31) & 1  # toggle the last bit\n\n    # toggle the other bits in the number\n    for i in range(2, 32):\n        if i!= 2 and i!= 30:  # exclude the first and last bits\n            n = n ^ (1 << i)\n\n    # combine the first and last bits with the other bits\n    n = (first_bit << 31) | (last_bit << 30) | n\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    # Define the middle bits as 0 and 1\n    middle_bits = (1 << 1) - 1\n    \n    # Define the first and last bits as 1 and 0\n    first_bit = (1 << 1) - 1\n    last_bit = 0\n    \n    # Toggle the middle bits and the first and last bits\n    n = (n & ~middle_bits) | (n & first_bit) | (n & last_bit)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    first_bit = n & 1  # Get the first bit\n    last_bit = (n >> 31) & 1  # Get the last bit\n    \n    if first_bit == last_bit:  # If both bits are same\n        n = n ^ (0b11 << 28)  # Toggle the middle bits\n    else:\n        n = n ^ 0b
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Initialize the middle bit to 0\n    middle_bit = 0\n    \n    # Initialize the first bit to 1\n    first_bit = 1\n    \n    # Initialize the last bit to 0\n    last_bit = 0\n    \n    # Initialize the left and right shift count\n    left_shift = 0\n    right_shift = 0\n    \n    # Iterate from the rightmost bit to the leftmost bit\n    for i in range(31, -1, -1):\n        \n        # If the current bit is 0\n        if (n >> i) & 1 == 0:\n            \n            # If the middle bit is 0\n            if middle_bit == 0:\n                \n                # Set the middle bit to 1 and increase the shift count\n                middle_bit = 1\n                left_shift += 1\n            \n            # If the middle bit is 1\n            else:\n                \n                # Set the middle bit to 0 and decrease the shift count\n                middle_bit = 0\n                right_shift += 1\n        \n        # If the current bit is 1\n        else:\n            \n            # If the first bit is 1\n            if first_bit == 1:\n                \n                # Set the first bit to 0 and decrease the shift count\n                first_bit = 0\n                right_shift += 1\n            \n            # If the first bit is 0\n            else:\n                \n                # Set the first bit to 1 and increase the shift count\n                first_bit = 1\n                left_shift += 1\n                \n    # Return the modified number after left and right shifting\n    return n << left_shift | n >> right_shift"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    \"\"\"\n    # Get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n    \n    # Toggle the middle bit(s) using a loop\n    for i in range(num_bits//2):\n        # Get the position of the middle bit(s)\n        middle_bit = num_bits//2 + i\n        \n        # Toggle the middle bit\n        n ^= 1 << middle_bit\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b010111111100000000000000000000000\n    n = n & mask\n    n = n ^ 0b10000000001000000000000000000000\n    n = n | 0b01011111110000000000000000000000\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # convert n to binary string\n    n_bin = bin(n)[2:]\n    # get the length of the binary string\n    n_len = len(n_bin)\n    # get the middle index of the binary string\n    mid_index = n_len // 2\n    # get the first and last bit of the binary string\n    first_bit = n_bin[0]\n    last_bit = n_bin[-1]\n    # toggle the middle bit of the binary string\n    n_bin[mid_index] = '0' if first_bit == '0' else '1'\n    # combine the first and last bit with the middle bit of the binary string\n    n_bin = first_bit + n_bin[mid_index] + last_bit\n    # convert the binary string back to an integer\n    n = int(n_bin, 2)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the binary representation of the input number\n    binary_representation = bin(n)[2:]\n    \n    # get the length of the binary representation\n    length = len(binary_representation)\n    \n    # initialize the middle bits to zero\n    middle_bits = 0\n    \n    # loop through the middle bits of the binary representation\n    for i in range(length // 2):\n        # toggle the middle bit\n        middle_bits ^= (1 << i)\n    \n    # get the decimal value of the middle bits\n    middle_bits = int(middle_bits, 2)\n    \n    # return the number with the middle bits toggled\n    return n ^ middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize the first and last bits to zero\n    first_bit = last_bit = 0\n    # initialize the remaining bits as 1\n    remaining_bits = 0xffffffff\n    # shift the first and last bits to the left by 1 bit\n    first_bit = (first_bit << 1) & 0xffffffff\n    last_bit = (last_bit << 1) & 0xffffffff\n    # shift the remaining bits to the left by 2 bits\n    remaining_bits = (remaining_bits << 2) & 0xffffffff\n    # perform the toggle bits\n    n = (n & ~first_bit) | (n & ~last_bit) | remaining_bits\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the insertion point\n    left = bisect.bisect_left(a, x)\n    # Check if the value is already present in the array\n    if a[left-1] == x:\n        # If it is, return the left insertion point\n        return left-1\n    else:\n        # If it's not, return the left insertion point\n        return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x-1)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Find the left insertion point for a specified value in sorted order.\n\n    :param a: sorted list of values\n    :type a: list\n    :param x: the value to search for\n    :type x: int\n    :return: the index of the left insertion point for x\n    :rtype: int\n    \"\"\"\n    left, right = 0, len(a) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    elif a[i] < x:\n        return i + 1\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index - 1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * (1 + geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * (geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 1:\n        return 0\n    else:\n        return (1/n) * (geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Function to check if a number is triangular or not\n    def is_triangular(num):\n        triangular_sum = sum(range(1, num+1))\n        if triangular_sum == num*(num+1)/2:\n            return True\n        else:\n            return False\n    \n    # Function to find the index of the smallest triangular number with n digits\n    def smallest_triangular_index(n):\n        for i in range(3, 10**(n+1), 2):\n            if is_triangular(i):\n                return i-1\n    \n    # Find the index of the smallest triangular number with n digits\n    index = smallest_triangular_index(n)\n    \n    # Return the index of the smallest triangular number\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    triangular_numbers = []\n    index = 0\n\n    # Generating the first n triangular numbers\n    for i in range(1, n+1):\n        triangular_numbers.append(int(math.comb(n, i-1)))\n\n    # Sorting the triangular numbers in ascending order\n    triangular_numbers.sort()\n\n    # Finding the smallest triangular number with n digits\n    for i in range(len(triangular_numbers)):\n        if int(triangular_numbers[i]) // 10 ** (n-1) >= 10:\n            index = i\n            break\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n\n    # The smallest triangular number with n digits has n+1 digits\n    n = n+1\n\n    # Starting with the smallest triangular number, we can find the index by counting the number of digits\n    # in each triangular number\n    index = 0\n    triangular = 0\n    while triangular < 10**n:\n        index += 1\n        triangular = int(math.sqrt(triangular*10))\n    \n    return index-1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def triangular_number(n):\n        return (n * (n + 1)) // 2\n\n    def smallest_triangular_number(n):\n        if is_prime(n):\n            return triangular_number(n)\n        else:\n            return smallest_triangular_number(n - 1)\n\n    return smallest_triangular_number(n) - triangular_number(n) + 1\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_num = 1\n\n    for i in range(n-1):\n        triangular_num = triangular_num * (10**i)\n\n    return int(math.log10(triangular_num))+1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the number of digits in n\n    n_digits = len(str(n))\n    \n    # find the smallest triangular number with n digits\n    smallest_triangular_num = math.ceil(math.pow(10, n_digits))\n    \n    # find the index of the smallest triangular number\n    smallest_triangular_num_index = 0\n    for i in range(1, smallest_triangular_num):\n        if str(i) == str(math.ceil(math.pow(10, n_digits - 1))):\n            smallest_triangular_num_index += 1\n    \n    # return the index\n    return smallest_triangular_num_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    This function calculates the index of the smallest triangular number with n digits.\n    \"\"\"\n    if n == 0: \n        return 0\n    \n    triangular_numbers = []\n    for i in range(1, n+1):\n        triangular_numbers.append(math.comb(n, i))\n    \n    return triangular_numbers.index(min(triangular_numbers))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Calculate the sum of the first n digits\n    sum_of_digits = sum(int(x) for x in str(n))\n\n    # Calculate the smallest triangular number with n digits\n    triangular_num = int(sum_of_digits**(1/3))\n\n    # Calculate the index of the smallest triangular number\n    index = n - len(str(triangular_num)) + 1\n\n    # Return the index of the smallest triangular number\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # The first triangular number with n digits is 10^n\n    triangular = 10**n\n\n    # We can find the square root of triangular using the formula sqrt(x) = x^(1/2)\n    # We can use the int() function to round the result to the nearest integer\n    square_root = int(math.sqrt(triangular))\n\n    # We can find the smallest triangular number with n digits by multiplying the square root by 10, since it is a smaller triangular number\n    smallest_triangular = square_root * 10\n\n    # We can now find the index of the smallest triangular number by counting the number of digits in the decimal representation of the smallest triangular number\n    index = len(str(smallest_triangular))\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize variables\n    index = 0\n    triangular_number = 0\n    triangular_number_length = 1\n\n    # Loop until the triangular number with n digits is found\n    while True:\n        # Calculate the next triangular number\n        triangular_number = triangular_number_length ** n\n\n        # Check if the length of the triangular number is equal to n\n        if triangular_number_length == triangular_number:\n            break\n\n        # Increment the length of the triangular number and find the smallest triangular number with n digits\n        triangular_number_length += 1\n\n    # Calculate the index of the smallest triangular number\n    index = triangular_number_length - 1\n\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    i = 0\n    while i < len(test_tup):\n        new_dict[i] = test_tup[i]\n        if i < len(test_tup) - 1:\n            new_dict[i+1] = test_tup[i+1]\n        i += 2\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    d = {}\n    for i in range(len(test_tup)-1):\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Define an empty dictionary to store the key-value pairs\n    key_value_dict = {}\n    # Loop through the tuple elements\n    for i in range(0, len(test_tup), 2):\n        # Extract the current key and value from the tuple\n        key = test_tup[i]\n        value = test_tup[i+1]\n        # Add the key-value pair to the dictionary\n        key_value_dict[key] = value\n    # Return the dictionary\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        key = test_tup[i]\n        if i+1 < len(test_tup):\n            value = test_tup[i+1]\n            test_dict[key] = value\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return \"Error: The given tuple should have an even number of elements.\"\n    \n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = s[0]\n    for i in range(1, len(s)):\n        if char!= s[i]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Check if string is empty\n    if len(s) == 0:\n        return True\n    \n    # Initialize first character and check if all characters are same\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char, count in count.items():\n        if count > 1:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # converting string to lowercase\n    s = s.lower()\n    # checking if length of string is 1\n    if len(s) == 1:\n        return True\n    # comparing the first and last characters of the string\n    if s[0] == s[-1]:\n        # removing the first and last characters from the string\n        s = s[1:-1]\n        # recursively calling the function\n        return all_Characters_Same(s)\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert string to list\n    s_list = list(s)\n    # get first character from the list\n    first_char = s_list[0]\n    # loop through the list to check if all characters are same\n    for char in s_list:\n        if char!= first_char:\n            return False\n    # if all characters are same, then return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to lowercase\n    s = s.lower()\n    # Check if all the characters are same\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = (3 * side) ** (1/2)\n\n    # Calculate the area using Heron's formula\n    area = (1/3) * math.sqrt(semi_perimeter ** 3)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    This function calculates the area of a tetrahedron with a given side length.\n    \n    :param side: The length of one side of the tetrahedron.\n    :return: The area of the tetrahedron.\n    \"\"\"\n    # Use Heron's formula to calculate the area of the tetrahedron\n    s = (side**2 + side**2 + side**2 + side**2) / 2\n    area = math.sqrt(s) / 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side**2/12\n    b = side**2/12\n    c = side**2/12\n    d = side**2/12\n\n    s = (a + b + c + d)**0.5\n\n    area = 1/3 * math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6*side**2*math.sqrt(3)/5"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2 * math.sin(math.pi / 3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side / 2\n    s = (3 * a ** 2 + 8 * a) ** 0.5\n    area = (1 / 6) * s ** 3\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes the length of each side of the tetrahedron as input and returns the area of the tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side * (1 + math.sqrt(5)) / 2) ** (1/2)\n\n    # Calculate the area of the tetrahedron\n    area = (1/6) * s * (s-side) * (s-2*side)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    a = side/2\n    b = side/2\n    c = side/2\n\n    s = (a + b + c) / 2\n\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1 + math.sqrt(5)) / 2\n    return (1 / 6) * side**2 * s"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function will rotate the given list by n items to the right direction.\n    \"\"\"\n    n = n % len(lst)\n    lst.append(lst.pop(0)) * n\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # If the number of items to rotate is greater than the length of the list,\n    # then no rotation is required.\n    if m > n:\n        return list\n\n    # Reverse the list from start to end\n    list = list[::-1]\n\n    # Reverse the first m items of the list\n    list[:m] = list[:m][::-1]\n\n    # Reverse the rest of the list\n    list[m:] = list[m:][::-1]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotates the list by m items to the right direction.\n    \"\"\"\n    if len(lst) <= 1:\n        return lst\n    \n    # Get the length of the list\n    n = len(lst)\n    \n    # Calculate the new starting index\n    new_index = (n - m) % n\n    \n    # Reverse the first m elements\n    lst[:m] = lst[:m][::-1]\n    \n    # Reverse the remaining elements\n    lst[m:] = lst[m:][::-1]\n    \n    # Reverse the first m elements again to get the final list\n    result = lst[:m] + lst[m:]\n    \n    return result"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        last = list[n-1]\n        for j in range(n-1, 0, -1):\n            list[j] = list[j-1]\n        list[0] = last\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    return lst[-m:] + lst[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n\n    Parameters:\n    list (list): the list to be rotated\n    m (int): the number of items to rotate by\n\n    Returns:\n    list: the rotated list\n    \"\"\"\n    # Copy the list to avoid modifying the original list\n    new_list = list.copy()\n\n    # Check if m is greater than the length of the list\n    if m > len(new_list):\n        raise ValueError(\"The specified rotation number is greater than the length of the list\")\n\n    # Rotate the list\n    new_list = new_list[m:] + new_list[:m]\n\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[n-m:] = list[:m] + list[n-m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:] = list[m:]+list[0:m], list[0:m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    has_none = False\n    for item in test_tup:\n        if item is None:\n            has_none = True\n            break\n    return has_none"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    This function checks if the given tuple has any none value or not.\n    If the tuple contains any none value, it returns True, else it returns False.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = None\n    for elem in test_tup:\n        if elem is none_value:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % i == 0 for i in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: int(str(x)[::-1]) % 10 == 0 and startnum <= x <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num):\n        return all(num % d == 0 for d in range(10))\n\n    result = filter(is_divisible_by_digit, range(startnum, endnum+1))\n    return list(result)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(d) % int(n) == 0 for n in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(digit in str(x) for digit in str(x)) and x % 10 == 0 and startnum <= x <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % int(d) == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if digit == 0:\n                return False\n        return all(num % digit == 0 for digit in digits)\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    digits = list(str(startnum)) + list(str(endnum))\n    result = [num for num in range(startnum, endnum+1) if all(int(digit) % int(num//10**i) == 0 for i, digit in enumerate(str(num)))]\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(d in str(x) for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    area = math.pi * r ** 2 * a / 360\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # convert angle to radians\n    theta = a * math.pi / 180\n    \n    # calculate area of sector using formula\n    area = math.pi * r * r * math.sin(theta/2)\n    \n    # return area of sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    area = math.pi * r**2 * a / 360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * math.sin(math.radians(a))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function finds the longest common subsequence of three string sequence.\n\n    Args:\n    X (str): The first string sequence.\n    Y (str): The second string sequence.\n    Z (str): The third string sequence.\n\n    Returns:\n    str: The longest common subsequence of the three string sequence.\n    \"\"\"\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 3D table to store lengths of longest common subsequence of three strings\n    # initial values are set to -1 as no common subsequence is possible\n    LCS = [[[-1 for j in range(p + 1)] for i in range(m + 1)] for k in range(n + 1)]\n\n    # fill the table in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                # if the current characters are same, then length of common subsequence is length of last cell plus 1\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    LCS[i][j][k] = LCS[i - 1][j - 1][k - 1] + 1\n                # else, we take maximum of three lengths as it contains the common subsequence of two strings of maximum lengths\n                else:\n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i - 1][j - 1][k - 1])\n\n    # construct the longest common subsequence\n    lcs = \"\"\n    i = m\n    j = n\n    k = p\n\n    # backtracking the LCS\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i - 1][j][k] == LCS[i - 1][j][k - 1]:\n            i -= 1\n        elif LCS[i][j - 1][k] == LCS[i - 1][j - 1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    # create a table to store the length of the longest common subsequence of two sequences\n    # and the length of the longest common subsequence of the three sequences\n    T = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]\n\n    # iterate through the rows of the table\n    for i in range(1, len(X) + 1):\n        # iterate through the columns of the table\n        for j in range(1, len(Y) + 1):\n            # if the characters at the current positions are same, then add 1 to the length of the longest common subsequence\n            if X[i - 1] == Y[j - 1]:\n                T[i][j] = T[i - 1][j - 1] + 1\n            # if the characters at the current positions are different, then take the maximum length of the longest common subsequences\n            # of the three sequences\n            else:\n                T[i][j] = max(T[i - 1][j], T[i][j - 1], T[i - 1][j - 1])\n\n    # print the length of the longest common subsequence\n    print(\"Length of the longest common subsequence:\", T[len(X)][len(Y)])\n\n    # print the actual longest common subsequence\n    i, j = len(X), len(Y)\n    lcs = []\n    while i > 0 and j > 0:\n        # if the characters at the current positions are same, then add the current character to the lcs list\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        # if the characters at the current positions are different, then go to the direction with the maximum length of the longest common subsequences\n        # of the three sequences\n        elif T[i - 1][j] > T[i][j - 1] and T[i - 1][j] > T[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # print the actual longest common subsequence\n    lcs.reverse()\n    print(\"Longest common subsequence:\", ''.join(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    This function finds the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    L = [[0]*(n+1) for i in range(m+1)]\n    \n    # L[i][j] will contain the length of the longest common subsequence of X[:i] and Y[:j], and Z[:p]\n    # L[i][j] will be 0 if there is no such subsequence\n    \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    \n    # Now, find the longest common subsequence for X, Y and Z\n    i = m\n    j = n\n    k = p\n    lcs = ''\n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]: \n            i -= 1\n        elif X[i-1] == Z[k-1]: \n            j -= 1\n        else: \n            k -= 1\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store lengths of LCS of subproblems\n    dp = [[0] * (p + 1) for i in range(m + 1)]\n\n    # fill table using dynamic programming\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n                    dp[i][k] = dp[i - 1][k - 1] + 1\n                else:\n                    dp[i][k] = max(dp[i - 1][k], dp[i][k - 1], dp[i - 1][k - 1])\n\n    # return length of LCS\n    return dp[m][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Find lengths of all sequences \n    n, m, l = len(X), len(Y), len(Z) \n  \n    # Create a table to store lengths of longest common subsequences \n    L = [[0] * (l+1) for i in range(n+1)] \n  \n    # Fill d[][] in bottom up manner \n    for i in range(n+1): \n        for j in range(m+1): \n            for k in range(l+1): \n  \n                # If X[i] is present in Y and Z, then LCS of X[i] and Y[j], Z[k] is X[i] \n                if i > 0 and j > 0 and k > 0 and X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1 \n  \n                # If only X[i] is present in Y, then LCS of X[i] and Y[j], Z[k] is Y[j] \n                elif i > 0 and j > 0 and k == 0: \n                    L[i][j][k] = L[i-1][j-1][k] + 1 \n  \n                # If only X[i] is present in Z, then LCS of X[i] and Y[j], Z[k] is Z[k] \n                elif i > 0 and j == 0 and k > 0: \n                    L[i][j][k] = L[i-1][j][k-1] + 1 \n  \n                # If no common characters, then LCS is empty string \n                else: \n                    L[i][j][k] = 0 \n  \n    # To store the lcs, we need to move diagonally from top-left to bottom-right \n    # and keep track of characters as we move \n    lcs = \"\" \n    i, j, k = n, m, l \n  \n    # If LCS is present then we need to move diagonally from top-left to bottom-right \n    while i > 0 and j > 0 and k > 0: \n  \n        # If the characters match, then append it to the lcs \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n            k -= 1 \n  \n        # If only X[i] is present in Y, then LCS of X[i] and Y[j], Z[k] is Y[j] \n        elif i > 0 and j > 0 and k == 0: \n            lcs = Y[j-1] + lcs \n            i -= 1 \n            j -= 1 \n  \n        # If only X[i] is present in Z, then LCS of X[i] and Y[j], Z[k] is Z[k] \n        elif i > 0 and j == 0 and k > 0: \n            lcs = Z[k-1] + lcs \n            i -= 1 \n            k -= 1 \n  \n    # If LCS is not present, then return empty string \n    return lcs or \"\" "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    n, m, l = len(X), len(Y), len(Z)\n\n    # create a table to store lengths of LCS \n    # for all subproblems \n    L = [[0 for j in range(l + 1)] for i in range(n + 1)]\n\n    # fill the table in bottom up fashion. \n    # The value of L[i][j] will contain the length of \n    # LCS of X[0..i-1], Y[0..j-1], Z[0..k-1]. \n    for i in range(1, n + 1): \n        for j in range(1, m + 1): \n            for k in range(1, l + 1): \n                if X[i - 1] == Y[j - 1]: \n                    L[i][j] = L[i - 1][j] + 1\n                else: \n                    L[i][j] = max(L[i - 1][j], L[i][j - 1]) \n\n    # print the lengths of LCS for all subproblems \n    # print(\"Length of LCS for X:\", L[n][m])\n    # print(\"Length of LCS for Y:\", L[n][l])\n    # print(\"Length of LCS for Z:\", L[m][l])\n\n    # initialize a pointer starting from the end of \n    # the LCS and move inwards \n    i, j, k = n, m, l\n\n    # create a list to store the LCS for all subproblems \n    lcs = []\n\n    # move towards the start of the LCS \n    while i > 0 and j > 0 and k > 0: \n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i - 1] == Y[j - 1]: \n            i -= 1\n        elif X[i - 1] == Z[k - 1]: \n            j -= 1\n        else: \n            k -= 1\n\n    # convert the list to string and print it \n    lcs = ''.join(lcs)\n    print(\"Length of LCS for X:\", L[n][m])\n    print(\"Length of LCS for Y:\", L[n][l])\n    print(\"Length of LCS for Z:\", L[m][l])\n    print(\"Longest Common Subsequence:\", lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Step 1: Initialize a 3x3 table to store the lengths of longest common subsequences\n    table = [[0 for _ in range(len(Y) + 1)] for _ in range(len(X) + 1)]\n    \n    # Step 2: Fill the table\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    \n    # Step 3: Backtrack to find the longest common subsequence\n    i, j = len(X), len(Y)\n    lcs = \"\"\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    # Step 4: Return the longest common subsequence\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # creating a table to store lengths of subsequences of lengths 1 to m, 1 to n and 1 to o\n    L = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # filling the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k])\n\n    # returning the length of the LCS\n    return L[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0] * (p+1) for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    lcs = []\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i][j-1][k]:\n            i -= 1\n        elif dp[i][j-1][k] == dp[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return ''.join(lcs[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    p = len(Z)\n\n    L = [[0] * (n+1) for i in range(m+1)]\n\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    i = m \n    j = n \n    result = []\n\n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            result.append(X[i-1]) \n            i -= 1 \n            j -= 1\n        elif L[i-1][j] > L[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n\n    return ''.join(result[::-1])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Convert all words to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = str1.split()\n    # Create a list to store the capitalized words\n    capitalized_words = []\n    # Loop through each word\n    for word in words:\n        # Check if the word starts with a capital letter\n        if word[0].isupper():\n            # Capitalize the word and add it to the list\n            capitalized_words.append(word[0].upper() + word[1:])\n        else:\n            # Add the word as is to the list\n            capitalized_words.append(word)\n    # Join the list of capitalized words into a single string and return it\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Iterate over the words\n    for i in range(len(words)):\n        # If the current word is a capital letter, add a space after it\n        if words[i][0].isupper():\n            words[i] = words[i] +''\n    # Join the words into a single string and return it\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters and convert to lowercase\n    str2 = re.sub('[^a-zA-Z0-9]+','', str1).lower()\n    # Split the string into words\n    words = str2.split()\n    # Initialize an empty list to store the capitalized words\n    capitalized_words = []\n    # Loop through the words and capitalize the first letter of each word\n    for word in words:\n        if word[0].isupper():\n            capitalized_words.append(word)\n        else:\n            capitalized_words.append(word[0].upper() + word[1:])\n    # Join the capitalized words back into a string with spaces between them\n    result =''.join(capitalized_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    words = pattern.findall(str1)\n    result = []\n    for word in words:\n        result.append(word.capitalize() +'')\n    return ''.join(result).strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n    # Use regular expressions to find all the words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Loop through each word and insert a space before the first letter\n    for i in range(len(words)):\n        words[i] ='' + words[i]\n    # Join the words with a space\n    capitalized_words =''.join(words)\n    # Return the capitalized string with spaces between words\n    return capitalized_words"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = re.findall('\\b\\w+\\b', str1)\n    \n    # Iterate through the list of words and replace capitalized words with spaces\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n            \n    # Join the list of words with spaces and return the result\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all non-word characters with spaces\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]','', str1)\n    # Split the string into words using spaces as the delimiter\n    words = str1.split()\n    # Capitalize the first letter of each word and join them with spaces\n    new_str =''.join([word.capitalize() for word in words])\n    # Return the new string with spaces between words starting with capital letters\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to match words that start with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # Capitalize first letter of each word and join them back together with spaces\n    capitalized_words =''.join([word.capitalize() for word in words])\n    return capitalized_words"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    words = re.findall(pattern, str1)\n    words_list = [word.capitalize() for word in words]\n    result =''.join(words_list)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Join the words with spaces between them\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = [int(n) for n in nums_str]\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # converting all strings in the list to float type\n    nums = [float(n) for n in nums_str]\n\n    # sorting the float type list\n    nums.sort()\n\n    # converting the sorted list back to string type\n    nums_str = [str(n) for n in nums]\n\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        num = float(num_str)\n        nums.append(num)\n    nums.sort()\n    nums_str = []\n    for num in nums:\n        nums_str.append(str(num))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = [int(s) for s in nums_str] # convert strings to integers\n    nums.sort() # sort the list numerically\n    return nums_str # return the sorted list as strings"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_list = []\n    for i in nums_str:\n        try:\n            nums_list.append(float(i))\n        except ValueError:\n            pass # ignore non-numeric values\n    return sorted(nums_list)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings as input and returns a sorted list of strings of numbers. \n    The function sorts the list in ascending order of numerical value of the strings.\n    '''\n    # Convert the strings to numeric values\n    nums = [float(num_str) for num_str in nums_str]\n    # Sort the list in ascending order\n    nums.sort()\n    # Convert the sorted list back to strings\n    sorted_nums = [str(num) for num in nums]\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    def numeric_key(string):\n        return [int(c) for c in string]\n    \n    nums_str.sort(key=numeric_key)\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    # Split the input list of strings into a list of strings\n    nums_str = nums_str.split()\n    # Create an empty list to store the sorted numbers\n    sorted_nums = []\n    # Loop through the list of strings\n    for num_str in nums_str:\n        # Try to convert the string to a number\n        try:\n            num = float(num_str)\n        except ValueError:\n            # If the conversion fails, skip to the next string\n            continue\n        # If the conversion is successful, add the number to the sorted list\n        sorted_nums.append(num)\n    # Sort the sorted list in ascending order\n    sorted_nums.sort()\n    # Convert the sorted list back to a string and return it\n    return''.join(str(num) for num in sorted_nums)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # adding the tuple to the list\n    test_list.append(test_tup)\n\n    # printing the updated list\n    print(\"The updated list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # convert the tuple to a list\n    test_list = list(test_list)\n    # add the tuple to the list\n    test_list.append(test_tup)\n    # convert the list back to a tuple\n    test_list = tuple(test_list)\n    # return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Append the tuple to the list\n    test_list.append(test_tup)\n    # Return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Add the tuple to the list\n    test_list.append(test_tup)\n    \n    # Return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_list:\n        if isinstance(i, tuple):\n            test_list.append(test_tup)\n            break"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0 or arr[i] < arr[i//2]:\n        return True\n    else:\n        return False\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i == 0:\n        return True\n    else:\n        if arr[i] < arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a binary heap or not.\n    '''\n\n    # base case\n    if len(arr) <= 1:\n        return True\n\n    # check if each element is smaller than its children\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i // 2]:\n            return False\n\n    # check if the array is a min heap\n    return check_min_heap_helper(arr, 1)\n\ndef check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents a min heap or not.\n    '''\n\n    # base case\n    if i * 2 > len(arr):\n        return True\n\n    # check if each element is smaller than its children\n    if arr[i] > arr[i * 2] or (arr[i] < arr[i * 2] and arr[i * 2 + 1] > arr[i * 2]):\n        return False\n\n    # check if the array is a min heap\n    return check_min_heap_helper(arr, i * 2) and check_min_heap_helper(arr, i * 2 + 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i >= len(arr):\n        return True\n\n    # Check if the left and right child are smaller than their parent\n    if arr[i] < min(arr[2*i+1], arr[2*i+2]):\n        return False\n\n    # Check if the left child is smaller than its parent\n    elif arr[i] < arr[2*i+1]:\n        return False\n\n    # Check if the right child is smaller than its parent\n    elif arr[i] < arr[2*i+2]:\n        return False\n\n    # Recursively check the left and right child of the current node\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n        \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n        \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    \n    for i in range(n//2, -1, -1):\n        check_min_heap_helper(arr, i)\n        \n    for i in range(n-1, 0, -1):\n        if arr[0] > arr[i]:\n            return False\n            \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 0:\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < len(arr) and arr[left] < arr[i]:\n            return False\n        if right < len(arr) and arr[right] < arr[i]:\n            return False\n        return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    parent = (i - 1) // 2\n    if arr[i] < arr[parent]:\n        return False\n    else:\n        return check_min_heap_helper(arr, parent)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr) - 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        # Base case: empty heap or single element\n        return True\n    \n    # Parent index\n    parent = (i - 1) // 2\n    \n    # Compare with parent and return False if not a min heap\n    if arr[i] < arr[parent]:\n        return False\n    \n    # Recursively check parent\n    return check_min_heap_helper(arr, parent)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 0\n        for i in range(1, n+1):\n            j += i\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    jacobsthal = 1\n    for i in range(1, n+1):\n        jacobsthal = (2*jacobsthal + 1) % 1000000007\n    return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num_n_1 = jacobsthal_num(n - 1)\n        jacobsthal_num_n_2 = jacobsthal_num(n - 2)\n        return (jacobsthal_num_n_1 + jacobsthal_num_n_2) % 1000000"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 11\n    elif n == 4:\n        return 43\n    elif n == 5:\n        return 171\n    elif n == 6:\n        return 585\n    elif n == 7:\n        return 2465\n    elif n == 8:\n        return 10945\n    elif n == 9:\n        return 49683\n    elif n == 10:\n        return 230841\n    elif n == 11:\n        return 1048677\n    elif n == 12:\n        return 4790019\n    elif n == 13:\n        return 22217469\n    elif n == 14:\n        return 98716479\n    elif n == 15:\n        return 444968755\n    elif n == 16:\n        return 1944966255\n    elif n == 17:\n        return 9183632895\n    elif n == 18:\n        return 38451347925\n    elif n == 19:\n        return 177112168335\n    elif n == 20:\n        return 797830264195\n    elif n == 21:\n        return 3444036949025\n    elif n == 22:\n        return 15956605283915\n    elif n == 23:\n        return 73698883276415\n    elif n == 24:\n        return 320467917499635\n    elif n == 25:\n        return 1475739525896725\n    elif n == 26:\n        return 6708893973556275\n    elif n == 27:\n        return 29641071017816045\n    elif n == 28:\n        return 135406582924523465\n    elif n == 29:\n        return 609293665174452225\n    elif n == 30:\n        return 2743560462831543875\n    else:\n        return None"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    jacob = [0, 1]\n\n    for i in range(2, n+1):\n        jacob.append(jacob[i-1] + jacob[i-2])\n\n    return jacob[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacob_num = 0\n    jacob_lucas = 1\n    for i in range(1, n+1):\n        jacob_num = jacob_num + jacob_lucas\n        jacob_lucas = jacob_num\n    return jacob_num\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob_num = n + 2\n        for i in range(1, n+1):\n            jacob_num += 2 * (i + 1)\n        return jacob_num - 2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 1, 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input, and returns a list of tuples containing the minimum K records from the input list. If there are less than K records in the input list, it returns all the records in the input list.\n\n    Example:\n    test_list = [(1, 'apple'), (2, 'banana'), (3, 'cherry'), (4, 'date'), (5, 'elderberry')]\n    K = 3\n    Output: [(1, 'apple'), (2, 'banana'), (4, 'date')]\n    '''\n\n    # Initialize an empty list to store the minimum K records\n    min_k_records = []\n\n    # Initialize an empty dictionary to store the count of each record in the input list\n    record_count = {}\n\n    # Iterate through the input list of tuples\n    for record in test_list:\n\n        # If the record is not in the record_count dictionary, add it with a count of 1\n        if record not in record_count:\n            record_count[record] = 1\n\n        # If the count of the record is less than K, increment the count\n        else:\n            record_count[record] += 1\n\n    # Iterate through the record_count dictionary and add the records with the minimum count of K to the min_k_records list\n    for record, count in record_count.items():\n        if count == K:\n            min_k_records.append(record)\n\n    # If there are less than K records in the input list, add all the records to the min_k_records list\n    if len(min_k_records) < K:\n        min_k_records = test_list\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    # Sort the test_list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize the minimum count as infinity\n    min_count = float('inf')\n\n    # Initialize the count of minimum count as 0\n    min_count_count = 0\n\n    # Initialize the index of the minimum count as 0\n    min_count_index = 0\n\n    # Initialize the minimum index as infinity\n    min_index = float('inf')\n\n    # Initialize the index of the minimum index as 0\n    min_index_index = 0\n\n    # Traverse the sorted test_list\n    for i in range(len(test_list)):\n        # If the count is less than K, update the count and the index\n        if test_list[i][1] < K:\n            min_count = test_list[i][1]\n            min_count_count = test_list[i][1]\n            min_count_index = i\n        # If the count is equal to K, update the count and the index\n        elif test_list[i][1] == K:\n            min_count = test_list[i][1]\n            min_count_count = test_list[i][1]\n            min_count_index = i\n\n        # If the current count is less than the minimum count and the current index is less than the minimum index, update the minimum count and the index\n        if test_list[i][1] < min_count and test_list[i][2] < min_index:\n            min_count = test_list[i][1]\n            min_count_count = test_list[i][1]\n            min_count_index = i\n            min_index = test_list[i][2]\n            min_index_index = i\n\n        # If the current count is equal to the minimum count and the current index is less than the minimum index, update the minimum count and the index\n        elif test_list[i][1] == min_count and test_list[i][2] < min_index:\n            min_count_count = test_list[i][1]\n            min_count_index = i\n            min_index = test_list[i][2]\n            min_index_index = i\n\n    # Return the minimum count and index\n    return min_count, min_count_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    This function finds the minimum K records from a tuple list.\n    '''\n    # sorting the list in ascending order\n    test_list.sort()\n    # initializing the minimum count and index variables\n    min_count = float('inf')\n    min_index = -1\n    \n    # iterating through the list and updating the min_count and min_index variables\n    for i in range(len(test_list)):\n        if test_list[i][0] < min_count:\n            min_count = test_list[i][0]\n            min_index = i\n    \n    # returning the minimum K records\n    return test_list[:min_index+1]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize minimum k index and value\n    min_index = 0\n    min_value = test_list[0][1]\n\n    # Iterate over the list of tuples and update minimum k index and value\n    for i in range(K):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n\n    # Return the minimum k index and value\n    return min_index, min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    sorted_list = sorted(test_list)\n    min_k_list = sorted_list[:K]\n    return min(min_k_list)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and returns the minimum K records from the list.\n    If there are less than K records in the list, all the records in the list will be returned.\n    '''\n    # Sort the list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    # Initialize a list to store the minimum K records\n    min_list = []\n    # Iterate through the sorted list and append the first K elements to the min_list\n    for i in range(K):\n        min_list.append(test_list[i])\n    # If there are less than K records in the list, return all the records\n    if len(min_list) < K:\n        return test_list\n    else:\n        return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # Find the minimum number of records required to be returned for each value of K\n    min_k_records = [len(test_list) for _ in range(1, K + 1)]\n\n    # Initialize the minimum number of records required\n    min_records = test_list[0][0]\n\n    # Iterate over the values of K\n    for k in range(1, K + 1):\n        # Update the minimum number of records required for each value of K\n        min_k_records[k] = min(min_k_records[k - 1], len(test_list))\n\n        # Update the minimum number of records required\n        min_records = min(min_records, min_k_records[k])\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Find the minimum K records from a list of tuples.\n    '''\n    # Sort the list of tuples by the second element in ascending order\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize an empty list to store the minimum K records\n    min_records = []\n\n    # Iterate over the sorted list until we have found K records or exhausted the list\n    for i in range(K):\n        if i < len(sorted_list):\n            # If we have found a new minimum record, add it to the list\n            min_records.append(sorted_list[i])\n        else:\n            # If we have exhausted the list without finding a new minimum, stop iterating\n            break\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Function to compare two tuples\n    def cmp(a, b):\n        return a[1] < b[1]\n\n    # Sort the tuple list in decreasing order of second element\n    test_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Initialize minimum k as infinity\n    min_k = float('inf')\n\n    # Iterate through the sorted list\n    for i in range(len(test_list)):\n        if i < K:\n            # Compare the current tuple with the minimum k value and update the minimum k value if necessary\n            if test_list[i][1] < min_k:\n                min_k = test_list[i][1]\n        else:\n            break\n\n    return min_k"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    min_lst = []\n    for i in range(len(test_list)):\n        if len(min_lst) < K:\n            min_lst.append(test_list[i])\n        elif min_lst[0][1] > test_list[i][1]:\n            min_lst[0] = test_list[i]\n\n    return min_lst\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list.append(i)\n    return index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Initialize a list to store the common elements\n    common_elements = []\n    # Loop through each index in l1, l2, and l3\n    for i in range(len(l1)):\n        # Check if l1[i] appears in both l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # Check if l1[i] appears in both l1 and l3\n            if l1[i] in l1 and l1[i] in l3:\n                # If all three conditions are met, l1[i] is a common element\n                common_elements.append(l1[i])\n            else:\n                # If only l1[i] appears in l1 and l3, l1[i] is a common element\n                common_elements.append(l1[i])\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common = []\n\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common:\n            common.append(l1[i])\n\n    for i in range(len(l2)):\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common:\n            common.append(l2[i])\n\n    for i in range(len(l3)):\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common:\n            common.append(l3[i])\n\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list must have at least 2 elements.\"\n    elif len(numbers) == 2:\n        return numbers[1]\n    else:\n        smallest = second_smallest(numbers[1:])\n        return numbers[0] if smallest > numbers[0] else smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # check if the list is empty or has only one element\n    if len(numbers) <= 1:\n        return None\n\n    # sort the list in ascending order\n    numbers.sort()\n\n    # return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # Sort the list in descending order\n    sorted_list = sorted(numbers, reverse=True)\n    # Return the second smallest number\n    return sorted_list[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers[1:], key=lambda x: x)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\b*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.b.*'\n    result = re.search(pattern, text)\n    if result:\n        print('Found:', result.group())\n    else:\n        print('Not found.')"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    \n    Args:\n    text (str): The input string.\n    \n    Returns:\n    str: The modified string with the 'b's replaced by 'c's.\n    '''\n    pattern = r'a.*b'\n    return re.sub(pattern, 'c', text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.b+'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a(b*).*')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=b)'\n    match = re.search(pattern, text)\n    \n    if match:\n        return 'Match found'\n    else:\n        return 'Match not found'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and is_reverse(test_list[i]) and is_reverse(test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse(string):\n    '''\n    Helper function to check if a given string is a reverse string.\n    '''\n    return string == string[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    reverse_dict = {}\n    result = 0\n\n    for string in test_list:\n        for i in range(len(string)):\n            for j in range(i + 1, len(string)):\n                if string[i:j] in reverse_dict:\n                    result += reverse_dict[string[i:j]]\n                else:\n                    reverse_dict[string[j:i]] = 1\n\n    return result"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    # create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n\n    # loop through each string in the list\n    for string in test_list:\n\n        # remove any whitespace from the string\n        string = string.replace(' ', '')\n\n        # loop through each character in the string\n        for char in string:\n\n            # increment the frequency of the character in the dictionary\n            if char in char_freq:\n                char_freq[char] += 1\n            else:\n                char_freq[char] = 1\n\n    # create an empty list to store the pairs of reverse strings\n    reverse_pairs = []\n\n    # loop through each pair of characters in the dictionary\n    for char1, freq1 in char_freq.items():\n\n        # check if the frequency of the character is greater than 1 (i.e. is not a single character)\n        if freq1 > 1:\n\n            # loop through each character in the string\n            for char2 in char_freq:\n\n                # check if the frequency of the character is greater than 1 (i.e. is not a single character)\n                if char1!= char2 and char_freq[char2] > 1:\n\n                    # check if the characters in the pair are in reverse order\n                    if char2 + char1 == string:\n\n                        # add the pair to the list of reverse pairs\n                        reverse_pairs.append((char1, char2))\n\n    # return the number of pairs of reverse strings found\n    return len(reverse_pairs)"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists[(tuple(list1[i:j]),)] = sublists.get((tuple(list1[i:j]),), 0) + 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in count:\n                count[sublist] += 1\n            else:\n                count[sublist] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the number of occurencies of each tuple in the original list\n    sublists = {}\n    \n    # Loop through each element in the original list\n    for elem in list1:\n        # Convert the element to a tuple and check if it's already in the dictionary\n        if tuple(elem) in sublists:\n            # If it's in the dictionary, increment the value by 1\n            sublists[tuple(elem)] += 1\n        else:\n            # If it's not in the dictionary, add it to the dictionary with a value of 1\n            sublists[tuple(elem)] = 1\n            \n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n    \n    # Iterate through each element in the list\n    for item in list1:\n        # Convert the element to a tuple if it's a list\n        if isinstance(item, list):\n            item = tuple(item)\n        \n        # If the tuple is already in the dictionary, increment its count\n        if item in counts:\n            counts[item] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            counts[item] = 1\n            \n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Convert list to set to remove duplicates\n    list1 = set(list1)\n\n    # Convert list to tuple\n    list1 = tuple(list1)\n\n    # Initialize dictionary to store count of unique sublists\n    count_dict = {}\n\n    # Iterate through all sublists of the original list\n    for i in range(len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            # Convert sublist to tuple\n            sublist = tuple(list1[j:j+i])\n            # Increment count of sublist in dictionary\n            count_dict[sublist] = count_dict.get(sublist, 0) + 1\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each unique sublist\n    sublist_counts = {}\n\n    # iterate through each element in the input list\n    for element in list1:\n        # convert the element to a tuple\n        sublist = tuple(element)\n\n        # check if the sublist is already in the dictionary\n        if sublist in sublist_counts:\n            # increment the count by 1\n            sublist_counts[sublist] += 1\n        else:\n            # if the sublist is not in the dictionary, add it with a count of 1\n            sublist_counts[sublist] = 1\n\n    # return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    sublists_count = {}\n    # Convert each list in the original list to a tuple\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in sublists_count:\n            # Increment the count of the tuple in the dictionary\n            sublists_count[sublist_tuple] += 1\n        else:\n            # If the tuple is not in the dictionary, add it with a count of 1\n            sublists_count[sublist_tuple] = 1\n    return sublists_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublists[tuple(sublist)] = sublists.get(tuple(sublist), 0) + 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # create a dictionary to store the counts of each tuple (sublist)\n    counts = {}\n\n    # loop through each element in the list\n    for element in list1:\n\n        # check if the element is a list and not an integer or float\n        if isinstance(element, list):\n\n            # convert the list to a tuple and add it to the counts dictionary\n            counts[tuple(element)] = counts.get(tuple(element), 0) + 1\n\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each sublist\n    sublist_count = {}\n    # Loop through each element in the original list\n    for element in list1:\n        # Convert the element to a tuple\n        element_tuple = tuple(element)\n        # If the element tuple already exists in the dictionary, increment its count\n        if element_tuple in sublist_count:\n            sublist_count[element_tuple] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            sublist_count[element_tuple] = 1\n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Check if the string has at least one digit\n    if not num.isdigit():\n        return False\n\n    # Check if the string has a precision of 2\n    if len(num)!= 2 or '.' in num:\n        return False\n\n    # Check if the string is a valid decimal number with a precision of 2\n    try:\n        decimal_num = float(num)\n        if decimal_num % 1!= 0 or decimal_num - int(decimal_num) > 0.00:\n            return False\n    except ValueError:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    \n    point_index = num.index('.')\n    integer_part = num[:point_index]\n    fractional_part = num[point_index+1:]\n    \n    if len(integer_part) > 9 or len(fractional_part) > 2:\n        return False\n    \n    for digit in integer_part:\n        if digit not in '0123456789':\n            return False\n    \n    for digit in fractional_part:\n        if digit not in '0123456789.':\n            return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return False\n        elif abs(num - int(num)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove all non-numeric characters from the string\n    num = ''.join(filter(str.isdigit, num))\n    # Split the string into a list of integers\n    num_list = [int(digit) for digit in num]\n    # Check if the list has exactly two elements\n    if len(num_list)!= 2:\n        return False\n    # Check if the list contains only positive integers\n    if all(num > 0 for num in num_list):\n        # Check if the sum of the two elements is greater than 0\n        if num_list[0] + num_list[1] > 0:\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    try:\n        if num.replace('.', '').isdigit() and len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' not in num:\n        return False\n    decimal_part = num.split('.')[1]\n    if len(decimal_part) > 2:\n        return False\n    for digit in decimal_part:\n        if not digit.isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    try:\n        if '.' not in num:\n            return False\n        num_parts = num.split('.')\n        if len(num_parts)!= 2:\n            return False\n        int_part = num_parts[0]\n        if not int_part.isdigit():\n            return False\n        decimal_part = num_parts[1]\n        if not decimal_part.isdigit():\n            return False\n        if len(decimal_part) > 2:\n            return False\n        for digit in decimal_part:\n            if int(digit) > 9 or int(digit) < 0:\n                return False\n        return True\n    except Exception as e:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    # remove all non-numeric characters from the number\n    num = ''.join(c for c in num if c.isdigit())\n    # check if the number has a precision of 2\n    if len(num) <= 2:\n        return False\n    # check if the number contains at least one decimal point\n    if '.' not in num:\n        return False\n    # check if the number has at most one decimal point\n    if '.' in num and num.count('.') > 1:\n        return False\n    # if all checks passed, the number is considered decimal\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    if '.' not in num or len(num.split('.')[-1])!= 2:\n        return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if str(float_num).replace('.', '', 1).isdigit() and len(str(float_num).replace('.', '', 1)) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique = set(arr)\n    if len(unique) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Using a set to keep track of unique elements\n    unique_set = set()\n    # Iterating through the list of numbers\n    for num in arr:\n        # Adding each unique number to the set\n        unique_set.add(num)\n    # Checking if the set has only one element\n    if len(unique_set) == 1:\n        # If it has only one element, then it contains only one distinct element\n        return True\n    else:\n        # If it has more than one element, then it doesn't contain only one distinct element\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    # check if the array is empty or contains only one element\n    if len(arr) == 1:\n        return True\n    # check if the array contains duplicate elements\n    else:\n        return all(arr[i]!= arr[i+1] for i in range(len(arr)-1))"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_set = set(arr)\n    if len(distinct_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    \n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique = False\n            break\n    if unique:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Convert the list to a set to get unique elements and then back to a list to get the original list\n    unique_list = list(set(arr))\n\n    # Check if the length of the unique list is 1\n    if len(unique_list) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Convert the given month number to a string format\n    monthnum_str = str(monthnum3)\n\n    # Check if the month number has 30 days or not\n    if monthnum_str[1] in ['01', '03', '05', '07', '08', '10', '12']:\n        # Month with 30 days\n        print(monthnum3, 'has 30 days.')\n    elif monthnum_str[1] in ['04', '06', '09', '11']:\n        # Month with 31 days\n        print(monthnum3, 'has 31 days.')\n    else:\n        # Invalid month number\n        print(monthnum3, 'is not a valid month number.')"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10:\n        return False\n    else:\n        print(\"Invalid month number!\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Months with 30 days\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    # Months with 31 days (except February)\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    # February\n    elif monthnum3 == 2:\n        return True\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 2 and (year % 4 == 0 and year % 100!= 0 or year % 400 == 0):\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum in days_in_months.keys():\n        if days_in_months[monthnum] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return \"Invalid month number. Please enter a number from 1 to 12.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1,13):\n        if monthnum3 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                days_in_months[1] = 29\n            else:\n                days_in_months[1] = 28\n        return days_in_months[monthnum3-1]\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Dictionary to store the days in each month\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    # Check if the given month number exists in the dictionary\n    if monthnum3 in days_in_month:\n        # If it does, check if the month contains 30 days\n        if days_in_month[monthnum3] == 30:\n            print(\"The given month contains 30 days\")\n        else:\n            print(\"The given month does not contain 30 days\")\n    else:\n        # If it doesn't, print an error message\n        print(\"The given month number is not valid\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1,13) and monthnum3%3 == 0 and monthnum3!= 2:\n        return True\n    elif monthnum3 in range(1, 13) and (monthnum3 % 3 == 1 or monthnum3 % 3 == 2):\n        return True\n    elif monthnum3 in range(1, 13) and (monthnum3 % 3 == 0 or monthnum3 % 3 == 1 or monthnum3 % 3 == 2):\n        return days[monthnum3-1] in range(1, 32)\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(arr, low, mid, high):\n    i = low\n    j = mid + 1\n    k = low\n\n    while i <= mid and j <= high:\n        if arr[i] < arr[j]:\n            arr[k] = arr[i]\n            i += 1\n        else:\n            arr[k] = arr[j]\n            j += 1\n        k += 1\n\n    while i <= mid:\n        arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= high:\n        arr[k] = arr[j]\n        j += 1\n        k += 1\n\n\ndef merge_sort(arr, low, high):\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(arr, low, mid)\n        merge_sort(arr, mid + 1, high)\n        merge(arr, low, mid, high)\n\n\ndef find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[-1] - arr[0]\n    min_index = arr.index(arr[-1])\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] < min_diff:\n            min_diff = arr[i] - arr[i - 1]\n            min_index = i\n    return min_diff, min_index\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array `arr` of size `n` and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[i] - arr[j]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the minimum difference variable\n    min_diff = float('inf')\n    # Iterate over the array\n    for i in range(n-1):\n        # Calculate the difference between the current and next elements\n        diff = arr[i+1] - arr[i]\n        # If the difference is smaller than the current minimum difference, update it\n        if diff < min_diff:\n            min_diff = diff\n    # Return the minimum difference found\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n\n    Args:\n        arr (list): list of integers\n        n (int): size of the array\n\n    Returns:\n        int: minimum difference between any two elements in the array\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n\n    :param arr: list of integers\n    :param n: integer\n    :return: int\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables for the minimum and maximum difference\n    min_diff = float('inf')\n    max_diff = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Calculate the difference between the current and next element\n        diff = arr[i] - arr[i + 1]\n\n        # Update the minimum and maximum differences\n        min_diff = min(min_diff, diff)\n        max_diff = max(max_diff, diff)\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    # Initialize variables to store minimum difference and minimum element\n    min_diff = arr[-1] - arr[0]\n    min_elem = arr[0]\n    # Loop through the array\n    for i in range(1, n):\n        # Check if the difference between the current element and the minimum element is smaller than the current difference\n        if arr[i] - min_elem < min_diff:\n            # If it is, update the minimum difference and the minimum element\n            min_diff = arr[i] - min_elem\n            min_elem = arr[i]\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    # Initialize minimum difference\n    min_diff = float('inf')\n    \n    # Loop through all pairs of elements in the array\n    for i in range(n):\n        for j in range(i+1,n):\n            # Calculate difference between current pair of elements\n            diff = abs(arr[i] - arr[j])\n            \n            # Update minimum difference if difference is smaller than current minimum\n            if diff < min_diff:\n                min_diff = diff\n                \n    # Return minimum difference\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_square(num):\n        return num == int(num**0.5)**2\n\n    def is_square_prime(num):\n        if not is_prime(num):\n            return False\n        if is_square(num):\n            return True\n        return False\n\n    def is_prime_square_prime(num):\n        if not is_prime(num):\n            return False\n        if is_prime(int(num**0.5)):\n            return True\n        return False\n\n    def find_nth_polite(n):\n        i = 1\n        while True:\n            if is_prime_square_prime(i):\n                return i\n            i += 1\n            if i > n:\n                return -1\n\n    return find_nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [1]\n    i = 2\n    while len(polite_numbers) < n:\n        if i % 2!= 0:\n            polite_numbers.append(i)\n        i += 1\n    return polite_numbers[n-1]\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. \n    geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count <= n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num\n\ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    def nth_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num\n    \n    def nth_polite(n):\n        polite = 1\n        count = 0\n        while count < n:\n            polite += 1\n            count += 1\n            while not is_prime(polite):\n                polite += 1\n        \n        return polite\n    \n    return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    polite = 0\n    a = 1\n    b = 1\n    while polite < n:\n        a += 1\n        if a % 2 == 0:\n            b += 1\n        if b == 2:\n            polite += 1\n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # initialize the count of polite numbers to 0\n    count = 0\n    # initialize the last number of the polite sequence to 0\n    last_polite = 0\n    # initialize the factorial of the last polite number to 1\n    fact_last_polite = 1\n    # initialize the factorial of the current number to 1\n    fact_cur_num = 1\n    # initialize the divisor of the current number to 2\n    divisor = 2\n    # initialize the current number to 1\n    cur_num = 1\n    # loop until the count reaches n\n    while count < n:\n        # update the count of polite numbers\n        count += 1\n        # calculate the next polite number\n        next_polite = last_polite + (cur_num // 2)\n        # update the last number of the polite sequence\n        last_polite = cur_num\n        # update the current number\n        cur_num = next_polite\n        # calculate the factorial of the next polite number\n        fact_next_polite = 1\n        for i in range(2, int(math.sqrt(next_polite))+1):\n            if next_polite % i == 0:\n                fact_next_polite *= (i+1)\n        # update the factorial of the current number\n        fact_cur_num = cur_num\n        for i in range(2, int(math.sqrt(cur_num))+1):\n            if cur_num % i == 0:\n                fact_cur_num *= (i+1)\n        # update the divisor\n        divisor += 1\n        # check if the factorials are equal\n        if fact_next_polite == fact_cur_num:\n            # if they are, then the current number is the nth polite number\n            return cur_num\n        else:\n            # if they are not, then the divisor needs to be updated\n            fact_last_polite = fact_cur_num\n            while fact_next_polite!= fact_last_polite:\n                # check if the factorials are equal\n                if fact_next_polite == fact_last_polite:\n                    # if they are, then the current number is the nth polite number\n                    return cur_num\n                # update the divisor\n                divisor += 1\n                # update the current number\n                cur_num = divisor\n                # calculate the factorial of the current number\n                fact_cur_num = 1\n                for i in range(2, int(math.sqrt(cur_num))+1):\n                    if cur_num % i == 0:\n                        fact_cur_num *= (i+1)\n                # calculate the factorial of the next polite number\n                fact_next_polite = 1\n                for i in range(2, int(math.sqrt(cur_num))+1):\n                    if cur_num % i == 0:\n                        fact_next_polite *= (i+1)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number.\n    \n    The nth polite number is defined as the number which is congruent to 0 modulo n. \n    The definition of congruent to 0 modulo n is that the remainder of the number divided by n is equal to 0.\n    \n    The nth polite number is calculated using the formula:\n        nth_polite = (2n - 1) modulo n\n    \n    This function takes an integer n as input and returns the nth polite number.\n    \"\"\"\n    return (2*n - 1) % n\n\ndef nth_polite_number(n):\n    \"\"\"\n    This function returns the nth polite number.\n    \n    It calls the is_polite function and returns the output.\n    \"\"\"\n    return is_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef nth_polite(n):\n    # initialize list of prime numbers\n    primes = []\n    \n    # add 2 to list of prime numbers\n    primes.append(2)\n    \n    # iterate through digits of n\n    while n > 9:\n        # check if digit is prime\n        if is_prime(n % 10):\n            # add prime to list of prime numbers\n            primes.append(n % 10)\n        # remove last digit from n\n        n //= 10\n    \n    # add last digit to list of prime numbers\n    primes.append(n)\n    \n    # calculate sum of primes\n    sum_of_primes = sum(primes)\n    \n    # return sum of primes\n    return sum_of_primes"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [2, 2, 5, 2, 5, 5, 2, 2, 5, 5, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite(n):\n        k = 1\n        a = 1\n        b = 2\n        while a * b <= n:\n            k += 1\n            if is_prime(k):\n                a = b\n            b += 2\n        return a\n\n    return nth_polite(n)"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    n = len(l1)\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)-1):\n        pair_list.append([l1[i], l1[i+1]])\n    return pair_list"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i],lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # iterate over the list and check if the next element is present\n    for i in range(len(l1)-1):\n        # check if the next element is present in the list\n        if l1[i+1] in l1[i+2:]:\n            # add the pair to the result list\n            result.append((l1[i], l1[i+1]))\n    # return the result list\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as inputs and returns the count of pairs whose sum is equal to the sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Create an empty list to store the difference\n    diff_list = []\n    \n    # Loop through each element in the first list\n    for i in range(len(li1)):\n        # Check if the element exists in the second list\n        if li1[i] not in li2:\n            # If it doesn't, add it to the diff_list\n            diff_list.append(li1[i])\n    \n    # Return the diff_list as the difference between the two lists\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # Create an empty list to store the difference\n    diff_list = []\n    # Loop through the first list\n    for i in li1:\n        # If the element is not in the second list, add it to the diff list\n        if i not in li2:\n            diff_list.append(i)\n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes in two lists as input and returns a new list containing the elements that are in the first list but not in the second list.\n    '''\n    diff_list = []\n    for element in li1:\n        if element not in li2:\n            diff_list.append(element)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nresult = odd_num_sum(n)\nprint(\"The sum of fourth power of first {} odd natural numbers is {}\".format(n, result))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n, 0, -1):\n        if i % 2!= 0:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        num = i * (i * (i * (3 * i) + 1) - 1)\n        if num % 2 == 1:\n            total += num ** 4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_4th_pow = 0\n    count = 0\n\n    for i in range(1, n+1, 2):\n        count += 1\n        sum_4th_pow += i**4\n    \n    return sum_4th_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate fourth power of i\n        fourth_power = i*i*i*i\n        # add fourth power to sum\n        sum += fourth_power\n    # return the sum of fourth powers of odd numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to zero\n    sum = 0\n    # loop through the first n odd numbers\n    for i in range(1, n+1, 2):\n        # add the fourth power of the odd number to the sum\n        sum += i**4\n    # return the sum of fourth powers of odd numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # Initialize sum to zero\n    sum_of_fourth_powers = 0\n\n    # Loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate fourth power of odd natural number\n        fourth_power = i**4\n\n        # Add fourth power to sum of fourth powers\n        sum_of_fourth_powers += fourth_power\n\n    # Return sum of fourth powers\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char.isspace():\n            continue\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i, char in enumerate(exp):\n        if char == '(':\n            stack.appendleft(i)\n        elif char == ')':\n            if not stack:\n                return False\n            opening_index = stack.pop()\n            if opening_index % 2 == 0:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char == ')' and top_char!= '(':\n                return False\n            elif char == '}' and top_char!= '{':\n                return False\n            elif char == ']' and top_char!= '[':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balance = 0\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char == ')' and top!= '(':\n                return False\n            elif char == '}' and top!= '{':\n                return False\n            elif char == ']' and top!= '[':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char == ')' or char == ']' or char == '}':\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char in ['(', '{', '[']:\n                if char!= top:\n                    return False\n            elif char in [')', '}', ']']:\n                if char == ')' and top!= '(':\n                    return False\n                elif char == '}' and top!= '{':\n                    return False\n                elif char == ']' and top!= '[':\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack:\n                return False\n            top = stack.pop()\n            if char == ')' and top == '(':\n                continue\n            elif char == '}' and top == '{':\n                continue\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words with length K\n    result = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # Add the word to the result list\n            result.append(word)\n\n    # Join the words with spaces and return the result\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # split the string into words\n    words = test_str.split()\n\n    # create an empty list to store the words with k length\n    result = []\n\n    # loop through the words\n    for word in words:\n\n        # check if the length of the word is not equal to K\n        if len(word)!= K:\n\n            # add the word to the result list\n            result.append(word)\n\n    # join the words in the result list into a string\n    result_str =''.join(result)\n\n    # return the result string\n    return result_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split() # Split the string into words\n    filtered_words = [] # Initialize an empty list to store the filtered words\n    \n    # Loop through each word in the list\n    for word in words:\n        if len(word)!= K: # If the word has a length of K\n            filtered_words.append(word) # Append it to the filtered list\n    \n    # Join the filtered list of words back into a string and return it\n    return \" \".join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Convert the input string to lowercase and split into a list of words\n    words = test_str.lower().split()\n\n    # Initialize an empty list to store the output words\n    output = []\n\n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is not equal to K, append it to the output list\n        if len(word)!= K:\n            output.append(word)\n\n    # Join the output list into a single string and return it\n    return''.join(output)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    \n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    \n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regular expression to search for the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Check if any matches were found\n    if not matches:\n        return None\n\n    # Find the first match and its position in the text\n    first_match = matches[0]\n    match_index = text.find(first_match)\n\n    # Return a tuple of the match and its position\n    return (first_match, match_index)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function takes two arguments - a string 'text' and a regular expression pattern 'pattern'.\n    It returns a list of tuples containing the occurrence and position of each substring that matches the pattern.\n    If no match is found, the function returns None.\n    \"\"\"\n    \n    # find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # create a list of tuples containing the occurrence and position of each match\n    result = [(match.start(), match.end()) for match in matches]\n    \n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            return match[0], match.start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function finds the occurrence and position of the substrings within a string. If there is no match, it returns None.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        result = []\n        for match in matches:\n            result.append((match.start(), match.end(), match.group()))\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([x for x in nums[i::2] if x % 2!= 0]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if len(set(nums[i])) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 1:\n                count += 1\n        if count % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_found = []\n    for i in range(len(nums)):\n        if i % 2 == 1:  # check if the index is odd\n            if nums[i] % 2 == 1:  # check if the number at the index is odd\n                odd_found.append(i)\n    return odd_found"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # Loop through the list and check if the current index is odd\n    for i in range(len(nums)):\n        if i % 2!= 0: # Check if current index is odd\n            if nums[i] % 2 == 0: # Check if odd number at current index is even\n                return False # If odd number at current index is even, return False\n\n    return True # If all odd numbers have odd index, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (nums[i] % 2) == 0 and i % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n\n        if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str)-1:\n            continue\n        elif test_str[i] in vowels and test_str[i-1] not in vowels and test_str[i+1] not in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0:\n            prev_char = test_str[len(test_str)-1]\n        elif i == len(test_str)-1:\n            prev_char = test_str[0]\n        else:\n            prev_char = test_str[i-1]\n        if prev_char in vowels and test_str[i] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if (test_str[i] in vowels and test_str[i+1] in vowels):\n            count += 1\n            \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # creating a dictionary to store the unique elements in the list\n    unique_dict = {}\n    \n    # iterating through the list\n    for num in arr:\n        # if the number is not already in the dictionary, adding it with its value as 1\n        if num not in unique_dict:\n            unique_dict[num] = 1\n        # else, incrementing its value by 1\n        else:\n            unique_dict[num] += 1\n    \n    # summing up all the values in the dictionary\n    sum_of_unique = sum(unique_dict.values())\n    \n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and finds the sum of all elements in the list, excluding any duplicates.\n    '''\n\n    # create a dictionary to store the indices of non-repeated elements\n    non_repeat_indices = {}\n\n    # initialize a variable to store the sum of non-repeated elements\n    sum_of_non_repeat_elements = 0\n\n    # loop through the list\n    for index, element in enumerate(arr):\n        # check if the element is already in the dictionary\n        if element in non_repeat_indices:\n            # if the element is already in the dictionary, increment the count for that index\n            non_repeat_indices[element] += 1\n        else:\n            # if the element is not in the dictionary, add it to the dictionary with a count of 1\n            non_repeat_indices[element] = 1\n\n        # check if the count for the current index is 1, indicating that the element is a non-repeated element\n        if non_repeat_indices[element] == 1:\n            # add the element to the sum of non-repeated elements\n            sum_of_non_repeat_elements += element\n\n    # return the sum of non-repeated elements\n    return sum_of_non_repeat_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # create an empty dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # loop through the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # loop through the array again and add up the non-repeated elements\n    sum_non_repeated = 0\n    for num in arr:\n        if freq[num] == 1:\n            sum_non_repeated += num\n\n    # return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the sum of all the elements that appear only once in the list\n    sum_of_non_repeated = 0\n    for num in count_dict:\n        if count_dict[num] == 1:\n            sum_of_non_repeated += num\n    \n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all the non-repeated elements.\n    \"\"\"\n    # Remove duplicates from the list\n    arr = list(set(arr))\n    # Initialize a variable to store the sum of non-repeated elements\n    sum = 0\n    # Loop through the list and add each non-repeated element to the sum\n    for num in arr:\n        sum += num\n    # Return the sum of non-repeated elements\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the elements of the list\n    freq_dict = {}\n    \n    # Iterate through the list and update the dictionary with the frequency of each element\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Iterate through the dictionary and find the sum of non-repeated elements\n    sum_non_repeated = 0\n    for num, freq in freq_dict.items():\n        if freq == 1:\n            sum_non_repeated += num\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    # creating a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # converting the set back to a list and calculating the sum\n    sum_list = list(unique_set)\n    sum_list.sort()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list.pop()\n    sum_list"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # create a list of non-repeated elements\n    non_repeated_list = []\n    for num in freq_dict:\n        if freq_dict[num] == 1:\n            non_repeated_list.append(num)\n    \n    # calculate the sum of the non-repeated elements\n    sum_non_repeated = sum(non_repeated_list)\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the elements and their count\n    count = {}\n    for i in arr:\n        # Check if the element exists in the dictionary\n        if i in count:\n            # If it does, increment its count by 1\n            count[i] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            count[i] = 1\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate through the dictionary and add the element to the sum if it has a count of 1\n    for i in count:\n        if count[i] == 1:\n            sum += i\n\n    return sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouper = groupby(list1)\n    return [list(group) for group in grouper]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    result = []\n    for key, group in groupby(list1):\n        if key:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list elements into tuples of consecutive elements\n    grouped_list = groupby(enumerate(lst), lambda x: x[0] == x[1]-1)\n\n    # Create an empty list to hold the sublists\n    sublists = []\n\n    # Iterate over the grouped tuples and append consecutive duplicates to sublists\n    for i, group in grouped_list:\n        sublists.append([lst[j] for j in i])\n\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [''.join(list(g)) for k, g in groupby(list1) if k == ''.join(list(g)) and next(g)!= ''.join(list(g))]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    group_list = []\n    for key, group in groupby(sorted(list1)):\n        if key == list1[len(list1)-1]:\n            group_list.append(list(group))\n        else:\n            group_list.append([key])\n    return group_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for item, group in groupby(lst):\n        if len(list(group)) > 1:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Group the list elements by their first character\n    grouped = groupby(lst)\n\n    # Initialize a list to store the sublists\n    result = []\n\n    # Iterate over the grouped list elements and pack consecutive duplicates into sublists\n    for key, group in grouped:\n        # If the key is not the same as the previous one, then this is the start of a new sublist\n        if key!= group.next().grouper:\n            # Append the current sublist to the result list\n            result.append(list(group))\n        # If the key is the same as the previous one, then this is a duplicate of the previous sublist, so append it to the current sublist\n        else:\n            result[-1].extend(list(group))\n\n    # Return the final result list of sublists\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if not key]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # convert the input list to a dictionary with the count of each unique tuple\n    unique_tuples = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in unique_tuples:\n            unique_tuples[tuple_sublist] += 1\n        else:\n            unique_tuples[tuple_sublist] = 1\n\n    return unique_tuples"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        if sublist not in count:\n            count[sublist] = 1\n        else:\n            count[sublist] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for elem in list1:\n        if type(elem) is not list:\n            continue\n        sublist = tuple(elem)\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    count = {}\n    for i in lst:\n        if tuple(i) not in count:\n            count[tuple(i)] = 1\n        else:\n            count[tuple(i)] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                sublist_tuple = tuple(sorted(list1[i] + list1[j]))\n                if sublist_tuple in sublist_dict:\n                    sublist_dict[sublist_tuple] += 1\n                else:\n                    sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_lists = set(list1)\n\n    # Create a dictionary to store the counts of unique lists\n    count_dict = {}\n\n    # Iterate over the unique lists and count their occurrences\n    for unique_list in unique_lists:\n        count_dict[unique_list] = list1.count(unique_list)\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    lst_dict = {}\n    for i in lst:\n        if tuple(i) in lst_dict:\n            lst_dict[tuple(i)] += 1\n        else:\n            lst_dict[tuple(i)] = 1\n    return lst_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in count_dict:\n            # Increment the count of the tuple\n            count_dict[sublist_tuple] += 1\n        else:\n            # Add the tuple and its count to the dictionary\n            count_dict[sublist_tuple] = 1\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get the maximum sum value from the given list\n    max_sum = max(sum(x) for x in test_list)\n    \n    # Find all possible combinations of sums with tuples from the given list\n    for i in range(1, max_sum+1):\n        for c in combinations(test_list, i):\n            print(c)\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Function to find combinations of sums with tuples in the given tuple list\n    def find_combinations_helper(lst, target):\n        if not lst:\n            return []\n        if not target:\n            return [tuple()]\n        comb = []\n        for i in range(len(lst)):\n            if lst[i] <= target:\n                comb += find_combinations_helper(lst[:i] + lst[i+1:], target-lst[i])\n        return comb\n\n    # Helper function to check if a tuple is present in the tuple list\n    def is_present(tup, lst):\n        return any(tup == x for x in lst)\n\n    # Find all combinations of sums with tuples in the given tuple list\n    combinations = []\n    for i in range(len(test_list)):\n        if is_present(test_list[i], combinations):\n            continue\n        for j in range(i+1, len(test_list)):\n            if is_present(test_list[j], combinations):\n                continue\n            combinations += find_combinations_helper(test_list[i:j+1], sum(test_list[i:j+1]))\n    return combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def find_combinations_helper(sum, current_sum, current_list, combinations_list, n):\n        if current_sum == sum and len(current_list) == n:\n            combinations_list.append(current_list)\n            return\n        \n        if current_sum > sum:\n            return\n        \n        for i in range(n):\n            current_list.append(i)\n            current_sum += i + 1\n            find_combinations_helper(sum, current_sum, current_list, combinations_list, n)\n            current_list.pop()\n            current_sum -= i + 1\n    \n    # find the combinations of sums\n    sums = set()\n    for tup in test_list:\n        sums.add(sum(tup))\n    n = len(test_list)\n    combinations_list = []\n    for sum in sums:\n        current_sum = 0\n        current_list = []\n        find_combinations_helper(sum, current_sum, current_list, combinations_list, n)\n    \n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Calculate the sum of all the tuples in the list\n    total_sum = sum([sum(i) for i in test_list])\n    \n    # Create a list of all tuples with their corresponding sum\n    tup_list = [(i, sum(i)) for i in test_list]\n    \n    # Find all possible combinations of sums with tuples in the list\n    comb_list = list(combinations(tup_list, r=2))\n    \n    # Filter the combinations to get only those with sum equal to the total sum\n    filtered_comb_list = [i for i in comb_list if sum(i[0]) == total_sum]\n    \n    # Return the filtered combinations\n    return filtered_comb_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # iterate over each tuple in the list and find all combinations of sums\n    result = []\n    for tup in test_list:\n        for comb in combinations(tup, r=2):\n            result.append(tuple(sorted(comb)))\n\n    # sort the result and remove duplicates\n    result = sorted(list(set(result)))\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Sort the list in descending order of the sum of elements in tuples\n    sorted_list = sorted(test_list, key=lambda x: sum(x), reverse=True)\n\n    # Find the unique combinations of sums using itertools.combinations()\n    unique_combinations = set(combinations(sorted_list, len(test_list)))\n\n    # Convert the combinations to a list of tuples\n    combination_list = list(unique_combinations)\n\n    return combination_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a dictionary to store the count of elements in each combination\n    count = {}\n\n    # Calculate the total sum of all tuples in the list\n    total_sum = sum(test_list)\n\n    # Iterate over all possible pairs of tuples in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the sum of the current pair of tuples\n            pair_sum = test_list[i][0] + test_list[j][0]\n\n            # If the sum is equal to the total sum, add the pair to the count dictionary\n            if pair_sum == total_sum:\n                key = tuple(sorted((test_list[i][1], test_list[j][1])))\n                if key in count:\n                    count[key] += 1\n                else:\n                    count[key] = 1\n\n    # Iterate over all possible combinations of sums with the same number of elements\n    for i in range(1, len(count)+1):\n        for j in combinations(count.items(), i):\n            # Calculate the sum of the current combination of sums\n            combination_sum = sum(k for k, v in j)\n\n            # If the combination sum is equal to the total sum, print the combination\n            if combination_sum == total_sum:\n                print(combinations)\n                break"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Create a dictionary to store the combination count for each tuple\n    count_dict = {}\n\n    # Iterate through all the tuples in the given list\n    for i, tuple_1 in enumerate(test_list):\n        for j, tuple_2 in enumerate(test_list[i+1:], i+1):\n            # Find the sum of the two tuples\n            sum_tuple = tuple_1 + tuple_2\n\n            # Check if the sum is already in the dictionary\n            if sum_tuple in count_dict:\n                count_dict[sum_tuple] += 1\n            # If the sum is not in the dictionary, add it as a key with a value of 1\n            else:\n                count_dict[sum_tuple] = 1\n\n    # Create a list to store the combinations with their counts\n    combination_list = []\n\n    # Iterate through all the tuples in the dictionary\n    for key, value in count_dict.items():\n        # Find all the possible combinations of tuples whose sum equals the key\n        for combo in combinations(test_list, value):\n            # Append the combination to the combination list along with its count\n            combination_list.append((combo, value))\n\n    # Sort the combination list by the count in descending order\n    combination_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the combination list\n    return combination_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Find all combinations of sums with tuples in the given tuple list.\n    '''\n    # Create a list of tuples containing the sums and their indices\n    sums = [(x[1] + y[0], (x[0], y[1])) for x in combinations(test_list, 2) for y in combinations(test_list, 2)]\n    \n    # Sort the list of tuples by the first element of each tuple\n    sums.sort(key=lambda x: x[0])\n    \n    # Extract the unique combinations from the sorted list\n    unique_sums = []\n    for sum_, indices in sums:\n        if sum_ not in unique_sums:\n            unique_sums.append(sum_)\n    \n    # Extract the unique tuples from the list of indices\n    unique_tuples = set()\n    for _, indices in sums:\n        unique_tuples.update(indices)\n    \n    # Find the combinations of tuples in the unique tuples\n    comb_tuples = set()\n    for t in unique_tuples:\n        for c in combinations(test_list, len(t)):\n            if t == tuple(c):\n                comb_tuples.add(tuple(c))\n    \n    # Find the unique combinations of sums and tuples that meet the criteria\n    combinations_with_sums = []\n    for sum_ in unique_sums:\n        for c in comb_tuples:\n            if sum_ in c:\n                combinations_with_sums.append((sum_, c))\n    \n    return combinations_with_sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    for m in range(l+1, len(test_list)):\n                        if (test_list[i][0] + test_list[j][0] + test_list[k][0] + test_list[l][0] + test_list[m][0]) == test_list[i][1]:\n                            print(test_list[i], test_list[j], test_list[k], test_list[l], test_list[m])"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors += 1\n            if n // i!= i:\n                divisors += 1\n    return divisors\n\nprint(count_divisors(12)) # output: 6"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of divisors is even and False otherwise.\n    A divisor of an integer n is an integer that divides n evenly. \n    For example, 2 is a divisor of 8 because 8 = 2 * 4.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Function to count divisors of a number \n    def count_d(n): \n        count = 0 \n        for i in range(1, int(math.sqrt(n))+1): \n            if n % i == 0: \n                count += 1 \n        if n > 1: \n            count += 1 \n        return count\n\n    # Calculate the count of divisors of n \n    div_count = count_d(n)\n\n    # Check if count of divisors is even or odd \n    if div_count % 2 == 0: \n        print(\"The count of divisors of\", n, \"is even.\")\n    else: \n        print(\"The count of divisors of\", n, \"is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    # Calculate the sum of the divisors of n using a for loop\n    div_sum = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            div_sum += i\n    \n    # Check if the sum of divisors is even or odd\n    if div_sum % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer as input and returns True if the count of divisors is even, else False.\n    '''\n    if n <= 1:\n        return False\n    else:\n        divisors = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors += 1\n                if divisors > 2:\n                    return False\n                n //= i\n        if n > 1:\n            divisors += 1\n            if divisors > 2:\n                return False\n        return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    if n < 2:\n        return \"Not applicable for n < 2\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            \n    if n > 1 and count % 2 == 1:\n        return \"The count of divisors is odd\"\n    else:\n        return \"The count of divisors is even\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n            if count > 2: \n                return False \n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Counts the number of divisors of a given integer n.\n    \"\"\"\n    divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors += 2\n    if n > 1:\n        divisors += 1\n    return divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    if n <= 1: \n        return 0\n    count = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1\n    if n > 2: \n        count += 1\n    return count"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    start = 0\n    \n    while start < n:\n        end = start\n        while end < n and (end - start + 1) % 2 == 1:\n            sum_odd += arr[end]\n            end += 1\n        start += 1\n    \n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all odd length subarrays.\n    \"\"\"\n\n    # Initialize a variable to store the sum of all odd length subarrays\n    sum_odd = 0\n\n    # Loop through the list of integers\n    for i in range(len(arr)):\n        # Initialize a variable to store the sum of the current odd length subarray\n        current_sum = 0\n\n        # Loop through the range from the current index to the end of the list\n        for j in range(i, len(arr)):\n            # Add the current integer to the sum\n            current_sum += arr[j]\n\n            # Check if the sum is odd length\n            if j - i + 1 % 2 == 1:\n                # Add the sum to the sum_odd variable\n                sum_odd += current_sum\n                # Reset the current_sum variable\n                current_sum = 0\n\n    # Return the sum_odd variable\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the sum of all odd length subarrays to zero\n    sum = 0\n    # Initialize an empty list to store the sums of odd length subarrays\n    odd_length_sum_list = []\n    \n    # Loop through the array\n    for i in range(n):\n        # Initialize an empty list to store the subarrays with odd length\n        current_subarray = []\n        # Loop through the remaining elements of the array\n        for j in range(i, n):\n            # Add the current element to the current subarray\n            current_subarray.append(arr[j])\n            # If the length of the current subarray is odd, calculate the sum of the subarray and append it to the odd_length_sum_list\n            if len(current_subarray) % 2!= 0:\n                sum += sum_of_subarray(current_subarray)\n                odd_length_sum_list.append(sum)\n    # Return the sum of all odd length subarrays\n    return sum\n\ndef sum_of_subarray(arr):\n    '''\n    Write a python function to calculate the sum of a given subarray.\n    '''\n    n = len(arr)\n    # Initialize the sum of the subarray to zero\n    sum = 0\n    # Loop through the array\n    for i in range(n):\n        # Add the current element to the sum of the subarray\n        sum += arr[i]\n    # Return the sum of the subarray\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n\n    # Initialize the sum of odd length subarrays to zero\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if (j - i) % 2!= 0:\n                subarr = arr[i:j]\n                sum += sum(subarr)\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum of all odd length subarrays\n    sum_odd_subarrays = 0\n    \n    # Loop through each subarray in the input array\n    for i in range(len(arr)):\n        # Find the sum of odd length subarrays that starts from the current subarray\n        subarray_sum = sum(arr[i:i+2])\n        # Add the sum to the sum of all odd length subarrays\n        sum_odd_subarrays += subarray_sum\n        \n    # Return the sum of all odd length subarrays\n    return sum_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    result = 0\n    for i in range(n):\n        if i % 2 == 0:\n            count += 1\n            if count == 1:\n                result += arr[i]\n            elif count == 2:\n                result += arr[i] - arr[i-1]\n            else:\n                result += arr[i] - 2*(arr[i-1] + arr[i-2])\n        else:\n            count = 0\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize variables to store the sum of odd length subarrays and the current sum\n    sum_odd_length_subarray = 0\n    current_sum = 0\n    \n    # Iterate over the array\n    for i in range(len(arr)):\n        # Add the current element to the current sum\n        current_sum += arr[i]\n        \n        # If the length of the subarray is odd, add the subarray sum to the sum of odd length subarrays\n        if i == 0 or (i > 0 and i % 2 == 1):\n            sum_odd_length_subarray += current_sum\n        \n        # Reset the current sum to zero\n        current_sum = 0\n    \n    return sum_odd_length_subarray"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n-1, 2):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            total_sum += arr[j]\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total = 0\n    \n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += arr[j]\n            if j-i+1 % 2 == 1:\n                total += current_sum\n                \n    return total"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes an RGB color value as input and returns its HSV equivalent.\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0  # achromatic\n    else:\n        if cmax == r:\n            h = ((g - b) / delta) % 6\n        elif cmax == g:\n            h = (b - r) / delta + 2\n        elif cmax == b:\n            h = (r - g) / delta + 4\n        h = h / 6\n        if h < 0:\n            h += 1\n    if cmax == r:\n        s = delta / (cmax + delta)\n    else:\n        if cmax == g:\n            s = delta / (cmax + delta)\n        else:\n            s = delta / (cmax + delta)\n        if delta == 0:\n            h = 0\n        elif s == 0:\n            h = 0\n        else:\n            h = h / s\n    v = cmax\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    if max_value == min_value:\n        h = 0\n        s = 0\n    else:\n        delta = max_value - min_value\n        if r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = h / 6.0\n        \n        if h < 0:\n            h = h + 1\n        \n        s = delta / max_value\n        \n    v = max_value\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, b to float values\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # Find the minimum and maximum values in the rgb color\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Calculate the chroma value\n    chroma = max_val - min_val\n\n    # Calculate the hue value\n    if chroma == 0:\n        hue = 0\n    else:\n        if max_val == r:\n            hue = (g - b) / chroma\n        elif max_val == g:\n            hue = 2 + (b - r) / chroma\n        else:\n            hue = 4 + (r - g) / chroma\n\n        hue *= 60\n        if hue < 0:\n            hue += 360\n\n    # Calculate the saturation value\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = chroma / max_val\n\n    # Return the hsv color as a tuple\n    return (hue, saturation, max_val)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n\n    # Convert r, g, b values to float\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # Find the maximum and minimum values of the RGB color\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the value of the hue\n    if max_value == min_value:\n        hue = 0\n    elif max_value == r:\n        hue = (g - b) / (max_value - min_value)\n    elif max_value == g:\n        hue = 2 + (b - r) / (max_value - min_value)\n    elif max_value == b:\n        hue = 4 + (r - g) / (max_value - min_value)\n    hue = hue * 60\n\n    # Calculate the value of the saturation\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = (max_value - min_value) / max_value\n\n    # Calculate the value of the value\n    value = max_value\n\n    # Return the hsv color values\n    return hue, saturation, value\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        h = 0\n        s = 0\n    elif cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    h *= 60\n    \n    if h < 0:\n        h += 360\n    \n    s = delta / (1 - abs(2 * cmax - 1))\n    \n    v = cmax\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # calculate the maximum and minimum values in the color space\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # calculate the difference between the maximum and minimum values\n    delta = max_val - min_val\n\n    # calculate the hue\n    if max_val == r:\n        hue = ((g - b) / delta) % 6\n    elif max_val == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    # calculate the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # calculate the value\n    value = max_val\n\n    # return the hsv values as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = 60 * ((g - b) / delta)\n    elif max_value == g:\n        h = 60 * ((b - r) / delta + 2)\n    else:\n        h = 60 * ((r - g) / delta + 4)\n\n    if h < 0:\n        h += 360\n\n    hsv_color = (h, max_value, delta)\n\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert the RGB values to a tuple\n    rgb = (r, g, b)\n\n    # Convert the RGB values to the HSV values\n    r, g, b = rgb_to_hsv_conversion(rgb)\n\n    # Return the HSV values\n    return r, g, b\n\ndef rgb_to_hsv_conversion(rgb):\n    \"\"\"\n    This function converts the RGB values to HSV values.\n    \"\"\"\n    # Convert the RGB values to the HSV values\n    r, g, b = rgb\n\n    # Find the maximum value\n    max_val = max(r, g, b)\n\n    # Find the minimum value\n    min_val = min(r, g, b)\n\n    # Find the range of the RGB values\n    range_val = max_val - min_val\n\n    # Convert the range value to percentage\n    h_perc = (max_val - r) / range_val\n\n    # Set the value of H to the percentage value\n    h = h_perc * 60\n\n    # Find the difference between max and min\n    diff = max_val - min_val\n\n    # Convert the RGB value to percentage\n    s_perc = diff / max_val\n\n    # Check the hue value\n    if r == max_val:\n        h_perc = (g - b) / diff\n    elif g == max_val:\n        h_perc = 2 + (b - r) / diff\n    else:\n        h_perc = 4 + (r - g) / diff\n\n    # Convert the H value to percentage\n    h_perc *= 60\n\n    # Return the HSV values\n    return h_perc, s_perc, max_val"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255, g/255, b/255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    else:\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        if h < 0:\n            h += 6\n        h /= 6\n    \n    if cmax == 0:\n        v = 0\n    else:\n        v = cmax\n    \n    s = delta / cmax if delta!= 0 else 0\n    \n    return (h, v, s)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color.\n    \"\"\"\n    # Get maximum and minimum values of RGB color\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate Hue\n    if max_value == min_value:\n        hue = 0\n    else:\n        delta = max_value - min_value\n        if r == max_value:\n            hue = 60 * ((g - b) / delta)\n        elif g == max_value:\n            hue = 60 * ((b - r) / delta) + 120\n        elif b == max_value:\n            hue = 60 * ((r - g) / delta) + 240\n\n    # Calculate Saturation\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_value\n\n    # Calculate Value\n    value = max_value\n\n    # Convert Hue and Saturation to percentage\n    hue = round(hue / 360 * 100)\n    saturation = round(saturation * 100)\n    value = round(value * 100)\n\n    return (hue, saturation, value)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count!= 0 and odd_count!= 0:\n        product = list1[0] * list1[1]\n        return product\n    else:\n        return \"No even and odd numbers found in the list.\""
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            break\n            \n        product *= i\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    \n    if even_sum == 0 and odd_sum == 0:\n        return 0\n    else:\n        return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    even_sum = 0\n    odd_sum = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    \n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function takes a list as an input and returns the product of the first even and odd numbers in the list.\n    '''\n    \n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        product *= (even_count + odd_count)\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product = num * product\n            break\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # initialize variables for even and odd numbers\n    even = 0\n    odd = 0\n    \n    # iterate through the list and count even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n            \n    # return the product of even and odd numbers\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    product = 1\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product *= num\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    \n    # Iterate over the list and multiply the first even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        tup_str = tuple(map(int, test_str.split(',')))\n        return tup_str\n    except ValueError:\n        return \"Invalid input.\""
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to tuple\n    test_tuple = tuple(test_str)\n    # Convert tuple to integer tuple\n    int_tuple = tuple(int(i) for i in test_tuple)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into list of words\n    words = test_str.split()\n    # create an empty list to store integers\n    int_list = []\n    # iterate through the list of words\n    for word in words:\n        # check if the word is an integer\n        try:\n            # convert the word to integer and append to list\n            int_list.append(int(word))\n        # if the word is not an integer, raise an error\n        except ValueError:\n            raise ValueError('Invalid input')\n    # return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # Split the string by commas and spaces\n        test_str = test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\" \", \"\")\n        test_tuple = tuple(map(int, test_str.split(\",\")))\n        return test_tuple\n    except ValueError:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    try:\n        tup = tuple(int(i) for i in test_str)\n        return tup\n    except ValueError:\n        print(\"Error: Invalid input. Please enter a valid tuple string.\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def is_valid_tuple(t):\n        '''\n        Check if the given string is a valid tuple.\n        '''\n        return t[0].isdigit() and t[1].isdigit() and t[2].isdigit()\n\n    def str_to_tuple(s):\n        '''\n        Convert the given string to a tuple.\n        '''\n        return tuple(int(i) for i in s.split(','))\n\n    # Check if the given string is a valid tuple\n    if is_valid_tuple(test_str):\n        # Convert the string to a tuple\n        t = str_to_tuple(test_str)\n        # Return the tuple\n        return t\n    else:\n        # If the string is not a valid tuple, return None\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = []\n    for i in test_str:\n        if i.isdigit():\n            int_tuple.append(int(i))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define a function to convert string to integer\n    def str_to_int(s):\n        try:\n            return int(s)\n        except ValueError:\n            return s\n\n    # Define a function to convert a list of strings to integers\n    def list_str_to_int(lst):\n        return [str_to_int(x) for x in lst]\n\n    # Define a function to split a string into a list of strings\n    def split_str(s):\n        return s.split(',')\n\n    # Split the input string into a list of strings\n    str_list = split_str(test_str)\n\n    # Convert the list of strings to an integer list using the list_str_to_int function\n    int_list = list_str_to_int(str_list)\n\n    # Convert the integer list back to a tuple using the tuple function\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for item in test_str:\n        if isinstance(item, str):\n            try:\n                result.append(int(item))\n            except ValueError:\n                pass\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert tuple string to tuple\n    test_tuple = tuple(test_str.split(','))\n    # convert tuple to integer tuple\n    int_tuple = tuple(int(i) for i in test_tuple)\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        return 0\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list 'a' and a value 'x' and returns the index where the \n    value should be inserted such that all elements to the right of the index are greater \n    than or equal to the value being inserted.\n\n    Example:\n\n    >>> a = [1, 2, 3, 4, 5]\n    >>> x = 3\n    >>> right_insertion(a, x)\n    2\n\n    If x is not in the list, it will return the index where the value should be inserted to maintain \n    the sorted order.\n\n    >>> a = [1, 2, 3, 4, 5]\n    >>> x = 6\n    >>> right_insertion(a, x)\n    3\n    \"\"\"\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i if i == len(a) or a[i]!= x else i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # find the insertion point using binary search\n    i = bisect.bisect_right(a, x)\n    # if the element is not found, it means that the element is already present\n    if i == len(a) or a[i]!= x:\n        return i\n    # otherwise, insert the element to the right of the insertion point\n    else:\n        return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n\n    # Find the index where to insert the new value\n    index = bisect.bisect_right(a, x)\n\n    # If the value already exists in the array, return the index\n    if index < len(a) and a[index] == x:\n        return index\n\n    # Otherwise, find the smallest index such that a[smallest] > x\n    smallest = bisect.bisect_left(a, x) - 1\n\n    # If the new value goes in the middle, return the smallest index\n    if smallest >= 0 and a[smallest] > x:\n        return smallest\n\n    # Otherwise, return the smallest index + 1\n    return smallest + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        if a[0] <= x:\n            return 0\n        else:\n            return 1\n    else:\n        if a[index-1] < x:\n            return index\n        else:\n            return index - 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'(?i)a.*?b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b.*b.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def text_match_three(text):\n    pattern = r'a{1}b{3}'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'ab{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.{3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n    # Reverse the list\n    char_list.reverse()\n    # Create a new tuple from the reversed list\n    new_tuple = tuple(char_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the two lists and the given string to create a new list\n    new_list = test_list + [test_str]\n\n    # Convert the new list to a tuple\n    new_tuple = tuple(new_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    new_list = tuple(test_list)\n    # concatenate the list and string and convert it to a tuple\n    new_tuple = (test_str + str(test_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    :param test_list: list to be added to the tuple\n    :param test_str: string to be added to the tuple\n    :return: the new tuple with the concatenated list and string\n    \"\"\"\n    return tuple(test_list + [test_str])"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # initialize the count of even numbers in each even index\n    even_counts = [0] * len(nums)\n\n    # iterate through the list and count the number of even numbers in each even index\n    for i, num in enumerate(nums):\n        if i % 2 == 0 and num % 2 == 0:\n            even_counts[i // 2] += 1\n\n    # check if all even indices have even numbers\n    return all(count % 2 == 0 for count in even_counts)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if any(nums[i] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums:\n            if num % 2 == 0:\n                count += 1\n        if count % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers and checks whether every even index contains even numbers of the list.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    bool: True if every even index contains even numbers, False otherwise.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        if i % 2 == 0 and even_count % 2 == 0:\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2])) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not all(nums[i:i+2] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum([x for x in nums if i+x not in range(0, i, 2)]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(set(nums[i:])) % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                count += 1\n            else:\n                break\n    return count == len(nums)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # check if the input is a tuple\n    if isinstance(test_tup, tuple):\n        # loop through the tuple and check if each element is also a tuple\n        for elem in test_tup:\n            if isinstance(elem, tuple):\n                # recursively call the function on the nested tuple\n                remove_nested(elem)\n    # if the input is not a tuple, return it as is\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Iterate over each item in the given tuple\n    for i in range(len(test_tup)):\n        # If the item is another tuple, recursively call the function to remove it\n        if type(test_tup[i]) == tuple:\n            remove_nested(test_tup[i])\n        # If the item is a list, recursively call the function to remove all its elements\n        elif type(test_tup[i]) == list:\n            remove_nested(test_tup[i])\n            # Remove the list from the tuple\n            del test_tup[i]\n        # If the item is a string, remove the string from the tuple\n        elif type(test_tup[i]) == str:\n            del test_tup[i]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return tuple(flat_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = ()\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result_tup += item\n        else:\n            result_tup += (item,)\n    return result_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [i for tup in test_tup for i in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Remove any nested tuples in the given tuple\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    flat_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for subitem in item:\n                flat_list.append(subitem)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_lists(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for item in input_list: \n        if isinstance(item, list): \n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in input_list: \n        if isinstance(i, list): \n            count += 1 \n    return count "
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and a value as input and returns the index of the last occurrence of the value in the array.\n    \"\"\"\n    n = len(arr)\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=0\n    n=len(arr)\n    while i<n and arr[i]!=x:\n        i+=1\n    if i==n:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if not arr or not arr[0]:\n        return -1\n\n    i = 0\n    j = len(arr) - 1\n\n    while i <= j:\n        mid = (i + j) // 2\n        if arr[mid] == x:\n            j = mid - 1\n        elif arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n\n    if i < j and arr[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    left = 0\n    right = n-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            while mid + 1 < len(arr) and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments: the sorted array and the element to be searched for.\n    It returns the last position of the element in the array, or None if it is not found.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return None"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the last position of x in the array.\n\n    Args:\n    arr: A sorted array.\n    x: An element to find the last position of.\n\n    Returns:\n    The last position of x in the array.\n    \"\"\"\n\n    # Initialize a variable to keep track of the last position of x\n    last_position = -1\n\n    # Loop through the array and check if the current element is equal to x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_position = i\n\n    return last_position"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_value = 0\n    for key, value in dict.items():\n        sum_value += value\n    return sum_value"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = map(int, input(\"Enter the range of odd natural numbers: \").split())\n    odd_sum = 0\n\n    for i in range(l, r+1, 2):\n        odd_sum += i\n\n    print(\"The sum of all odd natural numbers within the given range is:\", odd_sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize a variable to store the sum of odd natural numbers\n    sum_odd = 0\n\n    # Loop through the range l to r\n    for i in range(l, r+1):\n\n        # Check if i is odd\n        if i % 2 == 1:\n\n            # Add i to the sum of odd natural numbers\n            sum_odd += i\n\n    # Return the sum of odd natural numbers\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n    s = 0\n    for i in range(l, r+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # initialize sum to zero\n    sum = 0\n\n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add each odd number to sum\n        sum += i\n\n    # return sum of all odd numbers in range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # get the lower and upper limits of the range\n    l, r = 1, n\n    \n    # initialize the sum variable to zero\n    total = 0\n    \n    # loop through the range of natural numbers\n    for i in range(l, r+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # if the number is odd, add it to the total\n            total += i\n    \n    # return the sum of all odd numbers in the range\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments: l (int) and r (int).\n    It returns the sum of all odd natural numbers between l and r.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through all the numbers between l and r\n    for i in range(l, r+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # add the number to the sum variable\n            sum += i\n\n    # return the sum of all odd natural numbers\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize the sum of odd numbers to 0\n    odd_sum = 0\n    # Iterate through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is odd\n        if i % 2!= 0:\n            # If it is odd, add it to the sum\n            odd_sum += i\n    # Return the sum of odd numbers\n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(l, r): \n    \"\"\"\n    This function takes in two arguments, l and r, which represent the lower and upper limits of the range within which we want to find the sum of odd natural numbers.\n    \"\"\"\n    sum_of_odds = 0\n    for i in range(l, r+1, 2):\n        sum_of_odds += i\n    return sum_of_odds\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initializing the sum variable to 0\n    sum = 0\n\n    # iterating through the array\n    for i in range(len(arr)):\n        # adding each element to the sum variable\n        sum += arr[i]\n\n    # returning the sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Extract the last d bits from the number\n    last_d_bits = n & ((1 << d) - 1)\n\n    # Shift the number left by d bits\n    n <<= d\n\n    # Shift the last d bits to the beginning\n    n |= last_d_bits\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF  # assuming the number is a 32 bit integer\n    n = n & mask  # masking the number to make sure it's 32 bits\n    d &= 0x1F  # masking the d value to make sure it's a valid number of bits to rotate by\n    d %= 32  # modulo operation to ensure d is a valid number of bits to rotate by\n\n    n = (n << d) | (n >> (32 - d))  # left rotation of the number\n    n = n & mask  # masking the result to make sure it's still 32 bits\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    # Check if the given number is 32 bit\n    if len(hex(n)[2:])!= 8:\n        return \"Error: Given number is not 32 bit\"\n\n    # Calculate the binary representation of the given number\n    binary_number = bin(n)[2:]\n\n    # Calculate the number of bits to be rotated\n    num_bits = len(binary_number)\n    shift_amount = d % num_bits\n\n    # If the number of bits to be rotated is 0, just return the original number\n    if shift_amount == 0:\n        return n\n\n    # Calculate the number of bits to be added at the end to complete the rotation\n    extra_bits = num_bits - shift_amount\n\n    # Add the extra bits to the beginning of the binary number\n    binary_number = \"0\" * extra_bits + binary_number\n\n    # Calculate the rotated binary number\n    rotated_binary = binary_number[-shift_amount:] + binary_number[:-shift_amount]\n\n    # Convert the binary number to its decimal representation\n    rotated_number = int(rotated_binary, 2)\n\n    # Return the rotated number\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the number of bits to rotate by\n    n_bits = len(bin(n)[2:])\n\n    # Calculate the number of rotations needed\n    n_rotations = d % n_bits\n\n    # Calculate the mask to use for the left shift\n    mask = (1 << n_bits) - 1\n\n    # Perform the left shift\n    rotated = (n << n_rotations) & mask\n\n    # Return the rotated number\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Helper function to calculate the rotated bits\n    def rotated_bits(num, d):\n        # Calculate the number of bits to rotate left\n        num_bits = len(bin(num)[2:])\n        num_bits_to_rotate = d % num_bits\n\n        # Calculate the rotated bits\n        rotated = (num << num_bits_to_rotate) | (num >> (num_bits - num_bits_to_rotate))\n\n        return rotated\n\n    # Calculate the original value\n    original_value = n\n\n    # Calculate the rotated value\n    rotated_value = rotated_bits(original_value, d)\n\n    return rotated_value"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n & ((1 << 32) - 1)  # To make sure that the number is 32 bit\n    return ((n << d) | (n >> (32 - d))) & ((1 << 32) - 1)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # find the number of bits in the given number\n    num_bits = len(bin(n)[2:])\n    # find the number of bits to rotate by\n    rot_bits = num_bits - d\n    # rotate the number to the left by rot_bits bits\n    rotated_num = (n << rot_bits) | (n >> (32 - rot_bits))\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return (n << d) | (n >> (32-d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32-d))"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all occurrences of multiple whitespaces with a single space\n    text = re.sub('\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string using regular expressions.\n    '''\n    # replace all whitespace characters with a single space\n    text = re.sub(r'\\s+','', text)\n    # replace multiple consecutive spaces with a single space\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n\n    return re.sub(' +','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if y == x!= z:\n        count += 1\n    if z == x!= y:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if y!= x == z:\n        count += 1\n    if z!= x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal integers in the three integers.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    equal_count = 0\n    for num in [x, y, z]:\n        if num == x:\n            equal_count += 1\n    return equal_count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    # define a dictionary to store the counts of each number in the input\n    counts = {}\n\n    # count the number of occurrences of each number in the input\n    for num in [x, y, z]:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # count the number of equal numbers\n    equal_count = 0\n    for count in counts.values():\n        if count == 3:\n            equal_count += 1\n\n    # return the count of equal numbers\n    return equal_count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n    \n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n            \n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z:\n        count += 1\n    if x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    # initialize count variable to zero\n    count = 0\n\n    # loop through each integer and check if it is equal to either x or y or z\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n\n    # return the count of equal numbers\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i + 1\n        while j < n and arr[i] >= arr[j]:\n            j += 1\n        if j < n:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if the array is already sorted\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return 0\n    # check if the array is already a permutation\n    for i in range(n - 1):\n        if arr[i]!= arr[n - i - 1]:\n            return 0\n    return 1 + count_rotation(arr[::-1])"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    # Check if the array is sorted or not\n    if sorted(arr) == arr:\n        return 0\n    \n    # Calculate the number of rotations required to generate a sorted array\n    n = len(arr)\n    for i in range(n):\n        # Calculate the number of rotations required for the first i elements\n        for j in range(1, i+1):\n            # Calculate the new element as the sum of the element at index j and the last element of the array\n            arr[i-j] += arr[n-1]\n        \n        # Calculate the number of rotations required for the last i elements\n        for j in range(i+1, n):\n            # Calculate the new element as the sum of the element at index i-j and the last element of the array\n            arr[j] += arr[n-1]\n        \n        # Check if the array is sorted or not\n        if sorted(arr) == arr:\n            return i\n            \n    # If the array is not sorted after all rotations, return -1\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            arr.insert(i+1, arr.pop(i))\n            return i+1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the minimum element in the array\n    min_element = min(arr)\n    # Initialize a flag variable to keep track of whether the array is already sorted\n    is_sorted = True\n    # Iterate over the array starting from the second element and check if it is less than the current minimum element\n    for i in range(1, n):\n        if arr[i] < min_element:\n            # If it is not, then the array is not sorted\n            is_sorted = False\n            break\n        # If it is, then update the minimum element\n        min_element = min(min_element, arr[i])\n    # If the array is already sorted, then there are no rotations required\n    if is_sorted:\n        return 0\n    # Initialize a count variable to keep track of the number of rotations\n    count = 0\n    # Iterate over the array starting from the second element and check if it is greater than the current minimum element\n    for i in range(1, n):\n        if arr[i] > min_element:\n            # If it is, then increment the count and update the minimum element\n            count += 1\n            min_element = arr[i]\n        # If it is not, then the array is already sorted and the number of rotations is equal to the count\n        else:\n            return count\n    # If the loop completes without finding any rotations, then the array is already sorted and there are no rotations required\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        # If the current element is greater than the next element, then we need to rotate the array\n        if arr[i] > arr[i+1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if array is sorted or not\n    if arr == sorted(arr):\n        return 0\n    # check if array is already sorted in reverse order\n    if arr == sorted(arr, reverse=True):\n        return n\n    # binary search for the pivot element\n    left, right = 0, n-1\n    while left <= right:\n        pivot_index = left + (right-left)//2\n        if arr[pivot_index] < arr[right]:\n            right = pivot_index-1\n        else:\n            left = pivot_index+1\n    # check if pivot is already at the end\n    if left == n-1:\n        return 0\n    # count the number of rotations required to generate the sorted array\n    count = 0\n    for i in range(left, n-1):\n        if arr[i] > arr[i+1]:\n            return count + 1\n        elif arr[i] == arr[i+1]:\n            count += 1\n    return count + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    for i in range(n):\n        if arr[i] < arr[n-1-i]:\n            return i+1\n\n    return n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes an integer n as input and returns True if it is a perfect square, otherwise False.\n    '''\n    if n < 2:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n\n    # Initialize a variable to store the square root of n\n    square_root = 0\n\n    # Loop until the square root is greater than the square of the number\n    while square_root ** 2 <= n:\n        # If the square root is an integer, return True\n        if square_root == int(square_root):\n            return True\n\n        # Increment the square root\n        square_root += 1\n\n    # If the loop completes without returning True, it means n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the number is a perfect square or not\n    sqrt_n = int(n**0.5)\n    return sqrt_n*sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if n is a perfect square or not\n    if n < 0:\n        return False\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether the given number is a perfect square or not.\n    '''\n    # function to check if a number is a perfect square or not\n    def is_perfect_square_helper(num, count):\n        if count == 0:\n            return True\n        if num < 2:\n            return False\n        if num % 2 == 0:\n            num /= 2\n            count += 1\n        else:\n            num = 3*num + 1\n            count -= 1\n        return is_perfect_square_helper(num, count)\n\n    # check if the number is less than 2\n    if n < 2:\n        return False\n    # check if the number is already a perfect square\n    elif n % 4 == 1 and n % 9 == 8:\n        return True\n    # check if the number is a perfect square\n    else:\n        return is_perfect_square_helper(n, 0)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    x = n\n    y = n\n    while x*x > n:\n        x = (x + n//x)//2\n        y = (n//x + x)//2\n\n    if x*x == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n\n    # Check if n is a power of 2\n    i = 0\n    while i * i <= n:\n        i += 1\n\n    if i * i == n:\n        return True\n\n    # Check if n is a prime number\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n\n    Args:\n        n (int): The number to be checked.\n\n    Returns:\n        bool: True if n is a perfect square, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    left = 2\n    right = n\n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = int(n ** 0.5) + 1\n    for i in range(1, sqrt_n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    root = n ** 0.5\n    return root == int(root)"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    \n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    product = 1 \n    for num in arr: \n        product *= num \n\n    if product % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    # Initialize the product variable to 1\n    product = 1\n    # Loop through each element in the list\n    for num in arr:\n        # Update the product by multiplying it with the current number\n        product *= num\n        # Check if the product is even or not\n        if product % 2 == 0:\n            # If it is even, return True\n            return True\n        else:\n            # If it is odd, set the product back to 1 and continue looping\n            product = 1\n    # If the loop completes without finding a product that is even, return False\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    \n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables for maximum sum and index of the maximum sum\n    max_sum = 0\n    max_index = 0\n    \n    # Iterate through all possible sublists of the input lists\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            # Calculate the sum of the current sublist\n            sublist_sum = sum(lists[k][j] for k in range(len(lists)))\n            \n            # Update the maximum sum and its index if the current sublist sum is greater than the current maximum sum\n            if sublist_sum > max_sum:\n                max_sum = sublist_sum\n                max_index = [i, j]\n    \n    # Extract the maximum sum sublist from the input lists\n    max_sublist = [[lists[i][j] for j in range(len(lists[i]))] for i in range(len(lists))]\n    \n    # Return the maximum sum sublist\n    return max_sublist"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = []\n    \n    # Loop through each list in the input list\n    for lst in lists:\n        # Initialize variables\n        current_sum = 0\n        \n        # Loop through each element in the list\n        for num in lst:\n            # Add the element to the current sum\n            current_sum += num\n            \n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                # Update the maximum sum and the list of the maximum sum\n                max_sum = current_sum\n                max_list = lst\n    \n    # Return the maximum sum list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            temp_sum = lists[i][j]\n            for k in range(len(lists)):\n                if k!= i:\n                    temp_sum += lists[k][j]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_list = [lists[i][j]]\n            elif temp_sum == max_sum:\n                max_list.append(lists[i][j])\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    def helper(lst):\n        if len(lst) == 1:\n            return lst[0]\n        else:\n            max_sum = lst[0]\n            for num in lst[1:]:\n                max_sum = max(max_sum, num + helper(lst[:i]))\n            return max_sum\n\n    max_sum = 0\n    for lst in lists:\n        current_sum = helper(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return [lst for lst in lists if helper(lst) == max_sum]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == 0 and j == 0:\n                current_sum = lists[i][j]\n            else:\n                current_sum = lists[i][j] + max_list[i-1][j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lists[i][j]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize a variable to store the maximum sum found so far\n    max_sum = float('-inf')\n\n    # Iterate through each list of lists in the input\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        total = sum(lst)\n\n        # If the sum is greater than the current maximum, update the maximum sum\n        if total > max_sum:\n            max_sum = total\n\n    # Initialize a variable to store the list with the maximum sum found\n    max_list = None\n\n    # Iterate through each list of lists in the input\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        total = sum(lst)\n\n        # If the sum is equal to the maximum, check if the list is a valid one\n        if total == max_sum and all(isinstance(x, list) for x in lst):\n            # If the list is valid, check if it's greater than the current maximum list\n            if lst > max_list:\n                max_list = lst\n\n    # Return the maximum sum list if found, or None otherwise\n    return max_list if max_list is not None else None"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        if lst[0] > max_sum:\n            max_sum = lst[0]\n            max_list = lst\n        elif lst[0] == max_sum and lst[1] > max_list[1]:\n            max_sum = lst[1]\n            max_list = lst\n        elif lst[0] == max_sum and lst[1] == max_list[1] and lst[2] > max_list[2]:\n            max_sum = lst[2]\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for list_ in lists:\n        list_sum = sum(list_)\n        if list_sum > max_sum:\n            max_sum = list_sum\n            max_list = list_\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 0\n    run = 0\n    uppercase = False\n    \n    # Iterate through the string\n    for i in range(len(test_str)):\n        # Check if the character is uppercase\n        if test_str[i].isupper():\n            # Increase the run count\n            run += 1\n            # Check if the current run is longer than the maximum run\n            if run > max_run:\n                max_run = run\n                # Set the flag to indicate that the current run is the new maximum run\n                uppercase = True\n        else:\n            # Reset the run count if the character is not uppercase\n            run = 0\n            # Reset the flag to indicate that the current run is not the new maximum run\n            uppercase = False\n            \n    # Return the maximum run of uppercase characters\n    return max_run if uppercase else 0"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 1\n    max_count = 1\n    start = 0\n    end = 0\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                start = i - count + 1\n                end = i\n        else:\n            count = 1\n    return test_str[start:end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 1\n    current_run = 1\n    uppercase_found = False\n\n    # Iterate through the string\n    for char in test_str:\n\n        # If the character is uppercase, increment the current run and set the flag\n        if char.isupper():\n            current_run += 1\n            uppercase_found = True\n\n        # If the character is lowercase and the current run is greater than the maximum run, update the maximum run\n        elif current_run > max_run:\n            max_run = current_run\n            uppercase_found = False\n\n        # Reset the current run if the character is not uppercase and the current run is greater than 1\n        elif current_run > 1:\n            current_run = 1\n            uppercase_found = False\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 1\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            count = max(count, current_run)\n            max_run = max(max_run, count)\n            current_run = 1\n    count = max(count, current_run)\n    max_run = max(max_run, count)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    current_run = ''\n\n    for char in test_str:\n        if char.isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n\n        current_run += char\n\n    if count > max_count:\n        max_count = count\n\n    return max_count, current_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    # create an empty list to store the counts of uppercase characters\n    counts = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is uppercase, add 1 to the count in the list\n        if char.isupper():\n            counts.append(1)\n        # if the character is not uppercase, reset the count to 0 and continue looping\n        else:\n            counts = [0]\n            continue\n    # find the maximum count in the list and return it as the maximum run of uppercase characters\n    return max(counts)"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_count = 0\n    max_run = 0\n    current_run = 0\n    is_uppercase = False\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            is_uppercase = True\n        else:\n            if is_uppercase:\n                if current_run > max_run:\n                    max_run = current_run\n                current_run = 0\n                is_uppercase = False\n            else:\n                current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    prev_char = None\n    run_length = 0\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase and the previous character was not uppercase, update the maximum run\n        if char.isupper() and not prev_char.isupper():\n            if run_length > max_run:\n                max_run = run_length\n            run_length = 0\n\n        # Otherwise, reset the run_length\n        else:\n            run_length = 0\n\n        # Update the previous character\n        prev_char = char\n\n        # Increment the run_length for the current character\n        run_length += 1\n\n    # If there is a maximum run, return it\n    if max_run > 0:\n        return max_run\n\n    # Otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    run_length = 0\n    current_run = \"\"\n    start_index = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase, check if the current run is longer than the previous run\n        if test_str[i].isupper():\n            if len(current_run) > len(run_length):\n                run_length = len(current_run)\n                start_index = i - len(current_run) + 1\n        # If the current character is not uppercase, reset the current run\n        else:\n            current_run = \"\"\n\n    # Return the maximum run of uppercase characters\n    return test_str[start_index:start_index+run_length]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start_index = 0\n    max_count = 0\n    max_index = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_index = start_index\n        else:\n            count = 0\n            if count > max_count:\n                max_count = count\n                max_index = start_index\n            start_index = i + 1\n\n    if count > max_count:\n        max_count = count\n        max_index = start_index\n\n    return test_str[max_index:max_index+max_count]\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Loop through the list of numbers\n    for num in nums:\n        # If the number is odd, return it and break out of the loop\n        if num % 2!= 0:\n            return num\n            break"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n\n    Args:\n        nums (list): List of numbers.\n\n    Returns:\n        int: The first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) < K:\n        return False\n    return test_tup[K-1] in test_tup[:K-1]"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_list = []\n    for tup in test_tup:\n        if len(tup) == K:\n            k_list.append(tup)\n    return k_list"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if K in i:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for t in test_tup:\n        if t == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        print(\"The K value is present in the tuple\")\n    else:\n        print(\"The K value is not present in the tuple\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k = K[0]\n    for tup in test_tup:\n        if k in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function checks if the given tuples contain the k or not.\n\n    Arguments:\n    test_tup -- Tuple of tuples, which contains the tuples to be checked.\n    K -- Integer, which represents the k value to be checked.\n\n    Returns:\n    List of tuples, which contains the tuples that contain the given k value.\n    '''\n\n    result = []\n\n    for tup in test_tup:\n        if K in tup:\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same number of elements\")\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same number of elements.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"The element at index {i} of the first tuple is greater than the corresponding element in the second tuple.\")\n            return\n    \n    print(\"All elements of the second tuple are smaller or equal to the corresponding elements of the first tuple.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]