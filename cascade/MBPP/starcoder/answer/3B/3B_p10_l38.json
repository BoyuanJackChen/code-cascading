[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_list.append(item)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize an empty list to store the shared elements\n    shared_elements = []\n    \n    # Iterate through the first list and check if each element is also in the second list\n    for element in test_tup1:\n        if element in test_tup2:\n            # If the element is found in both lists, add it to the shared elements list\n            shared_elements.append(element)\n    \n    # Return the shared elements list\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Convert tuples to sets to remove duplicates and then convert back to lists\n    set1 = list(set(test_tup1))\n    set2 = list(set(test_tup2))\n\n    # Iterate over the sets and find the elements that are the same\n    for element in set1:\n        if element in set2:\n            # If an element is found in both sets, add it to the result set\n            result.add(element)\n\n    # Convert the result set back to a tuple and return it\n    return tuple(result)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a dictionary to store the counts of each element in both lists\n    counts1 = {}\n    counts2 = {}\n    \n    # Loop through each element in the first list and increment its count in the counts1 dictionary\n    for elem in test_tup1:\n        if elem in counts1:\n            counts1[elem] += 1\n        else:\n            counts1[elem] = 1\n    \n    # Loop through each element in the second list and increment its count in the counts2 dictionary\n    for elem in test_tup2:\n        if elem in counts2:\n            counts2[elem] += 1\n        else:\n            counts2[elem] = 1\n    \n    # Loop through each element in counts1 and counts2 and check if they have the same count\n    shared_elements = []\n    for elem in counts1:\n        if elem in counts2 and counts1[elem] == counts2[elem]:\n            shared_elements.append(elem)\n    \n    # Return the list of shared elements\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_set = set1.intersection(set2)\n    return shared_set"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to lists to avoid modification issues\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Create a dictionary to store the shared elements\n    shared_dict = {}\n\n    # Iterate through the lists\n    for i in range(len(list1)):\n        if list1[i] in list2 and list1[i] not in shared_dict:\n            shared_dict[list1[i]] = True\n\n    # Convert the dictionary to a set to remove duplicates\n    shared_set = set(shared_dict)\n\n    # Convert the set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Convert tuples to lists for easier comparison\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Find the shared elements in the lists\n    shared = [element for element in list1 if element in list2]\n\n    # Return the shared elements\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    \n    # Iterate over the range of numbers from 2 to the square root of the input number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # If the number is divisible by any of these numbers, it is not prime\n        if n % i == 0:\n            return True\n    \n    # If the loop completes without returning True, the number is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if it is a prime number\n    and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the number is not a prime number, else False.\n    \"\"\"\n    # check if the number is less than 2\n    if n < 2:\n        return False\n    # check if the number is equal to 2\n    elif n == 2:\n        return True\n    # check if the number is greater than 2\n    else:\n        # check if the number is divisible by any number between 2 and n-1\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        # if the number is not divisible by any number between 2 and n-1, then it is a prime number\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n\nprint(is_not_prime(11)) # Output: True\nprint(is_not_prime(10)) # Output: False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a non-prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input! Please enter a positive integer.\"\n\n    # Check if n is greater than 2\n    if n > 2:\n        # Loop from 2 to n-1\n        for i in range(2, int(math.sqrt(n)) + 1):\n            # Check if i divides n\n            if n % i == 0:\n                return \"The number is not prime.\"\n        # If no divisor found, return True\n        return True\n    else:\n        return \"The number is not prime.\""
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap from the input list\n    heap = nums[:n]\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, nums[i])\n    # Extract the largest n elements from the heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    min_heap = []\n    max_heap = []\n\n    # Adding all numbers to the min_heap\n    for num in nums:\n        heapq.heappush(min_heap, -num)\n\n    # Adding the first n elements to the max_heap\n    for _ in range(n):\n        if min_heap:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n\n    # Adding the remaining elements to the max_heap\n    for num in nums[n:]:\n        if min_heap and -num > -heapq.heappop(min_heap):\n            heapq.heappush(min_heap, -num)\n        else:\n            heapq.heappush(max_heap, -num)\n\n    # Reconstructing the final result from the max_heap\n    result = []\n    while max_heap:\n        result.append(-heapq.heappop(max_heap))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Convert the list of numbers into a max heap\n    max_heap = nums[:n]\n    hq.heapify(max_heap)\n\n    # Remove the smallest element from the max heap and add the next element to the max heap\n    for i in range(n, len(nums)):\n        if nums[i] > max_heap[0]:\n            max_heap[0] = nums[i]\n            hq.heapreplace(max_heap, max_heap[0])\n\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list of numbers to a heap\n    heap = hq.nsmallest(n, nums)\n    # reverse the heap to get the n largest integers in descending order\n    heap = [heap[i] for i in range(n-1, -1, -1)]\n    # remove the largest integer from the heap and add it to the end of the list\n    heap.append(hq.heappop(nums))\n    # return the reversed heap\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of size n\n    max_heap = [0] * n\n    hq.heapify(max_heap)\n\n    # fill the max-heap with the smallest elements from the given list\n    for num in nums:\n        hq.heappushpop(max_heap, num)\n\n    # return the max-heap as the result\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    heap_size = len(nums)\n    for i in range(n):\n        nums.pop()\n        heap_size -= 1\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function takes a list of numbers and returns the n largest integers from the list in descending order.\n    \"\"\"\n    # Create a max-heap from the list of numbers\n    max_heap = hq.nlargest(n, nums)\n    # Return the elements of the max-heap in descending order\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x > 1:\n        x = x >> 1\n\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Convert x to binary\n    binary_x = bin(x)[2:]\n    \n    # Check whether the length of the binary representation of x is 1 more than the length of the binary representation of y\n    if len(binary_x)!= len(binary_y):\n        return True\n    \n    # Check whether the binary representation of x and y differ at one bit position only\n    for i in range(len(binary_x)):\n        if binary_x[i]!= binary_y[i]:\n            return True\n    \n    # If no bit position differs, then x and y are same for all bit positions\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if the binary representation of x has a 1 at one bit position and False otherwise.\n    '''\n    if x == 0:\n        return False\n    \n    while x > 1:\n        if x % 2 == 1:\n            return False\n        x //= 2\n    \n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1:\n        x = x // 2\n    \n    return x == 1\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x > 0:\n        if x & 1!= (x >> 1) & 1:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    else:\n        while x!= 1:\n            if x % 2 == 0:\n                x = x // 2\n            else:\n                x = 3 * x + 1\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the binary representation of x and y to integer and check whether their difference is 1 or not\n    if x ^ y == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Check if the two numbers are of different lengths\n    if len(bin(x))!= len(bin(x ^ (x-1))):\n        return False\n    \n    # Check if the two numbers differ at one bit position only\n    for i in range(len(bin(x))):\n        if bin(x)[i]!= bin(x ^ (x-1))[i]:\n            return False\n    \n    # If no bit positions differ, then the two numbers are Power of Two\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words of length 4 or more\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() function to find all words that match the pattern\n    words = re.findall(pattern, text)\n    # Return the list of matched words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into a list of words\n    words = text.split()\n\n    # Use regular expressions to find all words with at least 4 characters\n    pattern = re.compile(r'\\b\\w+\\b')\n    matches = pattern.findall(text)\n\n    # Filter out words that are less than 4 characters long\n    result = [word for word in matches if len(word) >= 4]\n\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Remove all non-alphanumeric characters and split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words with length less than 4\n    filtered_words = [word for word in words if len(word) >= 4]\n    \n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use a regular expression to split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words in the string\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    \n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = text.split()\n    \n    # Initialize an empty list to store the words that are at least 4 characters long\n    long_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the word is at least 4 characters long\n        if len(word) >= 4:\n            # If the word is long enough, add it to the long_words list\n            long_words.append(word)\n    \n    # Return the long_words list\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num*num for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = float('inf')\n\n    # Loop through all possible rotations of the string\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            # Check if the rotations are equal\n            if str[i:j+1] == str[j:i+1][::-1]:\n                # If they are, calculate the number of rotations required\n                rotations = (j-i)//2 + 1\n                # Update the minimum number of rotations required if necessary\n                min_rotations = min(min_rotations, rotations)\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    if str[i:j] == str[k:l] and str[j:k] == str[l:n] and str[i:j]!= str[j:k]:\n                        min_rotations += 1\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # convert string to list of characters\n    lst = list(str)\n\n    # initialize variables\n    minRotations = 0\n    temp = ''\n\n    # loop through each character in the list\n    for i in range(len(lst)):\n        # loop through the rest of the list to find the next character that is not equal to the current one\n        for j in range(i+1, len(lst)):\n            # create a temporary string with the characters at i and j\n            temp = lst[i] + lst[j] + lst[i+1:j] + lst[j+1:]\n            # check if the temporary string is equal to the original string\n            if temp == str:\n                # update the minimum rotations if the current rotation is smaller\n                minRotations = min(minRotations, j-i+1)\n                # break out of both loops\n                break\n\n    # return the minimum rotations found\n    return minRotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # initialize variables\n    n = len(str)\n    count = 0\n    max_rotations = 0\n    \n    # loop through each character in the string\n    for i in range(n-1):\n        # check if the characters at indices i and i+1 are swapped\n        if str[i]!= str[i+1]:\n            # if they are swapped, increment the count and check if it's greater than max_rotations\n            count += 1\n            if count > max_rotations:\n                max_rotations = count\n    \n    # if the count is 0, it means that the string is already sorted\n    if count == 0:\n        return 0\n    \n    # if the count is greater than 0, it means that the string is not sorted\n    # calculate the minimum number of rotations required\n    rotations = max_rotations // 2\n    \n    # check if the string is already sorted after rotating\n    for _ in range(rotations):\n        is_sorted = True\n        for i in range(n-1):\n            if str[i] > str[i+1]:\n                is_sorted = False\n                break\n        if is_sorted:\n            return 0\n    \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    # Convert the input string to a set to remove duplicate characters\n    chars = set(str)\n    # Sort the characters in the string\n    sorted_chars = sorted(chars)\n    # Find the length of the string\n    length = len(str)\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = length\n    \n    # Iterate over all possible rotations of the string\n    for i in range(length):\n        # Get the first character and the last character of the rotation\n        first_char = sorted_chars[i]\n        last_char = sorted_chars[-i-1]\n        # Check if the first and last characters are equal\n        if first_char == last_char:\n            # Subtract 1 from the length since we rotated the string\n            min_rotations = min(min_rotations, length - 1 - i)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # find the maximum frequency of any character in the string\n    max_freq = max(freq.values())\n\n    # initialize a variable to store the minimum number of rotations required\n    min_rotations = max_freq\n\n    # loop through all possible rotations of the string and count the number of rotations\n    for i in range(1, max_freq+1):\n        rotations = 0\n        for j in range(len(str)):\n            if freq[str[j]] == i:\n                # check if the next character is also present with the same frequency\n                if freq[str[j+1]] == i:\n                    # rotate the string by 1 character and update the frequency of the characters that are now at the end of the string\n                    rotations += 1\n                    freq[str[j]] -= 1\n                    freq[str[j+1]] -= 1\n                    freq[str[j+2]] += 1\n        # update the minimum number of rotations required if the current rotation is shorter\n        if rotations < min_rotations:\n            min_rotations = rotations\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    \n    # Initialize variables for min_rotations and max_rotations\n    min_rotations = max_rotations = 0\n    \n    # Loop through all possible rotations of the string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Calculate the new string after rotating the first i characters to the end\n            new_str = str[-j:] + str[:-j]\n            \n            # If the new string is equal to the original string, increment min_rotations\n            if new_str == str:\n                min_rotations += 1\n                \n    # If min_rotations is greater than max_rotations, return max_rotations + 1\n    if min_rotations > max_rotations:\n        return min_rotations + 1\n    else:\n        return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rot = n # assume the first string is the minimum rotation\n    \n    # check for rotations greater than 0\n    for i in range(1, n//2+1):\n        if str[:i] == str[-i:]: # check if the first i characters match the last i characters\n            min_rot = min(min_rot, i)\n    \n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        if str[i] == str[-i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Initialize a dictionary to store the frequency of each character after each rotation\n    freq2 = {}\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Get the current character and its frequency\n        char = str[i]\n        freq_char = freq[char]\n        \n        # If the character has only one occurrence, it cannot be rotated\n        if freq_char == 1:\n            return 0\n        \n        # Remove the current character from the string and add it to the dictionary of frequency after the rotation\n        str_rotated = str[i+1:] + str[:i]\n        for j in range(len(str_rotated)):\n            char_rotated = str_rotated[j]\n            if char_rotated in freq2:\n                freq2[char_rotated] += 1\n            else:\n                freq2[char_rotated] = 1\n    \n    # Calculate the minimum number of rotations required to get the same string\n    rotations = 0\n    for char_new, freq_new in freq2.items():\n        if char_new in freq:\n            rotations += min(freq[char_new], freq_new)\n    \n    return rotations + 1"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip() # Remove any leading/trailing spaces\n    \n    # Split the string into a list\n    lst = list(s)\n    \n    # Find the first and last occurrences of the character to remove\n    first = lst.index(ch)\n    last = lst.rindex(ch)\n    \n    # Remove the first and last occurrences from the list\n    lst = lst[:first] + lst[last+1:]\n    \n    # Join the list back into a string\n    result = ''.join(lst)\n    \n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0: \n        return s \n    if s[0] == ch: \n        return remove_Occ(s[1:], ch) \n    if s[-1] == ch: \n        return remove_Occ(s[:-1], ch) \n    else: \n        return s "
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s.replace(ch,'',1) + s.replace(ch,'',-1)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence\n    if s.find(ch) == 0:\n        s = s[len(ch):]\n    # remove last occurrence\n    if s.find(ch) == len(s)-len(ch):\n        s = s[:len(s)-len(ch)]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    i = s.index(ch)\n    j = s.rindex(ch)\n    if i < j:\n        s = s[:i] + s[i+1:] + s[j+1:]\n    else:\n        s = s[:j] + s[j+1:] + s[i+1:]\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 0:\n        return s\n    s = s.replace(ch,'')\n    s = s.strip()\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '')\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # get the dimensions of the matrix\n    n = len(M)\n    \n    # initialize a list to store the sum of each row\n    row_sums = [sum(M[i]) for i in range(n)]\n    \n    # sort the indices of the rows based on the row_sums\n    sorted_indices = sorted(range(n), key=lambda x: row_sums[x])\n    \n    # create a new list of sorted rows\n    sorted_rows = [M[i] for i in sorted_indices]\n    \n    # return the sorted matrix\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # initialize variables for sorting\n    rows = len(M)\n    cols = len(M[0])\n    row_sums = [0] * rows\n    col_sums = [0] * cols\n\n    # calculate the row and column sums\n    for i in range(rows):\n        for j in range(cols):\n            row_sums[i] += M[i][j]\n            col_sums[j] += M[i][j]\n\n    # sort the matrix by row sum in ascending order\n    for i in range(rows):\n        for j in range(cols):\n            if row_sums[i]!= col_sums[j]:\n                M[i][j] = M[i][j] * 0 # remove duplicate element\n\n    # sort the matrix by column sum in ascending order\n    for j in range(cols):\n        for i in range(rows):\n            if row_sums[i]!= col_sums[j]:\n                M[i][j] = M[i][j] * 0 # remove duplicate element\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a variable to store the sum of rows\n    total_sum = 0\n    # Initialize a variable to store the minimum sum of rows\n    min_sum = float('inf')\n    # Initialize a variable to store the sorted matrix\n    sorted_matrix = []\n    \n    # Loop through each row of the matrix\n    for row in M:\n        # Calculate the sum of the row\n        current_sum = sum(row)\n        # Check if the current sum is less than the minimum sum\n        if current_sum < min_sum:\n            # Update the minimum sum and sorted matrix\n            min_sum = current_sum\n            sorted_matrix = [row]\n        elif current_sum == min_sum:\n            # If the current sum is equal to the minimum sum, append the row to the sorted matrix\n            sorted_matrix.append(row)\n        # Add the current row to the total sum\n        total_sum += current_sum\n    \n    # Sort the sorted matrix in ascending order\n    sorted_matrix.sort()\n    \n    # Print the sorted matrix and the sum of the rows\n    print(sorted_matrix)\n    print(\"The sum of the rows is:\", total_sum)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # sort the rows of the matrix\n    for i in range(len(M)):\n        M[i].sort()\n    \n    # initialize the result matrix\n    result = []\n    \n    # iterate over the sorted rows\n    for i in range(len(M)):\n        row = []\n        # iterate over the sorted columns and append them to the row\n        for j in range(len(M[i])):\n            row.append(M[i][j])\n        # append the sorted row to the result matrix\n        result.append(row)\n    \n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # sort each row of the matrix in ascending order\n    for i in range(len(M)):\n        M[i].sort()\n    # concatenate the sorted rows into a single sorted matrix\n    sorted_matrix = []\n    for i in range(len(M[0])):\n        row = [M[j][i] for j in range(len(M))]\n        sorted_matrix.append(row)\n    # sort the concatenated matrix in ascending order according to the sum of its rows\n    sorted_matrix.sort(key=lambda x: sum(x))\n    # return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize the sum of the rows\n    sums = [0] * len(M[0])\n\n    # calculate the sum of each row\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            sums[j] += M[i][j]\n\n    # sort the matrix by row sum\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            M[i][j] = M[i][j] * 100 + (sums[j] - M[i][j] * 100)\n\n    # sort the matrix by row sum\n    for i in range(len(M)):\n        M[i].sort()\n\n    # convert the sorted matrix to a list of lists\n    sorted_matrix = [list(row) for row in M]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    row_sums = [sum(row) for row in M]\n    sorted_rows = sorted(M, key=lambda row: row_sums.index(sum(row)))\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # find the maximum element in the current row\n        max_row = M[i].index(max(M[i]))\n        # swap the maximum element with the first element in the current row\n        M[i][0], M[i][max_row] = M[i][max_row], M[i][0]\n        # sort the rest of the elements in the current row in ascending order\n        M[i] = sorted(M[i][1:])\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    sorted_indices = sorted(range(len(M)), key=lambda i: row_sums[i])\n    return [M[i] for i in sorted_indices]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] > M[i][i] + M[j][j]:\n                # swap rows i and j\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/2*(l*b*h)\n    print(\"The volume of the triangular prism is:\",V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    V = l * b * h / 3.0\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function calculates the volume of a triangular prism with given dimensions.\n    '''\n    # Calculating the area of the prism\n    area = 0.5 * l * b * h\n    \n    # Calculating the volume of the prism\n    volume = area * l\n    \n    # Returning the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function takes in three parameters, length, breadth, and height of a triangular prism.\n    It returns the volume of the prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5*l*b*h # Formula for the volume of a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # calculate the semi-perimeter of the prism\n    s = (l + b + h) / 2\n\n    # calculate the area of the prism\n    A = (s * (s - l) * (s - b) * (s - h)) ** 0.5\n\n    # calculate the volume of the prism\n    V = A * h / 3\n\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) :\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculate the area of the prism\n    area = 0.5*l*b\n\n    # Calculate the volume of the prism\n    volume = area*h\n\n    # Return the volume of the prism\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<=[a-z])[A-Z]|(?<=\\s)[a-z]\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Check if the input string contains sequences of lowercase letters joined with an underscore\n    pattern = r\"(?<=[a-z])[A-Z](?=[a-z])|_(?=[a-z])\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = re.compile(r\"([a-z]+)([a-z]+)\")\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![a-z])(?=[a-z])[a-z_]+(?=\\w)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)_([a-z]+)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    # Define the regular expression pattern to match a sequence of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]*[_][a-z]*\\b'\n    # Use the re.search() function to search for the pattern in the input text\n    match = re.search(pattern, text)\n    # If the pattern is found in the input text, return True\n    if match:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z][a-z_]*[a-z]$'  # matches strings that start with a lowercase letter followed by zero or more lowercase letters or underscores, followed by another lowercase letter\n    return re.search(pattern, text) is not None  # returns true if the pattern matches, and false otherwise"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    set1 = set(string)\n    set2 = set(list(range(NO_OF_CHARS)))\n    list1 = list(set1.difference(set2))\n    return list1"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    result = ''\n    for char in string:\n        if char not in char_set:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the first string to a list of characters\n    char_list = list(string)\n\n    # Create a set of characters from the second string\n    char_set = set(string)\n\n    # Remove characters from the first string which are present in the set\n    for char in char_list:\n        if char in char_set:\n            char_list.remove(char)\n\n    # Convert the list of characters back to a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list\n    string_list = list(string)\n\n    # Create a set of the characters in the second string\n    char_set = set(string)\n\n    # Initialize an empty list to store the characters in the first string that are not in the second string\n    result_list = []\n\n    # Loop through each character in the string and check if it is not present in the set\n    for char in string_list:\n        if char not in char_set:\n            result_list.append(char)\n\n    # Convert the result list back to a string and return it\n    return ''.join(result_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # initialize an empty list to store the final string\n    final_string = \"\"\n    # convert the string to a list of characters\n    string_list = list(string)\n    # loop through each character in the second string\n    for char in string_list:\n        # if the character is not present in the first string, add it to the final string\n        if char not in string:\n            final_string += char\n    # convert the final string to a list of characters\n    final_list = list(final_string)\n    # return the final list of characters\n    return final_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the first string to a list of characters\n    char_list = list(string)\n    # Remove characters from the list which are present in the second string\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n    # Convert the list back to a string\n    result = ''.join(char_list)\n    # Return the result\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Remove characters from the list which are present in the second string\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n\n    # Convert the list back to a string\n    result = ''.join(char_list)\n\n    # Return the result\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    charset = set(string)\n    for i in range(NO_OF_CHARS):\n        if i in charset:\n            string = string.replace(chr(i), '', 1)\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    remove_list = list(set(string) & set(char_list))\n    new_str = \"\"\n    for char in string:\n        if char not in remove_list:\n            new_str += char\n    return new_str"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Define the set of characters to be removed from the first string\n    char_set = set(string)\n    # Initialize an empty list to store the characters to be removed\n    new_list = []\n    # Loop through each character in the first string\n    for char in string:\n        # If the character is not in the set of characters to be removed, add it to the new list\n        if char not in char_set:\n            new_list.append(char)\n    # Join the new list into a string and return it\n    return ''.join(new_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the count of each element in the array\n    count_dict = {}\n    \n    # Iterate through the array and update the count of each element in the dictionary\n    for num in arraynums:\n        if num in count_dict:\n            # If the element is already in the dictionary, increment its count by 1\n            count_dict[num] += 1\n        else:\n            # If the element is not in the dictionary, add it with a count of 1\n            count_dict[num] = 1\n            \n    # Iterate through the dictionary and check if any element has a count greater than 1\n    for num, count in count_dict.items():\n        if count > 1:\n            # If an element has a count greater than 1, return True\n            return True\n            \n    # If no element has a count greater than 1, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the count of each element in the array\n    element_count = {}\n    for num in arraynums:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # iterate through the dictionary and check if any element appears more than once\n    for count in element_count.values():\n        if count > 1:\n            return True\n    \n    # if no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize an empty set to store the unique elements\n    unique_elements = set()\n\n    # Iterate over the array of integers\n    for num in arraynums:\n        # If the number is already in the set, it means there is a duplicate element\n        if num in unique_elements:\n            return True\n        # Otherwise, add the number to the set\n        else:\n            unique_elements.add(num)\n\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique numbers in the array\n    unique_nums = set(arraynums)\n\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    for num in arraynums:\n        # Check if the number is already in the set\n        if num in unique_set:\n            # If it is, return True\n            return True\n        # If it's not, add it to the set\n        unique_set.add(num)\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the elements\n    dictionary = {}\n    # Loop through the array\n    for num in arraynums:\n        # If the element is already in the dictionary, return True\n        if num in dictionary:\n            return True\n        # Otherwise, add the element to the dictionary\n        else:\n            dictionary[num] = True\n    # If the loop completes without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hash_set = set()\n    for num in arraynums:\n        if num in hash_set:\n            return True\n        hash_set.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Check if the number is divisible by 2 or 5\n    if x % 2 == 0 or x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0 and x % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is a woodball.\n\n    Parameters:\n    x (int): A number to check.\n\n    Returns:\n    bool: True if the number is a woodball, False otherwise.\n    \"\"\"\n    if x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2:\n        return \"Woodball\"\n    else:\n        return \"Not Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    woodball_number = 21\n    return x == woodball_number"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function takes a positive integer as input and returns True if the number is woodall and False otherwise.\n    A number is woodall if its value is a multiple of 3, 4, or 5.\n    \"\"\"\n    if x % 3 == 0 or x % 4 == 0 or x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return \"Woodall number\"\n    else:\n        return \"Not a Woodall number\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0 or x == 1 or x == 2 or x == 3:\n        return True\n    elif x % 2 == 0 and x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x > 2: \n        return True\n    else: \n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        digit = num % 10\n        rev_num = rev_num * 10 + digit\n        num //= 10\n    return (num - 2 * rev_num) == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    \n    return num - reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Reverse the number\n    num_reversed = int(str(num)[::-1])\n\n    # Calculate the reverse of the reversed number\n    reverse_of_reversed = int(str(num_reversed)[::-1])\n\n    # Check if the original number is one less than twice its reverse\n    if num < 2 * reverse_of_reversed:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num = num//10\n    return num!= 2*rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = str(num)[::-1]\n    if int(num) - int(reversed_num) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == num + 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Reverse the number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    \n    # Check if the number is one less than twice its reverse\n    return num == rev_num - 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n\n    return num < reverse * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        digit = num % 10\n        rev_num = rev_num * 10 + digit\n        num //= 10\n    return True if num == rev_num else False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rem = temp % 10\n        rev_num = rev_num * 10 + rem\n        temp //= 10\n    if (num - 1) == (2 * rev_num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] * (10 ** i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in arr:\n        max_num += i\n        max_num *= 10\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n\n    # Initialize variables\n    max_num = 0\n    current_num = 0\n\n    # Sort the list in descending order\n    arr.sort(reverse=True)\n\n    # Iterate through the list and add each digit to the current number\n    for digit in arr : \n        current_num += int(digit)\n\n        # Compare the current number with the max number found so far and update if necessary\n        if current_num > max_num : \n            max_num = current_num\n\n    # Return the max number found\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    \n    def is_valid(num) : \n        '''\n        Function to check whether a number is a valid candidate for the maximum number formed.\n        '''\n        temp = num\n        count = 0\n        \n        while temp > 0 : \n            count += temp % 10\n            temp //= 10\n            \n        return count == len(arr)\n    \n    def find_Max(arr) : \n        '''\n        Function to find the maximum number formed by iterating through all possible combinations of digits.\n        '''\n        max_num = 0\n        \n        for i in range(10) : \n            for j in range(10) : \n                for k in range(10) : \n                    for l in range(10) : \n                        for m in range(10) : \n                            for n in range(10) : \n                                for o in range(10) : \n                                    for p in range(10) : \n                                        for q in range(10) : \n                                            for r in range(10) : \n                                                for s in range(10) : \n                                                    for t in range(10) : \n                                                        for u in range(10) : \n                                                            for v in range(10) : \n                                                                for w in range(10) : \n                                                                    for x in range(10) : \n                                                                        for y in range(10) : \n                                                                            for z in range(10) : \n                                                                                temp = arr[0]*100000000000000000 + arr[1]*10000000000000000 + arr[2]*1000000000000000 + arr[3]*100000000000000 + arr[4]*100000000000000 + arr[5]*10000000000000 + arr[6]*1000000000000 + arr[7]*100000000000 + arr[8]*10000000000 + arr[9]*1000000000 + arr[10]*100000000 + arr[11]*10000000 + arr[12]*1000000 + arr[13]*100000 + arr[14]*10000 + arr[15]*1000 + arr[16]*100 + arr[17]*10 + arr[18]*1 \n                                                                                if is_valid(temp) : \n                                                                                    max_num = max(max_num, temp)\n                                                                                    if temp > max_num : \n                                                                                        break\n                                                                                    break\n                                                                                else : \n                                                                                    continue\n        return max_num\n    \n    if len(arr) > 18 : \n        return \"Invalid input, maximum number can be formed with a maximum of 18 digits.\"\n    else : \n        return find_Max(arr)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    n = len(arr)\n    max_num = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            for k in range(j+1,n) : \n                max_num = max(max_num,arr[i]*1000+arr[j]*100+arr[k])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(1, 10**n):\n        temp = i\n        for j in range(n-1):\n            temp = temp * 10 + arr[j]\n        if temp > max_num:\n            max_num = temp\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sorting the list in ascending order\n    arr.sort()\n\n    # Initialize variables\n    max_num = 0\n    temp_num = 0\n    count = 0\n\n    # Loop through each number in the list\n    for num in arr : \n\n        # If the current number is 0, reset the count and temp_num\n        if num == 0 : \n            count = 0\n            temp_num = 0\n            continue\n\n        # If the current number is 1, add 1 to temp_num and increase count by 1\n        if num == 1 : \n            temp_num += 1\n            count += 1\n            continue\n\n        # If the current number is greater than 1, reset the count and temp_num\n        if num > 1 : \n            count = 0\n            temp_num = 0\n            continue\n\n        # If the current number is 2, add 1 to temp_num and increase count by 1\n        if num == 2 : \n            temp_num += 1\n            count += 1\n            continue\n\n        # If the current number is greater than 2, reset the count and temp_num\n        if num > 2 : \n            count = 0\n            temp_num = 0\n            continue\n\n        # If the current number is 3, add 1 to temp_num and increase count by 1\n        if num == 3 : \n            temp_num += 1\n            count += 1\n            continue\n\n        # If the current number is greater than 3, reset the count and temp_num\n        if num > 3 : \n            count = 0\n            temp_num = 0\n            continue\n\n        # If the current number is 4, add 1 to temp_num and increase count by 1\n        if num == 4 : \n            temp_num += 1\n            count += 1\n            continue\n\n        # If the current number is greater than 4, reset the count and temp_num\n        if num > 4 : \n            count = 0\n            temp_num = 0\n            continue\n\n        # If the current number is 5, add 1 to temp_num and increase count by 1\n        if num == 5 : \n            temp_num += 1\n            count += 1\n            continue\n\n        # If the current number is greater than 5, reset the count and temp_num\n        if num > 5 : \n            count = 0\n            temp_num = 0\n            continue\n\n        # If the current number is 6, add 1 to temp_num and increase count by 1\n        if num == 6 : \n            temp_num += 1\n            count += 1\n            continue\n\n        # If the current number is greater than 6, reset the count and temp_num\n        if num > 6 : \n            count = 0\n            temp_num = 0\n            continue\n\n        # If the current number is 7, add 1 to temp_num and increase count by 1\n        if num == 7 : \n            temp_num += 1\n            count += 1\n            continue\n\n        # If the current number is greater than 7, reset the count and temp_num\n        if num > 7 : \n            count = 0\n            temp_num = 0\n            continue\n\n        # If the current number is 8, add 1 to temp_num and increase count by 1\n        if num == 8 : \n            temp_num += 1\n            count += 1\n            continue\n\n        # If the current number is greater than 8, reset the count and temp_num\n        if num > 8 : \n            count = 0\n            temp_num = 0\n            continue\n\n        # If the current number is 9, add 1 to temp_num and increase count by 1\n        if num == 9 : \n            temp_num += 1\n            count += 1\n            continue\n\n        # If the current number is greater than 9, reset the count and temp_num\n        if num > 9 : \n            count = 0\n            temp_num = 0\n            continue\n\n    # Return the maximum number formed with the given list of digits\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    This function takes a list of digits as input and returns the maximum number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    i = 0\n    while i < len(arr):\n        max_num += int(arr[i]) * (9 ** (len(arr) - i - 1))\n        i += 1\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    # create a dictionary to store the maximum number formed with each digit\n    max_dict = {}\n    \n    # iterate through each digit in the array\n    for digit in arr : \n        # if the digit is not in the dictionary, initialize it with a value of 0\n        if digit not in max_dict : \n            max_dict[digit] = 0\n        \n        # iterate through each digit in the array again to update the maximum value\n        for i in range(len(arr)) : \n            if i!= digit and i not in max_dict : \n                max_dict[i] = 0\n            \n            # if the digit and the i-th digit are not present in the maximum dictionary, add the maximum value of i to the current dictionary value\n            if i!= digit and i in max_dict : \n                max_dict[digit] += max_dict[i]\n    \n    # find the maximum value in the dictionary\n    max_val = max(max_dict.values())\n    \n    # return the maximum value\n    return max_val"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if arr[i] + arr[j] > max_num:\n                max_num = arr[i] + arr[j]\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y): \n    '''\n    This function will check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0: \n        print(\"Both numbers are zero\") \n    elif x > 0 and y < 0: \n        print(\"The first number is positive and the second number is negative.\") \n    elif x < 0 and y > 0: \n        print(\"The first number is negative and the second number is positive.\") \n    elif x > 0 and y == 0: \n        print(\"The first number is positive and the second number is zero.\") \n    elif x < 0 and y == 0: \n        print(\"The first number is negative and the second number is zero.\") \n    elif x == 0 and y > 0: \n        print(\"The first number is zero and the second number is positive.\") \n    elif x == 0 and y < 0: \n        print(\"The first number is zero and the second number is negative.\") \n    else: \n        print(\"The given numbers have same sign\") "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n\n    Args:\n    x (int): The first integer.\n    y (int): The second integer.\n\n    Returns:\n    bool: True if the given integers have opposite signs, False otherwise.\n    \"\"\"\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x == 0 and y == 0:\n        return False\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y > 0:\n        return \"Both numbers are positive\"\n    elif x < 0 and y < 0:\n        return \"Both numbers are negative\"\n    elif x < 0 and y > 0:\n        return \"First number is negative and second number is positive\"\n    elif x > 0 and y < 0:\n        return \"First number is positive and second number is negative\"\n    else:\n        return \"Both numbers are zero\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Parameters:\n    x (int): the first integer to be checked.\n    y (int): the second integer to be checked.\n\n    Returns:\n    bool: True if the given integers have opposite signs, False otherwise.\n    \"\"\"\n    if x == 0 and y == 0:\n        return False\n\n    if x == 0:\n        return True if y < 0 else False\n\n    if y == 0:\n        return True if x < 0 else False\n\n    return x * y >= 0 and x * y < 0"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # If both the numbers have the same sign, then they are opposite signs\n    if x >= 0 and y >= 0 or x <= 0 and y <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 2\n    \n    # Calculate the nth octagonal number\n    while b <= n:\n        c = a + b\n        print(c, end=' ')\n        a = b\n        b = c"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Function to check if a number is octagonal or not\n    def is_octagonal_helper(num):\n        return (num**2 + num) % 12 == 0\n    \n    # Helper function to find the nth octagonal number\n    def nth_octagonal(n):\n        i = 1\n        while i < n:\n            i += 1\n            if is_octagonal_helper(i):\n                return i\n    \n    # Main function to find the nth octagonal number\n    return nth_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return (n**2 + 1) * (3 * n - 1) // 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # If n is odd, return False.\n    if n % 2!= 0: \n        return False \n    # Initialize the counter variable to 1.\n    count = 1 \n    # Initialize the octagonal number to 1.\n    oct_num = 1 \n    # Initialize the current number to 1.\n    current = 1 \n    # Initialize the previous number to 2.\n    prev = 2 \n    # Iterate through the numbers to find the nth octagonal number.\n    while count <= n: \n        # Check if the current number is equal to the previous number.\n        if current == prev: \n            # If so, increment the octagonal number by 1.\n            oct_num += 1 \n            # If the number is divisible by 2, increment the counter by 1.\n            if current % 2 == 0: \n                count += 1 \n            # If the number is not divisible by 2, increment the counter by 2.\n            else: \n                count += 2 \n            # Update the current and previous numbers.\n            current += 1\n            prev += 2 \n        # If the current number is not equal to the previous number,\n        # decrement the counter by 1 and update the current and previous numbers.\n        else: \n            count -= 1\n            current += 1\n            prev += 2 \n    # Return the nth octagonal number.\n    return oct_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    a, b = 1, 8\n    while a <= n:\n        if a ** 2 + b ** 2 == n ** 2:\n            return a ** 3\n        a += 1\n        b += 2\n    return None\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1 or n % 2 == 0:\n        return False\n\n    # Square of the nth number\n    nth_square = n ** 2\n\n    # Number of digits in the square root of nth_square\n    num_digits = int(len(str(nth_square ** 0.5)) + 1)\n\n    # Total number of digits in the square root of nth_square + 1\n    total_num_digits = num_digits + 1\n\n    # If total_num_digits is even, then nth_square is not an octagonal number\n    if total_num_digits % 2 == 0:\n        return False\n\n    # Calculate the square of the nth octagonal number\n    nth_octagonal_square = nth_square + 1\n\n    return nth_octagonal_square"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while i**3 <= n:\n        i += 1\n    return i**3\n\nn = int(input(\"Enter a number: \"))\nprint(\"The nth octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    while b <= n:\n        if a + b + a**2 == 2 * b**2:\n            return a + b\n        a += 1\n        b += 1\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 12\n    elif n == 3:\n        return 25\n    elif n == 4:\n        return 49\n    elif n == 5:\n        return 87\n    elif n == 6:\n        return 150\n    elif n == 7:\n        return 234\n    elif n == 8:\n        return 343\n    elif n == 9:\n        return 481\n    elif n == 10:\n        return 656\n    elif n == 11:\n        return 867\n    elif n == 12:\n        return 1111\n    elif n == 13:\n        return 1400\n    elif n == 14:\n        return 1731\n    elif n == 15:\n        return 2101\n    else:\n        return \"Sorry, the nth octagonal number does not exist.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return None\n    \n    # Initialize variables\n    a, b = 1, 1\n    count = 0\n    \n    # Find the nth octagonal number\n    while count < n:\n        # Find the sum of the two adjacent numbers\n        c = a + b\n        \n        # If the sum is odd, it's an octagonal number\n        if c % 2 == 1:\n            return a\n        \n        # Update the variables\n        a, b = b, c\n        count += 1\n    \n    # If we reach here, we didn't find the nth octagonal number\n    return None"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_sum_digits(n):\n        count = 0\n        for i in range(1, n+1):\n            count += i\n        return count\n\n    def count_length_substrings(s, length):\n        count = 0\n        for i in range(len(s) - length + 1):\n            substring = s[i:i+length]\n            count += count_sum_digits(int(substring))\n        return count\n\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        substring = s[i:i+1]\n        count_dict[count_length_substrings(s, len(substring))] += 1\n\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    digit_count = defaultdict(int)\n\n    for char in s:\n        if char.isdigit():\n            digit_count[len(char)] += 1\n\n    for length in digit_count:\n        substring_sum = sum(digit_count[length])\n        if substring_sum == length:\n            count += digit_count[length]\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # initialize a dictionary to store the count of substrings with given length and sum of digits\n    count_dict = defaultdict(int)\n\n    # loop through all possible lengths of substrings from 1 to length of string s\n    for length in range(1, len(s)+1):\n\n        # loop through all possible digits for sum of digits\n        for digit in range(10):\n\n            # check if the sum of digits and length is equal to the length of the substring\n            if digit*length == len(s):\n\n                # increment the count of substrings with the given length and sum of digits in the dictionary\n                count_dict[length] += 1\n\n    # return the count of substrings with sum of digits equal to their length\n    return count_dict[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with the sum of digits equal to their length\n    substrings_count = defaultdict(int)\n    \n    # iterate through the string\n    for i in range(len(s)):\n        # iterate through all possible substrings of the current substring\n        for j in range(i, len(s)+1):\n            # extract the substring\n            substring = s[i:j]\n            # calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in substring)\n            # if the sum of digits is equal to the length of the substring, increment the count\n            if substring_sum == len(substring):\n                substrings_count[substring] += 1\n    \n    # return the count of substrings with the sum of digits equal to their length\n    return substrings_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Initialize a dictionary to store the count of substrings\n    substrings = defaultdict(int)\n    \n    # Iterate through all possible substrings\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Extract the substring from the given string\n            substring = s[i:j+1]\n            \n            # Calculate the sum of digits in the substring\n            sum_of_digits = sum(int(digit) for digit in substring)\n            \n            # Update the count of the substring in the dictionary\n            if sum_of_digits == len(substring):\n                substrings[substring] += 1\n    \n    # Return the count of all the substrings with sum of digits equal to their length\n    return substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a defaultdict to store the count of substrings with given sum\n    count_dict = defaultdict(int)\n\n    # Iterate over all substrings of the given string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Calculate the sum of digits in the substring\n            sum_of_digits = sum(int(digit) for digit in s[i:j])\n\n            # Check if the sum of digits is equal to its length\n            if sum_of_digits == len(s):\n                # Increment the count of substrings with given sum\n                count_dict[sum_of_digits] += 1\n\n    # Return the count of substrings with given sum\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize a dictionary to store the count of substrings with a sum of digits equal to their length\n    substring_count = defaultdict(int)\n\n    # Loop through the characters in the string and calculate the sum of digits for each substring\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                substring_count[substring] += 1\n\n    # Return the count of substrings with a sum of digits equal to their length\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    n = len(s)\n\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if sum(int(x) for x in substring) == len(substring):\n                count[substring] += 1\n\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub_str = s[i:j]\n            digits_sum = sum(int(digit) for digit in sub_str)\n            if digits_sum == len(sub_str):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits = [int(digit) for digit in substring]\n            total_sum = sum(digits)\n            if total_sum == len(digits):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][1] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][1], test_list[j][1]) - min(test_list[i][1], test_list[j][1])\n            max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] > test_list[j][1]:\n                diff = test_list[i][1] - test_list[j][1]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples as input and returns the maximum difference between\n    available pairs in the list.\n    '''\n    # Sorting the list of tuples\n    sorted_list = sorted(test_list)\n\n    # Calculating the maximum difference\n    max_diff = sorted_list[-1][0] - sorted_list[0][0]\n\n    # Returning the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Finds the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        test_list (list): List of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between available pairs.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples\n    sorted_list = sorted(test_list)\n\n    # Initialize the maximum difference\n    max_diff = 0\n\n    # Iterate through the sorted list\n    for i in range(len(sorted_list) - 1):\n        # Calculate the difference between current and next element in the list\n        diff = sorted_list[i][1] - sorted_list[i + 1][1]\n\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables\n    max_diff = 0\n    current_diff = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current pair and the next pair\n        current_diff = test_list[i+1][0] - test_list[i][1]\n        # Update the maximum difference if the current difference is greater\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n    \n    test_list.sort()\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i+1][0] - test_list[i][1])\n        max_diff = max(max_diff, diff)\n        \n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples based on the second value (subject) of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate through each element of the list\n    for element in data_list:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Recursively call the function on the list\n            result += recursive_list_sum(element)\n        else:\n            # Add the element to the result\n            result += element\n\n    # Return the final sum\n    return result"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if type(item) in [list, tuple]:\n                result += flatten(item)\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    total_sum = sum(flattened_list)\n    return total_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list, result=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: If the list is empty, return the result.\n    if len(data_list) == 0:\n        return result\n\n    # Recursive case: Add the first element to the result and call the function\n    # recursively with the rest of the list.\n    else:\n        result += data_list[0]\n        recursive_list_sum(data_list[1:], result)\n\n    # Return the final result.\n    return result"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(item)\n            else:\n                flat_list.append(item)\n        return recursive_list_sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(nested_list):\n        if isinstance(nested_list, list):\n            return [x for sublist in nested_list for x in flatten(sublist)]\n        else:\n            return [nested_list]\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flat_list = []\n    for sublist in data_list:\n        for item in sublist:\n            flat_list.append(item)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if list is empty or has only one element, return the element\n    if not data_list or len(data_list) == 1:\n        return data_list\n    # recursive case: if list has multiple elements, recursively call the function on the rest of the list\n    else:\n        flattened_list = recursive_list_sum(data_list[1:]) # ignore the first element, since it is already summed\n        return data_list[0] + flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n\n    # Recursive case: if the list has only one element, return that element\n    elif len(data_list) == 1:\n        return data_list[0]\n\n    # Recursive case: if the list has more than one element, flatten it and add the elements together\n    else:\n        flattened_list = []\n        for item in data_list:\n            if type(item) == list:\n                flattened_list += recursive_list_sum(item)\n            else:\n                flattened_list.append(item)\n        return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list of numbers as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n\n    Parameters:\n    lst (list): The list to count the positive numbers in.\n\n    Returns:\n    int: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list of numbers as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Function to calculate the Bell number\n    def bell_num(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return bell_num(n-1) + bell_num(n-2)\n    \n    # Function to find the number of ways to partition the set of Bell numbers\n    def partition_ways(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return partition_ways(n-1) + bell_num(n-1)\n    \n    # Return the number of ways to partition the set of Bell numbers\n    return partition_ways(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return partition(n-1) + partition(n-2)\n    \n    return partition(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def is_prime(num):\n        '''\n        Helper function to check if a number is prime.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def partition_helper(num, partitions):\n        '''\n        Helper function to find the number of ways to partition the Bell numbers.\n        '''\n        if num == 0:\n            return partitions\n        elif num == 1:\n            return partitions + 1\n        else:\n            for i in range(1, num + 1):\n                if is_prime(i):\n                    partitions = partition_helper(i, partitions)\n            return partitions\n\n    return partition_helper(n, 0)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    def binomial(n, k):\n        return math.comb(n, k)\n\n    def partition(nums, target):\n        def is_subset(nums, target, index):\n            if index == len(nums):\n                return True\n            elif nums[index] > target:\n                return False\n            else:\n                return is_subset(nums, target, index + 1)\n\n        def partition_helper(nums, target, index, total):\n            if index == len(nums):\n                return total\n\n            for i in range(index, len(nums)):\n                if is_subset(nums[i:], target - nums[i], index):\n                    total += partition_helper(nums, target, i + 1, total)\n\n            return total\n\n        return partition_helper(nums, target, 0, 0)\n\n    def count_ways(n, target):\n        if n == 0:\n            return 1\n        else:\n            return binomial(n, target) * count_ways(n - 1, target - 1)\n\n    def partition_bell_numbers(n):\n        bell_numbers = [0] * (n + 1)\n        bell_numbers[0] = 1\n        bell_numbers[1] = 1\n\n        for i in range(2, n + 1):\n            for j in range(i):\n                bell_numbers[i] += bell_numbers[j] * bell_numbers[i - j - 1]\n\n        return bell_numbers\n\n    def count_partitions(n):\n        bell_numbers = partition_bell_numbers(n)\n        ways = 1\n\n        for i in range(1, n + 1):\n            ways *= count_ways(n, i)\n\n        for i in range(1, n + 1):\n            ways //= bell_numbers[i]\n\n        return ways\n\n    return count_partitions(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return (4*n**2) + (4*n) + 1"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition the set of Bell numbers\n    ways = 0\n    # Initialize the set of Bell numbers\n    bell_nums = set()\n    # Loop through the range of n and append each Bell number to the set of Bell numbers\n    for i in range(1, n+1):\n        bell_nums.add(bell_number(i))\n    # Loop through the set of Bell numbers and find the number of ways to partition the set\n    for bell_num in bell_nums:\n        # Calculate the number of ways to partition the current Bell number\n        ways += (b-1)*sum(divmod(b,10) for b in bell_num)\n    # Return the number of ways to partition the set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def helper(num, ways):\n        if num == 1:\n            return ways\n        if num == 2:\n            return ways + 1\n        if num % 2 == 0:\n            return helper(num // 2, ways)\n        else:\n            return helper((3 * num) + 1, ways)\n\n    return helper(n, 0)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Given a positive integer n, the function should return the number of ways to partition the set of Bell numbers {0, 1,..., n}.\n\n    Examples:\n    bell_number(4) -> 13\n    bell_number(5) -> 35\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        Check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def partition(n):\n        \"\"\"\n        Partition a set of Bell numbers.\n        \"\"\"\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if is_prime(n):\n            return 2\n        else:\n            return 0\n\n    def recursive_partition(n):\n        \"\"\"\n        Recursive partitioning of a set of Bell numbers.\n        \"\"\"\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if is_prime(n):\n            return 2\n        else:\n            return partition(n - 1) + partition(n - 2)\n\n    return recursive_partition(n)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A) \n    if n <= 1: \n        return True \n\n    # Check whether the array is increasing or decreasing \n    if A[0] < A[1]: \n        for i in range(1, n-1): \n            if A[i] >= A[i+1]: \n                return False \n        return True \n    else: \n        for i in range(1, n-1): \n            if A[i] <= A[i+1]: \n                return False \n        return True "
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if all elements are equal\n    if len(A) == 1:\n        return True\n    # Compare the first and last element\n    if A[0] < A[-1]:\n        return True\n    elif A[0] > A[-1]:\n        return False\n    # If the first and last elements are not equal, check if the rest of the array is monotonic\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1]:\n                return True\n            elif A[i] < A[i-1]:\n                return False\n    # If the loop completes without finding any inequality, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function checks whether the given array is monotonic or not.\n\n    Parameters:\n    A (list): The given array of numbers.\n\n    Returns:\n    bool: True if the given array is monotonic, else False.\n    \"\"\"\n\n    # Check if the length of the array is 1 or less\n    if len(A) <= 1:\n        return True\n\n    # Check if all elements are equal or greater than the first element\n    if all(A[0] <= x for x in A) or all(A[0] >= x for x in A):\n        return True\n\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function checks whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n < 2:\n        return True\n    for i in range(1, n):\n        if A[i-1] > A[i]:\n            return False\n        elif A[i-1] < A[i]:\n            return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    \n    # Check if all elements are in the same order\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n    \n    # Check if there are any elements that are greater than the first element\n    for i in range(len(A) - 1):\n        if A[i+1] > A[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty\n    if len(A) == 0:\n        return True\n\n    # check if the array contains only one element\n    if len(A) == 1:\n        return True\n\n    # initialize variables to keep track of the previous element and the direction of change\n    prev = A[0]\n    change_direction = 0\n\n    # iterate through the array\n    for i in range(1, len(A)):\n        # check if the current element is smaller than or equal to the previous element\n        if A[i] <= prev:\n            # if the current element is smaller, then the array is not monotonic\n            if change_direction == 1:\n                return False\n            # if the current element is equal to the previous element, then there is a sequence of zeros\n            elif change_direction == 0:\n                for j in range(i+1, len(A)):\n                    if A[j]!= 0:\n                        return False\n            # if the current element is larger, then the array is monotonic\n            else:\n                return True\n        # if the current element is larger than the previous element, then the array is monotonic\n        else:\n            change_direction = 1\n            prev = A[i]\n\n    # if the loop completes, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1: \n        return True\n    \n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes in an array A and checks whether it is monotonic or not.\n    The function returns True if the array is monotonic and False otherwise.\n\n    A monotonic array is an array where each element is either strictly \n    increasing or strictly decreasing. In other words, if we start from \n    the first element and move to the second element, the second element \n    must be strictly greater than the first element. If we move to the third \n    element, the third element must be greater than the second element.\n    In this way, the array is continuously increasing or continuously \n    decreasing, i.e., it doesn't suddenly switch direction in the middle.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the length of the sublist is greater than the length of the list\n    if len(s) > len(l):\n        return False\n    # Initialize a variable to store the starting index of the sublist\n    start = 0\n    # Loop through the list\n    for i in range(len(l)):\n        # Check if the sublist matches with the list element\n        if l[i:i+len(s)] == s:\n            # If a match is found, return True\n            return True\n        # If the sublist doesn't match, check if the starting index is already greater than the end index of the list\n        elif i >= len(l) - len(s):\n            return False\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    elif l[0] in s:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # check if the sublist is empty\n    if not s:\n        return True\n    \n    # check if the first element of the sublist is also in the list\n    if l[0] in s:\n        # remove the first element of the sublist from the list\n        s.remove(l[0])\n        # recursively check if the sublist is present in the remaining list\n        return is_sublist(l[1:], s)\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in l:\n        if i in s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    return is_sublist(l[1:], s[1:]) or l[0] in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    return s[0] in l and is_sublist(l[1:], s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    # Check if all tuples have the same length\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function checks whether all the tuples in the Input list have equal length or not.\n    If all the tuples have equal length, it returns True, otherwise it returns False.\n    '''\n\n    # Convert the Input list to a set to remove duplicates\n    unique_tuples = set(Input)\n\n    # If the length of the unique tuples is equal to the length of the first tuple, then all the tuples have equal length\n    if len(unique_tuples) == len(Input[0]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple in Input:\n        if len(tuple)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and checks if all the tuples have equal length or not.\n    \"\"\"\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for gap in range(n//2):\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    # define a helper function to swap two elements\n    def swap(a, b):\n        a, b = b, a\n        return a, b\n\n    # define a helper function to get the largest element in a list\n    def get_largest(nums):\n        largest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n        return largest\n\n    # define a helper function to partition the list around a pivot element\n    def partition(nums, low, high):\n        pivot = nums[high]\n        i = low - 1\n        for j in range(low, high):\n            if nums[j] <= pivot:\n                i += 1\n                swap(nums, i, j)\n        swap(nums, i + 1, high)\n        return i + 1\n\n    # define a helper function to do a single iteration of the algorithm\n    def single_iteration(nums):\n        n = len(nums)\n        largest = get_largest(nums)\n        low = 0\n        high = n - 1\n        while low < high:\n            pivot = partition(nums, low, high)\n            if pivot - 1 == high:\n                high = pivot\n            elif pivot + 1 == low:\n                low = pivot\n            else:\n                if nums[pivot - 1] < nums[pivot]:\n                    low = pivot\n                else:\n                    high = pivot\n        return nums\n\n    # initialize the result list to the same length as the input list\n    result = [0] * len(nums)\n\n    # perform the algorithm until the lists are sorted\n    while True:\n        swapped = False\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        nums = single_iteration(nums)\n        result = nums\n\n    return result"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n\n    Parameters:\n    nums (list): The list of elements to sort.\n\n    Returns:\n    The sorted list.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n\n    # start with a gap of 10, which is a good initial gap\n    gap = 10\n\n    # keep swapping elements until the gap is 1\n    while gap > 1:\n\n        # start at the beginning of the list\n        i = 0\n\n        # set the maximum value to compare with\n        max_val = nums[i]\n\n        # compare all elements starting from i with the maximum value\n        while i < len(nums) - gap:\n\n            # if the current element is greater than the maximum value, update max_val\n            if nums[i] > max_val:\n                max_val = nums[i]\n\n            # move the current element to the right by gap\n            i += gap\n\n        # move the gap to half its size\n        gap = int(gap / 2)\n\n        # if the gap is less than 1, switch it to 1\n        if gap < 1:\n            gap = 1\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = gap // 1.3\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    # Define a default gap size\n    gap = len(nums) // 2\n\n    # Set a flag to indicate whether the array is sorted or not\n    sorted = False\n\n    # Loop until the array is sorted\n    while not sorted:\n        # Loop through the list and compare adjacent elements\n        for i in range(gap, len(nums)):\n            # If the current element is greater than the next element, swap them\n            if nums[i] > nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n\n        # Decrease the gap size\n        gap = int(gap * 0.85)\n\n        # Check if the gap size is too small to continue sorting\n        if gap < 1:\n            sorted = True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    # initialize parameters\n    gap = n\n    swapped = True\n    # loop until the gap is 1\n    while gap > 1 or swapped:\n        # calculate the next gap\n        if gap == 1:\n            gap = n\n        else:\n            gap = int(gap / 1.3)\n        # check if the gap is too small to continue sorting\n        if gap < 1:\n            return nums\n        # set swapped to False to avoid unnecessary iterations\n        swapped = False\n        # iterate over the list\n        for i in range(n):\n            # compare the current element with its neighbors\n            if nums[i] > nums[i + gap]:\n                # swap them if they are out of order\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                # set swapped to True to indicate that a swap was made\n                swapped = True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = (gap*10)//13\n        if gap < 1:\n            gap = 1\n\n    # Perform the sorting\n    start = 0\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(start, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        start += gap\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 1:\n        return \"The given number cannot be represented as the difference of two squares.\"\n    \n    a = int(n**(1/2))\n    b = int((n-a)**(1/2))\n    \n    if b**2 == n:\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # check if the given number is less than 0\n    if n < 0:\n        return \"Not possible to represent as the difference of two squares.\"\n\n    # calculate the square of the given number\n    square = n * n\n\n    # check if the square is divisible by 4\n    if square % 4 == 0:\n        # calculate the difference between the square and 25\n        diff = square - 25\n        # check if the difference is less than 0\n        if diff < 0:\n            return \"Not possible to represent as the difference of two squares.\"\n        else:\n            return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"The number cannot be represented as the difference of two squares.\"\n    \n    for i in range(1, int(n**0.5)+1):\n        if n == i**2 + i**2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Find the square root of n\n    root = int(n**0.5)\n    \n    # Check if the square root is an integer\n    if root**2 == n:\n        # Check if the difference of squares is a square\n        if (root * root) + (root * root) == 2 * root * root:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Function to check whether a number is a square or not\n    def is_square(num):\n        return num == int(num**0.5)**2\n    \n    # Function to check whether a number is divisible by 2\n    def is_divisible_by_2(num):\n        return num % 2 == 0\n    \n    # Check if the number is a square and not divisible by 2\n    if is_square(n) and not is_divisible_by_2(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if i**2 == n and (i**2 - n)**2 == i**2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(2, n):\n        j = n - i\n        if i * i == j * j:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(1,int(n**0.5)+1):\n        if n % i == 0 and n//i == i:\n            print(\"The given number can be represented as the difference of two squares.\")\n            return\n    print(\"The given number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Taking input of the number\n    num = int(input(\"Enter a number: \"))\n\n    # Calculating the square root of the number\n    sqrt = num ** 0.5\n\n    # Checking the number if it can be represented as the difference of two squares or not\n    if sqrt ** 2 - num == int(sqrt ** 2 - num):\n        print(num, \"can be represented as the difference of two squares.\")\n    else:\n        print(num, \"cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    # Finding the square of the given number\n    num = n * n\n    # Finding the square of the difference of the given number and the square of 2\n    diff_square = (n * n) - (2 * n)\n    # If the square of the difference of the given number and the square of 2 is equal to the given number, then the given number is represented as the difference of two squares.\n    if num == diff_square:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if the number of colors is the same as the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Check if the colors are sorted in ascending order\n    if colors!= sorted(colors):\n        return False\n    \n    # Check if the patterns are sorted in ascending order\n    if patterns!= sorted(patterns):\n        return False\n    \n    # Check if the colors match the patterns\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    # If we've made it here, the colors and patterns match\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize the counter for each pattern\n    count = [0] * len(patterns)\n\n    # Initialize the current pattern index\n    current_index = 0\n\n    # Loop through the colors\n    for i, color in enumerate(colors):\n        # Update the count for the current pattern\n        count[current_index] += 1\n\n        # Check if we have reached the end of the current pattern\n        if count[current_index] == len(patterns[current_index]):\n            # Check if the pattern we're currently on is valid\n            if color in patterns[current_index]:\n                # If it's valid, continue to the next pattern\n                current_index += 1\n\n                # Reset the count for the current pattern\n                count[current_index] = 0\n            else:\n                # If it's not valid, return False\n                return False\n\n    # If we make it through the entire loop without returning False, it means the colors follow the patterns\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Initialize variables\n    same_pattern = False\n    pattern_index = 0\n    previous_pattern = None\n    \n    # Check if the lengths of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Check if all patterns are same\n    for pattern in patterns:\n        if pattern!= previous_pattern:\n            same_pattern = False\n            break\n        else:\n            same_pattern = True\n            previous_pattern = pattern\n        pattern_index += 1\n        \n    # Check if there is a valid pattern sequence\n    if same_pattern:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Calculate the length of the patterns array\n    n = len(patterns)\n\n    # Loop through all possible combinations of colors and patterns\n    for i in range(2**n):\n        # Convert the integer i to a list of colors\n        color_list = [0]*n\n        for j in range(n):\n            if i & (1 << j):\n                color_list[j] = colors[j]\n        \n        # Compare the pattern with the corresponding color in the patterns list\n        pattern_index = 0\n        for j in range(n):\n            if pattern_index == len(patterns):\n                # We reached the end of the patterns list, so the sequence is invalid\n                return False\n            if color_list[j] == patterns[pattern_index]:\n                pattern_index += 1\n            if pattern_index == len(patterns):\n                # We reached the end of the patterns list, so the sequence is valid\n                return True\n        \n        # We couldn't find a pattern match, so the sequence is invalid\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Checks whether a given set of colors follows a given set of patterns.\n    \"\"\"\n    # Sort the colors and patterns arrays\n    colors = sorted(colors)\n    patterns = sorted(patterns)\n\n    # Check if the colors follow the patterns\n    for color in colors:\n        found = False\n        for pattern in patterns:\n            if pattern.find(color)!= -1:\n                found = True\n                break\n        if not found:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n\ncolors = [1, 2, 3, 4, 5]\npatterns = [3, 4, 1, 5, 2]\nresult = is_samepatterns(colors, patterns)\nprint(result)"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors) - 1):\n        if colors[i+1]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether a sequence of colors follows a specific pattern.\n\n    :param colors: a list of colors, e.g. ['red', 'green', 'blue']\n    :param patterns: a list of patterns, each representing a color sequence.\n                     The patterns are represented as lists of integers,\n                     where each integer represents the length of the color sequence\n                     that must be present in the given sequence.\n                     For example, patterns[0] = [1, 2, 3] means that the first\n                     color sequence must have exactly 1, 2, and 3 colors.\n                     The list [4, 5] means that the next color sequence must\n                     have exactly 4 and 5 colors.\n    :return: True if the given sequence of colors follows the given pattern,\n             False otherwise.\n    \"\"\"\n    # Check if the number of patterns is equal to the number of colors\n    if len(patterns)!= len(colors):\n        return False\n\n    # Initialize variables to store the current and next pattern\n    current_pattern = []\n    next_pattern = []\n\n    # Loop through the patterns\n    for pattern in patterns:\n        # Check if the current pattern is a subset of the next pattern\n        if set(current_pattern) <= set(next_pattern):\n            # If the current pattern is a subset, update the current pattern\n            current_pattern = pattern\n        else:\n            # If the current pattern is not a subset, break out of the loop\n            break\n\n        # Update the next pattern\n        if len(pattern) > 0:\n            next_pattern = pattern[1:]\n        else:\n            break\n\n    # Check if there are any remaining colors in the current pattern\n    if current_pattern:\n        return False\n    else:\n        return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_set = set(colors)\n    for pattern in patterns:\n        if not (len(set(pattern)) == len(color_set) and all(color in color_set for color in pattern)):\n            return False\n        color_set = set(pattern)\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple_ in test_list:\n        if all(i % K == 0 for i in tuple_):\n            result.append(tuple_)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                count += 1\n                print(test_list[i], test_list[j])\n    return count"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store the tuples that meet the criteria\n    result = []\n    # Loop through the given list of tuples\n    for tup in test_list:\n        # Check if each element in the tuple is divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by K, add the tuple to the result list\n            result.append(tup)\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    \n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K!= 0:\n                count += 1\n                if count == len(tup):\n                    break\n        else:\n            if count == len(tup):\n                result.append(tup)\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        divisible_count = sum(1 for elem in tup if elem % K == 0)\n        if divisible_count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty list to store the tuples that have all elements divisible by K\n    divisible_tuples = []\n    # loop through each tuple in the input list\n    for tuple in test_list:\n        # if all elements in the tuple are divisible by K, add it to the divisible_tuples list\n        if all(x % K == 0 for x in tuple):\n            divisible_tuples.append(tuple)\n    # return the list of divisible_tuples\n    return divisible_tuples"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        print(f\"{n} is divisible by 11\")\n    else:\n        print(f\"{n} is not divisible by 11\")"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    # convert the input string to a list of words\n    words = s.split()\n    \n    # loop through each word in the list\n    for word in words: \n        # check if the length of the word is odd\n        if len(word) % 2 == 1: \n            # if it is, print a message\n            print(word + \" is an odd length word.\")\n        else: \n            # if it's not, print a message\n            print(word + \" is an even length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd and False otherwise.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # loop through each word in the sentence\n    for word in s.split():\n        # check the length of the word\n        if len(word) % 2 == 1:\n            # if the length is odd, return True\n            return True\n    # if no odd length found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words\n    words = s.split()\n    # iterate over each word in the list and check its length\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"is odd\")\n        else:\n            print(word, \"is even\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # split the string into words\n    words = s.split()\n\n    # iterate over the words\n    for word in words:\n\n        # check if the length of the word is odd or even\n        if len(word) % 2 == 0:\n            print(f\"The length of '{word}' is even.\")\n        else:\n            print(f\"The length of '{word}' is odd.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4 * (n - 1) + 4"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = n * (n+1) // 2\n    b = n * (3*n-1) // 2\n    return a + b"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)*(n+3) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Base case\n    if n == 1:\n        return 0\n    \n    # Recursive case\n    else:\n        return 4 * tetrahedral_number(n-1) + 3 * n - 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the value of the 2^n term\n    t = 1\n    \n    # Calculate the 2^n term for each value of n\n    for i in range(n+1):\n        t *= 2\n    \n    # Return the value of the 2^n term\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 12\n    elif n == 3:\n        return 60\n    else:\n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n\n    # Iterate until nth tetrahedral number is found\n    for i in range(n):\n        a = a + b\n        b = b + c\n        c = c + d\n        d = a - b - c\n\n    # Return the nth tetrahedral number\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a, b, c, d = 0, 1, 1, 0\n    for i in range(n):\n        a, b, c, d = a + b, b + c, c + d, d + a\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (2 * n + 1) / 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_tetrahedral_numbers(n):\n        '''\n        Generate the first n prime tetrahedral numbers.\n        '''\n        tetrahedral_numbers = []\n        i = 1\n        while len(tetrahedral_numbers) < n:\n            if is_prime(i):\n                tetrahedral_numbers.append(i)\n            i += 1\n        return tetrahedral_numbers\n\n    tetrahedral_numbers = prime_tetrahedral_numbers(n)\n    return tetrahedral_numbers[n-1]\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere and returns the volume of the sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function finds the volume of a sphere.\n    '''\n\n    # Calculate the volume using the formula V = 4/3 * \u03c0 * r^3\n    volume = (4/3) * math.pi * r**3\n\n    # Return the volume\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 0:\n        return 0\n    else:\n        return get_Char(strr[1:]) + ord(strr[0])\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = ord('A')\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char) - ascii_val\n    return chr(char_sum % 26 + ascii_val)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    char %= 26\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + 65)  # Adding 65 to convert ASCII value of A to 1"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize an empty string to store the character\n    char = ''\n    # loop through each character in the string\n    for i in strr:\n        # convert each character to its ASCII value and add it to the character string\n        char += chr((ord(i)+26) % 26)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Create a dictionary to store the ASCII value of each character of the string\n    char_dict = {}\n    for char in strr:\n        char_dict[char] = ord(char)\n    # Calculate the sum of the ASCII values of each character of the string modulo 26\n    char_sum = sum(char_dict.values()) % 26\n    # Get the character corresponding to the sum modulo 26\n    char = chr(65 + char_sum)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    # initialize the character variable\n    char = \"\"\n    \n    # iterate over each character of the string\n    for i in range(len(strr)):\n        # convert the ASCII value of the current character to its equivalent in the range [0, 25]\n        ascii_value = ord(strr[i]) % 26\n        \n        # add the ASCII value to the character variable\n        char += chr(ascii_value)\n        \n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the character variable to None\n    char = None\n    # Loop through the string and add the ASCII value of each character modulo 26 to the character variable\n    for i in strr:\n        ascii_val = ord(i)\n        new_char = (ascii_val + 26) % 26\n        if char is None:\n            char = new_char\n        else:\n            char = char + new_char\n    # Return the final character\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    char_value = (ascii_value % 26) + 65  # ASCII value of 'A' = 65\n    \n    return chr(char_value)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_value = 0\n    for char in strr:\n        char_value += ord(char)\n    return chr((char_value % 26) + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2]\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            sequence.append(sequence[i//2] + sequence[i//2] + 1)\n        else:\n            sequence.append(sequence[i//2] + sequence[i//2] - 1)\n        i += 1\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    sequence = [0] * 21\n    sequence[0] = 1\n    for i in range(1, 21):\n        if sequence[i-1] == 1:\n            sequence[i] = 1\n        else:\n            sequence[i] = 0\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 1, 1\n    for i in range(1, n): \n        a, b = b, a + b \n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with 0 and then iterate n-1 times\n    sequence = [0] * n\n    for i in range(n-1): \n        # Calculate the next number in the sequence\n        next_number = (sequence[i] + sequence[i+1]) % 2\n        # Update the sequence with the new number\n        sequence[i+1] = next_number\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    # initialize sequence\n    sequence = [1]\n    # repeat sequence n times\n    for i in range(1, n):\n        # generate next number\n        next_number = (sequence[-1] + 1) * 2 % 10\n        # add to sequence\n        sequence.append(next_number)\n    # return nth number\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        new_number = sequence[i-1] * 2\n        if new_number > n:\n            new_number = n\n        sequence.append(new_number)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    while len(sequence) < n:\n        new_sequence = []\n        for i in range(len(sequence) - 1):\n            if sequence[i] % 2 == 0:\n                new_sequence.append(sequence[i] * 2)\n            else:\n                new_sequence.append(sequence[i] + 1)\n        sequence = new_sequence\n    return sequence[-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th number in the sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n    for i in range(2, n+1):\n        next_num = (sequence[i-1] + sequence[i-2]) % 2\n        sequence.append(next_num)\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i-2] + sequence[i-4])\n        else:\n            sequence.append(sequence[i-2] + sequence[i-4] + 1)\n    return sequence[n]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Find the volume of the sphere\n    v = 4/3 * math.pi * r**3\n    # Find the surface area of the sphere\n    A = 4 * math.pi * r**2\n    # Calculate the surface area of the sphere using Heron's formula\n    area = 2 * A * (v**0.5)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*(r**2)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4 * pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # surface area of a sphere is pi times r^2\n    surface_area = math.pi * r**2\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of the sphere\n    surface_area = (4/3) * math.pi * r**2\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Find the index of the last centered hexagon in the first row\n    index = (2 * n - 1) * (2 * n - 1) // 2\n    \n    # Find the value of the nth centered hexagonal number\n    value = index + n - 1\n    \n    return value"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 12\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    for i in range(2, n+1):\n        c = (a + b) // 2\n        print(c, end=\" \")\n        a = b\n        b = c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Initialize the first centered hexagonal number\n    a = 0\n\n    # Loop through the number of centered hexagonal numbers to find the nth centered hexagonal number\n    for i in range(1, n+1):\n        # Calculate the centered hexagonal number using formula A(n) = 2*n^2 - 1\n        a = 2*i*i - 1\n\n        # Output the centered hexagonal number\n        print(\"The centered hexagonal number at position\", i, \"is\", a)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case\n    if n == 0:\n        return 0\n    \n    # Calculate the next centered hexagonal number\n    next_centered_hexagonal = centered_hexagonal_number(n-1) + 6\n    \n    # Calculate the next number in the centered hexagonal series\n    next_centered_hexagonal_number = next_centered_hexagonal - n\n    \n    return next_centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        print(\"Input should be a positive integer.\")\n        return\n    \n    # Initialize variables\n    a = 1\n    b = 4\n    c = 6\n    d = 8\n    \n    # Iterate through the sequence of centered hexagonal numbers\n    for i in range(1, n+1):\n        # Calculate the centered hexagonal number\n        centered_hex = a*b + c*d\n        \n        # Check if the centered hexagonal number is even or odd\n        if centered_hex % 2 == 0:\n            print(centered_hex, end=\" \")\n        else:\n            print(centered_hex, end=\"\")\n        \n        # Update the values of a, b, c, and d\n        a, b, c, d = b, c, d+2, a+2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initializing variables\n    a = 1\n    b = 8\n    result = 0\n    \n    # Looping through the number of times required to find the nth centered hexagonal number\n    for i in range(n):\n        # Calculating the value of a^2 + b^2 for the current centered hexagonal number\n        c = (a**2 + b**2)**0.5\n        \n        # Updating the value of a and b for the next centered hexagonal number\n        a = b\n        b = c\n        \n        # Adding the value of a^2 + b^2 to the result\n        result += a**2 + b**2\n    \n    # Returning the result\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    num = 0\n    row = 0\n    col = 0\n    \n    # Calculate the centered hexagonal number\n    while num < n:\n        num = row * (row + 1) // 2 + col\n        row += 1\n        col += 1\n    \n    # Return the centered hexagonal number\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the base and edge constants\n    base = 1.7320508075688772\n    edge = 0.8660254037844386\n    \n    # Calculate the nth centered hexagonal number\n    return round(base ** n * edge ** n / (2 ** n - 1))"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge the dictionaries using the merge method of the OrderedDict class\n    merged_dict = ct.OrderedDict(dict1.items() + dict2.items() + dict3.items())\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \n    Parameters:\n    dict1 (dict): Dictionary to be merged with dict2.\n    dict2 (dict): Dictionary to be merged with dict3.\n    dict3 (dict): Dictionary to be merged with dict1.\n    \n    Returns:\n    dict: Merged dictionary.\n    \"\"\"\n    merged_dict = dict1.copy() # create a copy of dict1\n    for key, value in dict2.items(): # add all items in dict2 to merged_dict\n        merged_dict[key] = value\n    for key, value in dict3.items(): # add all items in dict3 to merged_dict\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a merged dictionary.\n    \n    The function merges the dictionaries by iterating through each key in the dictionaries and appending the corresponding value from the dictionaries.\n    \n    The resulting dictionary will have all the keys from the three input dictionaries.\n    \n    Example:\n    dict1 = {'a': 1, 'b': 2, 'c': 3}\n    dict2 = {'b': 4, 'c': 5, 'd': 6}\n    dict3 = {'c': 7, 'd': 8, 'e': 9}\n    \n    merged_dict = merge_dictionaries_three(dict1, dict2, dict3)\n    \n    Output:\n    {'a': 1, 'b': 4, 'c': 7, 'd': 8, 'e': 9}\n    \n    Note: The order of the keys in the resulting dictionary is not guaranteed to be the same as the order of the keys in the input dictionaries.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Merge the two dictionaries\n    merged_dict = ct.ChainMap(dict1, dict2)\n    # Merge the merged dictionary with the third dictionary\n    merged_dict = ct.ChainMap(merged_dict, dict3)\n    # Convert the ChainMap object to a dictionary\n    result_dict = dict(merged_dict)\n    return result_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # Create an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n\n    # Iterate over each key in the dictionaries and append the values to the merged dictionary\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1: First dictionary to merge.\n        dict2: Second dictionary to merge.\n        dict3: Third dictionary to merge.\n\n    Returns:\n        A single dictionary with the merged contents of dict1, dict2, and dict3.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \n    Args:\n    dict1 (dict): Dictionary 1 to be merged.\n    dict2 (dict): Dictionary 2 to be merged.\n    dict3 (dict): Dictionary 3 to be merged.\n    \n    Returns:\n    (dict): Merged dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Returns a dictionary of the frequency of each element in a list.\n    '''\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    # initialize variables\n    smallest = float('inf')\n    closest = float('inf')\n    for i in range(1, N+1):\n        if i > N:\n            continue\n        if i < smallest:\n            closest = smallest\n            smallest = i\n        elif i < closest:\n            closest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    diff = N - 1\n    while diff > 0:\n        if diff < min_diff:\n            min_diff = diff\n        diff = (N - diff) // 2\n    return diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    \n    # initialize the closest smaller number to be equal to n\n    closest_smaller = n\n    \n    # loop through all numbers between 1 and n\n    for i in range(1, n+1):\n        \n        # calculate the difference between the current number and n\n        difference = abs(i - n)\n        \n        # if the current number is smaller than the closest smaller number, update closest_smaller\n        if i < closest_smaller:\n            closest_smaller = i\n            \n    # return the closest smaller number\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    closest_num = None\n    for i in range(1, N+1):\n        if N-i > 0:\n            diff = abs(i - N)\n            if diff < min_diff:\n                min_diff = diff\n                closest_num = i\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('-inf')\n    \n    for num in range(N, 0, -1):\n        if num < smallest:\n            smallest = num\n        elif num < closest:\n            closest = num\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables\n    min_diff = float('inf')\n    closest = N\n\n    # loop through the range of numbers from 1 to n\n    for i in range(1, N+1):\n        # calculate the difference between the current number and n\n        diff = abs(i - N)\n\n        # if the difference is smaller than the current min_diff, update both min_diff and closest\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Initialize the closest number to be the input number\n    closest = N\n    \n    # Iterate over the range of numbers from 1 to N-1\n    for i in range(1, N):\n        # Calculate the absolute difference between the current number and N\n        diff = abs(N - i)\n        \n        # If the current difference is smaller than the closest so far, update the closest number\n        if diff < abs(closest - N):\n            closest = i\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    smallest = float('inf')\n    for i in range(1, N+1):\n        if abs(i - N) < abs(smallest - N):\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = float('inf')\n    smallest = float('inf')\n    for i in range(N):\n        if i < N // 2:\n            num = 2 * i + 1\n        else:\n            num = 2 * i - 1\n        if abs(num - N) < diff:\n            smallest = num\n            diff = abs(num - N)\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N - 1\n    while num >= 1:\n        if num % 10 == 0:\n            num -= 1\n        else:\n            break\n    return num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    max_len = 0\n    word_len = 0\n\n    # loop through the list of words\n    for word in list1:\n        # check if the current word is longer than the current max_len\n        if len(word) > max_len:\n            # update the max_len and word_len\n            max_len = len(word)\n            word_len = len(word)\n        # if the current word is shorter than the current max_len,\n        # check if the new word is longer\n        elif len(word) > word_len:\n            # update the word_len\n            word_len = len(word)\n\n    # return the length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest_word = max(list1, key=len)\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list of words.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list:\n        return False\n    \n    for string in str1:\n        if sub_str in string:\n            return True\n    \n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # initialize variables\n    found = False\n    # iterate through the list of string values\n    for string in str1:\n        # check if the substring is present in the current string\n        if sub_str in string:\n            # if it is, set the found variable to True and break out of the loop\n            found = True\n            break\n    # return the found variable\n    return found"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # iterate over each string in the list\n    for string in str1:\n        # check if the substring is present in the current string\n        if sub_str in string:\n            # return True if the substring is present in the string\n            return True\n    # if the loop completes without finding the substring, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # split the string into a list of strings\n    str_list = str1.split()\n    # loop through the list of strings\n    for s in str_list:\n        # check if the substring is present in the current string\n        if sub_str in s:\n            # if it is, return True\n            return True\n    # if the loop completes without finding the substring, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(str1 in s for s in sub_str)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str_list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for value in str1:\n        if sub_str in value:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the given number is divisible by 2\n    if n % 2 == 0:\n        return False\n    # Check if the given number is a perfect square\n    for i in range(5, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    This function takes a positive integer as input and returns True if it is undulating, else False.\n    '''\n\n    # check if n is odd\n    if n % 2 == 0: \n        return False\n\n    # check if n is a power of 2\n    power = 1\n    while power <= n // 2:\n        if power**2 > n:\n            return False\n        power += 1\n\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes a positive integer as input and returns True if it is an undulating number,\n    and False otherwise.\n    \"\"\"\n    if n < 4:\n        return False\n    elif n == 4 or n == 6:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n//2)\n    else:\n        return is_undulating((3*n)+1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    This function takes a number as input and returns True if the number is undulating and False otherwise.\n    An undulating number is a number whose sum of its digits is equal to the original number.\n    For example, 16 is an undulating number because 1+6 = 7, and 7+6 = 13, which is equal to 16.\n    '''\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    if sum_of_digits == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    return n % 2 == 0"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n\nprint(is_undulating(6))  # Output: Odd"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2 == 0: \n        return False \n    else: \n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Convert the list of tuples into a dictionary\n    test_dict = {i:test_list[i] for i in range(len(test_list))}\n    \n    # Sort the dictionary by second value\n    sorted_dict = dict(sorted(test_dict.items(), key=itemgetter(1)))\n    \n    # Return the first value of the sorted dictionary\n    return sorted_dict.values()[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_minimum(test_list):\n    # sort the list by second value (index 1) in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the index of the smallest tuple (first value)\n    return sorted_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Create a dictionary to store the indices of the tuples with the smallest second value\n    min_index = {}\n    for i, t in enumerate(test_list):\n        # Get the second value of the tuple and check if it's smaller than the current minimum\n        if t[1] not in min_index or t[1] < min_index[t[1]]:\n            # If it's smaller, update the minimum and the index of the tuple with the minimum value\n            min_index[t[1]] = i\n    \n    # Get the value of the first tuple with the smallest second value\n    return test_list[min_index[min(min_index)]][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = float('inf')\n    min_index = None\n    for i, item in enumerate(test_list):\n        if item[1] < min_value:\n            min_value = item[1]\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples based on the second value of each tuple\n    test_list.sort(key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize variables to store minimum and maximum lengths\n    min_len = 9999999\n    max_len = 0\n    \n    # loop through each list in the list\n    for sublist in lst:\n        # if the length of the sublist is smaller than the minimum length, update it\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            \n        # if the length of the sublist is larger than the maximum length, update it\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            \n    # return the minimum length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Loop through each sublist in the list\n    for sublist in lst:\n        # If the sublist has a length less than the current minimum, update the minimum\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    # Return the minimum length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize the length of the smallest list to infinity\n    min_length = float('inf')\n    # Iterate through each element in the list of lists\n    for sublist in lst:\n        # Find the length of the current sublist\n        length = len(sublist)\n        # Update the minimum length if the current sublist has a smaller length\n        if length < min_length:\n            min_length = length\n    # Return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    min_len = float('inf')\n    for sublist in lst:\n        sublist_len = len(sublist)\n        if sublist_len < min_len:\n            min_len = sublist_len\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = float('inf')  # initialize the minimum length to positive infinity\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = float('inf') #initialize variable to infinity\n    for sublist in lst: #iterate through each sublist\n        if len(sublist) < min_length: #if sublist length is smaller than current minimum\n            min_length = len(sublist) #update minimum length\n\n    return min_length #return minimum length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the number of divisors of `n`.\n    \"\"\"\n    # Initialize the count of divisors to 0\n    count = 0\n    # Loop through each number from 1 to the square root of `n`\n    for i in range(1, int(n**0.5)+1):\n        # If `n` is divisible by `i`, increment the count\n        if n % i == 0:\n            count += 1\n    # Return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq:\n                freq[subitem] += 1\n            else:\n                freq[subitem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    frequency = {}\n\n    # Loop through each element in the list and update the frequency dictionary\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n\n    # Return the frequency dictionary\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    freq_dict = {}\n    # loop through each element in the list\n    for element in list1:\n        # if the element is already in the dictionary, increment its count by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[element] = 1\n    # return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq:\n                freq[subitem] += 1\n            else:\n                freq[subitem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary\n    freq_dict = {}\n    # Loop through each element in the list\n    for elem in list1:\n        # If the element is already a key in the dictionary, increment its value by 1\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # Otherwise, add the element as a new key with a value of 1\n        else:\n            freq_dict[elem] = 1\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(lst):\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    # Flatten the list of lists to make it a single list\n    flat_lst = [item for sublist in lst for item in sublist]\n    # Loop through each element in the flattened list\n    for item in flat_lst:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if item in freq:\n            freq[item] += 1\n        # Otherwise, add the element to the dictionary with a frequency of 1\n        else:\n            freq[item] = 1\n    # Return the dictionary with the frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq:\n                freq[subitem] += 1\n            else:\n                freq[subitem] = 1\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total *= number\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not isinstance(numbers, list):\n        raise TypeError('Input should be a list.')\n    \n    result = 1\n    for num in numbers:\n        if not isinstance(num, (int, float)):\n            raise TypeError('All elements in the list should be numeric.')\n        result *= num\n        \n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    if n == 0:\n        return '0'\n\n    # Convert n to a string\n    s = str(n)\n\n    # Initialize binary variable to empty string\n    binary = ''\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # If character is 0, append 0 to binary\n        if s[i] == '0':\n            binary += '0'\n        # If character is 1, append 1 to binary\n        elif s[i] == '1':\n            binary += '1'\n\n    # If binary is still empty after the loop, n is a single-digit number and should be represented as a string with no leading zeros\n    if not binary:\n        return s\n\n    # Remove any leading zeros from the binary string\n    binary = binary.lstrip('0')\n\n    # Add leading zeros to the string if binary is longer than 32 bits\n    while len(binary) < 32:\n        binary = '0' + binary\n\n    # Return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function converts a decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n > 0: \n        binary_str = str(n % 2) + binary_str \n        n //= 2 \n    return binary_str "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    # Initialize an empty string to store binary equivalent\n    binary = \"\"\n    \n    # Loop through each digit of the decimal number\n    while n > 0:\n        # Find the remainder when n is divided by 2\n        remainder = n % 2\n        \n        # Convert the remainder to binary and append it to the binary string\n        binary = str(remainder) + binary\n        \n        # Remove the last digit from n and repeat the process\n        n = n // 2\n    \n    # Return the binary string without any leading zeros\n    return binary if binary[0]!= \"0\" else binary[1:]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the given integer to a string\n    num_str = str(num)\n    \n    # Reverse the string and convert it back to an integer\n    rev_num = int(num_str[::-1])\n    \n    # Convert the reversed integer to a string\n    rev_num_str = str(rev_num)\n    \n    # Remove any leading zeros from the reversed integer string\n    rev_num_str = rev_num_str.lstrip('0')\n    \n    # Convert the reversed integer string back to an integer\n    rev_num = int(rev_num_str)\n    \n    # Add 1 to the reversed integer to get the next smallest palindrome\n    next_palindrome = rev_num + 1\n    \n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    num_str = str(num)\n    reversed_num_str = num_str[::-1]\n    for i in range(10):\n        reversed_num_str = str(int(reversed_num_str) + i)\n        if reversed_num_str == num_str:\n            return int(reversed_num_str)\n    return 0"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def find_next_smallest_palindrome(num):\n        # check if num is prime\n        if not is_prime(num):\n            raise ValueError(\"Number must be prime\")\n        \n        # find the next smallest palindrome\n        for i in range(num + 1, 10**9 + 1):\n            if is_palindrome(i):\n                return i\n        \n        # if none found, return None\n        return None\n    \n    # call the helper function\n    try:\n        return find_next_smallest_palindrome(num)\n    except ValueError as e:\n        print(e)\n        sys.exit(1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef is_palindrome(n):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num\n\n    # Find the smallest odd number greater than num\n    odd_num = num + 1\n    while odd_num % 2 == 0:\n        odd_num += 1\n\n    # Iterate through odd numbers and check if they are palindromes\n    for i in range(3, odd_num, 2):\n        if is_palindrome(i) and is_palindrome(odd_num // i):\n            return i * odd_num // i\n\n    # If no palindromes were found, return the largest palindrome less than the specified number\n    while odd_num > 10:\n        odd_num -= 10\n\n    for i in range(10, odd_num, 2):\n        if is_palindrome(i) and is_palindrome(odd_num // i):\n            return i * odd_num // i\n\n    # If no palindromes were found, return the largest palindrome less than the specified number\n    while odd_num > 1:\n        odd_num -= 1\n\n    for i in range(1, odd_num, 2):\n        if is_palindrome(i) and is_palindrome(odd_num // i):\n            return i * odd_num // i\n\n    return 0"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    def is_palindrome(num):\n        \"\"\"\n        Check if a number is a palindrome.\n        \"\"\"\n        temp = num\n        reverse_num = 0\n        while temp > 0:\n            reverse_num = reverse_num * 10 + temp % 10\n            temp //= 10\n        return num == reverse_num\n\n    def is_prime(num):\n        \"\"\"\n        Check if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_next_smallest_palindrome(num):\n        \"\"\"\n        Find the next smallest palindrome of a specified number.\n        \"\"\"\n        if not is_prime(num):\n            return None\n        elif num < 10:\n            return 10\n        else:\n            if is_palindrome(num):\n                return None\n            else:\n                while not is_palindrome(num + 1):\n                    num += 1\n                return num + 1\n\n    next_smallest_palindrome_num = find_next_smallest_palindrome(num)\n    if next_smallest_palindrome_num is None:\n        print(\"There is no next smallest palindrome for the given number.\")\n    else:\n        print(\"The next smallest palindrome for the given number is:\", next_smallest_palindrome_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    max_num = 10**num\n    min_num = -10**num + 1\n\n    if num % 2 == 0:\n        for i in range(1, max_num+1, 2):\n            if is_palindrome(i):\n                if i > min_num:\n                    return i\n        return None\n\n    else:\n        for i in range(1, max_num+1, 2):\n            if is_palindrome(i):\n                if i < min_num:\n                    return i\n        return None\n\n\ndef is_palindrome(num):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    str_num = str(num)\n    return str_num == str_num[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Convert the reversed string to an integer\n    reversed_int = int(reversed_str)\n    # Increment the reversed integer and convert it back to a string\n    next_palindrome_str = str(reversed_int + 1)\n    # Convert the next palindrome string to an integer\n    next_palindrome = int(next_palindrome_str)\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize variables\n    smallest_palindrome = num\n    smallest_num = num\n    i = num + 1\n\n    # Iterate through numbers until a palindrome is found\n    while True:\n        # Check if the current number is a palindrome\n        palindrome = str(i) == str(i)[::-1]\n\n        # If the current number is a palindrome and smaller than the current smallest palindrome, update the variables\n        if palindrome and i < smallest_palindrome:\n            smallest_palindrome = i\n            smallest_num = i\n\n        # Increment the number\n        i += 1\n\n        # Exit the loop if the current number is greater than the specified number\n        if i > num:\n            break\n\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if num == 1:\n        return 2\n\n    if num == 9:\n        return 10\n\n    if num % 2 == 0:\n        num = 3 * num + 1\n    else:\n        num = 3 * num + 9\n\n    while not is_palindrome(num):\n        if num % 2 == 0:\n            num = 3 * num + 1\n        else:\n            num = 3 * num + 9\n\n    return num\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    try:\n        num = int(sys.argv[1])\n        print(next_smallest_palindrome(num))\n    except ValueError:\n        print(\"Invalid input\")\n        sys.exit(1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Checks if a given number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Finds the next smallest palindrome of a specified integer.\n    \"\"\"\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # If k is greater than the length of the array, return None\n    if k > len(arr):\n        return None\n    \n    # Initialize the left and right pointers to the first and last indices of the array, respectively\n    left = 1\n    right = len(arr)\n    \n    # While the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index of the current window\n        mid = (left + right) // 2\n        \n        # If the middle element is equal to k-1, return it\n        if arr[mid-1] == k-1:\n            return arr[mid-1]\n        \n        # If the middle element is less than k-1, move the right pointer to mid+1\n        elif arr[mid-1] < k-1:\n            left = mid+1\n            \n        # If the middle element is greater than k-1, move the left pointer to mid-1\n        else:\n            right = mid-1\n            \n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return \"Invalid input\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be a positive integer and less than or equal to the length of the array\")\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Find the length of the array\n    n = len(arr)\n    # Check if k is valid\n    if k > n:\n        print(\"Error: k is greater than the length of the array\")\n        return None\n    # Initialize two pointers, one at the beginning of the array and the other at the end\n    i = 0\n    j = n - 1\n    # Iterate until kth element is found\n    while i <= j:\n        # Find the midpoint\n        mid = (i + j) // 2\n        # If the midpoint is equal to k-1, we found the kth element\n        if mid == k - 1:\n            return arr[mid]\n        # If the midpoint is less than k-1, we need to search in the right half\n        elif mid < k - 1:\n            i = mid + 1\n        # If the midpoint is greater than k-1, we need to search in the left half\n        else:\n            j = mid - 1\n    # If we reach here, k is not a valid index\n    print(\"Error: k is not a valid index\")\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty or if the k is negative or zero\n    if len(arr) == 0 or k < 1:\n        return None\n    \n    # Check if the k is greater than the length of the array\n    if k > len(arr):\n        return None\n    \n    # Initialize the current index\n    current_index = 1\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current index is equal to k, return the element\n        if current_index == k:\n            return arr[i]\n        \n        # Increment the current index\n        current_index += 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    n = len(arr)\n    if k > n or k < 1:\n        raise ValueError(\"Invalid index\")\n    count = 1\n    for i in range(n):\n        if count == k:\n            return arr[i]\n        count += 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        raise ValueError(\"k is greater than the number of elements in the array\")\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = n\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid - 1] < arr[mid]:\n                return arr[mid]\n            elif arr[mid - 1] > arr[mid]:\n                left = mid + 1\n            else:\n                right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    \n    # Find the median of the first and last elements\n    if len(arr) % 2 == 0:\n        median = (arr[len(arr) // 2 - 1] + arr[len(arr) // 2]) / 2\n    else:\n        median = arr[len(arr) // 2]\n    \n    # If the median is the kth element, return it\n    if median == k:\n        return median\n    \n    # If the median is greater than the kth element, search in the left half of the array\n    if median > k:\n        return kth_element(arr[:len(arr) // 2], k)\n    \n    # If the median is less than the kth element, search in the right half of the array\n    return kth_element(arr[len(arr) // 2:], k - len(arr) // 2)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    This function takes an array and a 1-based index k as inputs. It returns the kth element of the array.\n    \"\"\"\n    return arr[k - 1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    prev_char_is_upper = False\n\n    for char in word:\n        if char == \"_\":\n            prev_char_is_upper = True\n        elif prev_char_is_upper:\n            camel_case += char.upper()\n            prev_char_is_upper = False\n        else:\n            camel_case += char.lower()\n\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    prev_char = \"\"\n    for char in word:\n        if char.isupper():\n            if prev_char!= \"_\":\n                camel_case += char.upper()\n            else:\n                camel_case += \"_\"\n        else:\n            camel_case += char.lower()\n        prev_char = char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case = words[0]\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the snake case to camel case\n    camel_case = ''.join(word.title().split('_'))\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case = [word.capitalize() for word in words]\n    # Join the words with underscores\n    return '_'.join(camel_case)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Splitting the word into a list of words\n    words = word.split('_')\n    \n    # Converting the first word to uppercase\n    first_word = words[0].capitalize()\n    \n    # Converting the rest of the words to lowercase\n    rest_words = [word.capitalize() for word in words[1:]]\n    \n    # Joining the list of words with underscores\n    result = first_word + ''.join(rest_words)\n    \n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Join the words with a capital letter after the first letter\n    camel_case = ''.join([word.capitalize() for word in words])\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        elif word[i] == '_':\n            camel_word += word[i+1].upper()\n        else:\n            camel_word += word[i]\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = []\n    for word in words:\n        camel_case.append(word.capitalize())\n    return ''.join(camel_case)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    # convert snake_case to CamelCase\n    camel_case = \"\"\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.lower()\n        elif i > 0 and letter.isupper():\n            camel_case += \"_\" + letter.lower()\n        else:\n            camel_case += letter\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the number of ways to arrange the n students into m groups.\n    ways = 1\n    for i in range(1, n+1):\n        ways *= i\n    ways //= (m * (m - 1))\n    \n    # Calculate the number of ways to choose k students from m groups.\n    ways2 = 1\n    for i in range(1, m+1):\n        ways2 *= i\n    ways2 //= (k * (k - 1))\n    \n    # Calculate the number of ways to choose (n-k) students from m-k groups.\n    ways3 = 1\n    for i in range(1, n-k+1):\n        ways3 *= i\n    ways3 //= (m - k * (k - 1))\n    \n    # Calculate the total number of ways to choose n-k students from m groups.\n    ways4 = 1\n    for i in range(1, n-k+1):\n        ways4 *= i\n    ways4 //= (m * (m - 1))\n    \n    # Calculate the Eulerian number using the product rule.\n    a = ways * ways2 * ways3 * ways4\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function returns the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    else:\n        return eulerian_num(n-1, m) * (m-1) // m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n\n    Parameters:\n    n: int\n        The number of vertices.\n    m: int\n        The number of edges.\n\n    Returns:\n    int\n        The Eulerian number a(n, m).\n    '''\n\n    # Initialize the adjacency matrix\n    adj_matrix = [[0] * (n + 1) for _ in range(n + 1)]\n    for _ in range(m):\n        a, b = map(int, input().split())\n        adj_matrix[a][b] = 1\n        adj_matrix[b][a] = 1\n\n    # Find the Eulerian path\n    euler_path = [0] * (n + 1)\n    visited = set()\n    stack = [(0, 1)]\n    while stack:\n        u, v = stack.pop()\n        if u in visited:\n            continue\n        visited.add(u)\n        euler_path[u] = v\n        if u == n:\n            break\n        for i in range(1, n + 1):\n            if adj_matrix[u][i] == 1 and i not in visited:\n                stack.append((u, i))\n\n    # Compute the Eulerian number a(n, m)\n    a = 0\n    for u, v in zip(euler_path, euler_path[1:]):\n        if u!= v:\n            a += 1\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n - m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0 and m!= 0:\n        return 0\n    elif n!= 0 and m == 0:\n        return 0\n    else:\n        return n * (m + eulerian_num(n - 1, m))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # base case\n    if n == 0:\n        return 1\n    \n    # recursive case\n    return eulerian_num(n-1, m) + n*(m-1)*eulerian_num(n-1, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Finding the number of squares with size 2^k\n    def count_squares(k):\n        count = 0\n        for i in range(n):\n            for j in range(m):\n                if i ^ j == 0 and i ^ (i+2**k) == 0:\n                    count += 1\n        return count\n\n    # Finding the number of squares with size 2^(k-1)\n    def count_squares_smaller(k):\n        count = 0\n        for i in range(n):\n            for j in range(m):\n                if i ^ j == 0 and i ^ (i+2**(k-1)) == 0:\n                    count += 1\n        return count\n\n    # Finding the maximum size of squares\n    max_size = 0\n    for k in range(max(0, n-1), -1, -1):\n        max_size = max(max_size, 2**k)\n\n    # Finding the Eulerian number a(n, m)\n    result = 0\n    for k in range(max_size):\n        count_k = count_squares(k)\n        count_k_smaller = count_squares_smaller(k)\n        if count_k == count_k_smaller:\n            result += count_k\n        elif count_k > count_k_smaller:\n            result += count_k_smaller\n        else:\n            result += count_k - count_k_smaller\n\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        n, m = m, n\n    s = 1\n    for i in range(1, n+1):\n        s = (s * i) % m\n    return s"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 1 or m < 1:\n        return None\n    \n    # initialize matrix with zeros\n    matrix = [[0 for x in range(m+1)] for y in range(n+1)]\n    \n    # fill the matrix with 1's\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            matrix[i][j] = 1\n    \n    # initialize array to store the values of the diagonal\n    diagonal = [0 for x in range(n+1)]\n    diagonal[1] = 1\n    \n    # find the diagonal sum of the matrix\n    diagonal_sum = sum(diagonal)\n    \n    # initialize array to store the values of the off-diagonal\n    off_diagonal = [0 for x in range(n*m-n)]\n    \n    # calculate the off-diagonal values using the formula:\n    # a_{ij} = (n*m-n) * (-1)^(i+j) * (-1)^(i-j) / (i+j-1)\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            off_diagonal[i+j-2] += (n*m-n) * (-1)**(i+j) * (-1)**(i-j) / (i+j-1)\n    \n    # find the sum of the off-diagonal values and divide by 2 to get the Eulerian number\n    eulerian = diagonal_sum / 2 + sum(off_diagonal) / 2\n    \n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if n is a prime number\n    def is_prime(n): \n        if n < 2: \n            return False\n        for i in range(2, int(n**0.5) + 1): \n            if n % i == 0: \n                return False\n        return True\n\n    # Calculate the number of primes less than or equal to m\n    num_primes = 0\n    for i in range(2, m + 1): \n        if is_prime(i): \n            num_primes += 1\n        if num_primes == n: \n            break\n\n    # Calculate the Eulerian number a(n, m)\n    def eulerian(n, m): \n        if n > 1: \n            return eulerian(n - 1, m) + m\n        else: \n            return 0\n\n    return eulerian(n, m)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function and the sort() method\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if type(item) == bool and item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for num in lst:\n        if num:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for num in test_list:\n        test_tup += (num,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # First, append the list to the tuple\n    test_tup += tuple(test_list)\n\n    # Then, return the updated tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # converting the list to tuple\n    test_tup = tuple(test_list)\n    # appending the list to the tuple\n    test_tup += tuple(test_list)\n    # converting the tuple back to list and printing the result\n    result = list(test_tup)\n    print(result)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge num1, num2, and num3 using heapq.merge\n    merged_list = heapq.merge(num1, num2, num3)\n    \n    # Reverse the merged list and return it\n    return merged_list[::-1]"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # merge two sorted lists into a single sorted list\n    merged_list = merge_lists(num1, num2)\n    # merge the merged list with the third list\n    sorted_list = merge_lists(merged_list, num3)\n    return sorted_list\n\ndef merge_lists(list1, list2):\n    \"\"\"\n    Merge two sorted lists into a single sorted list.\n    \"\"\"\n    # merge two lists using heapq module\n    heapq.heapify(list1)\n    heapq.heapify(list2)\n    merged_list = []\n    while len(list1) > 0 and len(list2) > 0:\n        if heapq.heappop(list1) < heapq.heappop(list2):\n            heapq.heappush(merged_list, heapq.heappop(list1))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(list2))\n    # add remaining elements of the non-empty list to the merged list\n    merged_list += list1 + list2\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into one\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list\n    sorted_list = heapq.merge(num1, num2, num3)\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into one list\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list using heapsort\n    heapq.heapify(merged_list)\n\n    # Extract the sorted list from the heap\n    sorted_list = [heapq.heappop(merged_list) for i in range(len(merged_list))]\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Create a min heap to store the merged list\n    min_heap = []\n    \n    # Iterate over the merged list and add each element to the min heap\n    for element in merged_list:\n        heapq.heappush(min_heap, element)\n    \n    # Create an empty list to store the sorted elements\n    sorted_list = []\n    \n    # Iterate over the min heap and add each element to the sorted list\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    heapq.merge(sorted_list, num1, num2, num3)\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the two smallest lists first\n    merge_list1 = merge_lists(num1,num2)\n    # Merge the remaining lists\n    merged_list = merge_lists(merge_list1,num3)\n    # Return the merged list\n    return merged_list\n\ndef merge_lists(list1,list2):\n    '''\n    Merge two sorted lists into a single sorted list.\n    '''\n    # Initialize the merged list\n    merged_list = []\n    # Iterate over both lists\n    i,j = 0,0\n    while i<len(list1) and j<len(list2):\n        # If the first element of list1 is smaller, append it to merged_list\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        # If the first element of list2 is smaller, append it to merged_list\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    # Append any remaining elements of either list\n    merged_list += list1[i:]\n    merged_list += list2[j:]\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Create a min heap of lists\n    heap1 = []\n    heap2 = []\n    heap3 = []\n    for num in num1:\n        heapq.heappush(heap1, num)\n    for num in num2:\n        heapq.heappush(heap2, num)\n    for num in num3:\n        heapq.heappush(heap3, num)\n\n    # Merge the heaps into a single sorted list\n    result = []\n    while heap1 and heap2 and heap3:\n        if heapq.heappop(heap1) < heapq.heappop(heap2):\n            result.append(heapq.heappop(heap1))\n        elif heapq.heappop(heap1) > heapq.heappop(heap2):\n            result.append(heapq.heappop(heap2))\n        else:\n            result.append(heapq.heappop(heap1))\n            result.append(heapq.heappop(heap2))\n            result.append(heapq.heappop(heap3))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge two lists into a single list\n    merged_list = sorted(num1 + num2)\n    # Append the third list to the merged list\n    merged_list += num3\n    # Return the sorted list\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    This function takes a binary string and a number n as input and returns the number of odd numbers in the rotated binary string after rotating the string n times.\n    '''\n    # initialize count to zero\n    count = 0\n    \n    # loop through the binary string n times\n    for i in range(n):\n        # get the last character of the string\n        last_char = s[-1]\n        \n        # remove the last character from the string\n        s = s[:-1]\n        \n        # loop through the characters of the string\n        for j in range(len(s)):\n            # if the character is odd, increment the count\n            if int(s[j]) % 2 == 1:\n                count += 1\n    \n    # return the count of odd numbers in the rotated binary string\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    # Convert binary string to list of binary digits\n    digits = [int(d) for d in s]\n\n    # Initialize count variable\n    count = 0\n\n    # Iterate through the list of binary digits and rotate the digits\n    for i in range(n):\n        if i == 0:\n            digits = digits[-1:] + digits[:-1]\n        elif i % 2 == 0:\n            digits = digits[1:] + digits[0]\n        else:\n            digits = digits[:-1] + digits[1:]\n\n    # Iterate through the list of binary digits and count the odd digits\n    for d in digits:\n        if d == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    binary_string = s\n    count = 0\n    for i in range(n):\n        new_binary_string = binary_string[::-1]\n        new_binary_string = new_binary_string.replace('0', '1')\n        new_binary_string = new_binary_string.replace('1', '0')\n        count += sum([int(bit) for bit in new_binary_string])\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if s[0] == \"0\":\n            s = s[1:]\n        else:\n            s = \"0\" + s\n        count += s.count(\"1\")\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize the count variable to zero\n    count = 0\n\n    # convert the binary string to a list of integers\n    binary_list = [int(bit) for bit in s]\n\n    # rotate the binary list the given number of times\n    for _ in range(n):\n        binary_list.append(binary_list.pop(0))\n\n    # iterate through the binary list and count the odd numbers\n    for bit in binary_list:\n        if bit % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n): \n    # convert the binary string to a list of digits\n    digits = [int(d) for d in s]\n    # rotate the digits by n positions\n    rotated = digits[n:] + digits[:n]\n    # count the number of odd digits in the rotated list\n    count = 0\n    for d in rotated:\n        if d % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    if n == 0:\n        return 1\n    elif len(s) % 2 == 0:\n        return odd_Equivalent(s[1:] + \"0\", n - 1)\n    else:\n        return odd_Equivalent(\"0\" + s[1:], n - 1)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[-1] + s[:-1]\n        if int(s, 2) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n\n    count = 0 \n\n    # Initializing the string \n    if s[0] == '0': \n        binary_str = '0' * (len(s) // 2) + '1' * (len(s) // 2) \n    else: \n        binary_str = '1' * (len(s) // 2) + '0' * (len(s) // 2) \n\n    # Rotating the binary string the given number of times \n    for i in range(n): \n        temp = '' \n        for j in range(len(binary_str)): \n            if binary_str[j] == '0': \n                temp += '0' \n            else: \n                temp += '1' \n        binary_str = temp \n\n    # Counting the number of odd values in the rotated binary string \n    for i in range(len(binary_str)): \n        if binary_str[i] == '1': \n            count += 1 \n\n    return count "
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    :param s: A binary string\n    :param n: The number of times to rotate the binary string\n    :return: The number of odd numbers with an odd value when rotating the binary string the given number of times.\n    \"\"\"\n\n    # convert the binary string into a list\n    bin_list = list(s)\n\n    # loop through each character in the list\n    for i in range(n):\n        # rotate the binary list by shifting the first element to the end\n        bin_list.append(bin_list.pop(0))\n\n    # count the number of odd numbers in the rotated list\n    count = 0\n    for i in bin_list:\n        if int(i) % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_list = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common_list:\n                common_list.append(j)\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Define a function to check if two lists have common elements\n    def common_elements(list1, list2):\n        return set(list1).intersection(set(list2))\n    \n    # Define a function to find the common elements in each sublist\n    def common_in_sublists(sublist):\n        return common_elements(sublist[0], sublist[-1])\n    \n    # Find the common elements in the top-level list\n    common_elements_in_top = common_elements(nestedlist[0], nestedlist[-1])\n    \n    # Find the common elements in each sublist\n    common_elements_in_sublists = [common_in_sublists(sublist) for sublist in nestedlist]\n    \n    # Return the intersection of all common elements in the top-level and sublists\n    return common_elements_in_top.intersection(*common_elements_in_sublists)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = set()\n    for i in nestedlist:\n        for j in i:\n            if j in common:\n                common.remove(j)\n            else:\n                common.add(j)\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n\n    for sublist in nestedlist:\n        for element in sublist:\n            common_elements.add(element)\n\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        if i in common_elements:\n            common_elements.remove(i)\n        else:\n            common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if i!= j:\n                if nestedlist[i][j] in common_elements:\n                    common_elements.remove(nestedlist[i][j])\n                else:\n                    common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # flatten the nested lists\n    flatlist = [item for sublist in nestedlist for item in sublist]\n    # use set() to remove duplicates\n    unique_flatlist = list(set(flatlist))\n    # create a dictionary of occurrence counts for each item in the unique list\n    count_dict = {}\n    for item in unique_flatlist:\n        count_dict[item] = flatlist.count(item)\n    # find the common items in the count dictionary\n    common_items = [item for item in count_dict if count_dict[item] == 2]\n    return common_items"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty list to store common elements\n    common = []\n\n    # iterate over each list in the nestedlist\n    for lst in nestedlist:\n        # initialize an empty list to store common elements in this list\n        local_common = []\n\n        # iterate over each element in this list\n        for element in lst:\n            # check if this element is already in the common list\n            if element in common:\n                # if it is, add it to the local_common list\n                local_common.append(element)\n\n        # if there are common elements in this list, add them to the common list\n        if local_common:\n            common += local_common\n\n    # return the final list of common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                common.remove(nestedlist[i][j])\n            else:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty set for common elements\n    common_elements = set()\n    \n    # iterate through each sublist of the nestedlist\n    for sublist in nestedlist:\n        # iterate through each element of the sublist\n        for element in sublist:\n            # add the element to the set of common elements if it is not already in the set\n            if element not in common_elements:\n                common_elements.add(element)\n    \n    # convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif all(dict(list1[0]).values()):\n        return False\n    else:\n        return empty_dit(list1[1:])"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # Loop through the list of dictionaries\n    for i in list1:\n\n        # If any dictionary is not empty, return False\n        if not i:\n            return False\n\n    # If all dictionaries are empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # loop through each dictionary in the list\n    for i in list1:\n        # check if the dictionary is empty\n        if i:\n            # if any dictionary is not empty, return False\n            return False\n    # if all dictionaries are empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dict in list1:\n        if dict:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Loop through each dictionary in the list\n    for i in list1:\n        # Check if the dictionary is empty\n        if i == {}:\n            # If it is, return True\n            return True\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize a variable to store the sum\n    total = 0\n    \n    # iterate over the tuple and add each number to the total\n    for num in nums:\n        total += num\n    \n    # return the total as an integer\n    return int(total)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty string to store the integer representation\n    int_str = \"\"\n    # Iterate over the tuple of integers\n    for num in nums:\n        # Convert each integer to its string representation\n        int_str += str(num)\n    # Convert the string representation to an integer\n    int_num = int(int_str)\n    # Return the integer representation\n    return int_num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    if not all(isinstance(num, int) and num > 0 for num in nums):\n        return \"Invalid input\"\n    result = 0\n    for num in nums:\n        result *= 10\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_list = []\n    for num in nums:\n        int_list.append(int(num))\n    return sum(int_list)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list and concatenate all the integers into a single integer\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the sum of the integers to 0\n    total = 0\n    # Iterate over the list of integers\n    for num in nums_list:\n        # Add each integer to the sum\n        total += num\n    # Return the total sum\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                pass\n            else:\n                element = float(element)\n        test_list[test_list.index(sublist)] = sublist"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if type(element) == str:\n                try:\n                    float(element)\n                except ValueError:\n                    pass\n            elif type(element) == list:\n                list_to_float(element)\n            else:\n                try:\n                    float(element)\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(x) if isinstance(x, (int, float)) else x for x in row] for row in test_list]"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                item = float(item)\n            except ValueError:\n                item = None\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float_list.append(float(element))\n            except ValueError:\n                continue\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, complex)):\n                test_list[i][j] = float(test_list[i][j])\n\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character and return the list of strings\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character\n    words = string.split()\n    # Return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Convert the string to a list of characters\n    chars = list(string)\n    # Initialize an empty list to store the words\n    words = []\n    # Initialize a variable to keep track of the current word\n    word = []\n    # Iterate over each character in the list of characters\n    for c in chars:\n        # If the character is a space, add the word to the list of words and reset the word variable\n        if c =='':\n            # If the word is not empty, add it to the list of words\n            if len(word) > 0:\n                words.append(''.join(word))\n                # Reset the word variable\n                word = []\n        # Otherwise, add the character to the word variable\n        else:\n            word.append(c)\n    # If the word is not empty at the end, add it to the list of words\n    if len(word) > 0:\n        words.append(''.join(word))\n    # Return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Set a variable to store the count of the current element\n    count = 0\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is already in the count variable, increment its value\n        if arr[i] in arr[:i]:\n            count += 1\n            # If the count reaches 2, return the current element\n            if count == 2:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return None\n    else:\n        mid = n // 2\n        left = search(arr[:mid])\n        right = search(arr[mid:])\n        if left is not None and right is not None:\n            return min(left, right)\n        elif left is not None:\n            return left\n        else:\n            return right"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    i = 0\n    while i < n - 1:\n        if arr[i] == arr[i+1]:\n            i += 1\n        else:\n            i = 0\n    return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate through the array and update the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the array again and find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        left_result = search(arr[:mid])\n        right_result = search(arr[mid:])\n        if left_result == right_result:\n            return left_result\n        elif left_result == -1:\n            return search(arr[mid:])\n        elif right_result == -1:\n            return search(arr[:mid])\n        else:\n            return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Traverse the array and check if the element appears only once\n    for i in range(len(arr)):\n        if arr[i]!= arr[i + 1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique = set()\n    for num in arr:\n        if num in unique:\n            return num\n        else:\n            unique.add(num)\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Traverse the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            \n    # Traverse the dictionary and return the key (i.e., the element) that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            return num\n            \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    # Find the first duplicate element\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    \n    # If no duplicate element found, return -1\n    return -1"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize variables\n    max_product = float('-inf')\n    pair_product = float('-inf')\n\n    # Loop through each pair of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the two tuples\n            pair_product = abs(list1[i][0] * list1[j][1])\n\n            # Update the maximum absolute product if the new product is greater\n            if pair_product > max_product:\n                max_product = pair_product\n\n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    max_sum = float('-inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product > max_product:\n                max_product = product\n                max_sum = list1[i][0] + list1[j][1]\n\n    return max_product, max_sum"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    max_product_pair = (-float('inf'), -float('inf'))\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][1])\n                max_product_pair = (list1[i], list1[j])\n    return max_product_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize variables\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n\n    # Iterate through each tuple in the list\n    for pair in list1:\n        # Find the absolute difference between the first and second elements of the tuple\n        diff = abs(pair[0] - pair[1])\n\n        # If the current difference is greater than the current maximum difference, update the maximum product and pair\n        if diff > max_product:\n            max_product = diff\n            max_pair = pair\n\n    # Return the maximum product and pair\n    return max_product, max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples and returns the maximum absolute product between numbers in pairs of tuples within the list.\n    \"\"\"\n    max_abs_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            abs_product = abs(list1[i][1] * list1[j][1])\n            if abs_product > max_abs_product:\n                max_abs_product = abs_product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = float('-inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            diff = max(list1[i][0], list1[j][0]) - min(list1[i][1], list1[j][1])\n            max_product = max(max_product, abs(diff))\n\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_of_amicable_numbers(n):\n        return sum(i for i in range(1, n+1) if i!= n and is_amicable(i, n))\n\n    def is_amicable(a, b):\n        return sum_of_amicable_numbers(a) + sum_of_amicable_numbers(b) == a + b\n\n    total_sum = sum(i for i in range(1, limit+1) if is_amicable(i, i))\n    return total_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for num in range(1, limit + 1):\n        if num in amicable_numbers(num):\n            sum_amicable += num\n    return sum_amicable\n\n\ndef amicable_numbers(num):\n    '''\n    Write a function to generate all the amicable numbers of a specified number.\n    '''\n    amicable = []\n    for i in range(1, num):\n        if num % i == 0 and num / i == int(num / i):\n            amicable.append(i)\n            amicable.append(num // i)\n    return amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize a set to store all the prime numbers up to the limit\n    primes = set(range(2, limit+1))\n    \n    # Iterate through all the prime numbers\n    for prime in primes:\n        # Check if the prime is also an amicable number\n        if prime!= 1:\n            # Compute the sum of the two numbers\n            amicable_sum = prime + (limit // prime)\n            \n            # Check if the sum is in the set of primes\n            if amicable_sum in primes:\n                # Add the sum to the result\n                result += amicable_sum\n    \n    return result"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_amicable(num):\n    # check if the number is a prime number\n    if num == 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef amicable_numbers_sum(limit):\n    # initialize the sum of amicable numbers to 0\n    sum_amicable = 0\n    # iterate through the numbers from 1 to the specified limit\n    for num in range(1, limit + 1):\n        # check if the number is amicable and add its sum to the sum of amicable numbers if it is\n        if is_amicable(num) and num!= 1:\n            sum_amicable += num + 1\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # A list to store the amicable numbers and their sum\n    amicable_numbers = []\n    \n    # Iterate through the numbers from 1 to the limit\n    for i in range(1, limit+1):\n        \n        # Check if the number is amicable\n        if i == sum([x for x in range(1, limit+1) if i % x == 0]):\n            amicable_numbers.append((i, i - sum([x for x in range(1, limit+1) if i % x == 0])))\n    \n    # Sum all the amicable numbers\n    amicable_sum = sum(x for x in amicable_numbers)\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables to store amicable numbers and their sum\n    amicable_numbers = []\n    amicable_sum = 0\n    \n    # Loop through numbers from 1 to the specified limit\n    for i in range(1, limit + 1):\n        # Check if the number is a sum of two amicable numbers\n        if i in amicable_numbers:\n            amicable_numbers.append(i)\n            amicable_sum += i\n        # Check if the number is the sum of two different amicable numbers\n        for j in range(i+1, limit + 1):\n            if i!= j and j in amicable_numbers:\n                amicable_numbers.append(i)\n                amicable_numbers.append(j)\n                amicable_sum += i + j\n                \n    # Return the sum of all amicable numbers\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    # create a list of all numbers from 1 to the limit\n    numbers = list(range(1, limit + 1))\n\n    # initialize variables for the sum of amicable numbers and the count of them\n    sum_amicable = 0\n    count_amicable = 0\n\n    # loop through the numbers\n    for num in numbers:\n        # check if the number is amicable\n        if num in numbers and (num!= 1 or limit!= 2):\n            # check if the number is a proper divisor of the limit\n            divisors = [1] + [x for x in range(2, int(limit**0.5) + 1) if num % x == 0]\n            if limit % num in divisors:\n                # if the number is amicable, add it to the sum and increment the count\n                sum_amicable += num\n                count_amicable += 1\n\n    # return the sum of amicable numbers\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize variables\n    sum_amicable = 0\n    num = 2\n    # Loop through numbers from 2 to limit\n    while num < limit:\n        # Check if the number is amicable\n        if is_amicable(num):\n            sum_amicable += num\n        num += 1\n    return sum_amicable\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    # Calculate the sum of the proper divisors\n    sum_of_proper_divisors = sum(set(range(1, int(num**0.5) + 1)) & set(range(1, num // 2 + 1)))\n    # Check if the sum of the proper divisors is equal to the original number\n    return sum_of_proper_divisors == num"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sieve_of_eratosthenes(limit):\n    '''\n    Helper function to generate a list of prime numbers up to a specified limit.\n    '''\n    primes = [True] * (limit + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(limit**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, limit + 1, i):\n                primes[j] = False\n    return [i for i in range(limit + 1) if primes[i]]\n\ndef sum_amicable_numbers(limit):\n    '''\n    Main function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    primes = sieve_of_eratosthenes(limit)\n    for i in range(2, limit + 1):\n        if is_prime(i) and is_prime(limit - i):\n            if i + limit - i in primes and i!= limit - i:\n                amicable_numbers.append(i + limit - i)\n    return sum(amicable_numbers)\n\nlimit = int(input(\"Enter a limit: \"))\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is\", sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    # list to store amicable numbers\n    amicable = []\n    \n    # loop through all numbers up to the specified limit\n    for num in range(1, limit+1):\n        \n        # check if the number is amicable\n        if num == sum(divisors(num)):\n            amicable.append(num)\n            \n    # return the sum of all amicable numbers\n    return sum(amicable)\n\ndef divisors(num):\n    # create a list of factors for the given number\n    factors = []\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            factors.append(i)\n            factors.append(num//i)\n    return factors"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle_degrees = cmath.phase(a+b*1j)*180/cmath.pi\n    angle_radians = cmath.phase(a+b*1j)*cmath.pi/180\n\n    return angle_degrees, angle_radians"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(complex(a,b))\n    angle_deg = angle_rad * 180 / cmath.pi\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the complex number\n    complex_num = a + b * 1j\n\n    # Calculate the angle in degrees\n    angle_radian = cmath.phase(complex_num)\n    angle_degrees = cmath.degrees(angle_radian)\n\n    # Return the angle in degrees\n    return angle_degrees"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(a + b*1j)\n    angle_deg = angle_rad * 180 / cmath.pi\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return round(angle,3)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + bj)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = cmath.rect(angle)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    angle = cmath.phase(complex(a,b))\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    # Initialize variables to keep track of number of 0s and 1s in current sub-string\n    count_0 = 0\n    count_1 = 0\n    \n    # Initialize variables to keep track of maximum length of sub-strings and their difference\n    max_length = 0\n    max_diff = 0\n    \n    # Loop through each character in the string\n    for i in range(len(string)):\n        \n        # Check if the current character is a 0 or a 1\n        if string[i] == '0':\n            count_0 += 1\n        elif string[i] == '1':\n            count_1 += 1\n        \n        # If the current sub-string has a different number of 0s and 1s, update the maximum length and difference\n        if count_0 > count_1:\n            diff = count_0 - count_1\n            if diff > max_diff:\n                max_length = i - count_1 + 1\n                max_diff = diff\n        \n        # If the current sub-string has the same number of 0s and 1s, update the maximum length\n        elif count_0 == count_1:\n            if i - count_1 + 1 > max_length:\n                max_length = i - count_1 + 1\n    \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    # Initialize variables\n    zeros = 0\n    ones = 0\n    max_diff = 0\n\n    # Loop through the string\n    for char in string:\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n\n        # Find the maximum difference\n        diff = max(zeros - ones, 0)\n        max_diff = max(max_diff, diff)\n\n        # Reset the counters\n        zeros = 0\n        ones = 0\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    start = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n            if count_1 > count_0:\n                max_diff = max(max_diff, count_1 - count_0)\n        if i - start > 1 and string[i - 1] == string[i]:\n            count_0 = 0\n            count_1 = 0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if i == 0 or string[i]!= string[i-1]:\n            diff = abs(count_0 - count_1)\n            max_diff = max(max_diff, diff)\n            count_0 = count_1 = 0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_zero = 0\n    count_one = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        \n        diff = count_zero - count_one\n        max_diff = max(diff, max_diff)\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    \n    # Iterate through all possible sub-strings\n    for i in range(n):\n        for j in range(i, n):\n            # Count the number of 0s and 1s in the sub-string\n            count_0 = 0\n            count_1 = 0\n            for k in range(i, j+1):\n                if string[k] == '0':\n                    count_0 += 1\n                else:\n                    count_1 += 1\n            \n            # Calculate the maximum difference between the number of 0s and 1s\n            diff = abs(count_0 - count_1)\n            max_diff = max(max_diff, diff)\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables\n    max_diff = 0\n    count_0s = 0\n    count_1s = 0\n\n    # Iterate through the string\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n\n        # Calculate the maximum difference\n        diff = abs(count_0s - count_1s)\n        max_diff = max(max_diff, diff)\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = 0\n            for k in range(j):\n                if string[k] == '0':\n                    diff += 1\n                else:\n                    diff -= 1\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = string[j] - string[i]\n            if diff > 0:\n                max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n        # If the character is a 1, increment the count of 1s\n        else:\n            count_1 += 1\n        \n        # Calculate the difference between the number of 0s and 1s\n        diff = abs(count_0 - count_1)\n        \n        # Update the maximum difference if the current difference is greater than the current maximum\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        Write a function to find the greatest common divisor (GCD) of two numbers.\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def sum_common_divisors(a, b):\n        \"\"\"\n        Write a function to find the sum of common divisors of two given numbers.\n        \"\"\"\n        return sum(set(range(1, max(a, b) + 1)) & set(range(1, min(a, b) + 1)))\n\n    return sum_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n\n    # initializing variables to store divisors and their corresponding sum\n    divisors = {}\n\n    # looping through all numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # checking if the number is a divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            # adding the divisor and its sum to the dictionary\n            divisors[i] = a // i + b // i\n\n    # returning the sum of common divisors\n    return sum(divisors.values())"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    i = 1\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n        i += 1\n    return divisors\n\n\ndef sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_a = common_divisors(a, b)\n    divisors_b = common_divisors(b, a)\n    return sum(divisors_a) + sum(divisors_b)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a Python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    common_divisors = set()\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisor_set = set()\n    divisor_list = []\n\n    # Find all the divisors of the first number\n    for i in range(1, a+1):\n        if a % i == 0:\n            divisor_set.add(i)\n\n    # Find all the divisors of the second number\n    for j in range(1, b+1):\n        if b % j == 0:\n            divisor_set.add(j)\n\n    # Find common divisors and sum them up\n    common_divisors = list(divisor_set)\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes two numbers as inputs and finds the sum of their common divisors.\n    '''\n    # List of common divisors of a and b\n    common_divisors = [x for x in range(1, b+1) if b % x == 0 and a % x == 0]\n    # Sum of common divisors\n    sum_cd = sum(common_divisors)\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    # Finding the GCD of two numbers using Euclidean algorithm\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    # Function to check if a number is a common divisor of a and b\n    def is_common_divisor(a, b):\n        return gcd(a, b) == 1\n    \n    # Finding the common divisors of a and b using the function is_common_divisor\n    def common_divisors(a, b):\n        divisors = []\n        for num in range(1, a+1):\n            if is_common_divisor(num, a) and is_common_divisor(num, b):\n                divisors.append(num)\n        return divisors\n    \n    # Finding the sum of common divisors of a and b using the function common_divisors\n    result = sum(common_divisors(a, b))\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Get the list of common divisors of a and b\n    divisors = list(set(a).intersection(set(b)))\n\n    # If there are no common divisors, return 0\n    if not divisors:\n        return 0\n\n    # Calculate the sum of the common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Function to find common divisors of two numbers\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    # Finding the GCD of the two numbers\n    gcd_value = gcd(a, b)\n\n    # Finding the sum of common divisors\n    sum_common_divisors = 0\n    for i in range(1, gcd_value+1):\n        if a % i == 0 and b % i == 0:\n            sum_common_divisors += i\n\n    return sum_common_divisors"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y!= 0:\n        if y % 2 == 1:\n            product += x\n        x <<= 1\n        y >>= 1\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    '''\n    Find words in a list that are longer than n characters.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    # split the string into words\n    words = str.split()\n\n    # initialize an empty list to store the long words\n    long_list = []\n\n    # loop through each word in the list\n    for word in words:\n        # check if the length of the word is greater than n\n        if len(word) > n:\n            # add the word to the long_list\n            long_list.append(word)\n\n    # return the long_list of words\n    return long_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # Initialize an empty list to store the long words\n    long_words_list = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the current word is greater than n\n        if len(word) > n:\n            # Append the long word to the list\n            long_words_list.append(word)\n\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert the string into a list of words\n    words = str.split()\n\n    # Initialize an empty list to store the long words\n    long_words_list = []\n\n    # Iterate through each word in the list\n    for word in words:\n        # Check if the word is longer than n characters\n        if len(word) > n:\n            # If it is, add it to the long_words_list\n            long_words_list.append(word)\n\n    # Return the long_words_list\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int):\n                return False\n\n    # Check for symmetry\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n\n    # Check if the matrix is a magic square\n    magic_sum = sum(sum(row) for row in my_matrix)\n    if magic_sum == 0:\n        return True\n    elif magic_sum == 15:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is a magic square\n    square = [[0 for j in range(len(my_matrix))] for i in range(len(my_matrix))]\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            square[i][j] = my_matrix[i][j]\n\n    for i in range(len(square)):\n        if not all(square[i][j] == square[j][i] for j in range(len(square))):\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n\n    # Check if the matrix is a square\n    if size!= size:\n        return False\n\n    # Initialize the sum of the matrix\n    sum_matrix = 0\n\n    # Iterate over the matrix\n    for i in range(size):\n        for j in range(size):\n            # Check if the element is a number\n            if not isinstance(my_matrix[i][j], int):\n                return False\n\n            # Add the element to the sum\n            sum_matrix += my_matrix[i][j]\n\n            # Check if the element is already present in any row\n            for k in range(size):\n                if my_matrix[i][j] == my_matrix[k][j]:\n                    return False\n\n            # Check if the element is already present in any column\n            for k in range(size):\n                if my_matrix[i][j] == my_matrix[i][k]:\n                    return False\n\n    # Check if the sum of the matrix is a magic square\n    for i in range(1, size*size):\n        if (i + size * size) % size == 0:\n            if sum_matrix % i == 0:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Initialize the sum of each row and column\n    row_sums = [0] * len(my_matrix)\n    col_sums = [0] * len(my_matrix[0])\n\n    # Calculate the sum of each row and column\n    for row in my_matrix:\n        for num in row:\n            row_sums[row.index(num)] += num\n            col_sums[my_matrix.index(row)].append(num)\n\n    # Check if the sum of each row and column is equal to the sum of the matrix\n    if sum(row_sums)!= sum(my_matrix) or sum(col_sums)!= sum(my_matrix[0]):\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if i!= j and my_matrix[i][j] == my_matrix[i][my_matrix[i].index(min(my_matrix[i]))] and my_matrix[i][j] == my_matrix[my_matrix.index(i)][j] and my_matrix[i][j] == my_matrix[my_matrix.index(i)][my_matrix[0].index(min(my_matrix[i]))]:\n                continue\n            else:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n\n    # Find the sum of the elements in the matrix\n    total_sum = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum of the rows is equal to the sum of the columns\n    if sum(my_matrix[i] for i in range(len(my_matrix))) == total_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Get the dimensions of the matrix\n    n = len(my_matrix)\n\n    # Check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return \"The matrix is not a square.\"\n\n    # Check if all elements in the matrix are unique\n    unique = set()\n    for row in my_matrix:\n        for element in row:\n            if element in unique:\n                return \"The matrix contains duplicate elements.\"\n            unique.add(element)\n\n    # Check if the matrix is a magic square\n    magic_sum = 0\n    for i in range(n):\n        magic_sum += my_matrix[i][i]\n    for i in range(n):\n        magic_sum += my_matrix[i][n-i-1]\n    for i in range(n):\n        magic_sum += my_matrix[n-i-1][i]\n    for i in range(n):\n        magic_sum += my_matrix[n-i-1][n-i-1]\n    if magic_sum == n**2:\n        return \"The matrix is a magic square.\"\n    else:\n        return \"The matrix is not a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    \n    # Check if the sum of the matrix elements is equal to the diagonal sum\n    matrix_sum = sum([sum(row) for row in my_matrix])\n    \n    if matrix_sum == diagonal_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # check if the matrix contains only positive integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int) or num <= 0:\n                return False\n\n    # check if the sum of each row is equal to the sum of the first column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sum = sum(my_matrix[0])\n    if row_sums!= [col_sum] * len(my_matrix):\n        return False\n\n    # check if the sum of each column is equal to the sum of the first row\n    col_sums = [sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))]\n    if col_sums!= [col_sum] * len(my_matrix[0]):\n        return False\n\n    # check if the sum of each diagonal is equal to the sum of the matrix\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if diagonal_sum!= col_sum + row_sums[0]:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in range(n):\n        # Check rows for duplicates\n        for j in range(n):\n            if my_matrix[i][j]!= j + 1:\n                return False\n        # Check columns for duplicates\n        for j in range(n):\n            if my_matrix[j][i]!= j + 1:\n                return False\n    # Check main diagonal for duplicates\n    for j in range(n):\n        if my_matrix[j][j]!= j + 1:\n            return False\n    # Check secondary diagonal for duplicates\n    for j in range(n):\n        if my_matrix[j][n-j-1]!= j + 1:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    # Check if the matrix is a square\n    if rows!= cols:\n        return False\n    \n    # Check if the sum of each row is the same\n    row_sums = [sum(row) for row in my_matrix]\n    if len(set(row_sums)) > 1:\n        return False\n    \n    # Check if the sum of each column is the same\n    col_sums = [sum(row[i] for row in my_matrix) for i in range(cols)]\n    if len(set(col_sums)) > 1:\n        return False\n    \n    # Check if the sum of the diagonals is the same\n    diag_sum_1 = sum(row[i] for i in range(rows))\n    diag_sum_2 = sum(row[i] for i in range(rows-1, -1, -1))\n    if diag_sum_1!= diag_sum_2:\n        return False\n    \n    # Check if the sum of the other diagonals is the same\n    other_diag_sum_1 = sum(row[i] for i in range(rows-1, -1, -1))\n    other_diag_sum_2 = sum(row[i] for i in range(rows))\n    if other_diag_sum_1!= other_diag_sum_2:\n        return False\n    \n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency_dict = defaultdict(int)\n    \n    for num in nums:\n        frequency_dict[num] += 1\n        \n    max_num = None\n    max_frequency = 0\n    \n    for num, frequency in frequency_dict.items():\n        if frequency > max_frequency:\n            max_num = num\n            max_frequency = frequency\n            \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for num in nums:\n        if freq_dict[num] == max_freq:\n            max_item = num\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_num = None\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to count the occurrences of each item in the list\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n\n    # Find the maximum count\n    max_count = max(counts.values())\n\n    # Find the item with the maximum count\n    max_item = None\n    for num in counts:\n        if counts[num] == max_count:\n            max_item = num\n\n    # Return the maximum item with its count\n    return (max_item, max_count)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a defaultdict to store frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Count the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, count in freq.items():\n        if count > max_freq:\n            max_item = item\n            max_freq = count\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    \n    # Iterate through the list and update the frequency dictionary\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # Find the item with the maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    result = \"\"\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_indices.append(i)\n    vowel_indices.reverse()\n    new_str = \"\"\n    for i in vowel_indices:\n        new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = reversed_str + char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n        else:\n            new_str = new_str + char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"AEIOUaeiou\"\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result = char + result\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(string):\n    '''\n    This function takes a string as an input and returns the reversed string with only the vowels.\n    '''\n    vowels = \"aeiouAEIOU\"\n    reversed_string = \"\"\n    for char in string:\n        if char in vowels:\n            reversed_string = char + reversed_string\n        else:\n            reversed_string += char\n    return reversed_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n        else:\n            new_str = new_str + char\n    return new_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ''\n    for item in tup1:\n        str_tup += str(item)\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i) + \", \"\n    return str1[:-2]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    str1 = str(tup1)\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the number of hexagons in each row\n    rows = 4\n    # Initialize the hexagonal number counter\n    hex_count = 1\n    # Initialize the row counter\n    row_count = 1\n\n    # Calculate the number of hexagons in the nth row\n    hexagons_in_row = rows - 1\n\n    # Iterate until the nth hexagonal number is found\n    while hex_count <= n:\n        # Check if the current row has more hexagons than the current hexagon count\n        if hexagons_in_row >= hex_count:\n            # Increment the hexagon count by 2\n            hex_count += 2\n            # Move to the next row\n            row_count += 1\n            # Calculate the number of hexagons in the next row\n            hexagons_in_row = row_count + 1\n        else:\n            # Otherwise, move to the next hexagon in the current row\n            hex_count += 1\n\n    # Return the nth hexagonal number\n    return hex_count - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return None\n    \n    # Initialize variables for first two hexagonal numbers\n    prev_num = 0\n    current_num = 1\n    \n    # Loop through n-1 hexagonal numbers\n    for i in range(1, n):\n        # Calculate the nth hexagonal number\n        nth_num = (2*prev_num + current_num) % 10**6\n        \n        # Update variables for next iteration\n        prev_num = current_num\n        current_num = nth_num\n        \n    # Return the nth hexagonal number\n    return nth_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((n*(3*n-1))//2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Calculate the number of squares\n    squares = (n - 1) // 2\n    # Calculate the number of diagonals\n    diagonals = 3 * (n - 1)\n    # Calculate the number of rows\n    rows = squares + diagonals\n    # Calculate the number of columns\n    columns = 2 * squares + 1\n    # Calculate the number of hexagons\n    hexagons = rows * columns\n    # Calculate the number of digits\n    digits = hexagons // 1000\n    # Calculate the remainder\n    remainder = hexagons % 1000\n    \n    # Calculate the nth hexagonal number\n    hexagonal_num = (n - 1) * 1000 + remainder + 1\n    \n    return hexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the starting and ending points of the hexagonal grid\n    start = 1\n    end = 60\n    \n    # Calculate the nth hexagonal number\n    nth_hexagonal = start + (n - 1) * (end - start)\n    \n    # Return the nth hexagonal number\n    return nth_hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_nums = []\n    for i in range(1, n+1):\n        hex_nums.append(2*i-1)\n    return hex_nums[n-1]"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initialize variables\n    a, b = 1, 1\n    # find the nth hexagonal number\n    for i in range(n):\n        print(a, end=' ')\n        # calculate the next hexagonal number\n        a, b = b + a + b, a + b"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 24\n    elif n == 4:\n        return 96\n    else:\n        return (n * (2 * n - 1)) // 2 + 6"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = array('i', [0]*len(nums))\n    ones = array('i', [0]*len(nums))\n    \n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num)] += 1\n        else:\n            ones[ones.index(num)] += 1\n    \n    non_zeros_count = len(nums) - sum(sum(zeros), sum(ones))\n    zero_count_ratio = float(sum(zeros))/non_zeros_count\n    \n    return zero_count_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    count = 0\n\n    for num in nums:\n        if num == 0:\n            zeros[count] += 1\n        else:\n            count += 1\n\n    non_zeros = len(nums) - sum(zeros)\n    ratio = non_zeros / len(nums) if non_zeros!= 0 else 0\n\n    return round(ratio, 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n            zeros[count] += 1\n    non_zeros = zeros.count(0)\n    ratio = non_zeros / len(nums)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums)) # create an integer array of zeros to store the count of zeroes\n\n    for num in nums:\n        if num == 0:\n            zero_count[zero_count.index(num)+1] += 1 # increment the count of non-zeroes after the index of the current zero\n\n    non_zero_count = len(nums) - sum(zero_count) # calculate the count of non-zeroes in the original array\n    zero_ratio = zero_count[0]/non_zero_count # calculate the ratio of zeroes to non-zeroes\n\n    return zero_ratio # return the ratio of zeroes to non-zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n    return count[0] / count[1]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = sum(nums == 0)\n    non_zeros = len(nums) - zeros\n    ratio = non_zeros / zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def zero_count(nums):\n    # Create a zero-count array\n    zero_count_array = array('i', [0] * len(nums))\n    \n    # Loop through each element in the array\n    for num in nums:\n        # If the element is zero, increment the corresponding index in the array\n        if num == 0:\n            zero_count_array[nums.index(num)] += 1\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count_array[1] / zero_count_array[0]\n    \n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    ratio = count_zero / count_non_zero\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Use array to store non-zero elements\n    non_zero_arr = array('i', [num for num in nums if num!= 0])\n    # Count the number of non-zero elements\n    non_zero_count = len(non_zero_arr)\n    # Count the number of zero elements\n    zero_count = len(nums) - non_zero_count\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_non_zero_ratio = zero_count / non_zero_count\n    # Return the ratio\n    return zero_non_zero_ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Find the number of bits required to represent n\n    bits = 0\n    while n > 0:\n        n = n >> 1\n        bits += 1\n\n    # Check if the sum of non-zero powers of 2 can represent n\n    for i in range(1, bits+1):\n        if (1 << (bits-i)) <= n:\n            if n - (1 << (bits-i)) in range(1, 1 << i):\n                return False\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    count = 0\n    while n!= 0:\n        if n & 1 == 1:\n            if count == 0:\n                return False\n            else:\n                return True\n        count += 1\n        n >>= 1\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    # check if n is a power of 2\n    if n & (n-1) == 0:\n        return True\n\n    # check if n can be represented as sum of non-zero powers of 2\n    elif n == 0:\n        return False\n    elif n % 2 == 1:\n        return False\n\n    # check if n can be represented as sum of powers of 2\n    else:\n        count = 0\n        while n > 0:\n            if n % 2 == 0:\n                count += 1\n                n = n // 2\n            else:\n                n = n // 2\n        if count == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def count_set_bits(num):\n        count = 0\n        while num:\n            if num & 1:\n                count += 1\n            num >>= 1\n        return count\n    \n    def get_power_of_2(num, power):\n        res = 1\n        while power > 0:\n            if power & 1:\n                res *= num\n            num *= num\n            power >>= 1\n        return res\n    \n    def sum_of_powers_of_2(n):\n        total = 0\n        while n:\n            if n & 1:\n                total += get_power_of_2(2, count_set_bits(n))\n            n >>= 1\n        return total\n    \n    if sum_of_powers_of_2(n) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    \n    if n == 1:\n        return False\n    \n    if n % 2 == 0:\n        return False\n    \n    while n >= 2:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    \n    return n == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    def is_power_of_two(n):\n        return (n & (n-1)) == 0\n\n    def count_set_bits(n):\n        count = 0\n        while n:\n            n &= (n-1)\n            count += 1\n        return count\n\n    def is_sum_of_powers_of_two(n, target_count):\n        target = (1 << target_count) - 1\n        while n >= target:\n            count = count_set_bits(n)\n            if count == target_count:\n                return True\n            n -= target\n        return False\n\n    max_count = 0\n    for i in range(1, n+1):\n        count = count_set_bits(i)\n        if is_power_of_two(i) and is_sum_of_powers_of_two(i, count):\n            max_count = max(max_count, count)\n\n    return max_count == 0"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if n is zero\n    if n == 0: \n        return True\n\n    # Check if n is even or odd\n    if n % 2 == 0: \n        return is_Sum_Of_Powers_Of_Two(n//2)\n    else: \n        # Check if there exists any odd number less than or equal to sqrt(n) that is also a power of 2\n        sqrt_n = int(n**0.5)\n        for i in range(3, sqrt_n+1, 2): \n            if n % i == 0: \n                return True\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # Initialize the sum and the variable to keep track of whether the number is divisible by 2\n    sum = 0\n    flag = True\n    \n    # Loop until the sum becomes greater than n/2\n    while sum <= n//2:\n        # Check if the number is divisible by 2 raised to the power of the sum\n        if n == 2**sum:\n            return True\n        elif n % 2**sum == 0:\n            return False\n        else:\n            # Increment the sum and set the flag to True to continue looping\n            sum += 1\n            flag = True\n    \n    # If the loop is exited, it means the number is not divisible by 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n    Function to check whether the given number can be represented as sum of non-zero powers of 2 or not. \n\n    Input: \n    n - An integer value representing the number to be checked.\n\n    Output: \n    True if the number can be represented as sum of non-zero powers of 2, otherwise False. \n\n    Time Complexity: O(log n) \n    Space Complexity: O(1)\n    '''\n\n    # Check if the given number is 0 \n    if n == 0: \n        return True\n\n    # Check if the given number is 1 \n    if n == 1: \n        return False\n\n    # Initialize a counter variable to keep track of the number of non-zero powers of 2 \n    count = 0\n\n    # Initialize a flag variable to check whether the given number can be represented as sum of powers of 2 or not \n    flag = False\n\n    # Loop through all possible powers of 2 \n    for i in range(2, int(n ** 0.5) + 1): \n        # Check if the given number can be represented as sum of powers of 2 \n        if n % i == 0: \n            # Increment the counter variable \n            count += 1\n            # Check if the given number can be represented as sum of powers of 2 more \n            if n / i == 2 ** count: \n                flag = True\n                break\n\n    # Return True if the given number can be represented as sum of non-zero powers of 2, otherwise False \n    return flag"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    \n    # check if the number can be written as sum of powers of 2\n    power_of_two = 2\n    while power_of_two * power_of_two <= n:\n        if n % power_of_two == 0:\n            return False\n        power_of_two += 1\n        \n    return True"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265358979323846264338327950288\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*math.pi*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # pi is the mathematical constant pi\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # calculate the circumference of the circle using the formula:\n    # circumference = 2 * pi * radius\n    pi = 3.14159  # use the value of pi\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty set to store the flattened numbers\n    flattened = set()\n    \n    # Iterate through each sublist in the list\n    for sublist in test_list:\n        # Iterate through each element in the sublist\n        for element in sublist:\n            # If the element is a number, add it to the flattened set\n            if isinstance(element, (int, float)):\n                flattened.add(element)\n    \n    return list(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty set to store the unique numbers\n    unique_nums = set()\n    # Loop through each list in the input list of lists\n    for sublist in test_list:\n        # Loop through each number in the current sublist\n        for num in sublist:\n            # Add the number to the set of unique numbers\n            unique_nums.add(num)\n    # Convert the set of unique numbers to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty set to hold the flattened numbers\n    flattened = set()\n    # Loop through each sublist in the list\n    for sublist in test_list:\n        # Loop through each number in the sublist and add it to the set\n        for num in sublist:\n            flattened.add(num)\n    # Return the set of flattened numbers\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    def pancake_sort_helper(nums, start, end):\n        if start >= end:\n            return nums\n\n        # find the maximum element in the sublist\n        max_index = start\n        for i in range(start, end):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # swap the maximum element with the first element of the sublist\n        nums[start], nums[max_index] = nums[max_index], nums[start]\n\n        # recursively sort the sublist excluding the first element\n        pancake_sort_helper(nums, start + 1, end)\n\n    # sort the list using the helper function\n    pancake_sort_helper(nums, 0, len(nums) - 1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Create a copy of the original list\n    sorted_nums = nums[:]\n\n    # Initialize variables to keep track of the largest and smallest elements\n    max_idx = 0\n    min_idx = len(sorted_nums) - 1\n\n    while min_idx!= max_idx:\n        # Find the largest element and its index\n        max_val = sorted_nums[max_idx]\n        max_idx = max_idx - 1\n\n        # Find the smallest element and its index\n        min_val = sorted_nums[min_idx]\n        min_idx = min_idx + 1\n\n        # Swap the largest and smallest elements\n        sorted_nums[max_idx] = min_val\n        sorted_nums[min_idx] = max_val\n\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def heap_sort(arr):\n        n = len(arr)\n\n        for i in range(n // 2 - 1, -1, -1):\n            heapify(arr, n, i)\n\n        for i in range(n - 1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n\n    heap_sort(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    This function sorts a list of elements using the pancake sort algorithm.\n    '''\n\n    # start with the largest element\n    for i in range(len(nums)-1, 0, -1):\n\n        # find the next element with the largest value\n        max_idx = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # swap the largest element with the current element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n        # print the sorted list\n        print(nums)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    n = len(nums)\n    for i in range(n):\n        max_idx = i\n        for j in range(i, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        if max_idx!= i:\n            swap(nums, i, max_idx)\n\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Initialize a variable to keep track of the maximum index\n    max_index = 0\n    \n    # Loop through the list of numbers\n    for i in range(len(nums)):\n        # Find the index of the maximum element\n        if nums[i] < nums[max_index]:\n            max_index = i\n        \n        # Bubble the elements up until the maximum index is reached\n        for j in range(i, max_index, -1):\n            # Swap the elements at the current and maximum indices\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n    \n    # Return the sorted list of numbers\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the last element of the unsorted part\n        nums[max_index], nums[i] = nums[i], nums[max_index]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and arr[l] > arr[largest]:\n            largest = l\n        if r < n and arr[r] > arr[largest]:\n            largest = r\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(nums)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(nums, n, i)\n\n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, i, 0)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    # Calculate the maximum element in the list\n    max_val = max(nums)\n\n    # Create a list of numbers from 1 to max_val\n    ascending_nums = [i for i in range(1, max_val + 1)]\n\n    # Sort the ascending_nums list using pancake sort\n    pancake_sort_helper(ascending_nums, nums, 0, len(ascending_nums) - 1)\n\n    # Copy the sorted ascending_nums list back into the original nums list\n    for i in range(len(nums)):\n        nums[i] = ascending_nums[i]\n\n\ndef pancake_sort_helper(ascending_nums, nums, start, end):\n    if start >= end:\n        return\n\n    # Find the maximum element in the ascending_nums list that is smaller than or equal to nums[end]\n    max_index = start\n    for i in range(start, end + 1):\n        if ascending_nums[i] <= nums[end]:\n            max_index = i\n\n    # Swap the elements at nums[end] and ascending_nums[max_index]\n    nums[end], ascending_nums[max_index] = ascending_nums[max_index], nums[end]\n\n    # Recursively sort the sublists on either side of the pivot\n    pancake_sort_helper(ascending_nums, nums, start, max_index - 1)\n    pancake_sort_helper(ascending_nums, nums, max_index + 1, end)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Helper function to swap two elements in the list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Helper function to reverse a sublist of the list\n    def reverse(nums, start, end):\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n\n    # Helper function to reverse a list in-place\n    def reverse_in_place(nums, start, end):\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n        reverse_in_place(nums, start, end)\n\n    # Helper function to check if a sublist is sorted\n    def is_sorted(nums, start, end):\n        for i in range(start, end):\n            if nums[i] > nums[i+1]:\n                return False\n        return True\n\n    # Sort the list using the pancake sort algorithm\n    n = len(nums)\n    start = 0\n    end = n-1\n\n    while start < end:\n        # Reverse the sublist [start, end]\n        reverse(nums, start, end)\n\n        # Check if the sublist is sorted\n        if is_sorted(nums, start, end):\n            start += 1\n        else:\n            end -= 1\n\n        # Reverse the sublist [start, end] again\n        reverse_in_place(nums, start, end)"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function counts the number of items in list1 that are identical in the same position of list2 and list3.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): List of integers.\n        list2 (list): List of integers.\n        list3 (list): List of integers.\n\n    Returns:\n        int: Number of items that are identical in the same position of three given lists.\n\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the number of items that are identical in the same position.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list1[i] == list3[i+j]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for item in Input: \n        if isinstance(item, list): \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for item in Input: \n        if type(item) == list: \n            count += 1 \n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    # Initialize a variable to store the maximum absolute difference\n    max_diff = float('-inf')\n\n    # Loop through the array and find the maximum absolute difference between any two elements\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize max_diff with the first element of the array\n    max_diff = abs(arr[0] - arr[1])\n\n    # Loop over the remaining elements of the array\n    for i in range(2, len(arr)):\n        # Calculate the absolute difference between the current element and the next one\n        diff = abs(arr[i] - arr[i+1])\n\n        # Update max_diff if the current absolute difference is greater than it\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return \"Error: Array must have at least two elements\"\n    \n    # Initialize variables\n    max_diff = 0\n    temp_diff = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            temp_diff = abs(arr[i] - arr[j])\n            \n            # Update the maximum difference if needed\n            if temp_diff > max_diff:\n                max_diff = temp_diff\n    \n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x0 = 0\n    y0 = 0\n    x1 = 1\n    y1 = 0\n    x2 = 1\n    y2 = 1\n    while x1 < n:\n        x0 = x1\n        y0 = y1\n        x1 = x1 + x2\n        y1 = y1 + y2\n        x2 = x2 + x0\n        y2 = y2 + y0\n    if x1 == n:\n        return (x1, y1)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # If a is zero, there is only one solution x, with y = -n/a\n    if a == 0:\n        return (n, -n//a)\n\n    # If b is zero, there is only one solution y, with x = -n/b\n    if b == 0:\n        return (-n//b, n)\n\n    # Find the discriminant\n    discriminant = b**2 - 4*a*n\n\n    # If the discriminant is negative, there are no real roots\n    if discriminant < 0:\n        return None\n\n    # If the discriminant is zero, there is only one root x\n    if discriminant == 0:\n        return (-b//(2*a), -b//(2*a))\n\n    # The discriminant is positive, so there are two distinct roots\n    x1 = (-b + discriminant**0.5) // (2*a)\n    x2 = (-b - discriminant**0.5) // (2*a)\n    y1 = a*x1 + n\n    y2 = a*x2 + n\n    return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the equation is solvable using the quadratic formula\n    d = b**2 - 4*a*n\n    if d < 0:\n        return None\n    elif d == 0:\n        x = (-b) / (2*a)\n        return (x, x)\n    else:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    x = 0\n    y = 0\n    i = 0\n\n    while i < n:\n        x += i\n        y += i\n        if x * a + y * b == n:\n            return (x, y)\n        i += 1\n\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    d = b * b - 4 * a * n\n    if d < 0:\n        return None\n    x1 = (-b + d ** 0.5) / (2 * a)\n    x2 = (-b - d ** 0.5) / (2 * a)\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if there exists a solution\n    for x in range(max(a, -b), min(a, b) + 1):\n        y = (n - a * x) // b\n        if y >= 0 and y % 2 == 0:\n            return (x, y)\n\n    # No solution exists\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Calculate the discriminant\n    d = b**2 - 4*a*n\n    \n    # Check if the discriminant is positive or negative\n    if d > 0:\n        # Calculate the two roots\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        \n        # Return the roots as a tuple\n        return (x1, x2)\n    elif d == 0:\n        # Calculate the root\n        x = -b / (2*a)\n        \n        # Return the root as a tuple\n        return (x, x)\n    else:\n        # No solution exists\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = -b // (2 * a)\n    x2 = n // (2 * b)\n    if x1 * a + b * x1 == n or x2 * a + b * x2 == n:\n        return (x1, x2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if n can be solved for x and y using a and b\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return None\n    else:\n        # Use the quadratic formula to find the solutions\n        if b == 0:\n            # x = -n/a\n            return (-n/a, None)\n        else:\n            # x = (-b +/- sqrt(b^2 - 4ac))/(2a)\n            # y = (-b - sqrt(b^2 - 4ac))/(2a)\n            discriminant = b**2 - 4*a*n\n            if discriminant >= 0:\n                x1 = (-b + discriminant**0.5)/(2*a)\n                x2 = (-b - discriminant**0.5)/(2*a)\n                return (x1, x2)\n            else:\n                return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Find the number of solutions\n    solutions_count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*a + j*b == n:\n                solutions_count += 1\n    \n    # If there are no solutions, return None\n    if solutions_count == 0:\n        return None\n    \n    # Find all possible solutions\n    solutions = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*a + j*b == n:\n                solutions.append((i, j))\n    \n    # Randomly select one solution\n    x, y = solutions[0]\n    \n    # Return the selected solution as a tuple\n    return (x, y)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the elements of list1 and check if they are present in list2\n    for element in list1:\n        if element in list2:\n            # Remove the element from list1\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n // 2):\n        s += n - 2 * i\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(0, n//2):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    i = 0\n    while i < n // 2:\n        s += (n - 2*i)\n        i += 1\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while i <= n // 2:\n        sum += n - 2 * i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return 0\n    else:\n        return n * (n + 1) // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(n//2, n, -1))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum of the series from i=0 to n // 2, where n is a positive integer.\n    '''\n    if n % 2 == 0:  # if n is even\n        sum_value = 0\n        for i in range(n // 2):\n            sum_value += n - 2 * i\n        return sum_value\n    else:  # if n is odd\n        sum_value = 0\n        for i in range(n // 2):\n            sum_value += n - 2 * i - 2\n        return sum_value"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s*tan(pi/l))**2\n    return area / (4*pi)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s / l) * tan((i * 2 * pi) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (s - (i % 2) * tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area using the formula: A = (s*(s-h))/2\n    h = l/tan(pi/l)\n    A = (s*(s-h))/2\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l * tan(pi/l)) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (l * s * (1 - tan(pi/l))) / 2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += 0.5 * s * tan((i - 1) * pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        area += s * tan((2*i*pi)/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    # calculate the base of the polygon\n    base = (s/2)**2\n    \n    # calculate the area of each triangle using Heron's formula\n    for i in range(l):\n        area += (s/2)*tan(pi/l)\n    \n    # multiply the area of each triangle by the length of the base\n    area *= base\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l * i)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            print(i)\n            if n // i == i: \n                print(n)\n                return True\n\n    return False \n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the divisors of n\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            if n // i!= i:\n                div_list.append(n // i)\n\n    # Calculate the sum of the divisors\n    div_sum = 0\n    for i in div_list:\n        div_sum += i\n\n    # Check if the sum of divisors of n is same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Function to calculate sum of divisors of a given number\n    def sum_of_divisors(num):\n        div_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n\n    # Function to check if the sum of divisors of two numbers are the same\n    def check_sum(num1, num2):\n        if sum_of_divisors(num1) == sum_of_divisors(num2):\n            return True\n        else:\n            return False\n\n    # Check if the sum of divisors of two integers are the same\n    if check_sum(2, 4):\n        print(\"The sum of divisors of 2 and 4 are the same.\")\n    else:\n        print(\"The sum of divisors of 2 and 4 are not the same.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if n // i!= i:\n                div_sum += n // i\n    \n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if n//i == i:\n                return True\n            elif n//i!= i:\n                return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n\n    Args:\n    n (int): An integer\n\n    Returns:\n    bool: True if the sum of the divisors of n and the sum of the divisors of n+1 are equal, False otherwise.\n\n    \"\"\"\n    # Calculate the sum of the divisors of n\n    div_sum_n = sum(map(int, str(n)))\n\n    # Calculate the sum of the divisors of n+1\n    div_sum_nplus1 = sum(map(int, str(n+1)))\n\n    # Check if the divisors are equal\n    return div_sum_n == div_sum_nplus1"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    This function determines if the sum of the divisors of two integers are the same.\n\n    Args:\n    n (int): The integer for which we want to determine if the sum of its divisors is the same.\n\n    Returns:\n    (bool): True if the sum of the divisors of n is the same as the original number, else False.\n    \"\"\"\n    # Calculate the sum of the divisors of n\n    div_sum = sum(range(1, n+1))\n    # Calculate the sum of the first n natural numbers\n    first_n_sum = sum(range(1, n+1))\n    # Check if the sum of the divisors is the same as the original number\n    if div_sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Function to find the divisors of a number\n    def get_divisors(num):\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    # Function to calculate the sum of the divisors\n    def sum_divisors(divs):\n        return sum(divs)\n\n    # Find the divisors of the two numbers\n    div1 = get_divisors(n)\n    div2 = get_divisors(n+1)\n\n    # Check if the sums of the divisors are the same\n    if sum_divisors(div1) == sum_divisors(div2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # find the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    # check if the sum of the divisors of n is the same as n\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Finding all the divisors of n \n    divisors = [] \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors.append(i) \n            if i!= n//i: \n                divisors.append(n//i) \n    # Calculating the sum of divisors \n    divisor_sum = sum(divisors) \n    # Checking if the sum of divisors is same as n \n    if divisor_sum == n: \n        print(f\"{n} has divisors {divisors}.\") \n    else: \n        print(f\"{n} doesn't have divisors.\") "
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is in the English alphabet (case insensitive)\n        if 'a' <= char <= 'z':\n            # If it is, add it to the dictionary with a count of 1\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for i in range(26):\n        char_count[chr(97+i)] = 0\n    for char in str1:\n        if char.lower() in char_count:\n            char_count[char.lower()] += 1\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    count_dict = {}\n    for i in range(26):\n        count_dict[chr(ord('a') + i)] = 0\n    \n    for char in str1.lower():\n        if char in count_dict:\n            count_dict[char] += 1\n            \n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = 0\n    for i in range(len(str1)):\n        if str1.lower()[i] == chr(65+char_count).lower():\n            char_count += 1\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize the dictionary to store the count of each character\n    char_count = {}\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # iterate over the characters of the string\n    for char in str1:\n        # if the character is a letter\n        if char.isalpha():\n            # if the character is already in the dictionary, increment its count by 1\n            if char in char_count:\n                char_count[char] += 1\n            # otherwise, add the character to the dictionary with a count of 1\n            else:\n                char_count[char] = 1\n    # return the dictionary with the counts of each character\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the count of each letter in the alphabet\n    letter_count = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter, increment its count in the dictionary\n        if char.isalpha():\n            letter_count[char] += 1\n            \n    # Return the count of each letter in the alphabet\n    return letter_count\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(ord('a'), ord('z')+1):\n        count += str1.lower().count(chr(i))\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = 0\n    for i in range(26):\n        char = chr(i+65)\n        if str1.lower().find(char.lower())!= -1:\n            char_count += str1.lower().count(char.lower())\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Create an empty dictionary to store the character counts\n    char_counts = {}\n    # Loop through the characters in the string\n    for char in str1:\n        # If the character is a letter, count its position in the English alphabet\n        if char.isalpha():\n            # Convert the character to its position in the alphabet (0-25)\n            position = ord(char) - ord('a')\n            # If the position already exists in the dictionary, increment its value\n            if position in char_counts:\n                char_counts[position] += 1\n            # Otherwise, add the position as a new key in the dictionary with a value of 1\n            else:\n                char_counts[position] = 1\n    # Return the total count of characters that occur at the same position in the string as in the English alphabet\n    return sum(char_counts.values())"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    even_count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] + A[j] % 2 == 0: \n                even_count += 1 \n    return even_count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n\n    Parameters:\n    A: List of integers\n\n    Returns:\n    int: The number of pairs of integers in A that xor to an even number.\n    \"\"\"\n\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n & (n - 1) == 0:\n        return n\n    else:\n        return 2 ** (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0:\n        n = n // 2\n    if n > 1:\n        return 2**n\n    else:\n        return 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Check if n is a power of 2\n    if n & (n - 1) == 0: \n        return n \n\n    # Find the power of 2 that is greater than or equal to n\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Make n a positive integer\n    n = abs(int(n))\n    \n    # Initialize the power of 2 to 1\n    power_of_2 = 1\n    \n    # Loop through all powers of 2 from 2 to n\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    \n    # Return the smallest power of 2 greater than or equal to n\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # The smallest power of 2 greater than or equal to n is n itself.\n    if n == 0:\n        return 1\n    # Otherwise, find the largest power of 2 less than or equal to n.\n    p = n - 1\n    while p & (p + 1) == 0:\n        p >>= 1\n    return p + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # find the binary representation of n\n    binary_repr = bin(n)[2:]\n    \n    # find the position of the rightmost 1 in binary_repr\n    position = len(binary_repr) - binary_repr[::-1].index('1') - 1\n    \n    # shift all 1's to the left by position and return the resulting number\n    return 2 ** position"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n - 1)!= 0:\n        n = n + 1\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n\n    :param n: An integer value to find the next power of 2 for.\n    :return: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Start with n as the current power of 2\n    current_power = n\n    \n    # Loop until we find the next power of 2 greater than or equal to n\n    while current_power < n:\n        # Increase the power of 2 by 1\n        current_power *= 2\n    \n    # Return the final power of 2\n    return current_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n & (n-1) == 0:\n        return 2**log2(n)\n    else:\n        return 2**(log2(n) + 1)\n\ndef log2(n):\n    '''\n    Write a python function to find the base-2 logarithm of n.\n    '''\n    return int(math.log2(n))"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments: a list and a number to be searched for in the list.\n    It returns the count of the number of times the number appears in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two parameters:\n    a: the list of numbers\n    x: the number to search for in the list\n    It returns the count of the number of occurrences of x in the list a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-m]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i < len(list1) and i >= 0:\n            sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_value = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_value += i\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # check if the list is valid\n    if len(list1) <= m or len(list1) <= n or m < 0 or n < 0 or m > len(list1) or n > len(list1):\n        raise ValueError(\"Invalid input: the list must contain at least m elements, and at most n elements, and m and n must be non-negative integers.\")\n\n    # check if the indices are valid\n    if m < 0 or n > len(list1) or m >= n:\n        raise ValueError(\"Invalid input: m must be less than n and greater than or equal to 0, and n must be less than or equal to the length of the list.\")\n\n    # initialize the sum\n    sum_value = 0\n\n    # iterate over the list and add the values to the sum\n    for i in range(m, n + 1):\n        sum_value += list1[i]\n\n    # return the sum\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize the sum variable to 0\n    sum_value = 0\n    \n    # iterate over the range of indices from m to n\n    for i in range(m, n+1):\n        # add the value of the i-th index to the sum variable\n        sum_value += list1[i]\n    \n    # return the final sum value\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        m, n = n, m\n    result = 0\n    for i in range(m, n+1):\n        if i in list1:\n            result += i\n    return result"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_value = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_value += i\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n    "
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i+1:i+3] == 'td':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i+1:i+3] == 'td':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for word in s.split():\n        if word.lower() =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # initialize a boolean variable to keep track of whether all elements are of the same data type\n    is_same_type = True\n\n    # iterate over all elements in the tuple\n    for element in test_tuple:\n        # if any element is not of the same data type, set the boolean variable to False\n        if not isinstance(element, type(test_tuple[0])):\n            is_same_type = False\n            break\n\n    # return the boolean variable indicating whether all elements have the same data type or not\n    return is_same_type"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Check if the length of the tuple is greater than 1\n    if len(test_tuple) > 1:\n        # Initialize a variable to store the data type of the first element of the tuple\n        data_type = type(test_tuple[0])\n        # Loop through the rest of the elements of the tuple\n        for element in test_tuple[1:]:\n            # Check if the data type of the current element is same as the data type of the first element\n            if type(element)!= data_type:\n                # If the data type is not same, return False\n                return False\n    # If the length of the tuple is 1 or 0, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Initialize an empty list to store the data types of each element\n    data_types = []\n\n    # Iterate over each element of the tuple\n    for elem in test_tuple:\n        # Append the data type of each element to the list\n        data_types.append(type(elem).__name__)\n\n    # Check if all data types are the same\n    if len(set(data_types)) == 1:\n        # All data types are the same, return True\n        return True\n    else:\n        # All data types are different, return False\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the tuple has at least one element\n    if len(test_tuple) < 1:\n        return False\n    # Get the first element of the tuple\n    first_element = test_tuple[0]\n    # Check if the first element is of any data type\n    if not isinstance(first_element, type):\n        return False\n    # Check if all other elements are of the same data type\n    for element in test_tuple[1:]:\n        if not isinstance(element, type):\n            return False\n        if not isinstance(element, type(first_element)):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    data_type = type(test_tuple[0])\n\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Convert all elements in the tuple to their data type using the `type()` function\n    data_types = [type(x) for x in test_tuple]\n    # Compare the first element's data type with all the other elements in the tuple\n    for i in range(len(data_types)):\n        if data_types[0]!= data_types[i]:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0]) # find the first element's data type\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False # if any element has a different data type, return False\n    return True # if all elements have the same data type, return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n\n    return count > n / 2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of set bits in the binary representation of n.\n    \"\"\"\n\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer input n and returns the count of the number of set bits in n.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(string):\n    new_string = ''\n    for i in range(len(string)):\n        if i % 2!= 0:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(s):\n    \"\"\"\n    Remove the characters with odd index values from a given string.\n\n    Args:\n        s: a string\n\n    Returns:\n        The string with odd index values removed.\n    \"\"\"\n    return ''.join(s[::2])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with all the characters\n    at odd index positions removed.\n\n    Args:\n        string: A string to process.\n\n    Returns:\n        A new string with all odd index characters removed.\n    \"\"\"\n    # Convert the string to a list of characters\n    characters = list(string)\n\n    # Loop through each character in the list\n    for index, character in enumerate(characters):\n        # If the index is odd, remove it from the list\n        if index % 2!= 0:\n            characters.pop(index)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(characters)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            odd_str += str[i]\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # initialize an empty list to store the odd values of the string\n    odd_values = []\n    # loop through the string using a for loop\n    for i in range(len(str)):\n        # if the index of the string is odd, add the character to the odd_values list\n        if i % 2!= 0:\n            odd_values.append(str[i])\n    # join the characters of the list into a string and return it\n    return ''.join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the new string\n    new_str = \"\"\n    # Loop through each character in the input string\n    for char in str:\n        # Check if the current character has an odd index value\n        if char.isalpha() and ord(char) % 2!= 0:\n            # Add the character to the new string\n            new_str += char\n    # Return the new string with all odd index values removed\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three parameters a, b, and c which are numbers.\n    It returns the minimum of these numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert n to binary\n    n_binary = bin(n)[2:]\n    # Calculate the difference between l and r\n    diff = r - l\n    # Check if the number of bits set in n is equal to the difference between l and r\n    if len(n_binary) == diff:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    if n == 0:\n        return True\n    elif n < 0:\n        n = 2 ** abs(n)\n\n    # Calculate the number of bits required to represent n in binary form\n    bits_required = 0\n    while n > 0:\n        n = n >> 1\n        bits_required += 1\n\n    # Calculate the number of bits required to represent the range in binary form\n    start_bits = 0\n    start = l\n    while start > 0:\n        start = start >> 1\n        start_bits += 1\n\n    end_bits = 0\n    end = r\n    while end > 0:\n        end = end >> 1\n        end_bits += 1\n\n    # Calculate the number of bits required to represent the range in binary form\n    bits_to_check = end_bits - start_bits\n\n    if bits_to_check > bits_required:\n        return False\n\n    # Check whether all the bits are set or not in the given range\n    for i in range(start,end+1):\n        if (n & i)!= i:\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Check if l is less than or equal to r\n    if l > r:\n        return \"The given range is not valid\"\n    # Initialize a variable to count the number of set bits in n\n    count = 0\n    # Loop through the bits from r to l (inclusive)\n    for i in range(r, l - 1, -1):\n        # If the bit is set, increment the count by 1\n        if n & (1 << i):\n            count += 1\n        # If the count becomes greater than the number of bits in n, return True\n        if count > 31:\n            return True\n    # If the loop completes without returning True, return False\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three integer arguments:\n    - n: The binary number from which we need to check whether all the bits are set or not.\n    - l: The lowest bit we want to check for.\n    - r: The highest bit we want to check for.\n\n    The function returns True if all the bits are set in the given range, else it returns False.\n\n    Example:\n    n = 15, l = 3, r = 7\n    Output: True\n\n    n = 15, l = 8, r = 15\n    Output: True\n\n    n = 15, l = 0, r = 2\n    Output: False\n    '''\n\n    # Create a binary number with all bits set to 1\n    all_bits = bin(2**r)[2:].zfill(r-l+1)\n\n    # Check if all the bits are set in the given range\n    if all_bits in bin(n)[l:r+1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    for i in range(l, r+1):\n        if bin(i).count(\"1\") < len(bin(n)):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize a boolean variable to store the result\n    is_all_bits_set = True\n    \n    # Check if all the bits in the range are set to 1\n    for i in range(l, r+1):\n        # If any of the bits is not set to 1, then set the result to False and exit the loop\n        if n & (1 << i)!= (1 << i):\n            is_all_bits_set = False\n            break\n    \n    # Return the result\n    return is_all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the count of unset bits to 0\n    count = 0\n\n    # Iterate through all the bits from right to left\n    for i in range(r, l-1, -1):\n        # Check if the bit is set or not\n        if (n & (1<<i)) == 0:\n            # If the bit is unset, increment the count of unset bits\n            count += 1\n\n    # Check if all the bits are unset in the given range\n    if count == r-l+1:\n        # If all the bits are unset, return True\n        return True\n    else:\n        # If not, return False\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert n to binary\n    binary_n = bin(n)[2:]\n    # Convert l to binary\n    binary_l = bin(l)[2:]\n    # Convert r to binary\n    binary_r = bin(r)[2:]\n    # Compare the lengths of binary_l and binary_r\n    if len(binary_l)!= len(binary_r):\n        # If lengths are not equal, the range is not valid\n        return False\n    # Compare the lengths of binary_l and binary_n\n    if len(binary_l)!= len(binary_n):\n        # If lengths are not equal, the range is not valid\n        return False\n    # Iterate through the bits of binary_n and check if all the bits are unset or not\n    for i in range(len(binary_n)):\n        if binary_n[i]!= '1':\n            # If any bit is set, the range is not valid\n            return False\n    # If no bit is set, then all the bits are unset and the range is valid\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create two lists to store negative and positive elements separately\n    neg_list = []\n    pos_list = []\n    \n    # iterate through the input array and add positive and negative elements to the appropriate lists\n    for i in range(n):\n        if arr[i] >= 0:\n            pos_list.append(arr[i])\n        else:\n            neg_list.append(arr[i])\n    \n    # combine the two lists to create the final output array\n    new_arr = neg_list + pos_list\n    \n    # return the final output array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Finding the first n negative elements\n    neg_arr = [num for num in arr[:n] if num < 0]\n\n    # Finding the first n positive elements\n    pos_arr = [num for num in arr[:n] if num >= 0]\n\n    # Finding the remaining elements\n    rem_arr = [num for num in arr[n:] if num!= 0]\n\n    # Shuffling the negative and positive elements\n    neg_arr.extend(pos_arr)\n\n    # Shuffling the remaining elements\n    for i in range(len(neg_arr)):\n        j = i + 1\n        while j < len(neg_arr) and neg_arr[i] > neg_arr[j]:\n            neg_arr[i], neg_arr[j] = neg_arr[j], neg_arr[i]\n            j += 1\n\n    # Shuffling the neg_arr and the remaining elements\n    for i in range(len(rem_arr)):\n        j = i + 1\n        while j < len(neg_arr) and rem_arr[i] > neg_arr[j]:\n            rem_arr[i], rem_arr[j] = rem_arr[j], rem_arr[i]\n            j += 1\n\n    # Concatenating the neg_arr and the remaining elements\n    result = neg_arr + rem_arr\n\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    # filter out negative elements and sort them\n    neg_sorted = sorted(filter(lambda x: x < 0, arr[:n]), reverse=True)\n    # filter out positive elements and sort them\n    pos_sorted = sorted(filter(lambda x: x >= 0, arr[:n]))\n    # combine the sorted negative and positive arrays\n    result = neg_sorted + pos_sorted\n    # return the resulting array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    neg.sort(reverse=True)\n    pos.sort()\n    ans = neg + pos\n    return ans[n:]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes an array and an integer n, and re-arranges the first n elements of the array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \n    Args:\n        arr (list): The input array.\n        n (int): The number of elements to be re-arranged.\n    \n    Returns:\n        list: The re-arranged array.\n    \"\"\"\n    \n    # Initialize variables\n    positive_elements = []\n    negative_elements = []\n    \n    # Iterate through the array\n    for num in arr:\n        if num >= 0:\n            positive_elements.append(num)\n        else:\n            negative_elements.append(num)\n    \n    # Combine the two lists into one\n    new_arr = negative_elements + positive_elements\n    \n    # Shuffle the array randomly\n    import random\n    random.shuffle(new_arr)\n    \n    # Return the shuffled array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    # initialize two pointers, one for the start of the array and one for the end of the array\n    i, j = 0, len(arr)-1\n\n    # loop through the array from start to end\n    while i < j:\n        # if the element at i is negative, move it to the beginning of the array\n        if arr[i] < 0:\n            arr[i], arr[0] = arr[0], arr[i]\n        # if the element at j is positive, move it to the end of the array\n        elif arr[j] > 0:\n            arr[j], arr[i] = arr[i], arr[j]\n            i += 1\n            j -= 1\n        # if the element at i is positive and the element at j is negative, move both to the end of the array\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    # initialize two pointers, one for the start of the array and one for the end of the array\n    i, j = 0, len(arr)-1\n\n    # loop through the array from start to end\n    while i < j:\n        # if the element at i is negative, move it to the beginning of the array\n        if arr[i] < 0:\n            arr[i], arr[0] = arr[0], arr[i]\n            i += 1\n        # if the element at j is positive, move it to the end of the array\n        elif arr[j] > 0:\n            arr[j], arr[i] = arr[i], arr[j]\n            i += 1\n            j -= 1\n        # if the element at i is positive and the element at j is negative, move both to the end of the array\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    # initialize two pointers, one for the start of the array and one for the end of the array\n    i, j = 0, len(arr)-1\n\n    # loop through the array from start to end\n    while i < j:\n        # if the element at i is negative, move it to the end of the array\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        # if the element at j is positive, move it to the beginning of the array\n        elif arr[j] > 0:\n            arr[j], arr[i] = arr[i], arr[j]\n            i += 1\n            j -= 1\n        # if the element at i is positive and the element at j is negative, move both to the beginning of the array\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    # check if the number of negative elements is equal to the number of positive elements\n    if len([x for x in arr if x < 0]) == len([x for x in arr if x > 0]):\n        print(\"The array is already re-arranged as required.\")\n    else:\n        print(\"The array has been re-arranged in such a way that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\")\n\n    # print the original array\n    print(\"Original Array:\", arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two separate lists for negative and positive elements\n    neg_arr = []\n    pos_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    \n    # sort the negative and positive arrays in descending order\n    neg_arr.sort(reverse=True)\n    pos_arr.sort()\n    \n    # merge the two arrays in ascending order\n    result = neg_arr + pos_arr\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] >= 0:\n            i += 1\n        else:\n            arr[i], arr[n-i-1] = arr[n-i-1], arr[i]\n            i += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Create two empty lists to hold the negative and positive elements, respectively\n    neg_list = []\n    pos_list = []\n    # Loop over the first n elements of the array\n    for i in range(n):\n        # If the current element is negative, add it to the negative list\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        # If the current element is positive, add it to the positive list\n        else:\n            pos_list.append(arr[i])\n    # Loop over the remaining elements of the array\n    for i in range(n, len(arr)):\n        # If the current element is negative, add it to the end of the negative list\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        # If the current element is positive, add it to the beginning of the positive list\n        else:\n            pos_list.insert(0, arr[i])\n    # Combine the two lists into a single list and return it\n    return neg_list + pos_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create two empty lists to store negative and positive elements\n    neg = []\n    pos = []\n\n    # Loop through the array and store the negative and positive elements in separate lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n\n    # Merge the negative and positive lists and store the result in the original array\n    for i in range(n):\n        if neg[i] < 0:\n            arr[i] = neg[i]\n        else:\n            arr[i] = pos[i]\n\n    # Sort the original array in reverse order to preserve the relative order among negative and positive elements\n    arr.sort(reverse=True)\n\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    # Replace blank spaces with the given character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Replace all occurrences of blank spaces with the character\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(' ',char)\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    # replace all blank spaces in the string with the specified character\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    # Create a min-heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n\n    # Add the remaining elements to the heap\n    for i in range(n, len(list1)):\n        heapq.heappush(heap, list1[i])\n\n    # Extract the n largest elements from the heap\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a heap to find the n largest items\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Convert the heap to a list and return it\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # heapify the list to convert it into a min heap\n    heapq.heapify(list1)\n    # extract the n largest elements from the heap and add them to a new list\n    max_list = heapq.nlargest(n, list1)\n    # return the new list\n    return max_list"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a max heap with the n largest items in list1\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -list1[i])\n    # pop the largest items from the heap and append them to a new list\n    result = []\n    while heap:\n        result.append(-heapq.heappop(heap))\n    # reverse the new list to get the n largest items in the desired order\n    result.reverse()\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert list to heap data structure\n    heap = [(-x, i) for i, x in enumerate(list1)]\n    heapq.heapify(heap)\n\n    # Remove the smallest n items from the heap\n    for i in range(n):\n        heapq.heappop(heap)\n\n    # Convert heap back to list of tuples\n    l = heapq.heapify(heap)\n    return [x for _, x in l]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Function to find the lateral surface area of a cylinder.\n    \n    Args:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n        \n    Returns:\n        float: The lateral surface area of the cylinder.\n    '''\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = 2 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder given its radius and height.\n    \"\"\"\n    return 2*3.14*r*r + 2*3.14*r*h + 2*3.14*r*r"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # Compute the lateral surface area\n    lateral_area = 2 * r * h\n    \n    # Return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * 3.14159 * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: the lateral surface area of the cylinder\n    '''\n    pi = 3.14159265359\n    surface_area = pi * r ** 2 * h\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateral_surface_area_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area using the formula A = pi * r^2 * h\n    lateral_surface_area = 2 * 3.14159 * r**2 * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2*3.14159*(r**2+h**2)\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = (2*3.14159265359)*r**2\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3  # calculate volume by squaring the side length\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize an empty string to hold the result\n    result = \"\"\n\n    # loop through the bits of the number from right to left\n    for bit in bin(n)[2:]:\n        # if the bit is even, append a 1 to the result string\n        if int(bit) == 0:\n            result += \"0\"\n        else:\n            result += \"1\"\n\n    # convert the result string to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    \n    # loop through each bit in the binary representation of n\n    for i in range(8):\n        # check if the current bit is even\n        if n & (1 << i):\n            # if it is, set the corresponding bit in the result to 1\n            result |= (1 << i)\n            \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Loop through each bit of the given number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it to 1\n        if int(bit) % 2 == 0:\n            result += '1'\n        # Otherwise, set it to 0\n        else:\n            result += '0'\n            \n    # Convert the string result to an integer\n    result = int(result, 2)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = bin(n)[2:] # convert number to binary string\n    for i in range(len(n)):\n        if n[i] == '0': # check if current bit is not even\n            n = n[:i] + '1' + n[i+1:] # set current bit to 1\n    return int(n, 2) # convert binary string back to integer"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Loop through each bit in the binary representation of the number\n    for i in range(8):\n        # Check if the i-th bit is even\n        if (n & (1 << i)) == 0:\n            # If it's not even, set the i-th bit\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize an empty list to store the even bits\n    even_bits = []\n\n    # Loop through the bits of the given number\n    for i in range(32):\n        # Check if the i-th bit is even\n        if (n & (1 << i))!= 0:\n            # If it is, add it to the even_bits list\n            even_bits.append(i)\n\n    # Return the even_bits list\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the given number to binary\n    binary = bin(n)[2:]\n    # Split the binary string into two parts\n    part1 = binary[:binary.index('1')]\n    part2 = binary[binary.index('1')+1:]\n    # Set the even bits of the first part to 1\n    for i in range(len(part1)):\n        if int(part1[i]) == 0:\n            part1[i] = '0'\n    # Concatenate the two parts and convert it back to an integer\n    result = int(part1 + part2, 2)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n\n    # Initialize a new number with all bits set to 0\n    result = 0\n\n    # Loop through each bit of the input number\n    for i in range(32):\n\n        # If the i-th bit of the input number is even, set its corresponding bit in the result to 1\n        if n & (1 << i):\n            result |= (1 << i)\n\n    # Return the new number with all even bits set to 1\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize a variable to store the result\n    result = 0\n\n    # Loop through each bit of the given number\n    for i in range(32):\n        # If the current bit is even, set the corresponding bit of the result to 1\n        if n & (1 << i) == 0:\n            result |= (1 << i)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0 \n    for i in range(1, n+1): \n        if (i & 1) == 0: \n            count += 1 \n    return count "
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts of each tuple in the list\n    counts = {}\n    \n    # iterate over the list of tuples\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in counts:\n            # if it is, increment the count by 1\n            counts[tup] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            counts[tup] = 1\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(tuple(x) for x in test_list)\n    count_dict = Counter(unique_tuples)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts\n    count_dict = {}\n\n    # loop through the list and count the occurrences of each tuple\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Convert the Counter object to a dictionary\n    result_dict = dict(counter)\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Create a dictionary to store the counts of each tuple\n    count_dict = {}\n\n    # Iterate over the list of tuples and count the occurrences of each tuple\n    for tup in test_list:\n        count = count_dict.get(tup, 0) + 1\n        count_dict[tup] = count\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary. If so, increment its count by 1. Otherwise, add the tuple to the dictionary with a count of 1.\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each tuple\n    count_dict = {}\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if j - i == 1:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring.strip()!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    This function takes a string as input and returns the number of non-empty substrings in the string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substr = str[i:j]\n            if substr!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    substrings = set()\n    n = len(str)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substrings.add(str[i:j])\n\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    n = len(str) \n    for i in range(n): \n        for j in range(i+1, n+1): \n            count += 1\n    return count "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as input and returns the number of non-empty substrings of the string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(n):\n        current_num = 0\n        for j in range(m-1):\n            if current_num + j <= m:\n                count += 1\n        current_num += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if (2*j <= m and 2*j >= 2*i):\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a dictionary to store the results\n    sequence_count = {}\n    # Set the first element of the sequence to be 1\n    sequence_count[1] = 1\n    # Iterate over the range of numbers m to n\n    for i in range(m, n+1):\n        # Iterate over the range of numbers 2 to i\n        for j in range(2, i+1):\n            # Check if the number j can be added to the sequence to form a sequence of length n\n            if i-j >= m and i-j <= 2*j:\n                # Add 1 to the count of the sequence formed by j\n                sequence_count[j] = sequence_count.get(j, 0) + sequence_count.get(i-j, 0)\n    # Return the total number of sequences found\n    return sum(sequence_count.values())"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid(sequence):\n        return all(x >= 2*sequence[i] <= m for i, x in enumerate(sequence))\n\n    def get_combinations(sequence, n):\n        if n == 1:\n            return [[sequence[i]]]\n        if n > len(sequence):\n            return []\n        result = []\n        for i in range(len(sequence)):\n            rest = sequence[:i] + sequence[i+1:]\n            for combo in get_combinations(rest, n-1):\n                result.append([sequence[i]] + combo)\n        return result\n\n    total_sequences = 0\n    for i in range(m, 0, -1):\n        sequence = list(range(i, n, 2))\n        if is_valid(sequence):\n            total_sequences += 1\n            total_combinations = len(get_combinations(sequence, n))\n            print(f\"{sequence} - {total_combinations}\")\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize count to 0\n    count = 0\n    # Loop through values of i from 1 to m\n    for i in range(m+1):\n        # Initialize count to 0 for each value of i\n        j = 0\n        # Loop through values of j from 1 to n-1\n        for j in range(1,n):\n            # Check if (2*j) is less than or equal to i and (2*j) is greater than or equal to twice the previous element (j-1)\n            if (2*j) <= i and (2*j) >= (2*j-1):\n                # Increment count\n                count += 1\n    # Return count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a 2D array to store the counts of sequences\n    count_array = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Fill the 2D array with the counts\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j >= 2 * count_array[i - 1][j - 1]:\n                count_array[i][j] = count_array[i - 1][j] + 1\n            else:\n                count_array[i][j] = 0\n\n    # Return the total number of sequences\n    return count_array[n][m]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    total_sequences = 0\n    prev_element = 1\n    \n    for i in range(2, n+1):\n        for j in range(1, m//2+1):\n            if (j-1)*2 >= prev_element <= j*2 <= m:\n                total_sequences += 1\n        prev_element = j*2\n        \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    # Initialize variables\n    count = 0\n    \n    # Initialize list to store unique elements\n    unique_elements = set()\n    \n    # Initialize previous element as None\n    prev_element = None\n    \n    # Iterate through all possible sequences of length n\n    for i in range(m):\n        # Check if current element is valid\n        if i >= 2 * prev_element and i <= m:\n            # Add current element to unique elements set\n            unique_elements.add(i)\n            # Increment count\n            count += 1\n        \n        # Set previous element as current element\n        prev_element = i\n    \n    # Return total count of valid sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    total_sequences = 0\n\n    # Starting with the first element, we can check if the current element is less than or equal to m and the previous element is greater than or equal to twice the previous element.\n    if n == 1:\n        return 1\n    elif m <= 2*n:\n        return 0\n    elif m == 2*n:\n        total_sequences += 1\n\n    # Starting from the second element, we can check if the current element is greater than or equal to twice the previous element and less than or equal to m.\n    for i in range(2,n+1):\n        if m >= 2*i and m <= m:\n            total_sequences += get_total_number_of_sequences(m-2*i, n-1)\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(m // 2, n):\n        if i % 2 == 0:\n            total += i * (m // 2) + 1\n        else:\n            total += (m - i) * (m // 2) + 1\n    return total"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must have the same length.\")\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_element = list1[-1]\n    list1[-1] = [i for j in list2 for i in j]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Create a new list with the same elements as list1\n    new_list = list1\n    # Replace the last element of new_list with the elements of list2\n    new_list[-1] = list2[-1] * len(list2)\n    # Return the new list\n    return new_list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the list\n    length = len(list1)\n\n    # Replace the last element with the elements of the second list\n    for i in range(length - 1, -1, -1):\n        list1[i] = list2[0]\n        list2 = list2[1:]\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[:]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # remove the last element of the first list\n    list1.pop()\n    # add the elements of the second list to the end of the first list\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = 0\n    for char in str1:\n        total += 1\n    return total"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = int(math.sqrt(N))\n    if sqrtN**2 == N:\n        return sqrtN**2 + 1\n    else:\n        return (sqrtN + 1)**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = int(math.sqrt(N))\n    while True:\n        if sqrt_N*sqrt_N == N:\n            return sqrt_N*sqrt_N+1\n        elif sqrt_N*sqrt_N < N:\n            sqrt_N += 1\n        else:\n            sqrt_N -= 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    sqrt_N = int(sqrt_N)\n    sqrt_N += 1\n    sqrt_N = int(math.sqrt(sqrt_N))\n    return sqrt_N * sqrt_N\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_next_prime(num):\n        \"\"\"\n        Helper function to find the next prime number after a given number.\n        \"\"\"\n        i = num + 1\n        while not is_prime(i):\n            i += 1\n        return i\n\n    def next_perfect_square(N):\n        \"\"\"\n        Recursive function to find the next perfect square greater than a given number.\n        \"\"\"\n        num = N + 1\n        while True:\n            if is_prime(num):\n                return num\n            num = find_next_prime(num)\n\n    return next_perfect_square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Check if the given number is already a perfect square\n    if N**0.5 == int(N**0.5):\n        # Check if the given number is the highest number in the range\n        if N > math.sqrt(2*int(math.sqrt(2*N)) + 1):\n            return 1\n        else:\n            # If the given number is the lowest number in the range, find the next largest perfect square\n            else:\n                while True:\n                    N = N + 1\n                    if N**0.5 == int(N**0.5) and N > math.sqrt(2*int(math.sqrt(2*N)) + 1):\n                        return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # function to check if a number is a perfect square\n    def is_perfect_square(num):\n        return int(math.sqrt(num)) ** 2 == num\n\n    # function to find the next perfect square greater than a given number\n    def find_next_square(num):\n        sqrt_num = int(math.sqrt(num))\n        if sqrt_num ** 2 == num:\n            return sqrt_num + 1\n        else:\n            return (sqrt_num + 1) ** 2\n\n    # check if N is a perfect square\n    if is_perfect_square(N):\n        # if N is a perfect square, find the next perfect square greater than N\n        next_square = find_next_square(N)\n        # return the next perfect square\n        return next_square\n    else:\n        # if N is not a perfect square, return the next perfect square greater than N\n        next_square = find_next_square(N)\n        return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def isPerfectSquare(num):\n        if num < 0:\n            return False\n        sqrt_num = int(math.sqrt(num))\n        return sqrt_num*sqrt_num == num\n\n    def next_square(num):\n        if num < 0:\n            return False\n        square = int(math.sqrt(num))\n        while square*square!= num:\n            square += 1\n        return square\n\n    # find the next square greater than N\n    next_sq = next_square(N)\n\n    # if the next square is greater than N, it means N is the largest perfect square less than or equal to N\n    if next_sq > N:\n        return N\n    else:\n        return next_sq"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a Python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    sqrt_N = int(sqrt_N + 0.5)\n    sqrt_N_plus_1 = math.sqrt(sqrt_N + 1)\n    sqrt_N_plus_1 = int(sqrt_N_plus_1 + 0.5)\n    next_sq_N = sqrt_N_plus_1 * sqrt_N_plus_1\n    return next_sq_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a positive integer N and returns the next perfect square greater than N.\n    The algorithm used is based on the fact that any perfect square greater than N can be represented as the product of two smaller perfect squares.\n    \n    Example:\n    >>> next_Perfect_Square(17)\n    36\n    '''\n    \n    # Check if N is already a perfect square\n    if math.isqrt(N) ** 2 == N:\n        return N\n    \n    # Find the previous perfect square less than N\n    while N % 4 == 0:\n        N = N // 4\n    \n    # Calculate the square root of N\n    sqrtN = math.sqrt(N)\n    \n    # Multiply the previous square root by 2 and add 1 to get the next perfect square\n    nextSquare = sqrtN * 2 + 1\n    \n    return nextSquare"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Check if given number is a perfect square\n    if N % 4 == 1:\n        return N\n\n    # Find the next perfect square greater than N\n    i = 1\n    while True:\n        i = i * 2\n        if i > N:\n            i = N + 1\n            break\n\n    # Check if the next perfect square is also a perfect square\n    while i % 4 == 1:\n        i = i * 2\n\n    return i"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    min_value = max_value = arr[0]\n    for i in range(1, n):\n        if arr[i] > min_value:\n            min_value = arr[i]\n        elif arr[i] < max_value:\n            max_value = arr[i]\n\n    if max_value - min_value > n - 1:\n        return max_value\n    else:\n        return min_value"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Check if the array is empty\n    if not arr:\n        return 0\n\n    # Initialize variables\n    max_sum = float('-inf')\n    inc_sum = 0\n    dec_sum = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the current element is increasing\n        if arr[i] > arr[i-1]:\n            # If it is, update the maximum sum\n            if inc_sum + arr[i] > max_sum:\n                max_sum = inc_sum + arr[i]\n\n            # Reset the sum for decreasing elements\n            inc_sum = 0\n\n        else:\n            # If it's decreasing, update the sum for increasing elements\n            if dec_sum + arr[i] > max_sum:\n                max_sum = dec_sum + arr[i]\n\n            # Reset the sum for increasing elements\n            dec_sum = 0\n\n    # Check if there are any remaining sums after the loop\n    if inc_sum > max_sum:\n        max_sum = inc_sum\n\n    if dec_sum > max_sum:\n        max_sum = dec_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n  # dp[i] will store the maximum sum of the subsequence ending at index i\n\n    # initialize dp[i]\n    if arr[0] >= arr[1]:\n        dp[0] = arr[0] + arr[1]\n    else:\n        dp[0] = arr[1] + arr[0]\n\n    # calculate dp[i] for all i from 2 to n-1\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = dp[i-1] + arr[i]\n\n    # find the maximum sum of a bitonic subsequence\n    max_sum = dp[0]\n    for i in range(1, n):\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n\n\n    # calculate the maximum sum subsequence\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = dp[i-1] + arr[i]\n\n    # find the maximum sum subsequence\n    max_sum_subsequence = max(dp)\n\n    # calculate the maximum sum of a bitonic subsequence\n    max_sum_bitonic = 0\n    for i in range(n-1):\n        if dp[i] > dp[i+1]:\n            max_sum_bitonic += dp[i]\n\n    return max_sum_subsequence, max_sum_bitonic"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n <= 2:\n        return max(arr)\n    elif arr[0] < arr[1]:\n        return max_sum(arr[1:]) + arr[0]\n    else:\n        return max(arr)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Check if the array is empty or has only one element\n    if len(arr) < 2:\n        return arr[0]\n\n    # Initialize variables for the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array and calculate the current sum\n    for num in arr:\n        current_sum += num\n\n        # If the current sum is increasing, update the maximum sum\n        if current_sum > max_sum and current_sum >= 0:\n            max_sum = current_sum\n\n        # If the current sum is decreasing, update the maximum sum to the current sum\n        if current_sum < max_sum and current_sum <= 0:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Check if first element is increasing or decreasing\n    if arr[0] < arr[1]:\n        bitonic = True\n    else:\n        bitonic = False\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through array\n    for i in range(1, n):\n        # Check if current element is increasing or decreasing\n        if arr[i] < arr[i-1]:\n            bitonic = not bitonic\n\n        # Update current sum\n        if bitonic:\n            current_sum += arr[i]\n        else:\n            current_sum -= arr[i-1]\n\n        # Update max sum\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] < arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    else:\n        for i in range(1, n):\n            if arr[i-1] < arr[i] and arr[i] > arr[i+1]:\n                continue\n            elif arr[i] < arr[i-1]:\n                arr[i], arr[i-1] = arr[i-1], arr[i]\n                if i > 1 and arr[i-2] < arr[i-1] and arr[i-1] > arr[i]:\n                    continue\n                max_so_far = max_sum(arr[:i]) + arr[i]\n                max_ending_here = arr[i]\n                if max_so_far < max_ending_here:\n                    arr[i], arr[i-1] = arr[i-1], arr[i]\n            else:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n                if i > 1 and arr[i-2] < arr[i-1] and arr[i-1] > arr[i]:\n                    continue\n                max_so_far = max_sum(arr[:i]) + arr[i]\n                max_ending_here = arr[i]\n                if max_so_far < max_ending_here:\n                    arr[i], arr[i+1] = arr[i+1], arr[i]\n        return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr) \n    if n < 3: \n        return 0\n    dp = [0] * n \n    for i in range(1, n): \n        if arr[i] >= arr[i-1]: \n            dp[i] = max(dp[i-1], dp[i-2] + arr[i]) \n        else: \n            dp[i] = max(dp[i-2] + arr[i], dp[i-1]) \n    return max(dp) "
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Find the local maxima in the array\n    local_max = arr[0]\n    for i in range(1, n):\n        if arr[i] > local_max:\n            local_max = arr[i]\n\n    # Find the global maxima in the array\n    global_max = local_max\n    for i in range(n-2, -1, -1):\n        if arr[i] > global_max:\n            global_max = arr[i]\n\n    return max(global_max, local_max)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while abs(guess*guess - number) > 0.000001:\n        guess = (number/guess + guess)/2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    x, y = 1, 1.0\n    \n    # Iterate until the difference between x and y is less than some tolerance\n    while abs(x - y) > 1e-10:\n        x = y\n        y = (number / y) + (number / (y**2))\n    \n    # Return the square root as the final result\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n\n    This function takes a number as input and computes its square root using the babylonian method.\n    The method is based on the fact that the square root of a number can be expressed as the average of the squares of the first n natural numbers.\n    \"\"\"\n\n    # Initialize the sum of squares of integers up to n\n    sum_of_squares = 0\n    n = 1\n\n    # Compute the sum of squares of integers up to n\n    while n <= number:\n        sum_of_squares += n * n\n        n += 1\n\n    # Compute the square root using the babylonian method\n    square_root = (number + sum_of_squares / n) / 2\n\n    return square_root"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # check if number is negative\n    if number < 0:\n        raise ValueError('Input must be a non-negative number.')\n    # check if number is a float\n    elif isinstance(number, float):\n        raise TypeError('Input must be an integer.')\n\n    # initialize variables\n    x, y, dx = 0, number, 1\n    count = 0\n\n    # iterate until the error is small enough\n    while abs(dx) > 1e-10:\n        # calculate new value of x\n        x = x - (number/x) * dx\n        # calculate new value of dx\n        dx = (dx/2) + ((number/x) - dx/2)\n        # increase count\n        count += 1\n\n    # print result\n    print(f'The square root of {number} is approximately {x} using the babylonian method, with an accuracy of {dx} and {count} iterations.')"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1.0\n    while True:\n        y = (x + number / x) / 2.0\n        if abs(y - x) < 1e-10:\n            return y\n        x = y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes the square root of a number using the babylonian method.\n\n    Args:\n    - number: The number to compute the square root of.\n\n    Returns:\n    - The square root of the number.\n\n    Raises:\n    - ValueError: If the input is not a number.\n    \"\"\"\n    if not isinstance(number, (int, float)):\n        raise ValueError(\"Input must be a number.\")\n    x0 = number\n    x1 = (x0 + number/x0) / 2\n    i = 0\n    while abs(x1 - x0) > 0.00001:\n        x0 = x1\n        x1 = (x0 + number/x0) / 2\n        i += 1\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    guess = 1\n    prev_guess = 0\n    epsilon = 0.00001\n\n    while abs(guess**2 - number) > epsilon:\n        prev_guess = guess\n        guess = (number / guess) + (number / guess)\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess**2 > number:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    previous_guess = 0\n\n    while abs(guess*guess - number) > 0.00001:\n        previous_guess = guess\n        guess = (guess + number/guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.000001\n    guess = number/2\n    while abs(guess*guess - number) >= epsilon:\n        guess = (guess + number/guess)/2\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store the lengths of palindromic subsequences\n    dp = [[0] * n for _ in range(n)]\n    # Initialize the first row and first column\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the table using dynamic programming\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    if n <= 1:\n        return n\n    # create a 2D table to store the lengths of longest palindromic subsequences\n    dp = [[0]*n for _ in range(n)]\n    # base case\n    dp[0][0] = 1\n    # fill in the table using dynamic programming\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-2]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    This function finds the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Create a dictionary to store the length of longest palindromic subsequences in substrings of length i\n    # Initialize all values to 0\n    n = len(str)\n    lps_dict = [0] * n\n\n    # Calculate the length of longest palindromic subsequence in substrings of length i using the following formula\n    # lps[i] = max(lps[i-1], lps_dict[i-2]) + 1\n    for i in range(1, n):\n        lps_dict[i] = max(lps_dict[i-1], lps_dict[i-2]) + 1\n\n    # Initialize variables to store the length of longest palindromic subsequences and the starting index of each substring\n    max_len = 0\n    start = 0\n\n    # Iterate over all substrings of length i from 1 to n\n    for i in range(1, n):\n        # If the length of the current substring is greater than or equal to the maximum length seen so far, update the max_len and start variables\n        if i + lps_dict[i] > max_len:\n            max_len = i + lps_dict[i]\n            start = i - max_len + 1\n\n    return max_len, start"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0 or n == 1:\n        return n\n    \n    # Initialize a 2D array of size (n+1) x (n+1)\n    dp = [[0 for j in range(n+1)] for i in range(n+1)]\n    \n    # Initialize the first row and first column of the 2D array\n    for i in range(n+1):\n        dp[i][i] = 1\n    \n    # Fill the rest of the 2D array using dynamic programming approach\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length\n            \n            # Compare the characters at the current indices\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    # Return the maximum value in the 2D array\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    dp = [[0] * n for _ in range(n)]\n    max_length = 1\n    \n    # Find longest palindrome subsequence of length 1\n    for i in range(n):\n        if s[i] == s[i]:\n            dp[i][i] = 1\n            max_length = 1\n    \n    # Find longest palindrome subsequence of length 2\n    for i in range(n - 1):\n        if s[i] == s[i+1]:\n            dp[i][i+1] = 2\n            max_length = 2\n            \n    # Find longest palindrome subsequence of length greater than 2\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n                max_length = max(max_length, 2 + dp[i][j])\n    \n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n    \"\"\"\n    n = len(str)\n    # Create a table to store the length of the longest palindromic subsequence ending at each index in the string.\n    lps_table = [[0] * n for _ in range(n)]\n    \n    # Initialize the first row and first column of the table as 0.\n    for i in range(n):\n        lps_table[i][i] = 1\n        \n    # Fill in the table using dynamic programming.\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            # If the characters at indices i and j are same, then the length of the longest palindromic subsequence ending at indices i and j is 2 + lps_table[i+1][j-1].\n            if str[i] == str[j]:\n                lps_table[i][j] = 2 + lps_table[i+1][j-1]\n            # If the characters at indices i and j are not same, then the length of the longest palindromic subsequence ending at indices i and j is max(lps_table[i+1][j], lps_table[i][j-1]).\n            else:\n                lps_table[i][j] = max(lps_table[i+1][j], lps_table[i][j-1])\n    \n    # Return the length of the longest palindromic subsequence ending at the last index of the string.\n    return lps_table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_palindrome(s):\n    \"\"\"\n    Function to check if a given string is palindrome or not\n    \"\"\"\n    return s == s[::-1]\n\ndef longest_palindrome_subsequence(s):\n    \"\"\"\n    Function to find the length of the longest palindromic subsequence in the given string\n    \"\"\"\n    n = len(s)\n    table = [[0] * n for _ in range(n)]\n    max_len = 0\n    max_start = 0\n\n    for i in range(n):\n        if i == 0 or is_palindrome(s[i:i+2]):\n            table[i][i] = 1\n            max_len = 1\n            max_start = i\n        else:\n            for j in range(i-1, -1, -1):\n                if s[i] == s[j]:\n                    if i-j <= 2 or is_palindrome(s[j:j+3]):\n                        table[i][j] = table[j+1][i-1] + 1\n                        if table[i][j] > max_len:\n                            max_len = table[i][j]\n                            max_start = j\n                    else:\n                        table[i][j] = 1\n    return max_start, max_len\n\ndef lps(s):\n    \"\"\"\n    Main function to find the length of the longest palindromic subsequence in the given string\n    \"\"\"\n    n = len(s)\n    max_len, max_start = longest_palindrome_subsequence(s)\n    return s[max_start:max_start+max_len]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D table to store lengths of longest palindromic subsequences\n    dp = [[0] * n for _ in range(n)]\n    # initialize table\n    for i in range(n):\n        dp[i][i] = 1\n    # fill the table in bottom up manner\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(string):\n    # Initialize a 2D array of size (n+1) x (n+1) with -1\n    n = len(string)\n    lps_table = [[-1 for _ in range(n+1)] for _ in range(n+1)]\n\n    # Fill in the first row and column of the LPS table\n    for i in range(n+1):\n        lps_table[i][0] = 0\n        lps_table[0][i] = 0\n\n    # Fill in the remaining LPS table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if string[i-1] == string[j-1]:\n                lps_table[i][j] = lps_table[i-1][j-1] + 1\n            else:\n                lps_table[i][j] = max(lps_table[i-1][j], lps_table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence in the string\n    return lps_table[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a 2D table to store the lengths of LPS for subsequences\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and first column\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the table in bottom up manner\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start][end - 1], dp[start + 1][end])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n - 1]\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / (1 / (1 / 2 + 1 / 3 +... + 1 / n))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum of n-1\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    \n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2 * n - 1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*n/(n-1) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the counts of elements in the arrays\n    count_dict = {}\n    for num in array_nums1:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    # Iterate through the second array and check if each element is in the dictionary\n    intersection = []\n    for num in array_nums2:\n        if num in count_dict and count_dict[num] > 0:\n            intersection.append(num)\n            count_dict[num] -= 1\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create two dictionaries to store the elements of the two arrays\n    dictionary1 = {}\n    dictionary2 = {}\n\n    # iterate through the first array and store the elements in a dictionary\n    for num in array_nums1:\n        if num in dictionary1:\n            dictionary1[num] += 1\n        else:\n            dictionary1[num] = 1\n\n    # iterate through the second array and store the elements in a dictionary\n    for num in array_nums2:\n        if num in dictionary2:\n            dictionary2[num] += 1\n        else:\n            dictionary2[num] = 1\n\n    # iterate through the dictionary1 and check if the element exists in dictionary2\n    intersection = []\n    for key in dictionary1:\n        if key in dictionary2 and dictionary1[key] <= dictionary2[key]:\n            intersection.append(key)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set for each array to avoid duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    # iterate over both arrays simultaneously\n    i = j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create two dictionaries to store the values and their counts in both arrays\n    num_dict1 = {}\n    num_dict2 = {}\n\n    # Iterate through the first array and add each value to the dictionary\n    for num in array_nums1:\n        num_dict1[num] = array_nums1.count(num)\n\n    # Iterate through the second array and add each value to the dictionary\n    for num in array_nums2:\n        num_dict2[num] = array_nums2.count(num)\n\n    # Create an empty list to store the intersection values\n    intersection_list = []\n\n    # Iterate through the dictionary of the second array and check if the value exists in the first array\n    for num in num_dict2:\n        if num in num_dict1:\n            intersection_list.append(num)\n\n    # Return the list of intersection values\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set to store the unique elements of array_nums1\n    unique_nums1 = set(array_nums1)\n    # create an empty set to store the intersection\n    intersection = set()\n    # loop through array_nums2\n    for num in array_nums2:\n        # if the current number is in the set of unique elements of array_nums1,\n        # add it to the intersection set\n        if num in unique_nums1:\n            intersection.add(num)\n    # return the intersection as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    if len(array_nums1) > len(array_nums2):\n        array_nums1, array_nums2 = array_nums2, array_nums1\n    \n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n            \n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    # Loop through each element in array_nums1\n    for num1 in array_nums1:\n        # Loop through each element in array_nums2\n        for num2 in array_nums2:\n            # If both elements match, add them to the intersection list\n            if num1 == num2:\n                intersection.append(num1)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.extend(list[i:])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        if i == 0:\n            list.insert(0, element)\n        else:\n            list.insert(i, element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Initialize an empty list to store the inserted elements\n    inserted_list = []\n    \n    # Iterate through each element in the list\n    for i in range(len(list)):\n        # Insert the current element at the beginning of the inserted list\n        inserted_list.insert(0, list[i])\n        \n    # Add the final inserted element to the end of the list\n    inserted_list.append(element)\n    \n    # Return the resulting list\n    return inserted_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(lst,elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if i == 0:\n            list.insert(0, element)\n        elif i == len(list)-1:\n            list.append(element)\n        else:\n            list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(i, element)\n        result.insert(i, list[i])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        if isinstance(num, complex):\n            result.append(cmath.polar(num))\n        else:\n            print(\"Input must be a complex number.\")\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers and converts them to polar coordinates.\n    The function takes two complex numbers as input, one for the real part and the other for the imaginary part.\n    The function returns a list of tuples containing the polar coordinates of each complex number.\n    '''\n    polar_coordinates = []\n    for complex_number in numbers:\n        real = complex_number.real\n        imag = complex_number.imag\n        mod = cmath.sqrt(real**2 + imag**2)\n        phi = cmath.phase(complex_number)\n        polar_coordinates.append((mod, phi))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n    \n    Args:\n        numbers (list): A list of complex numbers to convert.\n    \n    Returns:\n        list: A list of polar coordinates for each complex number in the input list.\n    \"\"\"\n    \n    # Convert each complex number in the input list to polar coordinates\n    polar_coords = [cmath.polar(num) for num in numbers]\n    \n    # Return the list of polar coordinates\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # loop through each number in the list\n    for number in numbers:\n        # check if the number is a complex number\n        if isinstance(number, complex):\n            # create a new variable to hold the polar coordinates\n            polar_number = {\n               'magnitude': abs(number),\n                'phase': cmath.phase(number)\n            }\n            # add the polar coordinates to the list\n            numbers.append(polar_number)\n        else:\n            # append the original number to the list\n            numbers.append(number)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # loop through each number in the list\n    for number in numbers:\n        # check if the number is a complex number\n        if isinstance(number, complex):\n            # convert the complex number to polar coordinates\n            r = abs(number)\n            theta = cmath.phase(number)\n            # print the polar coordinates\n            print(f\"({r:.2f}, {theta:.2f})\")\n        else:\n            # print the original number\n            print(number)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert a list of complex numbers to polar coordinates.\n\n    Parameters:\n    numbers (list of complex): A list of complex numbers to convert.\n\n    Returns:\n    list of tuples: A list of tuples containing the complex number and its corresponding polar coordinates.\n    \"\"\"\n    polar_coords = []\n    for num in numbers:\n        polar = (abs(num), cmath.phase(num))\n        polar_coords.append(polar)\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of polar coordinates for each number.\n    '''\n    polars = []\n    for number in numbers:\n        r = abs(number)\n        phi = cmath.phase(number)\n        polar = (r, phi)\n        polars.append(polar)\n    return polars"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        try:\n            complex_num = complex(num)\n            r = abs(complex_num)\n            theta = cmath.phase(complex_num)\n            polar_num = [r, theta]\n            result.append(polar_num)\n        except ValueError:\n            print(\"Invalid input.\")\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(cmath.rect(number))\n\n    return complex_numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = num.real, num.imag\n        magnitude = (real**2 + imag**2)**0.5\n        if imag < 0:\n            angle = cmath.phase(num)\n        else:\n            angle = cmath.phase(num) + cmath.pi\n        print(f'{real}+{imag}i ({magnitude}|{angle})')"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Write a Python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(lst)):\n        for j in combinations_with_replacement(lst[i:], n):\n            combos.append((i,)+j)\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    color_combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            color_combinations.append(tuple(sorted(l[i:j])))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Convert the list to a set to remove duplicates\n    l = set(l)\n    # Generate all combinations with repetition of length n using combinations_with_replacement()\n    colors = list(combinations_with_replacement(l, n))\n    # Convert the list of tuples to a list of lists\n    return [list(i) for i in colors]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'green', 'blue']\n    result = []\n    for i in range(len(l)):\n        for combo in combinations_with_replacement(colors, n-1):\n            result.append((l[i],) + combo)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l) - n + 1):\n        combination = tuple(l[i:i+n])\n        result.append(combination)\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:], n-1):\n            result.append((l[i],) + j)\n    return result\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n            if count == 10:\n                break\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if a given number is prime or not.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n+1):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n\n\nn = int(input(\"Enter a non-negative number: \"))\nprint(\"The number of prime numbers less than\", n, \"is\", count_Primes_nums(n))"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if test_tup1[0] >= test_tup2[0]:\n        if test_tup1[1] >= test_tup2[1]:\n            if test_tup1[2] >= test_tup2[2]:\n                return test_tup1\n            elif test_tup1[2] < test_tup2[2]:\n                return test_tup2\n        else:\n            if test_tup2[1] >= test_tup1[1]:\n                return test_tup1\n            else:\n                return test_tup2\n    else:\n        if test_tup2[0] >= test_tup1[0]:\n            if test_tup2[1] >= test_tup1[1]:\n                if test_tup2[2] >= test_tup1[2]:\n                    return test_tup2\n                else:\n                    return test_tup1\n            else:\n                if test_tup1[1] >= test_tup2[1]:\n                    return test_tup2\n                else:\n                    return test_tup1\n        else:\n            if test_tup1[0] >= test_tup2[0]:\n                if test_tup1[1] >= test_tup2[1]:\n                    if test_tup1[2] >= test_tup2[2]:\n                        return test_tup1\n                    else:\n                        return test_tup2\n                else:\n                    if test_tup2[1] >= test_tup1[1]:\n                        return test_tup1\n                    else:\n                        return test_tup2\n            else:\n                if test_tup2[0] >= test_tup1[0]:\n                    if test_tup2[1] >= test_tup1[1]:\n                        if test_tup2[2] >= test_tup1[2]:\n                            return test_tup2\n                        else:\n                            return test_tup1\n                    else:\n                        if test_tup1[1] >= test_tup2[1]:\n                            return test_tup2\n                        else:\n                            return test_tup1\n                else:\n                    if test_tup1[0] >= test_tup2[0]:\n                        if test_tup1[1] >= test_tup2[1]:\n                            if test_tup1[2] >= test_tup2[2]:\n                                return test_tup1\n                            else:\n                                return test_tup2\n                        else:\n                            if test_tup2[1] >= test_tup1[1]:\n                                return test_tup1\n                            else:\n                                return test_tup2\n                    else:\n                        if test_tup2[0] >= test_tup1[0]:\n                            if test_tup2[1] >= test_tup1[1]:\n                                if test_tup2[2] >= test_tup1[2]:\n                                    return test_tup2\n                                else:\n                                    return test_tup1\n                            else:\n                                if test_tup1[1] >= test_tup2[1]:\n                                    return test_tup1\n                                else:\n                                    return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return 'The two tuples must have the same length.'\n    \n    # initialize the max value for each element to 0\n    max_val1 = 0\n    max_val2 = 0\n    \n    # iterate through the tuple elements and compare them\n    for i in range(len(test_tup1)):\n        # check if the current element is greater than the maximum value of the first tuple\n        if test_tup1[i] > max_val1:\n            max_val1 = test_tup1[i]\n        # check if the current element is greater than the maximum value of the second tuple\n        if test_tup2[i] > max_val2:\n            max_val2 = test_tup2[i]\n    \n    # return the tuple with the maximum value for each element\n    return (max_val1, max_val2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        if test_tup1[0] > test_tup2[0]:\n            return test_tup1\n        elif test_tup1[0] < test_tup2[0]:\n            return test_tup2\n        else:\n            if test_tup1[1] > test_tup2[1]:\n                return test_tup1\n            else:\n                return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # First, check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length.\")\n\n    # Find the maximum value in each tuple\n    max_tup1 = tuple(max(tup1, tup2) for tup1, tup2 in zip(test_tup1, test_tup2))\n    max_tup2 = tuple(max(tup1, tup2) for tup1, tup2 in zip(test_tup2, test_tup1))\n\n    # Return the tuple with the maximum value for each tuple\n    return (max_tup1, max_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # iterate through the tuples and compare their elements\n    max_value = test_tup1[0] if test_tup1[0] > test_tup2[0] else test_tup2[0]\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max_value:\n            max_value = test_tup1[i]\n    for i in range(1, len(test_tup2)):\n        if test_tup2[i] > max_value:\n            max_value = test_tup2[i]\n    # return the maximum value\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # Initialize the max value to the first element of the first tuple\n    max_val = list1[0]\n    # Iterate over the second tuple and compare each element to the max value\n    for element in list2:\n        if element > max_val:\n            max_val = element\n    # Convert the max value to a tuple and return it\n    return tuple(max_val)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Find the maximum element in the first tuple\n    max1 = max(test_tup1)\n\n    # Find the maximum element in the second tuple\n    max2 = max(test_tup2)\n\n    # Find the maximum element in the combined tuple\n    max_combined = max(max1, max2)\n\n    # Return the maximum element in the combined tuple\n    return max_combined"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = test_tup1\n    if test_tup2 > max_tup:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize the current prime number and count\n    prime = 2\n    count = 0\n\n    # Loop until the count reaches n\n    while count < n:\n        # Check if the current prime number is prime\n        is_prime = True\n        for i in range(2, prime):\n            if prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        # If the current prime number is not prime, increase it\n        else:\n            prime += 1\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    else:\n        for i in range(3, n + 1, 2):\n            if is_prime(i):\n                return i\n        for i in range(5, n + 1, 2):\n            if is_prime(i):\n                return i\n        return None\n\ndef is_prime(n):\n    \"\"\"\n    Check if a given number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        while not is_prime(num):\n            num += 1\n        return num\n\n    def newman_shanks_williams_prime(n):\n        i = next_prime(2)\n        j = 1\n        while j <= n:\n            i = next_prime(i)\n            j += 1\n        return i\n\n    return newman_shanks_williams_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            return i\n    return n\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"newman-shanks-williams prime number is:\", newman_prime(n))"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a list to store prime numbers\n    prime_list = []\n\n    # Initialize a counter variable\n    counter = 1\n\n    # Iterate until we have found n newman-shanks-williams primes\n    while len(prime_list) < n:\n\n        # Check if the current number is prime\n        is_prime = True\n        for i in range(2, counter):\n            if counter % i == 0:\n                is_prime = False\n                break\n\n        # If the number is prime, add it to the list of primes\n        if is_prime:\n            prime_list.append(counter)\n\n        # Increment the counter\n        counter += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return prime_list[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a list of prime numbers to check against\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n\n    # Initialize the count of prime numbers found so far\n    count = 0\n\n    # Loop through the list of primes until we have found the nth prime\n    for prime in primes:\n        count += 1\n        if count == n:\n            return prime\n\n    # If we have not found the nth prime, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = 5\n    count = 0\n    while count < n:\n        prime += 2\n        if is_prime(prime):\n            count += 1\n\n    return prime\n\ndef is_prime(num):\n    '''\n    Check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def next_prime(n):\n        i = n + 1\n        while not is_prime(i):\n            i += 1\n        return i\n\n    def nth_prime(n):\n        prime = next_prime(2)\n        for _ in range(n - 1):\n            prime = next_prime(prime)\n        return prime\n\n    return nth_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define the newman-shanks-williams prime numbers\n    newman_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    \n    # Check if the input number is less than or equal to the length of the newman-shanks-williams prime numbers\n    if n <= len(newman_primes):\n        # Return the nth newman-shanks-williams prime number\n        return newman_primes[n-1]\n    else:\n        # If the input number is greater than the length of the newman-shanks-williams prime numbers, return None\n        return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables\n    count = 1\n    prime = True\n    newman = 2\n\n    # loop until count is equal to n\n    while count < n:\n        # check if newman is prime\n        for i in range(2, int(newman**0.5)+1):\n            if newman % i == 0:\n                prime = False\n                break\n        if prime:\n            count += 1\n            prime = True\n            newman += 1\n        else:\n            newman += 1\n\n    return newman"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have the same length.\")\n        return\n\n    # create a new tuple with element-wise division operation\n    result_tup = tuple([x / y for x, y in zip(test_tup1, test_tup2)])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the two tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same number of elements\")\n\n    # initialize the result tuple with the same length as the input tuples\n    result_tup = (test_tup1[0] // test_tup2[0], test_tup1[1] // test_tup2[1], test_tup1[2] // test_tup2[2])\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of the first tuple should be equal to length of the second tuple\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(x / y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # check if the number of elements in the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements.\")\n\n    # perform element-wise division on the tuples\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples should have the same length.\")\n        return\n    \n    # perform element-wise division\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    index = L\n    part1 = []\n    part2 = []\n\n    for i in range(length):\n        if i < index:\n            part1.append(list1[i])\n        elif i == index:\n            part1.append(list1[i])\n            part2.append(list1[i])\n        else:\n            part2.append(list1[i])\n\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i < L:\n            list2.append(list1[i])\n        else:\n            break\n    return (list1[:L], list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # If L is greater than the length of list1, return a tuple with two empty lists\n    if L > len(list1):\n        return ([], [])\n    \n    # Split list1 into two parts of length L\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts with length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1.sort()\n    length1 = len(list1[:L])\n    length2 = len(list1) - length1\n    list2 = list1[L:]\n    return (list1[:L], list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return ([list1[:L]], [list1[L:]])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create a new empty list to hold the first part of the list\n    first_part = []\n\n    # loop through the list and add L elements to the first part of the list\n    for i in range(L):\n        first_part.append(list1.pop(0))\n\n    # add the remaining elements of the original list to the second part of the list\n    second_part = list1\n\n    # return the resulting lists as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is greater than L\n    if len(lst) > L:\n        # Calculate the length of the first part\n        len_part1 = L\n        # Calculate the length of the second part\n        len_part2 = len(lst) - L\n        # Split the list into two parts\n        part1 = lst[:len_part1]\n        part2 = lst[len_part1:]\n        # Return the resulting lists in a tuple\n        return (part1, part2)\n    else:\n        # If the length of the list is less than or equal to L, return the original list\n        return (lst, [])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in dog's years\n    dog_years = h_age * 7\n\n    # Return the dog's age in dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_years = h_age * 7\n\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age + 2\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 5:\n        return h_age * 7\n    else:\n        return (h_age - 5) * 14"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dob = input(\"Enter your date of birth (DD/MM/YYYY): \")\n    dob_list = dob.split(\"/\")\n    age = 2021 - int(dob_list[2])\n    if int(dob_list[1]) < 3:\n        age -= 1\n    elif int(dob_list[1]) == 3 and int(dob_list[2]) < 30:\n        age -= 1\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Parameters:\n        h_age (int): The height of the dog in inches.\n\n    Returns:\n        int: The age of the dog in dog's years.\n    \"\"\"\n    # Convert the height in inches to centimeters\n    cm_height = h_age * 2.54\n\n    # Calculate the dog's age in dog's years\n    dog_years = cm_height / 120\n\n    return int(dog_years)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0 or h_age > 15:\n        return \"Invalid input. Age must be between 0 and 15.\"\n    else:\n        dob_year = 2021\n        dog_years = 12 - h_age\n        return dob_year + dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 + (h_age / 365)\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+n])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 1:\n        return [S]\n    else:\n        result = []\n        for i in range(0, len(S), step):\n            sub_list = S[i:i+step]\n            result.append(sub_list)\n        return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Convert the input list to a generator expression\n    lst = (S[i:i+step] for i in range(0, len(S), step))\n    # Convert the generator expression back to a list\n    return list(lst)"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize a list to store the resulting lists\n    result = []\n    # loop through the input list\n    for i in range(0, len(S), step):\n        # create a new list containing the nth element\n        new_list = S[i:i+step]\n        # add the new list to the result list\n        result.append(new_list)\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = len(S)\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    i = 0\n    while i < n:\n        result.append(S[i:i+step])\n        i += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube\n    lateral_surface_area = 6 * (l ** 2)\n    # Return the value of the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    S_L = 2 * l ** 2\n    return S_L\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the lateral surface area of the cube\n    lateral_area = 6 * l * l\n    return lateral_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l**2  # Surface area of the cube\n    return surface_area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # loop through first n odd natural numbers\n    for i in range(1,n+1,2):\n        # add square of i to sum\n        sum += i**2\n    # return sum of squares of first n odd natural numbers\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    #initialize the sum variable\n    sum = 0\n\n    #loop through the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        #add the square of the odd number to the sum variable\n        sum += i**2\n\n    #return the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum of squares to 0\n    square_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current odd number to the sum of squares\n        square_sum += i**2\n    \n    return square_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n+1, 2):\n        # Add the square of each odd number to the sum of squares\n        sum_of_squares += i*i\n    \n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Base case: if n is 1, return 1\n    if n == 1:\n        return 1\n    \n    # Recursive case: compute the (n-1)th star number, add 1 to it and return it\n    else:\n        return find_star_num(n-1) + n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    This function takes an integer n as input and returns then'th star number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    else:\n        return 5 * n - 4"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += i\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # define the base stars\n    stars = ['*'] * n\n    # add the remaining spaces\n    for i in range(n, 0, -1):\n        stars += [' ']*(i-1)\n    # add the base stars again to complete then'th star\n    stars += ['*'] * n\n    # join the list of stars to a string and return it\n    return ''.join(stars)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    # Initialize the result to 1\n    result = 1\n    \n    # Loop n-1 times\n    for i in range(1, n):\n        # Multiply the result by (n - i + 1)\n        result *= (n - i + 1)\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1): \n        print('*'*(i-1) + '*')"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the star number to 1\n    star_num = 1\n    \n    # Loop n times to print then'th star number\n    for i in range(n):\n        # Print the current star number\n        print('*' * star_num)\n        \n        # Increment the star number\n        star_num += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the first three star numbers\n    stars = [1, 2, 5]\n\n    # iterate through the remaining n-3 numbers\n    for i in range(3, n):\n        # add the previous number to the end of the list\n        stars.append(stars[-1] + stars[-2])\n\n    # return then'th number in the list\n    return stars[n-1]"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    # initialize the number of stars as 0\n    count = 0\n    # loop n-1 times to get to n\n    for i in range(n-1):\n        # add 5 to the count\n        count += 5\n        # print the count\n        print(count)\n    # print the last count\n    print(count)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {chr(i):i for i in range(32, 127)}\n    return ascii_dict.get(k, \"Character not found in dictionary\")"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        return ord(k)\n    elif isinstance(k, int):\n        return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {\n        'a': 97,\n        'b': 98,\n        'c': 99,\n        'd': 100,\n        'e': 101,\n        'f': 102,\n        'g': 103,\n        'h': 104,\n        'i': 105,\n        'j': 106,\n        'k': 107,\n        'l': 108,\n       'm': 109,\n        'n': 110,\n        'o': 111,\n        'p': 112,\n        'q': 113,\n        'r': 114,\n       's': 115,\n        't': 116,\n        'u': 117,\n        'v': 118,\n        'w': 119,\n        'x': 120,\n        'y': 121,\n        'z': 122,\n        'A': 65,\n        'B': 66,\n        'C': 67,\n        'D': 68,\n        'E': 69,\n        'F': 70,\n        'G': 71,\n        'H': 72,\n        'I': 73,\n        'J': 74,\n        'K': 75,\n        'L': 76,\n        'M': 77,\n        'N': 78,\n        'O': 79,\n        'P': 80,\n        'Q': 81,\n        'R': 82,\n        'S': 83,\n        'T': 84,\n        'U': 85,\n        'V': 86,\n        'W': 87,\n        'X': 88,\n        'Y': 89,\n        'Z': 90,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57\n    }\n    if k in ascii_dict:\n        return ascii_dict[k]\n    else:\n        return 'Invalid input'"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_values = {\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104,\n        'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112,\n        'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120,\n        'y': 121, 'z': 122,\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72,\n        'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80,\n        'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88,\n        'Y': 89, 'Z': 90,\n        '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55,\n        '8': 56, '9': 57\n    }\n    return ascii_values[k]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    k = k.upper()\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        k = ord(k)\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_count += 1\n            if i % 2 == 0:\n                even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n                even_index = i\n    return sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n                even_index = i\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    # initialize sum to zero\n    total = 0\n    # iterate over each element in the array\n    for i in range(len(arr)):\n        # if the element is even and its position is even, add it to the total\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            total += arr[i]\n    # return the total sum\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n\n    Args:\n    arr (list): a list of integers\n\n    Returns:\n    int: the sum of even numbers at even positions of the input list\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n        if i % 2 == 0:\n            even_sum += arr[i]\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    sum_even_at_even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even_at_even_index += arr[i]\n\n    return sum_even_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                even_count += 1\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    sum_even_power = 0\n    for i in range(2, n+1, 2):\n        sum_even_power += i ** 5\n\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_powers = 0\n    i = 0\n    while i < n:\n        sum_even_powers += i*i*i*i*i\n        i += 1\n    return sum_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    # Initialize the sum to 0\n    sum_of_powers = 0\n    \n    # Iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the current even natural number raised to the fifth power to the sum\n        sum_of_powers += i ** 5\n        \n    # Return the sum\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of the same length.\")\n        return\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same number of elements.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] - test_tup2[i]!= 0:\n            return test_tup1[i] - test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the length of the two tuples are equal\n    if len(test_tup1) == len(test_tup2):\n        # loop through the tuples and subtract the elements with the same index\n        for i in range(len(test_tup1)):\n            if i in test_tup2:\n                test_tup1[i] -= test_tup2[i]\n    else:\n        # raise an error if the lengths of the tuples are not equal\n        raise ValueError('The two tuples must be of equal length.')\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Initialize a new tuple to store the result\n    result_tup = ()\n\n    # Loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the elements of the first tuple and the elements of the second tuple with the same index\n        result_tup += (test_tup1[i] - test_tup2[i],)\n\n    # Return the new tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # If the length of the first tuple is not equal to the length of the second tuple, return an error message.\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The length of the first tuple is not equal to the length of the second tuple.\"\n\n    # Create a new tuple with the same length as the first tuple.\n    new_tup = []\n\n    # Loop over the elements of the first tuple.\n    for i in range(len(test_tup1)):\n        # Subtract the element of the first tuple by the element of the second tuple with the same index.\n        new_tup.append(test_tup1[i] - test_tup2[i])\n\n    # Return the new tuple.\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check that the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    \n    # Create a new list to hold the result\n    result_list = []\n    \n    # Loop through each element in the first tuple and subtract it from the corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    \n    # Return the new list as the result\n    return result_list"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        print(\"Error: n must be a positive integer.\")\n        return None\n    \n    # Initialize sum to 0\n    sum = 0\n    \n    # Initialize counter to 0\n    k = 0\n    \n    # Check if n is even\n    if n % 2 == 0:\n        n -= 1\n    \n    # Iterate through the even indices of n\n    while k <= n:\n        # Calculate the even index binomial coefficient\n        coeff = math.comb(n, k)\n        \n        # Check if the even index binomial coefficient is even\n        if k % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            sum += coeff\n        \n        # Increment the counter\n        k += 1\n    \n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i-2)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(1, n+1):\n        coeff = math.comb(n, i)\n        if i%2 == 0:\n            sum_even_coeffs += coeff\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize sum of even binomial coefficients to 0\n    sum_even_binomial_coeffs = 0\n\n    # loop through each index i from 1 to n-1\n    for i in range(1, n):\n        # calculate the binomial coefficient\n        binomial_coeff = math.comb(n, i)\n\n        # check if the index is even\n        if i % 2 == 0:\n            # add the even binomial coefficient to the sum\n            sum_even_binomial_coeffs += binomial_coeff\n\n    # return the sum of even binomial coefficients\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        binomial_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum += binomial_coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += (-1) ** (i-1) * math.factorial(i) / math.factorial(i-2)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        return \"Please input a positive integer.\"\n\n    # Initialize sum to 0\n    even_sum = 0\n\n    # Loop through from 0 to n-1\n    for i in range(n):\n        # If i is even, add its binomial coefficient to sum\n        if i % 2 == 0:\n            even_sum += math.comb(n, i)\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for i in range(2, n+1):\n        coeff = math.comb(i, 2)\n        if coeff % 2 == 0:\n            total += coeff\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize the sum of even binomial coefficients to zero\n    even_sum = 0\n\n    # Calculate the even index binomial coefficients up to n\n    for i in range(2, n+1, 2):\n        even_sum += math.comb(n, i)\n\n    return even_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * 3.14159 * r * r * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r**2*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3) * 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = (1/3) * pi * r**2 * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14 * r * r  # Formula to calculate the surface area of a cylinder\n    volume = area * h / 3  # Formula to calculate the volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159 * r * r * h) / 3\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    # Create a new dictionary to store the filtered entries\n    filtered_dict = {}\n    # Loop through each key-value pair in the original dictionary\n    for key, value in dict.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the key-value pair to the new dictionary if it's greater than or equal to n\n            filtered_dict[key] = value\n    # Return the new dictionary with only the entries with values greater than or equal to n\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {k:v for k,v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1 and test_tup[i+1] == test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n            continue\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0 or test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    This function takes a tuple as input and returns the count of elements before the specified element.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i]!= test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(1, n + 1):\n        decagonal_num = decagonal_num * (3 * i - 1) // 2\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables to store the current and previous numbers in the sequence\n    current = 1\n    previous = 1\n    # Loop through the sequence up to n\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence by adding the previous two numbers together\n        next_num = current + previous\n        # Update the variables to store the current and next numbers in the sequence\n        current = previous\n        previous = next_num\n    # Return the nth number in the sequence, which is the decagonal number\n    return current"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def num_decagonal(n):\n        return 1 + 6 * n // 10\n\n    if n == 1:\n        return 1\n    else:\n        return num_decagonal(n-1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer `n` and returns True if it is a decagonal number, and False otherwise.\n\n    A decagonal number is a positive integer that is equal to the sum of two squares of its integer part. For example, 15 is a decagonal number, as 1^2 + 5^2 = 15.\n    \"\"\"\n    def square_of_num(num):\n        \"\"\"\n        This function takes an integer `num` and returns its square.\n        \"\"\"\n        return num ** 2\n\n    def int_part_of_num(num):\n        \"\"\"\n        This function takes an integer `num` and returns its integer part.\n        \"\"\"\n        return num % 10\n\n    def decagonal_sum(n):\n        \"\"\"\n        This function takes an integer `n` and returns the sum of the squares of the integer parts of the first `n` decagonal numbers.\n        \"\"\"\n        return sum(square_of_num(int_part_of_num(i)) for i in range(1, n+1))\n\n    if n > 0:\n        if n % 2 == 0:\n            if decagonal_sum(n//2) == square_of_num(n//2):\n                return True\n        else:\n            if decagonal_sum(n//2) == square_of_num(n//2) + square_of_num(n//2+1):\n                return True\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 10\n    else:\n        return 10*is_num_decagonal(n-1) + n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def decagonal_helper(n):\n        if n <= 0:\n            return 0\n        else:\n            return 1 + 5 * (n - 1) + decagonal_helper(n - 1)\n    \n    return decagonal_helper(n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    for i in range(1, n+1):\n        decagonal += (5*i**2) + (5*i-2)\n    return decagonal\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_numbers = [0]\n    for i in range(1, n+1):\n        decagonal_numbers.append(i*(3*i-1)/2)\n    return decagonal_numbers[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    This function takes an integer as input and returns True if it is a decagonal number, False otherwise.\n    '''\n    num_str = str(n)\n    decagonal_nums = [int(num_str[i:i+2]) for i in range(len(num_str)-1, -1, -1)]\n    return n in decagonal_nums"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # initialize variables\n    i = 1\n    decagonal = 0\n\n    # loop through the first n rows\n    for j in range(1, n+1):\n\n        # calculate the value of the jth row\n        row_value = j * (2 * j - 1)\n\n        # add the value of the jth row to the decagonal number\n        decagonal += row_value\n\n    # return the value of the decagonal number\n    return decagonal"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i, element in enumerate(dlist):\n        if element == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if the elements of a given list are unique or not.\n    It returns True if all elements of the list are unique and False otherwise.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(test_list)\n    \n    # Check if the length of the unique set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set from the given list\n    unique_set = set(test_list)\n\n    # check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # Create a set to store unique elements of the list\n    unique_set = set()\n\n    # Loop through the list and add elements to the set\n    for element in test_list:\n        unique_set.add(element)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements in the list are unique, False otherwise.\n    \"\"\"\n    # Create a set to store unique elements in the list\n    unique_set = set(test_list)\n    # If the length of the set is equal to the length of the list, all the elements in the list are unique\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all its elements are unique or False otherwise.\n    \"\"\"\n    unique_elements = set(test_list)\n    return len(unique_elements) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        print(\"All elements are unique\")\n    else:\n        print(\"Some elements are not unique\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must have the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n\n    Parameters:\n    - nums1: list of numbers\n    - nums2: list of numbers\n\n    Returns:\n    - list of numbers: the element-wise difference between nums1 and nums2\n    '''\n\n    # Check that both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n\n    # Subtract each element of nums1 from the corresponding element of nums2\n    diff_list = [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n\n    return diff_list"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists must have the same length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n\n    Args:\n    nums1 (list): The first list of numbers to be subtracted.\n    nums2 (list): The second list of numbers to be subtracted.\n\n    Returns:\n    list: A list of the differences between the corresponding elements of the two input lists.\n    '''\n\n    # Check that the two input lists are of the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both input lists must be of the same length.')\n\n    # Initialize an empty list to hold the differences\n    diffs = []\n\n    # Loop over the indices of the lists\n    for i in range(len(nums1)):\n        # Subtract the corresponding elements from each list and append the result to the list of differences\n        diffs.append(nums1[i] - nums2[i])\n\n    return diffs"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length\")\n        return\n    \n    # Subtract each element of the two lists\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    nums1 (list): List of integers.\n    nums2 (list): List of integers.\n\n    Returns:\n    list: List of integers that are the difference between the input lists.\n\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must be of equal length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq_dict = {}\n\n    for digit in digits:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n\n    for digit in freq_dict:\n        if freq_dict[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    # convert the integer to a string\n    s = str(n)\n    \n    # initialize the frequency dictionary\n    freq = {}\n    \n    # iterate through each digit in the string\n    for digit in s:\n        # if the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # otherwise, add it to the dictionary with a frequency of 1\n        else:\n            freq[digit] = 1\n            \n    # iterate through each key-value pair in the dictionary\n    for key, value in freq.items():\n        # if the frequency of the value is greater than the key itself, return False\n        if value > key:\n            return False\n    \n    # if we reach this point, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    for i in str(n):\n        freq[i] = freq.get(i, 0) + 1\n\n    # Loop through each digit in the integer\n    for i in str(n):\n        # Check whether the frequency of the digit is less than or equal to the digit itself\n        if freq[i] > i:\n            return False\n\n    # If we get here, the integer meets the condition of having each digit with its frequency less than or equal to itself\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # Initialize the frequency dictionary\n    freq = {}\n    \n    # Iterate through each digit of n\n    for digit in str(n):\n        # Check if the digit is already in the dictionary\n        if digit in freq:\n            # If it is, increment its count by 1\n            freq[digit] += 1\n        else:\n            # If it isn't, add it to the dictionary with a count of 1\n            freq[digit] = 1\n    \n    # Iterate through the digits in the dictionary\n    for digit in freq:\n        # Check if the count of the digit is greater than or equal to the digit itself\n        if freq[digit] >= int(digit):\n            # If it is, return False since the frequency is invalid\n            return False\n    \n    # If all the digits have a frequency less than or equal to the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Split the integer into a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Iterate through the digits and update the frequency dictionary\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # Iterate through the digits again and check if the frequency is less than or equal to the digit itself\n    for digit in digits:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    # Check if the number is less than 10\n    if n < 10:\n        return True\n    # Convert the number to a string and split it into a list\n    s = str(n)\n    digits = list(s)\n    # Check if the length of the list is less than or equal to 2 (since at least one digit needs to be repeated)\n    if len(digits) <= 2:\n        return True\n    # Check if the frequency of each digit in the string is less than or equal to the digit itself\n    freq = {}\n    for d in digits:\n        if d not in freq:\n            freq[d] = 1\n        else:\n            freq[d] += 1\n    for f in freq.values():\n        if f > 1:\n            return False\n    # If we reach here, all digits have frequency greater than 1\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to a string\n    str_num = str(n)\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    # Loop through each digit in the string\n    for digit in str_num:\n        # If the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # Otherwise, add the digit and its frequency to the dictionary\n        else:\n            freq[digit] = 1\n    # Loop through each digit in the string again\n    for digit in str_num:\n        # Check if the frequency of the digit is greater than the digit itself\n        if freq[digit] > digit:\n            return False\n    # If all digits have frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    # initializing a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # converting the integer to a string\n    num = str(n)\n    \n    # iterating over each character in the string\n    for char in num:\n        # if the character is already in the dictionary, increment its value by 1\n        if char in freq:\n            freq[char] += 1\n        # otherwise, add the character to the dictionary with a value of 1\n        else:\n            freq[char] = 1\n    \n    # iterating over each digit in the integer and checking its frequency in the dictionary\n    for digit in str(n):\n        if freq[digit] > digit:\n            return False\n    \n    # if all digits are valid, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # Dictionary to store the frequency of digits\n    freq = {}\n\n    # Loop through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n\n    # Loop through each digit in the dictionary to check if the frequency is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    # If all digits have a frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        for item in list[1:]:\n            if item!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    This function takes a list and an element as input and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        return list[0] == element and check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and returns True if all elements in the list are equal to the given element, False otherwise.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return True\n    elif list[0] == element and check_element(list[1:], element):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        return check_element(list[1:], element)\n    \n    return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        if list[0] == element:\n            return check_element(list[1:], element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and element as input and returns True if all items in the list are equal to the given element, False otherwise.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = r'a(?=b{2,3})'\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)\\w{2,3}(?=b)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba[bB]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The pattern '{}' is found in the text.\".format(pattern))\n        return True\n    else:\n        print(\"The pattern '{}' is not found in the text.\".format(pattern))\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    pattern = re.compile(r'a(b){2,3}')\n    \n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a modified array by repeating the original array k times\n    modified_array = [a[0]] * k + a + [a[-1]] * k\n    # initialize the maximum sum and its index\n    max_sum = modified_array[0]\n    max_index = 0\n    # iterate through the modified array and find the maximum sum of the contiguous subarray\n    for i in range(1, len(modified_array)):\n        if i < k:\n            modified_array[i] = a[0]\n        else:\n            modified_array[i] = a[i-k]\n        sum_array = [modified_array[i]]\n        for j in range(1, i):\n            sum_array.append(modified_array[j] + modified_array[i])\n        if sum_array[i] > max_sum:\n            max_sum = sum_array[i]\n            max_index = i\n    # return the maximum sum and its index\n    return max_sum, max_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Find the maximum sum of a contiguous array in the original array\n    max_sum = max(sum(a), 0)\n\n    # Repeat the original array k times\n    repeated_a = [0] * (k * n)\n    for i in range(k * n):\n        repeated_a[i] = a[i % n]\n\n    # Find the maximum sum of a contiguous array in the repeated array\n    max_sum_repeated = max(sum(repeated_a), 0)\n\n    return max_sum_repeated"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the max sum to be 0\n    max_sum = 0\n\n    # Repeat the given array k times and find the sum of each repeated subarray\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            subarray_sum = sum(a[i:i+j+1])\n            if subarray_sum > max_sum:\n                max_sum = subarray_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create the modified array by repeating the original array k times\n    modified_array = a * k\n    max_sum = float('-inf')\n    temp_sum = 0\n    \n    # Iterate through the modified array and find the maximum sub-array sum\n    for i in range(n):\n        if i < k-1:\n            temp_sum += a[i]\n        else:\n            temp_sum -= a[i-k+1] + a[i]\n            \n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the sum of the first k elements\n    max_sum = float('-inf')\n    sum_of_first_k = sum(a[:k])\n    \n    # Loop through the remaining elements of the array\n    for i in range(k, n):\n        # Calculate the sum of the previous k elements and the new element\n        sum_of_k = sum_of_first_k + a[i]\n        \n        # Update the maximum sum if necessary\n        if sum_of_k > max_sum:\n            max_sum = sum_of_k\n        \n        # Update the sum of the first k elements\n        sum_of_first_k = sum_of_k + sum(a[i-k:i])\n        \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    max_start = 0\n    max_end = 0\n    for i in range(n):\n        if i >= k:\n            sub_array = a[max_start:i+1]\n            sub_array = [x*k for x in sub_array]\n            sub_array = sum(sub_array)\n            if sub_array > max_sum:\n                max_sum = sub_array\n                max_start = i-k+1\n                max_end = i+1\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_a = a * k\n    mod_a_sum = sum(mod_a)\n    max_sum = float('-inf')\n    start_index = 0\n\n    for i in range(n - k + 1):\n        temp_sum = 0\n        for j in range(k):\n            temp_sum += a[i + j]\n        temp_sum *= k\n        temp_sum += mod_a_sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            start_index = i\n\n    return a[start_index: start_index + k], max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize a list to store the modified array\n    modified_arr = [a] * k\n\n    # Initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n\n    # Iterate through the modified array and calculate the sum of each subarray\n    for i in range(1, len(modified_arr)):\n        modified_arr[i] = modified_arr[i-1] + a[i-1]\n\n    # Iterate through the modified array and update the maximum sum\n    for i in range(len(modified_arr)):\n        if i == 0:\n            max_sum = modified_arr[i]\n        else:\n            max_sum = max(max_sum, modified_arr[i])\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = float('-inf') \n    min_sum = float('inf') \n    temp_sum = 0\n    temp_array = []\n    for i in range(k):\n        temp_array.append(a[0])\n        temp_sum += a[0]\n    for i in range(1, n):\n        temp_array.append(temp_array[i-1] + a[i])\n        temp_sum += a[i]\n        max_sum = max(max_sum, temp_sum)\n        temp_sum = temp_array[i]\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the index of the current subarray\n    max_sum = float('-inf')\n    current_sum = a[0]\n    current_index = 0\n    \n    # Repeat the array k times and find the maximum sum\n    for i in range(k):\n        # Update the current subarray\n        current_sum += a[i]\n        \n        # Update the maximum sum if the current subarray has a larger sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_index = i\n        \n        # If the current subarray is negative, update it with the next element\n        elif current_sum < 0:\n            current_sum = a[i]\n    \n    # Remove the repeated elements from the array and return the maximum sum\n    return max_sum - current_index * a[current_index]"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    current_number = 0\n    while current_number < n:\n        if current_number % 2 == 0:\n            sum_of_squares += current_number ** 2\n        current_number += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(2, n+1, 2):\n        total_sum += i*i\n    return total_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        sum += i**2\n        count += 1\n    \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n    return sum([i**2 for i in even_numbers])\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    # initialize sum of squares to 0\n    sum_of_squares = 0\n    \n    # loop through first n even natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the square of the number and add it to the sum of squares\n        sum_of_squares += i*i\n    \n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize variables\n    max_length_list = []\n    max_length = 0\n    \n    # Iterate through the list of lists\n    for sublist in list1:\n        # Calculate the length of the sublist\n        length = len(sublist)\n        \n        # If the length is greater than the current maximum, update the maximum length and the sublist\n        if length > max_length:\n            max_length = length\n            max_length_list = sublist\n    \n    # Return the list of maximum length\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize variables\n    max_length = 0\n    max_list = []\n    \n    # loop through the list of lists\n    for sublist in list1:\n        # check if the length of the current sublist is greater than the maximum length\n        if len(sublist) > max_length:\n            # update the maximum length and maximum sublist\n            max_length = len(sublist)\n            max_list = sublist\n    \n    # return the maximum sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for lst in list1:\n        lengths = [len(sublst) for sublst in lst]\n        max_length = max(lengths)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # Initialize an empty list to store the maximum length lists\n    max_lists = []\n    # Loop through each element of the list\n    for element in list1:\n        # If the length of the current element is greater than the length of the maximum length list,\n        # add the current element to the maximum length list and update the maximum length list.\n        if len(element) > len(max_lists):\n            max_lists = [element]\n        # If the length of the current element is equal to the length of the maximum length list,\n        # add the current element to the maximum length list.\n        elif len(element) == len(max_lists):\n            max_lists.append(element)\n    # Return the maximum length lists\n    return max_lists"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length = []\n    for lst in list1:\n        if len(lst) > len(max_length):\n            max_length = lst\n    return max_length"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through all possible combinations of colors\n    for i in range(2**k):\n        # Create a list to store the current combination of colors\n        color_combination = []\n\n        # Loop through all possible positions in the fence\n        for j in range(n):\n            # If the current position has the same color as the previous position, add it to the color combination list\n            if (i >> j) & 1 == 1:\n                color_combination.append(j)\n\n        # If the length of the color combination list is less than or equal to 2, the number of ways to paint the fence is incremented\n        if len(color_combination) <= 2:\n            count += 1\n\n    # Return the final count of ways to paint the fence\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Create a boolean array of size n+1 where each element is False\n    visited = [False] * (n+1)\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Initialize the starting post\n    start = 0\n\n    # Initialize the current color\n    currentColor = 0\n\n    # Initialize the count of the current color\n    colorCount = 0\n\n    # Helper function to check if the current color is valid for the current post\n    def is_valid_color(color):\n        if (currentColor == 0 and color!= 0) or (currentColor == 1 and color == 0):\n            return True\n        else:\n            return False\n\n    # Helper function to count the number of ways to paint the fence\n    def count_ways():\n        if start == n:\n            count += 1\n            return\n\n        if not visited[start+1] and is_valid_color(currentColor):\n            visited[start+1] = True\n            count_ways()\n            visited[start+1] = False\n\n            if currentColor == colorCount:\n                count_ways()\n\n            currentColor = (currentColor + 1) % 2\n            colorCount = (colorCount + 1) % k\n\n    # Call the count_ways function to get the number of ways to paint the fence\n    count_ways()\n\n    # Return the count variable which contains the number of ways to paint the fence\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a list to store the number of ways for each color\n    ways = [0] * (k + 1)\n\n    # Initialize the base cases\n    ways[0] = 1\n    ways[1] = 1\n\n    # Iterate over the remaining colors\n    for i in range(2, k + 1):\n        # For each color, consider two adjacent posts\n        ways[i] += ways[i - 2]\n        ways[i] %= (10 ** 9 + 7)\n\n    # Iterate over the fence posts and calculate the number of ways\n    ways[n] %= (10 ** 9 + 7)\n    for i in range(n - 1, -1, -1):\n        ways[i] += ways[i + 1]\n        ways[i] %= (10 ** 9 + 7)\n\n    return ways[0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    if k == 1:\n        return n\n    elif k == 2:\n        return 2*n\n    else:\n        count = 0\n        for i in range(n+1):\n            count += count_no_of_ways(n-i, k-1)\n        return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # create a 2D list to store the number of ways for each combination of colors\n    ways = [[0] * k for _ in range(n+1)]\n\n    # base cases for 0 and 1 posts\n    ways[0][0] = 1\n    ways[1][0] = 1\n\n    # fill in the rest of the table\n    for i in range(2, n+1):\n        for j in range(k):\n            ways[i][j] = ways[i-1][j] # no previous color allowed\n            if j > 0:\n                ways[i][j] += ways[i-1][j-1] # previous color allowed\n\n    return ways[-1][-1] # the last element is the final answer"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a dictionary to store the color count of each post\n    color_count = {i: 1 for i in range(1, n+1)}\n\n    # Initialize a variable to store the count of the final color\n    count = 0\n\n    # Iterate through all colors\n    for color in range(1, k+1):\n        # Initialize a counter for adjacent posts with the same color\n        same_color_count = 0\n\n        # Iterate through all posts and check if they have the same color\n        for i in range(1, n+1):\n            # Check if the color count of the current post is less than or equal to 2 for adjacent posts with the same color\n            if color_count[i] <= 2:\n                same_color_count += 1\n\n        # If the count is less than or equal to 2 for adjacent posts with the same color, increment the count\n        if same_color_count <= 2:\n            count += same_color_count\n\n        # Reset the color count of the current post\n        color_count[n] = 1\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a list to store the number of ways of painting the fence with n posts and k colors\n    ways = [0]*(n+1)\n    ways[0] = 1  # One way to paint the fence is when all the posts have the same color\n    \n    # Fill the remaining elements of the list using the recurrence relation\n    for i in range(1, n+1):\n        for j in range(min(i, k)+1):\n            ways[i] += ways[i-j]\n    \n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case: if there are no colors left, there is only one way\n    if k == 0:\n        return 1\n\n    # base case: if there are no posts left, there are no ways\n    if n == 0:\n        return 0\n\n    # base case: if there is only one post left and one color left, there is only one way\n    if n == 1 and k == 1:\n        return 1\n\n    # base case: if there are two posts left, there are two ways to paint them\n    if n == 2:\n        return 2\n\n    # base case: if there is only one post left, there are two ways to paint it with one color left\n    if n == 1:\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n\n    # base case: if there is only two posts left, there are four ways to paint them with two colors left\n    if n == 2:\n        return count_no_of_ways(n-2, k-2) + count_no_of_ways(n-2, k-1) + count_no_of_ways(n-2, k) + count_no_of_ways(n-1, k-2)\n\n    # recursive case: there are at most 2 adjacent posts with the same color\n    ways = count_no_of_ways(n-2, k-1)\n    ways += count_no_of_ways(n-2, k)\n    ways += count_no_of_ways(n-1, k-1)\n    ways += count_no_of_ways(n-1, k)\n\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # function to count the no of ways of painting a fence\n    def count_ways(left, right, color):\n        if left == 0:\n            return 1\n        elif left == right:\n            return 0\n        else:\n            return count_ways(left-1, right, color) + count_ways(left, right-1, color)\n    \n    # function to check if two adjacent posts have the same color\n    def is_same_color(left, right, color):\n        if left < 0 or right >= n or left >= right or left >= k or color < 0 or color >= k:\n            return False\n        if fence[left] == fence[right]:\n            return True\n        else:\n            return False\n    \n    # calculating the number of ways of painting the fence\n    fence = [0] * k\n    no_of_ways = 0\n    for i in range(n):\n        if fence[fence[i]] == 0:\n            color = fence[i]\n            left = i\n            right = i\n            fence[i] = (color + 1) % k\n            no_of_ways += count_ways(left, right, color)\n            if not is_same_color(left, right, color):\n                no_of_ways -= count_ways(left, right-1, color)\n        else:\n            fence[fence[i]] = (fence[fence[i]] + 1) % k\n    return no_of_ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize the count to 0\n    count = 0\n\n    # Loop through all possible arrangements of fence posts\n    for i in range(n):\n        # Loop through all possible arrangements of colors\n        for j in range(k):\n            # Check if the current combination of colors and fence posts satisfies the constraints\n            if j == 0 or (i > 0 and j == fence_posts[i-1] and j!= fence_posts[i-2]):\n                count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m # integer division\n    if n % m!= 0: # if the remainder is not zero\n        quotient += 1 # add 1 to the quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # Divide the first number by the second number\n    quotient = n//m\n\n    # Return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    if n % m!= 0:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    This function takes two arguments, n and m, representing two numbers.\n    It returns the quotient of n and m rounded down to the nearest integer.\n    '''\n    return round(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return round(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5 # calculating the semi-perimeter of the triangle\n    return math.sqrt(s**2 - w**2) # returning the third side of the right angled triangle"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2 - (w/2)**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the cosine of the angle\n    cos_angle = (w**2 + h**2 - s**2) / (2*w*h)\n\n    # Calculate the angle in degrees\n    angle = math.degrees(math.acos(cos_angle))\n\n    # Convert the angle to radians\n    angle_rad = math.radians(angle)\n\n    # Calculate the third side of the triangle using the formula\n    third_side = h * math.sin(angle_rad)\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2) / 2\n    return math.sqrt(s)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = w * h / 2\n    a = math.sqrt(w**2 + h**2)\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # calculate the semi-length of the triangle\n    l = math.sqrt(s ** 2 - w ** 2)\n\n    # calculate the other side of the triangle\n    a = math.sqrt(w ** 2 + h ** 2 - s ** 2)\n\n    # return the other side of the triangle\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)  # calculate the semi-perimeter\n    c = math.sqrt(w**2) + math.sqrt(h**2)  # calculate the third side\n\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w ** 2 + h ** 2)\n    b = math.sqrt(w ** 2 - h ** 2)\n    c = a * math.sin(math.radians(60))\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w ** 2 + h ** 2)\n    return s"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = float('-inf') # initialize max value to negative infinity\n    for val in listval:\n        if val > max_val:\n            max_val = val # update max value if a larger value is found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        return max(listval, key=lambda x: type(x).__name__)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    max_val = listval[0] # initialize the maximum value to be the first value in the list\n    \n    # loop through the list to find the maximum value\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n\n    return max_val # return the maximum value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_value = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(lst):\n    \"\"\"\n    Find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = lst[0]\n    for item in lst[1:]:\n        if item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf') # set the initial maximum value to negative infinity\n    for val in listval:\n        if val > max_val: # if the current value is greater than the maximum value, update the maximum value\n            max_val = val\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize a variable to store the sum of all divisors\n    total_sum = 0\n    # Loop through all numbers from 1 to the square root of the input number\n    for i in range(1, int(number**0.5) + 1):\n        # Check if the input number is divisible by the current number\n        if number % i == 0:\n            # If the number is divisible, add it to the sum of all divisors\n            total_sum += i\n    # Return the sum of all divisors\n    return total_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to store inversions\n    inv_count = 0\n    inv_count_left = 0\n    inv_count_right = len(arr) - 1\n\n    while inv_count_left < inv_count_right:\n        # Count inversions between inv_count_left and inv_count_right\n        inv_count_left_left = inv_count_left\n        inv_count_left_right = inv_count_left\n        inv_count_right_left = inv_count_right\n\n        while inv_count_left_left < inv_count_left_right:\n            # Check if the element at inv_count_left_left is greater than the element at inv_count_left_right\n            if arr[inv_count_left_left] > arr[inv_count_left_right]:\n                inv_count_left_left += 1\n            else:\n                inv_count_left_right -= 1\n\n        inv_count += inv_count_left_left - inv_count_left\n\n        # Count inversions between inv_count_right and len(arr)-1\n        inv_count_right_right = inv_count_right\n        inv_count_left_right = inv_count_left\n\n        while inv_count_right_right > inv_count_right_left:\n            # Check if the element at inv_count_right_right is greater than the element at inv_count_right_left\n            if arr[inv_count_right_right] > arr[inv_count_right_left]:\n                inv_count_right_right -= 1\n            else:\n                inv_count_right_left += 1\n\n        inv_count += inv_count_right_right - inv_count_right\n\n        # Move the left pointers to find the next pair of inversions\n        inv_count_left += inv_count_left_right - inv_count_left_left\n        inv_count_right -= inv_count_right_right - inv_count_right_left\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    Inversion count is the number of pairs of elements in the array that are in the wrong order. \n    '''\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize variables\n    n = len(arr)\n    left = 0\n    right = n - 1\n    count = 0\n\n    # Traverse the array from both ends\n    while left < right:\n\n        # If the left and right elements are in the correct order, move both pointers towards each other\n        if arr[left] <= arr[right]:\n            left += 1\n\n        # If the left element is greater than the right element, increment the count and move the right pointer towards the right\n        else:\n            count += right - left\n            right -= 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Find the length of the array\n    n = len(arr)\n    # Initialize variables to store inversions count and inversions array\n    inv_count = 0\n    inversions = []\n    # Divide the array into two halves and count inversions in each half\n    for i in range(n):\n        left, right = i, n-1\n        while left < right:\n            # Find the middle index of the current half\n            mid = (left + right) // 2\n            # If the middle element is greater than the pivot, add it to the inversions array\n            if arr[mid] > arr[i]:\n                inv_count += right - mid\n                inversions.append((i, mid))\n                left = mid + 1\n            # If the middle element is smaller than the pivot, remove it from the right half\n            else:\n                right = mid\n        # If the left pointer reaches the end of the current half, add the remaining elements in the right half to the inversions array\n        while left <= right:\n            inv_count += right - left + 1\n            inversions.append((i, left))\n            left += 1\n    # Sort the inversions array in ascending order\n    inversions.sort()\n    # Return the inversions count\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    # Initialize variables to keep track of the inversion count\n    inv_count = 0\n    left = 0\n    right = len(arr) - 1\n\n    # Sort the array in ascending order\n    for i in range(len(arr)):\n        for j in range(left, right):\n            if arr[j] > arr[right]:\n                left += 1\n                arr[left], arr[j] = arr[j], arr[left]\n                inv_count += right - left + 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        # Find the maximum element in the sub-array from the current index to the end\n        max_idx = i\n        for j in range(i, n):\n            if arr[j] > arr[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the current element\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        # Calculate the inversion count\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                inv_count += n - j\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - i\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # get the length of the array\n    n = len(arr)\n\n    # create an empty list to store inversions\n    inv_count = []\n\n    # create a helper function to perform inversion count\n    def merge_sort(arr, low, high):\n        # if the array has only one element, it is already sorted\n        if low < high:\n            # find the middle element of the array\n            mid = (low + high) // 2\n\n            # recursively sort the left and right halves of the array\n            merge_sort(arr, low, mid)\n            merge_sort(arr, mid + 1, high)\n\n            # perform the merge operation to sort the array\n            i = low\n            j = mid + 1\n            k = low\n\n            while i <= mid and j <= high:\n                if arr[i] <= arr[j]:\n                    inv_count.append(mid - i + 1)\n                    inv_count.append(mid - j + 1)\n                    inv_count.append(mid - k + 1)\n                    inv_count.append(high - k + 1)\n                    inv_count.append(high - j + 1)\n                    inv_count.append(high - i + 1)\n                    inv_count.append(high - mid + 1)\n                    inv_count.append(mid - i + 1)\n                    inv_count.append(mid - j + 1)\n                    inv_count.append(mid - k + 1)\n                    inv_count.append(high - k + 1)\n                    inv_count.append(high - j + 1)\n                    inv_count.append(high - i + 1)\n                    inv_count.append(high - mid + 1)\n                    inv_count.append(mid - i + 1)\n                    inv_count.append(mid - j + 1)\n                    inv_count.append(mid - k + 1)\n                    inv_count.append(high - k + 1)\n                    inv_count.append(high - j + 1)\n                    inv_count.append(high - i + 1)\n                    inv_count.append(high - mid + 1)\n                    inv_count.append(mid - i + 1)\n                    inv_count.append(mid - j + 1)\n                    inv_count.append(mid - k + 1)\n                    inv_count.append(high - k + 1)\n                    inv_count.append(high - j + 1)\n                    inv_count.append(high - i + 1)\n                    inv_count.append(high - mid + 1)\n                    inv_count.append(mid - i + 1)\n                    inv_count.append(mid - j + 1)\n                    inv_count.append(mid - k + 1)\n                    inv_count.append(high - k + 1)\n                    inv_count.append(high - j + 1)\n                    inv_count.append(high - i + 1)\n                    inv_count.append(high - mid + 1)\n                    inv_count.append(mid - i + 1)\n                    inv_count.append(mid - j + 1)\n                    inv_count.append(mid - k + 1)\n                    inv_count.append(high - k + 1)\n                    inv_count.append(high - j + 1)\n                    inv_count.append(high - i + 1)\n                    inv_count.append(high - mid + 1)\n                    inv_count.append(mid - i + 1)\n                    inv_count.append(mid - j + 1)\n                    inv_count.append(mid - k + 1)\n                    inv_count.append(high - k + 1)\n                    inv_count.append(high - j + 1)\n                    inv_count.append(high - i + 1)\n                    inv_count.append(high - mid + 1)\n                    inv_count.append(mid - i + 1)\n                    inv_count.append(mid - j + 1)\n                    inv_count.append(mid - k + 1)\n                    inv_count.append(high - k + 1)\n                    inv_count.append(high - j + 1)\n                    inv_count.append(high - i + 1)\n                    inv_count.append(high - mid + 1)\n                    inv_count.append(mid - i + 1)\n                    inv_count."
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    n = len(arr)\n\n    # Sort the array using merge sort\n    merge_sort(arr, 0, n - 1)\n\n    # Count inversions using two pointers\n    inv_count = 0\n    i = 0\n    j = n - 1\n\n    while i < j:\n        if arr[i] > arr[j]:\n            inv_count += j - i\n            i += 1\n        else:\n            j -= 1\n\n    return inv_count\n\n\ndef merge_sort(arr, low, high):\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(arr, low, mid)\n        merge_sort(arr, mid + 1, high)\n        merge(arr, low, mid, high)\n\n\ndef merge(arr, low, mid, high):\n    i = low\n    j = mid + 1\n    k = low\n\n    while i <= mid and j <= high:\n        if arr[i] <= arr[j]:\n            arr[k] = arr[i]\n            i += 1\n        else:\n            arr[k] = arr[j]\n            j += 1\n            inv_count += mid - i + 1\n        k += 1\n\n    while i <= mid:\n        arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= high:\n        arr[k] = arr[j]\n        j += 1\n        k += 1\n"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Parameters:\n    lst (list): A nested list structure to be flattened.\n\n    Returns:\n    list: A flattened list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    result = []\n    for element in lst:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initialize an empty list to store the flattened list\n    flat_list = []\n    # Loop through each element in the nested list\n    for elem in list1:\n        # If the element is a list, recursively flatten it\n        if isinstance(elem, list):\n            flat_list.extend(flatten_list(elem))\n        # Otherwise, append the element to the flat list\n        else:\n            flat_list.append(elem)\n    # Return the flattened list\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flat list containing all the elements of the input list.\n    \"\"\"\n    flattened_lst = []\n    for i in lst:\n        if isinstance(i, list):\n            flattened_lst.extend(flatten_list(i))\n        else:\n            flattened_lst.append(i)\n    return flattened_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    def flatten(nested_list):\n        flat_list = []\n        for item in nested_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flattened_list = flatten(list1)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function flattens a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for item in stdata:\n        for i in item:\n            max_agg[i] += item[i]\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(float)\n    for item in stdata:\n        max_dict[item[0]] += item[1]\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for customer, amount in stdata:\n        # Update the maximum aggregate for the customer\n        max_aggr[customer] = max(max_aggr[customer], amount)\n\n    # Return the maximum aggregate from all customers\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list of tuples and update the frequency dictionary\n    for item, freq in stdata:\n        freq_dict[item] += freq\n\n    # Find the maximum aggregate from the frequency dictionary\n    max_agg = max(freq_dict.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # Iterate through the list of tuples and increment the frequency of each item\n    for item in stdata:\n        freq[item[0]] += 1\n\n    # Calculate the maximum aggregate by iterating through the list of tuples and multiplying the frequency by the value\n    max_agg = 0\n    for item in stdata:\n        max_agg = max(max_agg, item[1] * freq[item[0]])\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n\n    for name, amount in stdata:\n        max_dict[name] += amount\n\n    max_aggr = 0\n    for value in max_dict.values():\n        if value > max_aggr:\n            max_aggr = value\n\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each item\n    max_agg = defaultdict(lambda: 0)\n\n    # Iterate through the list of tuples and update the max_agg dictionary\n    for item, value in stdata:\n        max_agg[item] = max(max_agg[item], value)\n\n    # Return the maximum aggregate from the dictionary\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples containing student ID and marks as input and returns the maximum aggregate.\n    The function uses a dictionary to store the aggregate of each student and their respective marks.\n    The function then iterates over the dictionary to find the student with the maximum aggregate and returns their ID.\n    '''\n\n    # create a defaultdict to store the aggregate of each student and their respective marks\n    d = defaultdict(int)\n\n    # iterate over the list of tuples to add the marks of each student to the defaultdict\n    for student, mark in stdata:\n        d[student] += mark\n\n    # find the student with the maximum aggregate using the `max()` function\n    max_agg = max(d.values())\n\n    # iterate over the dictionary to find the student with the maximum aggregate and return their ID\n    for student, mark in stdata:\n        if d[student] == max_agg:\n            return student\n\n    # if no student with the maximum aggregate is found, return None\n    return None"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n    max_aggregate = 0\n    \n    for row in stdata:\n        name, salary = row\n        aggregate_dict[name] += salary\n        if aggregate_dict[name] > max_aggregate:\n            max_aggregate = aggregate_dict[name]\n    \n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        for i in range(len(item)):\n            max_dict[i] = max(max_dict[i], item[i])\n    return max(max_dict.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    num = 1\n    while num <= 2**n:\n        if sum(bin(num)[2:].zfill(n)) == sum(bin(num)[-n:].zfill(n)):\n            count += 1\n        num += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        sum1 = int(bits[:n], 2)\n        sum2 = int(bits[n:], 2)\n        if sum1 == sum2:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Generate all possible binary sequences of length 2n\n    for i in range(2 ** n):\n        # Convert the binary sequence to a string\n        binary_seq = bin(i)[2:].zfill(n)\n\n        # Calculate the sum of the first n bits\n        first_sum = int(binary_seq[:n])\n\n        # Calculate the sum of the last n bits\n        last_sum = int(binary_seq[-n:])\n\n        # Check if the sum of the first n bits and the sum of the last n bits is equal\n        if first_sum == last_sum:\n            # Increment the count variable\n            count += 1\n\n    # Return the count of all binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        sum1 = sum(int(digit) for digit in bin(i)[2:])\n        sum2 = sum(int(digit) for digit in bin(~i)[2:])\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(2**n):\n        curr_sum = sum([int(bit) for bit in format(i, '0' + str(n) + 'b')])\n        next_sum = sum([int(bit) for bit in format((i>>n) + (2**(n-1)), '0' + str(n) + 'b')])\n\n        if curr_sum == next_sum:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(2*n)\n        first_n_bits = int(seq[:n])\n        last_n_bits = int(seq[-n:])\n        if first_n_bits == last_n_bits:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(1, 2**n+1):\n        first_n = bin(i)[2:].zfill(n)\n        last_n = bin(i)[-n:].zfill(n)\n        if int(first_n) == int(last_n):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_helper(start, end, count, current_seq):\n        if start == end:\n            if current_seq[start] == current_seq[end]:\n                count += 1\n        else:\n            count_binary_seq_helper(start+1, end, count, current_seq)\n            count_binary_seq_helper(start, end-1, count, current_seq)\n            count_binary_seq_helper(start+1, end-1, count, current_seq)\n        return count\n    \n    current_seq = [0]*n\n    return count_binary_seq_helper(0, n-1, 0, current_seq)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if bits[0] == bits[-1]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    count = 0 \n    for i in range(2**n): \n        if i % 2 == 0: \n            sum1 = 0 \n            sum2 = 0 \n            for j in range(i//2): \n                sum1 += j \n                sum2 += i - j - 1 \n            if sum1 == sum2: \n                count += 1 \n    return count "
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if isinstance(d, dict):\n        for value in d.values():\n            if isinstance(value, dict):\n                depth = max(depth, dict_depth(value) + 1)\n            else:\n                depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = 0\n        for key in d:\n            if isinstance(d[key], (dict, list)):\n                depth = dict_depth(d[key]) + 1\n                if depth > max_depth:\n                    max_depth = depth\n        return max_depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        depth = 1\n        for value in d.values():\n            depth += dict_depth(value)\n        return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1 + dict_depth(d[key])\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1 + dict_depth(item)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n            depth += dict_depth(v)\n        elif isinstance(v, list):\n            depth += len(v)\n            for item in v:\n                if isinstance(item, dict):\n                    depth += dict_depth(item)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize the depth to 0\n    depth = 0\n    # iterate over the keys in the dictionary\n    for key in d:\n        # if the value is another dictionary, increment the depth by one\n        if isinstance(d[key], dict):\n            depth += 1\n        # if the value is a list, check each element for a dictionary\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n        # if the value is not a dictionary, list, or None, increment the depth by one\n        else:\n            depth += 1\n    # return the final depth\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find the element at a given index after rotations.\n\n    Parameters:\n        arr (list): the input list\n        ranges (list): a list of tuples containing the starting and ending indices for each range\n        rotations (list): a list of integers containing the number of rotations for each range\n        index (int): the index of the element to find\n\n    Returns:\n        int: the element at the given index after rotations\n    \"\"\"\n\n    # get the range and rotation information for the given index\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index < ranges[i][1]:\n            range_start = ranges[i][0]\n            range_end = ranges[i][1]\n            rotation = rotations[i]\n            break\n\n    # calculate the new index after the given rotation\n    new_index = (index + rotation) % (range_end - range_start + 1) + range_start\n\n    # return the element at the new index\n    return arr[new_index - 1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes three arguments:\n    - arr: the array to be rotated\n    - ranges: a list of tuples representing the ranges of each element in the array\n    - rotations: the number of rotations to be done\n    - index: the index at which the element needs to be found after the rotations\n    \n    The function returns the element at the given index after the given number of rotations.\n    \"\"\"\n    # Check if the index is valid\n    if index >= len(arr):\n        raise IndexError(\"Index out of range\")\n    \n    # Find the element at the given index before the rotations\n    element_before_rotations = arr[index]\n    \n    # Loop through the rotations and find the element at the given index after each rotation\n    for i in range(rotations):\n        # Find the index of the element to be rotated\n        rotating_element_index = index - i\n        \n        # Check if the rotating element is out of range\n        if rotating_element_index < 0:\n            rotating_element_index = len(arr) - 1\n        \n        # Find the index of the first element in the range to be rotated\n        first_element_index = index - ranges[rotating_element_index][0]\n        \n        # Check if the first element is out of range\n        if first_element_index < 0:\n            first_element_index = len(arr) - 1\n        \n        # Find the index of the last element in the range to be rotated\n        last_element_index = first_element_index + ranges[rotating_element_index][1]\n        \n        # Check if the last element is out of range\n        if last_element_index > len(arr):\n            last_element_index = 0\n        \n        # Get the elements in the range to be rotated\n        elements_in_range = arr[first_element_index:last_element_index+1]\n        \n        # Find the element to be rotated\n        rotating_element = elements_in_range[rotating_element_index - first_element_index]\n        \n        # Insert the rotating element at the given index after the rotations\n        for j in range(len(arr) - 1, index - 1, -1):\n            arr[j] = arr[j-1]\n        \n        arr[index] = rotating_element\n        \n        # Find the element at the given index after the rotation\n        element_after_rotations = arr[index]\n    \n    return element_after_rotations"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    :param arr: a list of integers representing the array to be rotated\n    :param ranges: a list of tuples, where each tuple contains the start and end indices of a range to be rotated\n    :param rotations: an integer representing the number of rotations to be performed\n    :param index: an integer representing the index to be found after rotations\n    :return: the element at the given index after rotations\n    \"\"\"\n\n    # Compute the number of elements to be rotated\n    n = len(arr)\n    total_rotations = rotations * n\n    total_rotated_elements = n - rotations\n\n    # Compute the range of elements to be rotated\n    rotation_range = (index - total_rotated_elements, index)\n\n    # Rotate the array and find the element at the given index\n    rotated_arr = arr[rotation_range[0]:rotation_range[1]+1]\n    rotated_element = rotated_arr[index - rotation_range[0]]\n\n    return rotated_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of possible element ranges, the number of rotations, and the index of the element to find.\n    The function returns the element found at the given index after the given number of rotations.\n    '''\n    # Find the range of the element at the given index\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index < ranges[i][1]:\n            break\n\n    # Find the element value in the range after rotations\n    element = arr[(index + rotations) % len(arr)]\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find element at a given index after number of rotations.\n\n    Parameters:\n    arr (list): List of elements to be rotated\n    ranges (list): Ranges of elements to be rotated\n    rotations (int): Number of rotations to be performed\n    index (int): Index of element to be found after rotations\n\n    Returns:\n    int: The element at the given index after rotations\n    \"\"\"\n\n    # Initialize variables for element and its index\n    current_element = arr[index]\n    current_index = index\n\n    # Perform rotations until the element is found\n    for _ in range(rotations):\n        # Find the range of elements to be rotated and sort them\n        range_index = ranges.index(current_index)\n        range_start = ranges[range_index][0]\n        range_end = ranges[range_index][1]\n        sorted_range = sorted(arr[range_start:range_end+1])\n\n        # Find the index of the element in the sorted range\n        for i in range(len(sorted_range)):\n            if sorted_range[i] == current_element:\n                found_index = range_start + i\n                break\n\n        # Update the current element and index\n        current_element = sorted_range[i]\n        current_index = found_index\n\n    return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array of numbers, a list of ranges and rotations, and the index of the element to be found.\n    It returns the element at the given index after the specified number of rotations.\n    '''\n    # Find the original element in the array\n    original_element = arr[index]\n    \n    # Calculate the number of rotations required\n    total_rotations = rotations * len(ranges)\n    \n    # Rotate the array to find the element at the given index\n    arr = arr[index:] + arr[:index]\n    \n    # Iterate through the array and find the element at the given index after the specified number of rotations\n    for i in range(total_rotations):\n        # Rotate the array\n        arr = arr[1:] + [arr[0]]\n    \n    # Return the element at the given index after the specified number of rotations\n    return original_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        arr.reverse()\n\n    for i in range(len(ranges)):\n        start, end = ranges[i]\n        if index >= start and index < end:\n            return arr[index - start]\n\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, ranges of integers, rotations of integers and an index.\n    The function calculates the index after rotations, finds the element at that index, and returns it.\n    '''\n\n    # Find the index after rotations\n    after_rotations = (index + rotations) % len(arr)\n\n    # Find the element at the new index\n    element = arr[after_rotations]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges of values, rotations and index as input and\n    returns the element at the given index after the given number of rotations.\n    '''\n\n    # Finding the number of rotations after which the element needs to be found\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            break\n        rotations += 1\n\n    # Calculating the element at the given index after the required number of rotations\n    element = arr[(index - ranges[i-1]) % len(arr)]\n\n    # Adding the number of rotations to the current value of rotations\n    rotations += index // len(ranges[i-1])\n\n    # Returning the element and updated rotations\n    return element, rotations"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the element at the given index after the number of rotations\n    element = arr[index]\n    for i in range(rotations):\n        # Find the element after the current rotation\n        element = arr[ranges[i][0]]\n        for j in range(1, len(ranges[i])):\n            element = arr[ranges[i][j]]\n        # Replace the element at the given index with the element after rotation\n        arr[index] = element\n    # Return the element at the given index after rotations\n    return arr[index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    for word in words:\n        if re.search(pattern, word):\n            return word, words[words.index(word)+1]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r\"^p[a-zA-Z]*\"\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    matches = list(filter(pattern.match, words))\n    if len(matches) < 2:\n        return None\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    result = re.findall(pattern, words)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    pattern = r'^p\\w+'\n    for word in words:\n        if re.match(pattern, word):\n            result.append(word)\n    if len(result) == 2:\n        return result\n    else:\n        return \"Not Found\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[0], p_words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z]+'\n    matches = re.findall(pattern, words)\n    return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0].lower() == 'p':\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Remove all non-alphabetic characters from the words list\n    words = [re.sub('[^a-zA-Z]', '', word) for word in words]\n\n    # Filter out words that don't start with 'p'\n    words = [word for word in words if word.startswith('p')]\n\n    # Return the first two words that start with 'p'\n    if len(words) >= 2:\n        return words[:2]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p\\w+'\n    for word in words:\n        if re.match(pattern, word):\n            return word"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum and the current subsequence sum\n    max_sum = float('-inf')\n    cur_sum = 0\n\n    # Create a list to store the current subsequence\n    cur_subseq = []\n\n    # Traverse the array from 0 to n-1\n    for i in range(n):\n        # If the current element is less than or equal to k\n        if a[i] <= k:\n            # If the current element is greater than the current element in the current subsequence\n            if i > 0 and a[i] > a[i-1]:\n                # Update the current subsequence sum\n                cur_sum = cur_sum + a[i]\n                # If the current subsequence sum is greater than the maximum sum so far\n                if cur_sum > max_sum:\n                    # Update the maximum sum and the current subsequence\n                    max_sum = cur_sum\n                    cur_subseq = [a[i]]\n                # If the current subsequence sum is equal to the maximum sum so far\n                elif cur_sum == max_sum:\n                    # Add the current element to the current subsequence\n                    cur_subseq.append(a[i])\n            # If the current element is greater than the current element in the subsequence before it\n            else:\n                # Update the current subsequence sum\n                cur_sum = a[i]\n                # If the current subsequence sum is greater than the maximum sum so far\n                if cur_sum > max_sum:\n                    # Update the maximum sum and the current subsequence\n                    max_sum = cur_sum\n                    cur_subseq = [a[i]]\n                # If the current subsequence sum is equal to the maximum sum so far\n                elif cur_sum == max_sum:\n                    # Add the current element to the current subsequence\n                    cur_subseq.append(a[i])\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element\n    return max_sum, cur_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize an array to store the maximum sum of increasing subsequence ending at each index\n    max_sum = [-1] * n\n\n    # Initialize an array to store the ending index of the maximum sum of increasing subsequence ending at each index\n    max_end = [-1] * n\n\n    # Initialize the maximum sum of increasing subsequence ending at the given index and k\n    max_sum[index] = a[index]\n    max_end[index] = index\n\n    # Calculate the maximum sum of increasing subsequence ending at each index using the dynamic programming approach\n    for i in range(index + 1, n):\n        for j in range(i, index + 1):\n            if a[i] > a[j] and i + 1 <= k <= n:\n                # The maximum sum of increasing subsequence ending at index i is greater than or equal to the current maximum sum of increasing subsequence ending at index j + 1 and the kth element is in the increasing subsequence ending at index i + 1\n                if max_sum[j + 1] + a[i] > max_sum[i]:\n                    max_sum[i] = max_sum[j + 1] + a[i]\n                    max_end[i] = j + 1\n            else:\n                # If the current element is not greater than or equal to the previous element or if the kth element is not in the increasing subsequence ending at index i, the maximum sum of increasing subsequence ending at index i is the maximum sum of increasing subsequence ending at index j\n                if max_sum[j] > max_sum[i]:\n                    max_sum[i] = max_sum[j]\n                    max_end[i] = j\n\n    # Return the maximum sum of increasing subsequence ending at the given index and k\n    return max_sum[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize variables\n    dp = [0] * (n+1)\n    max_sum = 0\n    # Fill dp array with sum of increasing subsequences from 0 to i\n    for i in range(1, n+1):\n        if i < k:\n            dp[i] = a[i-1]\n        else:\n            dp[i] = max(dp[i-1], dp[i-k]+a[i-1])\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    # Iterate through the array\n    for i in range(index, n):\n        # If the current element is greater than k, subtract the value of kth element\n        if a[i] > a[k]:\n            curr_sum -= a[k]\n        # If the current element is less than or equal to k, add the current element to the current sum\n        else:\n            curr_sum += a[i]\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        if i == index:\n            dp[i] = dp[i-1] + a[i]\n        elif i > index and a[i] > a[i-1]:\n            dp[i] = dp[i-1] + a[i]\n        else:\n            dp[i] = max(dp[i], dp[i-1])\n    return max(dp[:index+1])"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize dp array and max_sum variable\n    dp = [0] * n\n    max_sum = 0\n    \n    # Traverse through the array starting from i\n    for i in range(index, n):\n        \n        # If kth element is not present at i, then add it to the max_sum\n        if a[i] < k:\n            dp[i] = max_sum + a[i]\n            \n            # Update max_sum if current dp value is greater\n            if dp[i] > max_sum:\n                max_sum = dp[i]\n        \n        # If kth element is present at i, then consider three cases:\n        # 1. kth element is not present at i+1\n        # 2. kth element is present at i+1\n        # 3. kth element is present at both i+1 and i+2\n        \n        # Case 1: kth element is not present at i+1\n        if a[i+1] < k:\n            dp[i+1] = dp[i] + a[i+1]\n            \n            # Update max_sum if current dp value is greater\n            if dp[i+1] > max_sum:\n                max_sum = dp[i+1]\n                \n        # Case 2: kth element is present at i+1\n        elif a[i+1] == k:\n            dp[i+1] = dp[i] + a[i+1]\n            \n            # Update max_sum if current dp value is greater\n            if dp[i+1] > max_sum:\n                max_sum = dp[i+1]\n        \n        # Case 3: kth element is present at both i+1 and i+2\n        else:\n            dp[i+1] = max(dp[i], dp[i+1])\n            \n            # Update max_sum if current dp value is greater\n            if dp[i+1] > max_sum:\n                max_sum = dp[i+1]\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n\n    if index > 0:\n        a[index] += a[index-1]\n\n    if index == k:\n        return a[index]\n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = a[0]\n    max_sum = max(dp[1], a[0])\n\n    for i in range(2, n+1):\n        dp[i] = max(dp[i-1], a[i-1] + dp[i-2])\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize a list to store the maximum sum of increasing subsequence up to index i\n    max_sum_arr = [0] * n\n\n    # Initialize a variable to store the current maximum sum of increasing subsequence\n    curr_max_sum = 0\n\n    # Initialize a variable to store the current sum of increasing subsequence\n    curr_sum = 0\n\n    # Loop through all possible indices from index i to n-1\n    for i in range(index, n):\n        # Add the current element to the current sum\n        curr_sum += a[i]\n\n        # Check if kth element is greater than i\n        if i >= k:\n            # Update the current maximum sum if the current sum is greater than the current maximum sum\n            if curr_sum > curr_max_sum:\n                curr_max_sum = curr_sum\n\n        # Update the maximum sum of increasing subsequence for the current index\n        max_sum_arr[i] = max(max_sum_arr[i], curr_max_sum)\n\n    # Return the maximum sum of increasing subsequence up to the kth index\n    return max_sum_arr[k-1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if index == n:\n        return 0\n\n    # Check if the current element is greater than k or not\n    if a[index] > k:\n        return a[index]\n\n    # Check if the current element is not greater than k\n    else:\n        # Calculate the sum of increasing subsequence from prefix until ith index\n        left_sum = max_sum_increasing_subseq(a, n, index + 1, k)\n\n        # Check if the sum of increasing subsequence from prefix until ith index is greater than the current sum or not\n        if left_sum + a[index] > a[index]:\n            return left_sum + a[index]\n\n        # If the sum of increasing subsequence from prefix until ith index is less than the current sum, return the current sum\n        else:\n            return a[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    prefix_sum = [0] * n\n\n    # Calculate prefix sum for the first index\n    for i in range(n):\n        prefix_sum[i] = a[i]\n\n    # Calculate prefix sum for the remaining indices\n    for i in range(1, index + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i]\n\n    # Calculate maximum sum of increasing subsequence for all prefixes\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 <= k:\n                continue\n            for k in range(i, j + 1):\n                current_sum = prefix_sum[j] - prefix_sum[i - 1] + a[k]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the tuple has the correct length\n    if len(tuplex)!= m:\n        raise ValueError('The tuple must have m elements')\n    # Copy the tuple to avoid modifying it\n    tuplex = deepcopy(tuplex)\n    # Get the indices of the elements in the colon\n    colon_indices = [(i,j) for i in range(m) for j in range(n) if i>=j]\n    # Add the colon to the tuple\n    colon = tuple(tuplex[i] for i in colon_indices)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # get the length of the new tuple\n    length = len(new_tuplex)\n    \n    # calculate the step size to get the desired column\n    step = length // m\n    \n    # get the desired column(s)\n    column = new_tuplex[::step]\n    \n    # check if there are more than one columns to output\n    if n == 1:\n        return column[0]\n    else:\n        # get the remaining columns\n        remaining_columns = new_tuplex[step:]\n        # create a list to store the output\n        output = []\n        # loop through each column\n        for i in range(m):\n            # append the i-th column to the output list\n            output.append(column[i])\n        # loop through each remaining column and add it to the output list\n        for col in remaining_columns:\n            for i in range(m):\n                output.append(col[i])\n        # return the output list\n        return output"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # If m is greater than n, swap the values of m and n\n    if m > n:\n        tuplex[m], tuplex[n] = tuplex[n], tuplex[m]\n    \n    # Initialize the colon as an empty list\n    colon = []\n    \n    # Iterate through the tuple from the smallest to the largest element\n    for i in range(m,n+1):\n        # Add the i-th element of the tuple to the colon\n        colon.append(tuplex[i])\n    \n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n\n    # get a copy of the input tuple\n    copy_tuplex = deepcopy(tuplex)\n\n    # get the first n elements of the tuple\n    first_n = tuple(copy_tuplex[:n])\n\n    # get the last m - n elements of the tuple\n    last_m_n = tuple(copy_tuplex[-m:])\n\n    # concatenate the first n and last m - n elements of the tuple\n    colon = first_n + last_m_n\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m-1):\n        new_tuplex = (tuplex[i],) + new_tuplex\n    new_tuplex = (tuplex[m-1],) + new_tuplex\n    for i in range(n-1):\n        new_tuplex = new_tuplex + (tuplex[-1],)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0:\n        return ()\n    elif m == 1:\n        return (tuplex[0],)\n    else:\n        return (tuplex[0], colon_tuplex(tuplex[1:], m-1, n))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    tup = deepcopy(tuplex)\n    # Initialize a list to store the colon\n    colon = []\n    # For each element in the tuple\n    for i in range(m):\n        # Check if the current element is None or not\n        if tup[i] is None:\n            # If it is None, add a None to the colon list\n            colon.append(None)\n        else:\n            # If it is not None, add a tuple with the values from i to j\n            for j in range(i, min(i+n, len(tup))):\n                colon.append(tup[j])\n    # Return the colon list\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = deepcopy(tuplex)\n    for i in range(len(result)):\n        result[i] = result[i][m:n]\n    return tuple(result)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex + (new_tuplex[-1],)\n    for i in range(m, n):\n        new_tuplex = new_tuplex + (new_tuplex[0],)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex + (new_tuplex[i],)\n    new_tuplex = new_tuplex + (new_tuplex[-1],)\n    for i in range(n-m):\n        new_tuplex = (new_tuplex[-1],) + new_tuplex[:-1]\n    return tuple(new_tuplex)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two given lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    largest_product1 = 0\n    largest_product2 = 0\n    total_product = 0\n\n    # Iterate over the first N elements of the two sorted lists\n    for i in range(N):\n        # Calculate the product of the first element of nums1 and the last element of nums2\n        product1 = nums1[i] * nums2[-1]\n\n        # Calculate the product of the first element of nums2 and the last element of nums1\n        product2 = nums2[i] * nums1[-1]\n\n        # Update the largest products and the total product\n        if product1 > largest_product1:\n            largest_product1 = product1\n        if product2 > largest_product2:\n            largest_product2 = product2\n        total_product += product1 + product2\n\n    # Return the total product of the largest products\n    return total_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products list\n    largest_products = []\n\n    # Loop through each position in the lists\n    for i in range(N):\n        # Calculate the product of the two largest numbers in each list\n        product = nums1[i] * nums2[i]\n\n        # Add the product to the list of largest products\n        largest_products.append(product)\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # initialize variables\n    max_product = 0\n    current_product = 0\n    product = 0\n\n    # loop through the input lists\n    for i in range(N):\n        # loop through the lists\n        for j in range(i, len(nums1)):\n            # calculate the product for each combination of factors\n            current_product = nums1[i] * nums2[j]\n            # update the maximum product and reset the current product if it's larger\n            if current_product > max_product:\n                max_product = current_product\n                product = current_product\n            # update the current product\n            else:\n                product = product + current_product\n\n    return product\n"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize variables to store the largest products and their indices\n    largest_products = []\n    largest_indices = []\n    \n    # Loop through each possible combination of two factors\n    for i in range(N):\n        for j in range(N):\n            # Calculate the product of the two factors\n            product = nums1[i] * nums2[j]\n            \n            # If the product is greater than any previous products, add it and its indices to the list\n            if len(largest_products) < N or product > largest_products[-1]:\n                largest_products.append(product)\n                largest_indices.append([i, j])\n    \n    # Return the largest products and their indices\n    return largest_products, largest_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize the maximum product values and their indices\n    max_product1 = max_product2 = max_product_index1 = max_product_index2 = float('-inf')\n\n    # loop through the first N elements of both lists\n    for i in range(N):\n        # find the largest product from the two sorted lists\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[i] * nums1[N-1-i]\n        if product1 > max_product1:\n            max_product1 = product1\n            max_product_index1 = i\n        if product2 > max_product2:\n            max_product2 = product2\n            max_product_index2 = N-1-i\n\n    # return the maximum product and its indices\n    return (max_product1, max_product_index1), (max_product2, max_product_index2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the largest products\n    largest_products = [0] * N\n    \n    # Initialize a variable to store the maximum product\n    max_product = 0\n    \n    # Iterate through the lists\n    for i in range(N):\n        # Find the maximum product of the two lists with the current factor\n        current_product = max(nums1[i], nums2[i]) * min(nums1[i], nums2[i])\n        \n        # Update the largest products and the maximum product\n        largest_products[i] = current_product\n        max_product = max(max_product, current_product)\n    \n    # Return the largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the result array with zeros\n    result = [0] * N\n    \n    # Loop through each combination of factors\n    for i in range(N):\n        # Find the maximum product of the current two factors\n        max_product = max(nums1[i] * nums2[j] for j in range(N))\n        \n        # Update the result array with the maximum product\n        result[i] = max_product\n    \n    # Return the result array\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize two lists to store the maximum products for each combination of factors\n    max_products1 = [0] * (N+1)\n    max_products2 = [0] * (N+1)\n\n    # Loop through each factor\n    for i in range(1, N+1):\n        # Loop through each element in the first list\n        for j in range(len(nums1)):\n            # Find the largest product for the current combination of factors\n            current_product = max(nums1[j] * max_products1[i-1], nums2[j] * max_products2[i-1])\n            # Update the maximum products for each combination of factors\n            max_products1[i] = max(max_products1[i], current_product)\n            max_products2[i] = max(max_products2[i], current_product)\n\n    # Return the maximum products for the required number of largest products\n    return max_products1[-1], max_products2[-1]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize two lists to store the largest products and their indices\n    largest_products = []\n    indices = []\n\n    # Iterate over all possible pairs of factors\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)+1):\n            # Find the largest product of this pair of factors\n            largest = max(nums1[i]*nums2[j], nums1[j]*nums2[i])\n            # If the largest product is greater than the current maximum, update the maximum and its index\n            if largest > max(largest_products):\n                largest_products = [largest, i, j]\n            # If the current maximum is greater than the largest product of the current pair, update the maximum and its index\n            elif largest > largest_products[0]:\n                largest_products = [largest, i, j]\n\n    # Select the N largest products from the two lists and return them\n    return sorted(largest_products)[0:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in ascending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the maximum products\n    max1 = 0\n    max2 = 0\n    max_product = 0\n    \n    # Iterate through the lists up to N\n    for i in range(N):\n        # Calculate the current product\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[i] * nums2[N-i-1]\n        \n        # Update the maximum products if necessary\n        max_product = max(max_product, product1, product2)\n        \n        # Update the maximum products for each list\n        max1 = max(max1, nums1[i])\n        max2 = max(max2, nums2[i])\n        \n        # Update the maximum products for the next iteration\n        if max1 < max2:\n            nums1[i], nums2[i] = nums2[i], nums1[i]\n    \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:   \n        return a   \n    else:   \n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of them.\n    \"\"\"\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of its characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Convert the list to a tuple and return it\n    return tuple(char_list)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert string to list of characters\n    lst = list(str1)\n    # Convert list to tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the given string to a list of characters\n    lst = list(str1)\n    # Convert the list of characters to a tuple\n    t = tuple(lst)\n    return t"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the bit position as 0\n    bit_position = 0\n    # loop while the n is not equal to 1\n    while n!= 1: \n        # check if the least significant bit of n is 1\n        if n & 1: \n            # set the bit at bit position n to 1\n            n = n | (1 << bit_position)\n        # shift the bit position to the right by 1\n        bit_position += 1\n        # if bit position exceeds 31, we need to shift it to the left by 1\n        if bit_position > 31: \n            bit_position -= 32\n            n = n >> 1\n    # set the leftmost unset bit to 1\n    n = n | (1 << bit_position)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a number.\n    '''\n    # initialize the index of the leftmost unset bit to -1\n    left_most_unset_index = -1\n    # initialize the index of the rightmost set bit to -1\n    right_most_set_index = -1\n    # initialize the counter to 0\n    counter = 0\n    # loop through each bit in the binary representation of n\n    for i in range(32):\n        # if the bit is unset, increment the index of the leftmost unset bit\n        if (n & (1 << i)) == 0:\n            left_most_unset_index = counter\n        # if the bit is set, update the index of the rightmost set bit\n        else:\n            right_most_set_index = counter\n        # increment the counter\n        counter += 1\n    # if no unset bit was found, return n as is\n    if left_most_unset_index == -1:\n        return n\n    # otherwise, set the leftmost unset bit to 1\n    else:\n        return n | (1 << left_most_unset_index)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    n |= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit in a number.\n    '''\n    # Initialize a counter variable to keep track of unset bits\n    unset_bits = 0\n    # Iterate through each bit in the number\n    for i in range(32):\n        # Check if the bit is unset\n        if n & (1 << i) == 0:\n            unset_bits |= 1 << i\n            # If all bits are unset, return the number with the leftmost unset bit set to 1\n            if unset_bits == (1 << 32) - 1:\n                return n | (1 << i)\n    # If all bits are already set, return the number itself\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to store the unset bits\n    unset_bits = 0\n    # Iterate through the bits of the integer\n    for bit in bin(n)[2:]:\n        # If the bit is 0, unset the bit at the current position in the unset_bits variable\n        if bit == '0':\n            unset_bits |= 1 << (len(bin(n)[2:]) - int(bit))\n    # Shift the unset_bits variable by one position to make sure the left most unset bit is set\n    return unset_bits << 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the index of the leftmost unset bit as -1\n    left_most_unset_bit_index = -1\n\n    # Loop through the bits of the integer\n    for i in range(32):\n        # If the i-th bit is set to 1, then set the leftmost unset bit index to i\n        if n & (1 << i)!= 0:\n            left_most_unset_bit_index = i\n            break\n\n    # If no leftmost unset bit was found, set the leftmost unset bit index to 32\n    if left_most_unset_bit_index == -1:\n        left_most_unset_bit_index = 32\n\n    # Set the leftmost unset bit to 1\n    n |= (1 << left_most_unset_bit_index)\n\n    # Return the modified integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function takes an integer as input and returns the same integer with its left most unset bit set to 1.\n    '''\n    # Initialize a variable to keep track of the unset bits\n    unset_bits = 0\n    \n    # Iterate over each bit in the integer\n    for i in range(31, -1, -1):\n        # Check if the i-th bit is unset\n        if ((n & (1 << i)) == 0):\n            # Set the i-th bit to 1\n            n = n | (1 << i)\n            # Increment the unset_bits counter\n            unset_bits += 1\n    \n    # If there are no unset bits, return the original integer unchanged\n    if (unset_bits == 0):\n        return n\n    \n    # Otherwise, return the updated integer\n    return n | (1 << (31 - unset_bits))"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the index of the leftmost unset bit to -1\n    left_most_unset_bit_index = -1\n    # iterate over the bits of n from the rightmost to the leftmost\n    for i in range(31, -1, -1):\n        # if the current bit is unset, set the index to i and break out of the loop\n        if (n & (1 << i)) == 0:\n            left_most_unset_bit_index = i\n            break\n    # if the loop completed without finding a leftmost unset bit, return n unchanged\n    if left_most_unset_bit_index == -1:\n        return n\n    # otherwise, set the leftmost unset bit to 1 and return the updated n value\n    else:\n        return n | (1 << left_most_unset_bit_index)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the position of the first set bit\n    i = 0\n    while n & (1 << i):\n        i += 1\n    # Set the left most unset bit\n    n |= (1 << i)\n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the given integer to a binary string\n    binary_str = bin(n)[2:]\n    # Iterate through the binary string from right to left\n    for i in range(len(binary_str)):\n        # If the bit at index i is 0, we can set it to 1 and break out of the loop\n        if binary_str[i] == '0':\n            binary_str = binary_str[:i] + '1' + binary_str[i+1:]\n            break\n    # Convert the binary string back to an integer\n    return int(binary_str, 2)"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function finds the volume of a cone with given base radius and height.\n    '''\n    V = math.pi * r * r * h / 3.0\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone with the given base radius r and height h.\n\n    :param r: float, the radius of the cone base\n    :param h: float, the height of the cone\n    :return: float, the volume of the cone\n    \"\"\"\n\n    # calculate the volume using the formula V = (1/3) * pi * r^2 * h\n    V = (1.0 / 3.0) * math.pi * (r ** 2) * h\n\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume of the cone\n    volume = (1/3)*math.pi*r**2*h\n    # Return the volume\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone given its base radius r and height h.\n    '''\n    # Using the formula for the volume of a cone, V = \u03c0r^2h/3\n    # where \u03c0 = 3.141592653589793\n    V = (3.141592653589793 * r ** 2 * h) / 3\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r * r * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in the radius r and height h of a cone and returns the volume of the cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r * r * h"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # check if i is a power of 2\n        if i == 1:\n            highest_power = i\n        elif i == 2:\n            highest_power = i\n        elif i & (i - 1) == 0:\n            highest_power = i\n        elif i > highest_power:\n            highest_power = i\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1: \n        power += 1\n        n >>= 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 1\n    while highest_power < n:\n        highest_power <<= 1\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize the highest power of 2 to be 0\n    highest = 0\n    \n    # Loop through all numbers between 1 and n (inclusive)\n    for i in range(1, n+1): \n        # Check if the current number is a power of 2\n        if i & (i-1) == 0: \n            # If it is, update the highest power of 2 if it is less than the current number\n            if highest < i: \n                highest = i\n    \n    # Return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    \n    # we can use binary search to find the highest power of 2 that is less than or equal to n\n    low = 1\n    high = n\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid <= n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return high"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 0\n    while n > 1:\n        power += 1\n        n //= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the variable result to 0\n    result = 0\n    # Initialize a boolean variable is2powFound to False\n    is2powFound = False\n    # Loop through all the numbers from 0 to n-1\n    for i in range(n): \n        # Check if the current number is a power of 2\n        if (i & (i-1)) == 0: \n            # If it is, set the result variable to the current number and set the is2powFound variable to True\n            result = i \n            is2powFound = True\n            # Break out of the loop\n            break\n    # Return the result variable\n    return result"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    # initialize the variable to store the highest power of 2\n    max_power = 0\n    \n    # loop through all the integers from 1 to n\n    for i in range(1, n+1):\n        # if the integer is a power of 2, update the max_power variable\n        if i & (i-1) == 0:\n            max_power = i\n            \n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize variable to 1\n    power = 1\n    \n    # loop until power is greater than n\n    while power <= n:\n        # if power is less than or equal to n, return power\n        if power <= n:\n            return power\n        \n        # if power is greater than n, increment power by 1\n        power += 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 0:\n        n = n >> 1\n    return n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    This function takes an integer 'n' as input and returns then'th Lucas number.\n    '''\n    # Initialize the first two Lucas numbers as 2 and 1\n    lucas1 = 2\n    lucas2 = 1\n    \n    # Iterate through the remaining n-1 Lucas numbers\n    for i in range(2, n):\n        # Calculate the next Lucas number by adding the previous two Lucas numbers\n        lucas3 = lucas1 + lucas2\n        \n        # Update the values of lucas1 and lucas2 for the next iteration\n        lucas1 = lucas2\n        lucas2 = lucas3\n        \n    # Return the nth Lucas number\n    return lucas3"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Find the nth Lucas number using recursion.\n\n    :param n: the index of the Lucas number to find.\n    :return: the nth Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1 or n == 2:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string % element)\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    result = []\n    for item in list_:\n        result.append(string % item)\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, elem in enumerate(list_):\n        list_[i] = string.format(elem)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    result = {}\n    # Iterate through each list\n    for i in range(len(l1)):\n        # Use the index of the list as the key of the nested dictionary\n        result[i] = {}\n        # Iterate through each element in the list\n        for j in range(len(l1[i])):\n            # Use the index of the element as the key of the dictionary in the nested dictionary\n            result[i][j] = l1[i][j]\n    # Return the result\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    \n    # loop through each list and append the values to the nested dictionary\n    for i in range(len(l1)):\n        if i % 2 == 0:\n            result[l1[i]] = l2[i]\n        else:\n            result[l1[i]] = l3[i]\n            \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary for the first list\n    d1 = {i:l1[i] for i in range(len(l1))}\n    # create a dictionary for the second list\n    d2 = {i:l2[i] for i in range(len(l2))}\n    # create a dictionary for the third list\n    d3 = {i:l3[i] for i in range(len(l3))}\n    # create a nested dictionary with the three dictionaries\n    nested_dict = {'list1':d1, 'list2':d2, 'list3':d3}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    nested_dict = {}\n    # loop through the first list\n    for i in range(len(l1)):\n        # create an empty dictionary for this list\n        inner_dict = {}\n        # loop through the second list\n        for j in range(len(l2)):\n            # add the key-value pair to the inner dictionary\n            inner_dict[l2[j]] = l3[j*len(l1)+i]\n        # add the inner dictionary to the outer dictionary\n        nested_dict[l1[i]] = inner_dict\n    # return the final nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, item in enumerate(l1):\n        nested_dict = {}\n        for j, sub_item in enumerate(item):\n            nested_dict[l2[i][j]] = sub_item\n        result[l3[i]] = nested_dict\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): The first list to convert.\n    l2 (list): The second list to convert.\n    l3 (list): The third list to convert.\n\n    Returns:\n    dict: The converted nested dictionary.\n\n    \"\"\"\n    # Combine all the lists into a single list of tuples\n    data = l1 + l2 + l3\n    # Use a dictionary comprehension to convert each tuple to a dictionary\n    result = {i: {j: k for j, k in zip(l1, l2)}[i] for i in range(len(l1))}\n    # Use a nested dictionary comprehension to convert each dictionary to another nested dictionary\n    nested_result = {i: {j: k for j, k in zip(l1, l3[i])} for i in range(len(l2))}\n    # Combine the nested dictionaries\n    result.update(nested_result)\n    # Return the combined dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    This function takes multiple lists as input and converts them to a nested dictionary.\n\n    Args:\n    *lists: variable number of lists to be converted to dictionary.\n\n    Returns:\n    dict: The nested dictionary containing the converted lists.\n    '''\n    # initialize an empty dictionary\n    data = {}\n    # iterate over each list and add its elements as keys to the data dictionary\n    for i, lst in enumerate(lists):\n        for j, elem in enumerate(lst):\n            # if the current element is a dictionary, recursively call the function\n            if isinstance(elem, dict):\n                if j not in data:\n                    data[j] = {}\n                data[j] = convert_list_dictionary(data[j], elem)\n            # if the current element is a list, recursively call the function\n            elif isinstance(elem, list):\n                if i not in data:\n                    data[i] = {}\n                data[i] = convert_list_dictionary(data[i], elem)\n            # if the current element is a primitive type, add it as a key to the data dictionary\n            else:\n                if elem not in data:\n                    data[elem] = []\n                data[elem].append(j)\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    l1: list\n    l2: list\n    l3: list\n\n    Returns:\n    nested_dict: dictionary\n    '''\n\n    nested_dict = {}\n\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            nested_dict[l1[i]][l2[j]] = l3[i*len(l2) + j]\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    nested_dict = {}\n\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            nested_dict[l1[i]][l2[j]] = l3[i*len(l2)+j]\n\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def helper(n):\n        if n == 1:\n            return n\n        elif n % 2 == 0:\n            return helper(n/2) + helper(n/2)\n        else:\n            return max(helper(n/3), helper(n/4), helper(n/5)) + n\n\n    return helper(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n\n    def f(x):\n        if x == 1:\n            return x\n        else:\n            return f(x//2) + f(x//3) + f(x//4) + f(x//5) + x\n\n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    if n % 2 == 0:\n        return get_max_sum(n//2) + n\n    \n    if n % 3 == 0:\n        return get_max_sum(n//3) + n\n    \n    if n % 4 == 0:\n        return get_max_sum(n//4) + n\n    \n    if n % 5 == 0:\n        return get_max_sum(n//5) + n\n    \n    return get_max_sum(n-1)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def get_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * get_factorial(n-1)\n\n    def get_sum(n):\n        if n == 0:\n            return 0\n        else:\n            return n + get_sum(n-1)\n\n    def f(n):\n        if n == 0:\n            return 0\n        else:\n            return max(get_sum(i) + get_sum(i+1) + get_sum(i+2) + get_sum(i+3) for i in range(n//5) + [n])\n\n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n + 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the list with the maximum length.\n    \"\"\"\n    max_len = 0\n    result = []\n    for num in input_list:\n        if len(num) > max_len:\n            max_len = len(num)\n            result = [num]\n        elif len(num) == max_len:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Find the length of the first element in the list\n    first_element_length = len(input_list[0])\n    \n    # Loop through the list and compare the length of each element with the first element length\n    for element in input_list:\n        element_length = len(element)\n        if element_length > first_element_length:\n            # If the element has a greater length than the first element, update the first element length\n            first_element_length = element_length\n            \n    # Return the list with the maximum length\n    return input_list[input_list.index(max(input_list, key=len))], first_element_length"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    max_length = 0\n    max_list = None\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = len(input_list)\n    max_list = input_list\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store unique elements in the tuple\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the set is empty (no duplicates found)\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Check if the tuple is empty\n    if len(test_tup) == 0:\n        return True\n    \n    # Check if the first element is equal to the second element\n    if test_tup[0] == test_tup[1]:\n        return False\n    \n    # Check if the first element is equal to any of the subsequent elements\n    for i in range(2, len(test_tup)):\n        if test_tup[0] == test_tup[i]:\n            return False\n    \n    # All elements in the tuple are distinct\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # Check if all elements in the tuple are unique\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    set_test_tup = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(set_test_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # Create a set to store unique values\n    unique_set = set()\n\n    # Loop through the tuple and add each value to the set\n    for val in test_tup:\n        unique_set.add(val)\n\n    # If the set is empty, then all values in the tuple are unique\n    if not unique_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {} # Dictionary to keep track of character counts\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # iterate over the characters in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in freq:\n            # if it is, increment its frequency by 1\n            freq[char] += 1\n        else:\n            # otherwise, add it to the dictionary with a frequency of 1\n            freq[char] = 1\n    \n    # iterate over the characters in the string again to find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            # if it is the first non-repeated character, return its index\n            return str1.index(char)\n    \n    # if all characters are non-repeated, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character in the string\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n            \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n    \"\"\"\n    char_dict = {}\n    first_non_repeating = None\n    for char in str1:\n        if char in char_dict:\n            if char_dict[char] == 1:\n                return char\n            else:\n                char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n            if first_non_repeating is None:\n                first_non_repeating = char\n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(string):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character.\n    \"\"\"\n    unique_chars = set()\n    for char in string:\n        if char not in unique_chars:\n            unique_chars.add(char)\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            del char_dict[char]\n        else:\n            char_dict[char] = True\n    for char in char_dict:\n        return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character\n    freq = {}\n    \n    # Iterate through the string and update the frequency of each character\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterate through the string again and find the first non-repeating character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(string):\n    \"\"\"\n    Given a string, find and return the first non-repeating character.\n\n    :param string: a string\n    :return: the first non-repeating character in the string, or None if no such character exists\n    \"\"\"\n    char_count = {}  # dictionary to count the occurrences of each character\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1  # increment the count if the character already appears\n        else:\n            char_count[char] = 1  # add the character to the dictionary with a count of 1\n\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    return None  # no non-repeating character found"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    return pattern.match(string) is not None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # Check if the string matches the pattern\n    match = re.match(regex, string)\n\n    if match:\n        # If it does, return True\n        return True\n    else:\n        # If it doesn't, return False\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the middle number\n    middle = numbers[1]\n\n    # Calculate the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Find the middle index\n    middle_index = len(numbers) // 2\n    \n    # If the middle index is even, return the average of the two middle numbers\n    if len(numbers) % 2 == 0:\n        return (numbers[middle_index - 1] + numbers[middle_index]) / 2\n    else:\n        return numbers[middle_index]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n    \n    # Calculate the mid-point of the sorted list\n    midpoint = len(nums) // 2\n    \n    # If the length of the list is odd, the median is the middle number\n    if len(nums) % 2 == 1:\n        return nums[midpoint]\n    \n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        return (nums[midpoint - 1] + nums[midpoint]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the median of the three numbers\n    median = sorted_numbers[len(sorted_numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    sorted_numbers = sorted([a, b, c])\n    n = len(sorted_numbers)\n\n    if n % 2 == 0:\n        # If the number of elements is even, return the average of the two middle elements\n        mid_idx = n // 2\n        return (sorted_numbers[mid_idx - 1] + sorted_numbers[mid_idx]) / 2\n    else:\n        # If the number of elements is odd, return the middle element\n        return sorted_numbers[n // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    if a > b and a > c:\n        if b > c:\n            return (a + c) / 2\n        else:\n            return (a + b) / 2\n    elif b > a and b > c:\n        if a > c:\n            return (b + c) / 2\n        else:\n            return (b + a) / 2\n    else:\n        if a > b:\n            return (c + a) / 2\n        else:\n            return (c + b) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n//2] + numbers[n//2 - 1]) / 2\n    else:\n        median = numbers[n//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    # Sorting the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Finding the median\n    median = sorted_numbers[len(sorted_numbers) // 2]\n    # Returning the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    The function first sorts the three numbers in ascending order and then finds the median by taking the middle number.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    median = sorted_numbers[len(sorted_numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    a_sorted = sorted([a, b, c])\n    b_sorted = sorted([a, b, c])\n    c_sorted = sorted([a, b, c])\n    \n    # Find the median\n    median_1 = (a_sorted[1] + b_sorted[1]) / 2\n    median_2 = (b_sorted[1] + c_sorted[1]) / 2\n    median_3 = (a_sorted[1] + c_sorted[1]) / 2\n    \n    # Find the median based on the three medians\n    median_list = [median_1, median_2, median_3]\n    median = sorted(median_list)[1]\n    \n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits_sum = []\n    for num in nums:\n        digits = sum(int(digit) for digit in str(num))\n        digits_sum.append(digits)\n    return digits_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize the sum of digits variable\n    sum_of_digits = 0\n\n    # iterate over each number in the list\n    for num in nums:\n        # convert the number to a string and iterate over each character\n        for digit in str(num):\n            # add the integer value of the character to the sum of digits variable\n            sum_of_digits += int(digit)\n\n    # return the sum of digits variable\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        total += sum(digits)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for digit in str(nums))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        # Convert the number to a string and then to a list of digits\n        digits = list(str(num))\n        # Compute the sum of digits and add it to the running total\n        sum_digits += sum(map(int, digits))\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(map(int, str(num))) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i < len(test_tup1) and i < len(test_tup2):\n            result = result + (test_tup1[i] ^ test_tup2[i],)\n        elif i < len(test_tup1):\n            result = result + (test_tup1[i],)\n        else:\n            result = result + (test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert the tuples to lists to perform bitwise xor operation on\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Perform bitwise xor operation\n    for i in range(len(list1)):\n        list1[i] = list1[i] ^ list2[i]\n        \n    # Convert the list back to a tuple and return it\n    return tuple(list1)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (test_tup1[0] ^ test_tup2[0])\n    for i in range(1, len(test_tup1)):\n        result |= (test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple\n    result_tup = ()\n    # iterate through both tuples\n    for i in range(len(test_tup1)):\n        # perform the bitwise xor operation on the corresponding elements of the tuples\n        xor_val = test_tup1[i] ^ test_tup2[i]\n        # add the result to the result tuple\n        result_tup = result_tup + (xor_val,)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple with zeros\n    result_tup = (0, 0, 0, 0)\n    # iterate over the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with all bits set to 0\n    result_tup = (0, 0, 0, 0)\n    # Loop through each bit position in the tuples\n    for i in range(4):\n        # Perform the bitwise xor operation between the i-th bit of test_tup1 and the i-th bit of test_tup2\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) in freq_dict:\n            freq_dict[tuple(item)] += 1\n        else:\n            freq_dict[tuple(item)] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(tuple(x) for x in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Given a list of tuples, returns the number of unique tuples in the list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n\n    # Using set() to remove duplicates and then len() to count the number of unique tuples\n    return len(set(test_list))"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Create empty list to store the added tuples\n    added_tuples = []\n\n    # Loop through each index in the first tuple\n    for i in range(len(test_tup1)):\n        # Add the corresponding element in the first tuple and second tuple at that index\n        added_tuple = (test_tup1[i] + test_tup2[i])\n        # Append the added tuple to the list\n        added_tuples.append(added_tuple)\n\n    # Return the list of added tuples\n    return added_tuples"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            test_tup1[i] += test_tup2[i]\n        return test_tup1\n    else:\n        raise ValueError(\"The two tuples have different sizes.\")"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new empty list to store the result\n    result = []\n    \n    # Iterate through each tuple element and add them together\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n        \n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(sum(test_tup1[i][:]))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize result tuple\n    result_tup = ()\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # loop through each element in the second tuple\n        for j in range(len(test_tup2[0])):\n            # add the corresponding elements and add to the result tuple\n            result_tup += (test_tup1[i][j] + test_tup2[i][j],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new empty list to store the result\n    result = []\n    # Loop through the first nested tuple\n    for i in range(len(test_tup1)):\n        # Loop through the second nested tuple\n        for j in range(len(test_tup2[i])):\n            # Add the corresponding elements from the two tuples\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    # Return the result as a nested tuple\n    return tuple(tuple(result))"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have same length\")\n        return None\n    \n    # Initialize a new empty tuple to store the result\n    result_tup = ()\n    \n    # Perform index wise addition of each tuple element\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = x % 2\n    if parity == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The number is even\"\n    else:\n        return \"The number is odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    if x % 2 == 0:\n        return \"The number \" + str(x) + \" is even.\"\n    else:\n        return \"The number \" + str(x) + \" is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even.\")\n    else:\n        print(f\"{x} is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Check if x is a positive integer\n    if type(x)!= int or x < 0:\n        print(\"Error: x must be a positive integer.\")\n        return\n    \n    # Count the number of 1s in binary representation of x\n    count = 0\n    while x!= 0:\n        count += x & 1\n        x >>= 1\n\n    # Check if count is odd\n    if count % 2 == 1:\n        print(\"The parity of\", x, \"is odd.\")\n    else:\n        print(\"The parity of\", x, \"is even.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Check if the number is negative\n    if x < 0: \n        # If the number is negative, its parity is odd\n        return True\n    else: \n        # If the number is positive, its parity is even\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The parity of \"+str(x)+\" is even.\"\n    else: \n        return \"The parity of \"+str(x)+\" is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    # Convert the input number to a list of digits\n    num_list = [int(digit) for digit in str(n)]\n\n    # Find the index of the digit with the largest value\n    max_index = max(range(len(num_list)), key=lambda i: num_list[i])\n\n    # Swap the digits with the digit with the largest value\n    num_list[max_index], num_list[-1] = num_list[-1], num_list[max_index]\n\n    # Convert the list of digits back to a number and return it\n    return int(''.join(str(digit) for digit in num_list))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number into a string\n    num_str = str(n)\n    # Find the length of the string\n    len_str = len(num_str)\n    # Initialize the next bigger number\n    next_bigger = 0\n    # Loop through the string in reverse order\n    for i in range(len_str - 1, -1, -1):\n        # Convert the current digit to an integer\n        digit = int(num_str[i])\n        # Check if the digit is 9 or less\n        if digit < 9:\n            # If it is, add 1 to the digit and break out of the loop\n            next_bigger += digit\n            break\n        # If the digit is greater than 9, subtract 9 from it and add it to the next bigger number\n        else:\n            next_bigger += digit - 9\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # get the digits of the input number\n    digits = [int(d) for d in str(n)]\n    # reverse the digits\n    digits.reverse()\n    # count the number of 1s\n    count = sum(1 for d in digits if d == 1)\n    # initialize the result as 0\n    result = 0\n    # add 1 to the result if there are no 1s\n    if count == 0:\n        result += 1\n    # add 9s to the result\n    for i in range(count, 9):\n        result += 9\n    # add 1s to the result if there are no 1s\n    if count == 0:\n        result += 1\n    # add the digits in reverse order to the result\n    for d in digits:\n        result += d\n    # return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    while n < 10:\n        n *= 10\n    while n >= 10:\n        n //= 10\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    digits.sort(reverse=True)\n    next_bigger = 0\n    for digit in digits:\n        next_bigger *= 10\n        next_bigger += digit\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a list of digits\n    digits = list(str(n))\n\n    # Reverse the list\n    digits.reverse()\n\n    # Convert the reversed list to an integer\n    result = int(''.join(digits))\n\n    # Return the next bigger number\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # initialize a list to store the digits of n\n    digits = list(str(n))\n\n    # find the index of the largest digit in the list\n    max_index = digits.index(max(digits))\n\n    # reverse the digits from the maximum digit to the first digit\n    digits = digits[:max_index] + digits[max_index:][::-1]\n\n    # convert the digits back to an integer\n    next_bigger = int(''.join(digits))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    def is_valid(num):\n        # Check if the number is in the range [1, 999999999]\n        if num < 1 or num > 999999999:\n            return False\n        \n        # Convert the number to a string and sort its digits\n        num_str = str(num)\n        num_str_sorted = sorted(num_str)\n        \n        # Check if the sorted string contains '1'\n        if '1' not in num_str_sorted:\n            return False\n        \n        # Check if the sum of the digits is greater than the original number\n        num_sum = sum(int(d) for d in num_str)\n        if num_sum > num:\n            return False\n        \n        # Check if the last digit is greater than the second last digit\n        last_digit = int(num_str[-1])\n        second_last_digit = int(num_str[-2])\n        if last_digit <= second_last_digit:\n            return False\n        \n        # Check if the first digit is greater than the second digit\n        first_digit = int(num_str[0])\n        second_digit = int(num_str[1])\n        if first_digit <= second_digit:\n            return False\n        \n        # Check if the last two digits are the same as the second last two digits\n        last_two_digits = num_str[-2:]\n        second_last_two_digits = num_str[-4:-2]\n        if last_two_digits!= second_last_two_digits:\n            return False\n        \n        return True\n    \n    def is_valid_rearrange(num, count):\n        # Check if the number is valid\n        if not is_valid(num):\n            return False\n        \n        # Check if the count is valid\n        if count == 0 or count > len(str(num)):\n            return False\n        \n        # Check if the count is greater than the number of digits in the number\n        num_digits = len(str(num))\n        if count > num_digits:\n            return False\n        \n        # Count the number of digits in the number that needs to be rearranged\n        count_digits = 0\n        for i in range(1, count+1):\n            if num % 10 == i:\n                count_digits += 1\n                num //= 10\n        if num > 0:\n            count_digits += 1\n        \n        # Check if the count matches the count_digits\n        if count_digits!= count:\n            return False\n        \n        return True\n    \n    # Find the next bigger number\n    num = n\n    while not is_valid(num):\n        num += 1\n    \n    # Rearrange the digits of the next bigger number\n    count = 0\n    while count < len(str(num)):\n        count_digits = 0\n        count_num = num\n        for i in range(1, count+1):\n            if count_num % 10 == i:\n                count_digits += 1\n                count_num //= 10\n        num_digits = len(str(count_num))\n        if count_digits < num_digits:\n            break\n    \n    return num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Initialize a list to hold the digits of n\n    digits = list(str(n))\n\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Combine the digits into a new string\n    new_n = ''.join(digits)\n\n    # Return the new number\n    return int(new_n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    digits.sort(reverse=True)\n    next_bigger_number = 0\n    \n    for digit in digits:\n        next_bigger_number += digit * 10 ** len(digits)\n    \n    return next_bigger_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Check if the input number is 0 or 1\n    if n == 0 or n == 1:\n        return 0\n\n    # Find the position of the largest digit\n    max_pos = 0\n    for i in range(len(str(n))):\n        if str(n)[i] > str(n)[max_pos]:\n            max_pos = i\n\n    # Extract the largest digit and rearrange the rest of the digits\n    max_digit = str(n)[max_pos]\n    rest = int(str(n)[max_pos:])\n    rearranged = str(max_digit) + str(rest)\n\n    # Convert the rearranged string back to an integer and return it\n    return int(rearranged)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    for num in nums1 + nums2:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    result = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(result) < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            else:\n                if (num1 + num2) < min_heap[0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n\n    for _ in range(k):\n        (value, pair) = heapq.heappop(min_heap)\n        result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n\n    # Create a min heap of size k\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i], nums2[i]))\n\n    # Initialize the result list and the current count\n    result = []\n    count = 0\n\n    # Iterate through the remaining elements in the arrays\n    for i in range(min(k, len(nums1)), len(nums1) + min(k, len(nums2))):\n        # If the current element of the second array is greater than or equal to the smallest element in the heap,\n        # remove the smallest element from the heap and add the current element to the result list\n        if nums2[i - min(k, len(nums1))] >= heap[0][0]:\n            heapq.heappop(heap)\n            result.append(heap[0][1])\n            count += 1\n\n        # If the current element of the second array is less than the smallest element in the heap,\n        # add the current element to the heap\n        else:\n            heapq.heappush(heap, (nums1[i - min(k, len(nums1))], nums2[i - min(k, len(nums1))]))\n\n    # If there are less than k elements left in the second array, add them to the result list\n    for i in range(min(k, len(nums2))):\n        if heap[0][1] == nums2[len(nums1) + i]:\n            result.append(heapq.heappop(heap)[1])\n\n    return result[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the k smallest elements\n    min_heap = []\n    # Create a dictionary to store the indices of the elements in the two arrays\n    index_dict = {}\n    # Initialize the index of the next element to be added to the min heap\n    next_index = 0\n    # Loop through the elements of the first array\n    for i in range(len(nums1)):\n        # Check if the current element is smaller than the minimum element in the min heap\n        if len(min_heap) < k or nums1[i] <= heapq.heappop(min_heap):\n            # If the current element is smaller than the minimum element, add it to the min heap\n            heapq.heappush(min_heap, nums1[i])\n            # Store the index of the current element in the dictionary\n            index_dict[nums1[i]] = i\n        # If the current element is larger than the minimum element in the min heap, add the next k-1 elements to the min heap\n        elif len(min_heap) == k and next_index < len(nums2):\n            # Add the next element to the min heap\n            heapq.heappush(min_heap, nums2[next_index])\n            # Store the index of the current element in the dictionary\n            index_dict[nums1[i]] = i\n            # Increment the next index to find the next k-1 smallest elements\n            next_index += 1\n\n    # Initialize the minimum sum of the k smallest pairs\n    min_sum = float('inf')\n    # Loop through the elements of the second array\n    for j in range(next_index, len(nums2)):\n        # Check if the minimum element in the min heap is larger than the current element\n        if len(min_heap) == k and nums2[j] > heapq.heappop(min_heap):\n            # Add the current element to the min heap\n            heapq.heappush(min_heap, nums2[j])\n            # Store the index of the current element in the dictionary\n            index_dict[nums2[j]] = j\n        # If the minimum element in the min heap is smaller than or equal to the current element, find the k smallest pairs\n        elif len(min_heap) < k or nums2[j] <= heapq.heappop(min_heap):\n            # Find the indices of the k smallest elements in the min heap\n            indices = [index_dict[x] for x in min_heap][:k]\n            # Find the sum of the k smallest elements\n            current_sum = sum(nums1[i] for i in indices)\n            # Update the minimum sum if the current sum is smaller than the minimum sum\n            if current_sum < min_sum:\n                min_sum = current_sum\n\n    # Return the minimum sum of the k smallest pairs\n    return min_sum"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    min_heap = []\n    \n    for i in range(len(nums1)):\n        heapq.heappush(min_heap, (-nums1[i], i))\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    for j in range(len(nums2)):\n        if len(min_heap) == 0:\n            break\n        current_pair = (-nums1[min_heap[0][1]], nums2[j])\n        heapq.heappop(min_heap)\n        heapq.heappush(min_heap, current_pair)\n        pairs.append(current_pair)\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    \n    # iterate through the first array and for each element, calculate the sum of the corresponding element from the second array\n    for i, num1 in enumerate(nums1):\n        total = sum(nums2) - num1\n        heapq.heappush(heap, (total, (i, len(nums2)-1)))\n    \n    # sort the heap in decreasing order\n    heapq.heapify(heap)\n    \n    # extract the k pairs and return them\n    result = []\n    for _ in range(k):\n        total, (i1, j1) = heapq.heappop(heap)\n        result.append((nums1[i1], nums2[j1]))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Use heapq to get the k smallest elements from both arrays\n    min_heap1 = []\n    min_heap2 = []\n    for num in nums1:\n        heapq.heappush(min_heap1, -num)\n    for num in nums2:\n        heapq.heappush(min_heap2, -num)\n    \n    # Initialize a dictionary to store the count of pairs\n    pairs_count = {}\n    \n    # Iterate until k pairs are found\n    while len(pairs_count) < k:\n        # Get the smallest element from both arrays\n        min1 = -heapq.heappop(min_heap1)\n        min2 = -heapq.heappop(min_heap2)\n        \n        # Check if a pair with the smaller element exists in the dictionary\n        if -min2 in pairs_count:\n            pairs_count[-min1] += 1\n            pairs_count[-min2] += 1\n        else:\n            pairs_count[-min1] = 1\n            pairs_count[-min2] = 1\n    \n    # Convert the dictionary to a list of pairs and return the list\n    return [(nums1[i], nums2[j]) for i in pairs_count for j in range(pairs_count[i])]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    heapq.heapify(heap)\n\n    for num1 in nums1:\n        heapq.heappush(heap, -num1)\n        if len(heap) > k:\n            heapq.heappop(heap)\n\n    for num2 in nums2:\n        if heapq.heappushpop(heap, num2) == -num2:\n            heapq.heappush(heap, -num2)\n            if len(heap) > k:\n                heapq.heappop(heap)\n\n    return [(-num1, -num2) for num1 in heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def k_smallest_pairs(nums1, nums2, k):\n    # create a min heap of size k\n    min_heap = [(-diff, (i, j)) for i in range(len(nums1)) for j in range(len(nums2)) for diff in nums1[i] + nums2[j]]\n    heapq.heapify(min_heap)\n\n    # initialize an empty list to store the result\n    result = []\n\n    # while there are k elements in the min heap\n    while len(result) < k:\n        # extract the difference and pair from the min heap\n        diff, pair = heapq.heappop(min_heap)\n\n        # if the difference is already in the result list, skip this pair\n        if diff in [p[0] for p in result]:\n            continue\n\n        # add the pair to the result list and add the negative difference to the min heap\n        result.append(pair)\n        heapq.heappush(min_heap, (-diff, (-pair[0], -pair[1])))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # create a min heap to store the pairs\n    heap = []\n    \n    # iterate through both arrays and add all the pairs to the heap\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # if the current pair is smaller than the k smallest pairs, add it to the heap\n            if nums1[i] + nums2[j] < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n                \n    # create a list to store the k smallest pairs\n    k_smallest_pairs = []\n    \n    # iterate through the heap and add k pairs to the list\n    while len(k_smallest_pairs) < k and heap:\n        # get the smallest pair from the heap\n        pair = heapq.heappop(heap)\n        k_smallest_pairs.append(pair)\n    \n    return k_smallest_pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize the minimum product and the minimum value of a tuple\n    min_product = float('inf')\n    min_value = (float('inf'), float('inf'))\n    \n    # loop through each tuple in the list\n    for i in range(len(list1)):\n        # loop through each other tuple in the list\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples and check if it is smaller than the minimum product\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_value = (list1[i][0], list1[j][0])\n    \n    # return the minimum product and the minimum value of the tuple\n    return min_product, min_value\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of any pair of tuples within the list.\n    '''\n    min_product = float('inf') # initialize minimum product to infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1] # calculate product of pair of tuples\n            if product < min_product: # if product is smaller than current minimum, update minimum\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize variables\n    min_product = float('inf')\n    min_pair = None\n    \n    # iterate over the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # check if the product is smaller than the current minimum\n            if product < min_product:\n                min_product = product\n                min_pair = (list1[i], list1[j])\n    \n    # return the minimum product and pair of tuples\n    return min_product, min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # sort the list of tuples by their length\n    list1.sort(key=lambda x: len(x))\n    \n    # initialize the minimum product to be the first tuple in the list\n    min_product = list1[0]\n    \n    # loop through the sorted list of tuples\n    for i in range(1, len(list1)):\n        # calculate the product of the current tuple and the minimum product so far\n        product = list1[i][0] * min_product[1]\n        \n        # update the minimum product if the new product is smaller\n        if product < min_product[0]:\n            min_product = (product, list1[i])\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product_list.append(list1[i][0]*list1[j][1])\n    min_product = min(product_list)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_value = float('inf')\n    min_pair = None\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            \n            if product < min_value:\n                min_value = product\n                min_pair = (list1[i], list1[j])\n    \n    return min_value, min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_value = float('inf')\n    result = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_value:\n                min_value = product\n                result = (list1[i], list1[j])\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Calculate the product of each tuple in the list\n    product_list = [product(tuple1) for tuple1 in list1]\n    # Find the minimum product\n    minimum_product = min(product_list)\n    # Return the minimum product\n    return minimum_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Returns the minimum product of all pairs of tuples in a given list.\n\n    Parameters:\n    lst (list): A list of tuples.\n\n    Returns:\n    float: The minimum product of all pairs of tuples in the list.\n    \"\"\"\n    # initialize variables\n    min_product = float('inf')\n    prod1 = 1\n    prod2 = 1\n\n    # loop through the list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            # calculate the product of the two tuples\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n\n            # update the minimum product if the current product is smaller\n            if product < min_product:\n                min_product = product\n                prod1 = lst[i][0]\n                prod2 = lst[j][0]\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(lst):\n    '''\n    Find the minimum product from pairs of tuples in a given list.\n    '''\n    # Initialize minimum product to infinity\n    min_product = float('inf')\n    # Initialize a list to store the products of tuples\n    product_list = []\n    \n    # Iterate through each tuple in the list\n    for tup in lst:\n        # Calculate the product of the tuple and add it to the list of products\n        product = 1\n        for num in tup:\n            product *= num\n        product_list.append(product)\n        \n        # Update the minimum product if the current product is smaller\n        if product < min_product:\n            min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of any data type and returns the minimum value from the list.\n    '''\n    min_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(lst):\n    \"\"\"\n    This function takes a list as input and returns the minimum value in the list.\n    \"\"\"\n    # check if the list is empty\n    if not lst:\n        print(\"Error: The list is empty!\")\n        return None\n    \n    # initialize minimum value\n    min_val = lst[0]\n    \n    # iterate through the list to find the minimum value\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    \n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    This function finds the minimum value in a heterogeneous list.\n\n    Parameters:\n    listval (list): The list containing heterogeneous data.\n\n    Returns:\n    minimum_value (any): The minimum value in the list.\n    '''\n    # Initialize the minimum value to the first value in the list\n    minimum_value = listval[0]\n\n    # Loop through the rest of the list and compare each value to the current minimum\n    for value in listval[1:]:\n        if value < minimum_value:\n            minimum_value = value\n\n    return minimum_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        raise ValueError('List is empty')\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]  # initialize min_val with the first element of the list\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]  # if the current element is smaller than min_val, update min_val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to the first value in the list\n    min_val = listval[0]\n    # Loop through the remaining values in the list\n    for val in listval[1:]:\n        # If the current value is less than the minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to the first value in the list\n    min_val = listval[0]\n    # loop through the rest of the values in the list\n    for val in listval[1:]:\n        # compare the current value to the minimum value\n        if val < min_val:\n            # update the minimum value to the current value\n            min_val = val\n    # return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for val in listval:\n            if val < min_val:\n                min_val = val\n        return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_word = \"\"\n    prev_char = \"\"\n    for i in range(len(word)):\n        if word[i].isupper():\n            if prev_char.islower():\n                camel_word += word[i]\n            else:\n                camel_word += prev_char + word[i]\n                prev_char = \"\"\n        elif prev_char.islower():\n            camel_word += prev_char + word[i]\n        else:\n            camel_word += word[i]\n            prev_char = \"\"\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'_(\\w)'\n    return ''.join(word.title().split(pattern))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words separated by underscores\n    words = re.findall(r'\\b\\w+\\b', word)\n    \n    # Convert the first word to lowercase and append it to the camel case word\n    camel_case_word = words[0].lower()\n    \n    # Iterate over the rest of the words and append the first letter of each word to the camel case word\n    for i in range(1, len(words)):\n        word = words[i]\n        camel_case_word += word[0].upper()\n        camel_case_word += word[1:]\n    \n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert the input word to snake case\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    # Convert the snake case word to camel case\n    camel_case = ''.join(x.lower() for x in word.split('_'))\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word and join them with an empty string to form the camel case string\n    camel_case_word = ''.join(w.capitalize() for w in words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove any underscores in the string\n    word = re.sub(r'_', '', word)\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words[0] = words[0].capitalize()\n    # Join the words together with capitalized letters\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n    \"\"\"\n    # Convert all letters to lowercase\n    word = word.lower()\n    # Remove leading and trailing underscores\n    word = re.sub('^_|_$', '', word)\n    # Split the word into words\n    words = word.split('_')\n    # Convert the first letter to uppercase and join the words with underscores\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += '_' + words[i]\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Split the word by underscores\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    capitalize_words = [word.capitalize() for word in words]\n\n    # Join the capitalized words with underscores\n    camel_case_word = '_'.join(capitalize_words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert snake case to camel case\n    camel_word = re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the given word to snake case\n    snake_word = re.sub(r'(?<!^)(?=[A-Z])', '_', word)\n    # Convert snake case to camel case\n    camel_word = ''.join(map(lambda x: x.capitalize(), snake_word.split('_')))\n    return camel_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = []\n    for num in l:\n        if num % 2 == 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    # Initialize an empty list to store even numbers\n    even_nums = []\n\n    # Loop through each number in the given list\n    for num in l:\n        # If the number is odd, append it to the even_nums list\n        if num % 2!= 0:\n            even_nums.append(num)\n\n    # Return the even_nums list containing only even numbers\n    return even_nums"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # Initialize an empty list to store the extracted elements\n    extracted_elements = []\n    \n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Append the nth element to the extracted_elements list\n        extracted_elements.append(list1[i][n-1])\n    \n    # Return the extracted_elements list\n    return extracted_elements"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function takes a list of tuples and an integer n as input and returns the nth element of the list.\n\n    Parameters:\n    list1 (list): A list of tuples.\n    n (int): An integer representing the position of the desired element in the list.\n\n    Returns:\n    A tuple containing the nth element of the list or None if the list is empty.\n    \"\"\"\n    if len(list1) == 0:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        print(\"Invalid input! The length of the list is less than the given index.\")\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list\")\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 1:\n        raise ValueError(\"Input must be greater than 0\")\n    if len(list1) < n:\n        raise ValueError(\"Input list should have at least n elements\")\n    \n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function extracts the nth element from a given list of tuples.\n    \"\"\"\n    if n > len(lst):\n        print(\"Invalid index. Index should be less than the length of the list.\")\n        return None\n    else:\n        return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        print(\"The list is too small to extract the nth element.\")\n        return None\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the input list is valid\n    if not isinstance(list1, list):\n        raise TypeError('Input must be a list')\n    if not all(isinstance(x, tuple) for x in list1):\n        raise TypeError('All elements of the list must be tuples')\n    \n    # check if the n is valid\n    if not isinstance(n, int) or n < 1:\n        raise TypeError('n must be a positive integer')\n    \n    # extract the nth element from the list of tuples\n    result = list1[n-1]\n    \n    return result"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Convert both lists to sets to remove duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n\n    # Check if there is any value in list2 that is not in list1\n    if list1.issubset(list2):\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # convert the list into sets to remove duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n    \n    # check if any value in the first list is present in the second list\n    if list1.intersection(list2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # create a set of values in list1\n    set1 = set(list1)\n    # iterate over values in list2\n    for value in list2:\n        # if value exists in set1, return True\n        if value in set1:\n            return True\n    # if no values exist in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n        list1 (list): A sequence of values.\n        list2 (list): Another sequence of values.\n\n    Returns:\n        bool: True if any value exists in both sequences, False otherwise.\n    \"\"\"\n    return any(value in list1 for value in list2) or any(value in list2 for value in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2 and num!= max1:\n            max2 = num\n    return max1*max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = float('-inf') \n    max2 = float('-inf') \n    min1 = float('inf') \n    min2 = float('inf')\n\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    return (max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return (max1, min1)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize two variables to store the maximum and minimum products\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n\n    # Loop through the array\n    for i in range(2, len(arr)):\n        # Calculate the new maximum and minimum products\n        new_max = max(arr[i] * arr[i-1], arr[i] * min_product)\n        new_min = min(arr[i] * arr[i-1], arr[i] * max_product)\n\n        # Update the maximum and minimum products based on the new values\n        max_product = new_max\n        min_product = new_min\n\n    # Return the pair with the highest product\n    return max_product, min_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    This function takes in an array of integers and finds a pair with the highest product.\n    '''\n    # Initialize variables to store the maximum product of adjacent elements\n    max1, max2 = float('-inf'), float('-inf')\n    # Initialize variables to store the minimum product of adjacent elements\n    min1, min2 = float('inf'), float('inf')\n    \n    # Loop through the array and update the variables\n    for i in range(len(arr)):\n        # Update max1 and max2 if the product of adjacent elements is greater than max1\n        if arr[i]*max1 > max1:\n            max2 = max1\n            max1 = arr[i]\n        # Update max2 if the product of adjacent elements is greater than max2\n        elif arr[i]*max2 > max2:\n            max2 = arr[i]\n        # Update min1 and min2 if the product of adjacent elements is less than min1\n        if arr[i]*min1 < min1:\n            min2 = min1\n            min1 = arr[i]\n        # Update min2 if the product of adjacent elements is less than min2\n        elif arr[i]*min2 < min2:\n            min2 = arr[i]\n    \n    # Return the pair with the highest product\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    max_product = 0\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    \n    for i in range(len(arr)): \n        if arr[i] > max1: \n            max2 = max1 \n            max1 = arr[i] \n        elif arr[i] > max2: \n            max2 = arr[i] \n        elif arr[i] < min1: \n            min2 = min1 \n            min1 = arr[i] \n        elif arr[i] < min2: \n            min2 = arr[i] \n            \n    if max1 * max2 > min1 * min2: \n        return (max1, max2)\n    else: \n        return (min1, min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = [-float('inf'), -float('inf')]\n\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            \n            prod = arr[i] * arr[j]\n            \n            if prod > max_pair[0]:\n                max_pair[0] = prod\n                \n            if prod < max_pair[1]:\n                max_pair[1] = prod\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to store the maximum and minimum product\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n\n    # Loop through the remaining elements of the array and find the pair with highest product\n    for i in range(2, len(arr)):\n        # Calculate the product of the current element and the maximum product\n        current_product = arr[i] * max_product\n\n        # Update the maximum and minimum product if the current product is greater than the maximum product\n        if current_product > max_product:\n            max_product = current_product\n            min_product = arr[i] * arr[i]\n\n        # Update the maximum and minimum product if the current product is less than the minimum product\n        elif current_product < min_product:\n            min_product = current_product\n            max_product = arr[i] * arr[i]\n\n    # Return the pair with highest product\n    return (max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = arr[0]\n    max_pair = (0, 0)\n    for i in range(1, len(arr)):\n        if arr[i] * arr[0] > max_product:\n            max_product = arr[i] * arr[0]\n            max_pair = (i, 0)\n        elif arr[i] * arr[1] > max_product:\n            max_product = arr[i] * arr[1]\n            max_pair = (0, i)\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    This function takes a list of integers as input and returns the pair with highest product.\n    '''\n    max_product = float('-inf')\n    pair = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                pair = [arr[i], arr[j]]\n\n    return pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty dictionary to store common elements and their count\n    common_elements = {}\n    \n    # loop through each tuple in the input list\n    for i in range(len(Input)):\n        # get the first element of the current tuple\n        element = Input[i][0]\n        \n        # if the element is already in the dictionary, increment its count\n        if element in common_elements:\n            common_elements[element] += 1\n        # otherwise, add the element to the dictionary with a count of 1\n        else:\n            common_elements[element] = 1\n    \n    # sort the dictionary by value (count of common elements) in descending order\n    sorted_common_elements = dict(sorted(common_elements.items(), key=lambda item: item[1], reverse=True))\n    \n    # return the first key (which is the common element) from the sorted dictionary\n    return next(iter(sorted_common_elements))"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    # initialize an empty dictionary to store common elements\n    common_elements = {}\n    \n    # iterate over the given list of tuples\n    for item in Input:\n        # check if the first element of the tuple is already in the dictionary\n        if item[0] in common_elements:\n            # if it is, add the second element of the tuple to the list of elements\n            common_elements[item[0]].append(item[1])\n        else:\n            # if not, add the tuple as is to the dictionary with its first element as the key\n            common_elements[item[0]] = [item[1]]\n    \n    # initialize an empty list to store the common first elements\n    common_first_elements = []\n    \n    # iterate over the dictionary and add the keys to the list of common first elements\n    for key in common_elements:\n        common_first_elements.append(key)\n    \n    # return the list of common first elements\n    return common_first_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty dictionary to store the count of each element in the list\n    count_dict = {}\n\n    # Iterate through the list of tuples and update the count of each element in the dictionary\n    for item in Input:\n        if item[0] in count_dict:\n            count_dict[item[0]] += 1\n        else:\n            count_dict[item[0]] = 1\n\n    # Find the element with the highest count and return it\n    max_count = max(count_dict.values())\n    for key, value in count_dict.items():\n        if value == max_count:\n            return key"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for item in Input:\n        if item[0] == common_element:\n            return item[0]\n        elif common_element is None:\n            common_element = item[0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n    for tuple_ in Input:\n        if len(common_first_element) == 0:\n            common_first_element.append(tuple_[0])\n        else:\n            common_first_element = [x for x in common_first_element if x!= tuple_[0]]\n            common_first_element.append(tuple_[0])\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    for tup in Input:\n        if tup[0] in common_elements:\n            common_elements.remove(tup[0])\n        else:\n            common_elements.add(tup[0])\n    return list(common_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # Loop through each tuple in the list\n    for i in Input:\n        # Check if the first element of the tuple is in the count dictionary\n        if i[0] in count_dict:\n            # If it is, increment its count by 1\n            count_dict[i[0]] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[i[0]] = 1\n    \n    # Loop through the count dictionary to find the element with the highest count\n    max_count = 0\n    common_first = None\n    for key in count_dict:\n        if count_dict[key] > max_count:\n            max_count = count_dict[key]\n            common_first = key\n    \n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # creating empty list to store the common elements\n    common = []\n    \n    # iterating over the input list\n    for tup in Input:\n        # extracting the first element from the tuple\n        first_elem = tup[0]\n        \n        # checking if the first element is already in the common list\n        if first_elem not in common:\n            # adding the first element to the common list\n            common.append(first_elem)\n    \n    # returning the common list\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize a dictionary to store the count of each element\n    count = {}\n    # loop through the given list of tuples\n    for i in Input:\n        # get the first element from the tuple\n        element = i[0]\n        # if the element is not already in the dictionary, add it with a count of 1\n        if element not in count:\n            count[element] = 1\n        # if the element is already in the dictionary, increment the count by 1\n        else:\n            count[element] += 1\n    # loop through the dictionary and find the element with the highest count\n    max_count = 0\n    common_element = None\n    for element, count in count.items():\n        if count > max_count:\n            max_count = count\n            common_element = element\n    # return the common element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a dictionary where the keys are the common first elements in the list and the values are lists of tuples that have that common first element.\n    '''\n    # Create a dictionary to store the groups\n    common_groups = {}\n\n    # Iterate over each tuple in the list\n    for tuple in Input:\n        # Get the first element of the tuple\n        first_element = tuple[0]\n\n        # If the first element is already in the dictionary, add the tuple to the list for that key\n        if first_element in common_groups:\n            common_groups[first_element].append(tuple)\n        # Otherwise, create a new key and add the tuple to it\n        else:\n            common_groups[first_element] = [tuple]\n\n    # Return the dictionary of groups\n    return common_groups"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    \n    # Loop through the list and keep track of the maximum element and its length\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    \n    # Return the maximum element\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    # Initialize max_len and max_element variables\n    max_len = 0\n    max_element = None\n\n    # Iterate through the list and update max_len and max_element\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n\n    # Return the max_element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n\n    for i in lst:\n        len_i = len(i)\n        if len_i > max_len:\n            max_len = len_i\n            max_element = i\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_element = element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # sum of rounded numbers\n    sum_rounded = sum([round(num) for num in list1])\n    \n    # multiply by length of list\n    total_sum = sum_rounded * len(list1)\n    \n    # print the result\n    print(\"The total sum is: \", total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_rounded = 0\n    for i in list1:\n        sum_rounded += round(i)\n    print(sum_rounded * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    total *= len(list1)\n    print(total)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # round every number in the list\n    rounded_list = [round(x) for x in list1]\n    # calculate the total sum\n    total_sum = sum(rounded_list)\n    # calculate the product of the length of the list and the total sum\n    product = total_sum * len(rounded_list)\n    # print the result\n    print(product)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Round all numbers in the list\n    rounded_list = [round(num) for num in list1]\n    # Calculate the total sum\n    total_sum = sum(rounded_list)\n    # Multiply the total sum by the length of the list\n    result = total_sum * len(list1)\n    # Print the result\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n        print(rounded_num)\n    print(\"The total sum multiplied by the length of the list is:\", total_sum*len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize the sum and count variables to 0\n    sum = 0\n    count = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of the number\n        cube = i**3\n        \n        # Add the cube to the sum\n        sum += cube\n        \n        # Increment the count variable\n        count += 1\n        \n    # Return the sum divided by the count\n    return sum/count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    i = 0\n    while i < n:\n        sum_of_cubes += i*i*i\n        i += 1\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_cubes += i ** 3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**3\n    return total"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2,n+1,2):\n        cube_sum += i**3\n    return cube_sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The cube sum of first\",n,\"even natural numbers is:\",cube_Sum(n))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_numbers = [2*i for i in range(n+1)]\n    return sum([num**3 for num in even_numbers])"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # initialize variables\n    sum = 0\n    i = 1\n    # loop through first n even natural numbers\n    while i <= n:\n        sum += i ** 3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function calculates the sum of the cube of the first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n+1):\n        cube_sum += i*i*i\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Define the delimiter as a string\n    delimiter = \" - \"\n    \n    # Initialize an empty string variable to store the concatenated string\n    concatenated_string = \"\"\n    \n    # Loop through each element of the tuple\n    for item in test_tup:\n        # Concatenate the element with the delimiter\n        concatenated_string += str(item) + delimiter\n    \n    # Return the concatenated string\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = delimiter.join(str(x) for x in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = ''\n    for i in test_tup:\n        concatenated_string += str(i) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple([str(elem) for elem in test_tup])"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    result = delimiter.join(map(str, test_tup))\n    return result"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    total = 0.0\n    for i in range(1, n+1):\n        total += i*i*i\n    average = total / (n*n*n)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n\n    for i in range(1, n+1):\n        cube = i ** 3\n        sum += cube\n        count += 1\n\n    average = sum / count\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0  \n    for i in range(1,n+1):  \n        cube_sum += i*i*i  \n    average = cube_sum/n  \n    return average "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1, n+1):\n        sum_cube += i**3\n    average_cube = sum_cube/n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    This function finds the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    total = 0\n    \n    # Iterate over first n natural numbers\n    for i in range(1, n+1):\n        # Calculate the cube of i and add it to the total\n        total += i**3\n        count += 1\n        \n    # Calculate the average and return it\n    return total/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initialize a variable to store the sum of cubes of natural numbers\n    sum_cubes = 0\n    \n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        # Calculate the cube of the current natural number\n        cube = i**3\n        # Add the cube to the sum of cubes of natural numbers\n        sum_cubes += cube\n    \n    # Calculate the average of the sum of cubes of natural numbers\n    average = sum_cubes / n\n    \n    # Return the average of the sum of cubes of natural numbers\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1, n+1):\n        sum_cube += i**3\n\n    average_cube = sum_cube/n\n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    average = sum/n\n    print(\"The average of cubes of the first {} natural numbers is {}\".format(n, average))"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_element = []\n    for i in test_tuple:\n        rear_element.append(i[-1])\n    return rear_element"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for string in test_tuple:\n        rear_index = len(string) - 1\n        rear_indices.append(rear_index)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        rear_index = len(test_tuple[i]) - 1\n        result.append(test_tuple[i][rear_index])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[i][-1] for i in range(len(test_tuple)))"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(lst, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if x in lst[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    # Create an empty list to store the odd numbers\n    odd_nums = []\n    # Loop through the given list of numbers\n    for num in nums:\n        # Check if the number is odd and add it to the odd_nums list\n        if num % 2 == 1:\n            odd_nums.append(num)\n    # Return the filtered list\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regular expression pattern for matching date pattern in the string\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # use re.sub() function to replace date pattern with desired format\n    dt = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    \n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # match the pattern in the date string\n    match = re.match(pattern, dt)\n\n    # check if there was a match\n    if match:\n        # extract the groups from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # reverse the order of the month and day\n        day = month\n        month = year\n\n        # return the formatted date in dd-mm-yyyy format\n        return f\"{day}-{month}-{year}\"\n    else:\n        # if there was no match, return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use the re.sub() function to replace the month and day with the corresponding values\n    # in the new format.\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    \n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n    new_date = day + '-' + month + '-' + year\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        yyyy, mm, dd = match.groups()\n        return f'{dd}-{mm}-{yyyy}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use re.search() method to search for the pattern in the input string\n    match = re.search(pattern, dt)\n\n    # If pattern is found, extract the year, month, and day values and format them as dd-mm-yyyy\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define a regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use re.sub() method to replace the date format with dd-mm-yyyy\n    dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd_pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = yyyy_mm_dd_pattern.match(dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = f\"{day}-{month}-{year}\"\n        return new_dt\n    else:\n        print(\"Invalid date format\")"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        new_date = f\"{day}-{month}-{year}\"\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Convert yyyy-mm-dd to dd-mm-yyyy format\n    date_format = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(date_format, dt)\n    if match:\n        return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\"\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n            # This is the key line to sort the array\n            # my_list[i], my_list[j] = my_list[j], my_list[i]\n        gap = gap // 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    # Calculate the increment sequence for shell sort\n    inc = n // 2\n    while inc > 0:\n        for i in range(inc, n):\n            key = my_list[i]\n            j = i\n            while j >= inc and my_list[j-inc] > key:\n                my_list[j] = my_list[j-inc]\n                j -= inc\n            my_list[j] = key\n        inc //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    # Define the gap sequence\n    gap = n // 2\n    while gap > 0:\n        # Perform insertion sort on the array\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap sequence\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap//2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i], test_tup2[i])\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result.append(True)\n        else:\n            result.append(False)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Extract the elements from the two tuples\n    tup1 = test_tup1[0]\n    tup2 = test_tup2[0]\n\n    # Extract the elementwise and tuples from the two tuples\n    and_tup = (tup1 & tup2)\n\n    # Return the elementwise and tuples from the two tuples\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append((test_tup1[i] & test_tup2[i]))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and of the tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same number of elements.\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] & test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup = and_tup + (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Define the length of the tuples\n    length = len(test_tup1)\n    # Initialize the result tuple\n    result_tup = ()\n    # Loop through each element of the first tuple\n    for i in range(length):\n        # Extract the first element of the first tuple\n        first_element = test_tup1[i]\n        # Extract the second element of the second tuple\n        second_element = test_tup2[i]\n        # Perform the elementwise and operation between the first and second elements\n        and_element = first_element & second_element\n        # Append the result to the result tuple\n        result_tup += (and_element,)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup = and_tup + (test_tup1[i] & test_tup2[i],)\n    return and_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    and_tup = tuple(i & j for i, j in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Find the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if there is no solution\n    if discriminant < 0:\n        return \"There is no directrix\"\n    \n    # Find the directrix\n    directrix = (-b + discriminant**0.5)/(2*a)\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Calculate the roots of the discriminant\n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n\n    # Find the maximum and minimum roots\n    if root1 < root2:\n        min_root = root1\n        max_root = root2\n    else:\n        min_root = root2\n        max_root = root1\n\n    # Calculate the directrix\n    directrix = (-b - min_root) / (2*a)\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    \n    return (x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return [x1, x2]\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return [x]\n    else:\n        return \"The given equation does not have a real root.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b**2) - (4*a*c)\n    if discriminant > 0:\n        return ((-b + discriminant**0.5) / (2*a))\n    elif discriminant < 0:\n        return ((-b - discriminant**0.5) / (2*a))\n    else:\n        return \"The quadratic equation has no real roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b ** 2 - 4 * a * c\n\n    # Check if the discriminant is greater than 0\n    if discriminant > 0: \n        # Calculate the root of the discriminant\n        root = (-b + discriminant ** 0.5) / (2 * a)\n\n        # Return the root as the directrix\n        return root\n    \n    # If the discriminant is 0, the directrix is at one of the two roots\n    elif discriminant == 0: \n        return -b / (2 * a)\n\n    # If the discriminant is negative, there is no real solution\n    else: \n        return \"There are no real solutions.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    if d > 0: \n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n    elif d == 0: \n        x1 = -b / (2*a)\n        x2 = -b / (2*a)\n    else: \n        print(\"The equation has no real roots.\")\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        directrix = (-b + discriminant**0.5) / (2*a)\n        return directrix\n    elif discriminant == 0:\n        directrix = -b / (2*a)\n        return directrix\n    else:\n        print(\"The equation has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return \"The directrix of the parabola is {:.2f}\".format(x1), \"and\", \"the directrix of the parabola is {:.2f}\".format(x2)\n    elif discriminant == 0:\n        x1 = -b/(2*a)\n        return \"The directrix of the parabola is {:.2f}\".format(x1)\n    else:\n        return \"The discriminant of the parabola is {:.2f}. The equation of the parabola is not a parabola.\".format(discriminant)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    Parameters:\n    a (float): The first coefficient of the parabola.\n    b (float): The second coefficient of the parabola.\n    c (float): The third coefficient of the parabola.\n\n    Returns:\n    float: The directrix of the parabola.\n    \"\"\"\n    discriminant = b ** 2 - 4 * a * c\n    \n    if discriminant > 0:\n        x1 = (-b + discriminant ** 0.5) / (2 * a)\n        x2 = (-b - discriminant ** 0.5) / (2 * a)\n        return x1, x2\n    else:\n        return None"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i] == list2[i]:\n                return True\n        return False\n    else:\n        print(\"Lists must have the same length to have a common element.\")\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        # Swap the two lists to ensure list1 is the smaller one\n        list1, list2 = list2, list1\n        \n    for element in list1:\n        if element in list2:\n            return True\n    \n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Loop through each element in list1\n    for item1 in list1:\n        # Check if item1 is in list2\n        if item1 in list2:\n            # If it is, return True\n            return True\n\n    # If we get here, then none of the items in list1 were found in list2, so return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a dictionary to store the elements of list2 and their frequencies in list1\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n\n    # Iterate over list2 and check if any of its elements are in freq_dict\n    for element in list2:\n        if element in freq_dict and freq_dict[element] > 0:\n            return True\n\n    # If no common element was found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the base of the trapezium\n    base = 0.5 * (base1 + base2)\n\n    # Calculate the length of the hypotenuse of the trapezium\n    hypotenuse = math.sqrt(area * (base1 + base2) / math.tan(math.pi / 3))\n\n    # Calculate the median length of the trapezium\n    if height < base2:\n        median = math.sqrt(3) * (base + hypotenuse)\n    else:\n        median = math.sqrt(3) * (base - hypotenuse)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base_sum = base1 + base2\n    area = 0.5 * height * (base_sum - (base1 - base2))\n    return area"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the lengths of the sides of the trapezium\n    side1 = base1 * 2\n    side2 = base2 * 2\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n\n    # Calculate the length of the base of the trapezium\n    base = 2 * (side1 + side2) / 3\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + 2 * height\n\n    # Find the median of the perimeter\n    median_perimeter = perimeter / 2\n\n    # Calculate the length of the hypotenuse of the trapezium\n    hypotenuse = (base ** 2 + height ** 2) ** 0.5\n\n    # Calculate the length of the base of the trapezium that is closest to the hypotenuse\n    closest_base = base + (hypotenuse - base) / (2 * area)\n\n    # Calculate the length of the base of the trapezium that is farthest from the hypotenuse\n    farthest_base = base - (hypotenuse - base) / (2 * area)\n\n    # Calculate the length of the longest side of the trapezium\n    longest_side = max(side1, side2)\n\n    # Calculate the length of the shortest side of the trapezium\n    shortest_side = min(side1, side2)\n\n    # Calculate the length of the center of the trapezium\n    center = (longest_side + shortest_side) / 2\n\n    # Find the median of the lengths of the two base lines\n    median_base = (closest_base + farthest_base) / 2\n\n    # Calculate the median length of the trapezium\n    median_trapezium = (2 * height + 2 * base) / 3\n\n    # Return the median length of the trapezium\n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of each side of the trapezium\n    side1 = base1 + base2\n    side2 = 2 * base1 + height + base2\n    side3 = 2 * base2 + height + base1\n    # Calculate the area of the trapezium\n    area = 0.5 * (side1 + side2 + side3)\n    # Calculate the lengths of the hypotenuses\n    hypotenuse1 = 0.5 * height * (side1**2 + side2**2)\n    hypotenuse2 = 0.5 * height * (side2**2 + side3**2)\n    # Calculate the areas of the right and left trapezoids\n    trap1 = side1 * side2\n    trap2 = side2 * side3\n    trap3 = side3 * side1\n    # Calculate the areas of the left and right parallelograms\n    par1 = 0.5 * (trap1 + trap2 + trap3)\n    par2 = 0.5 * (trap2 + trap3 + trap1)\n    par3 = 0.5 * (trap3 + trap1 + trap2)\n    # Find the maximum area and corresponding side\n    max_area = par1\n    max_side = 1\n    if par2 > max_area:\n        max_area = par2\n        max_side = 2\n    if par3 > max_area:\n        max_area = par3\n        max_side = 3\n    # Calculate the length of the diagonal of the trapezium\n    diagonal = 0.5 * side1 * (1 - (height / side2))\n    # Find the median length of the trapezium by comparing the lengths of the two hypotenuses\n    if max_side == 1:\n        median = math.sqrt(hypotenuse1)\n    elif max_side == 2:\n        median = math.sqrt(hypotenuse2)\n    else:\n        median = math.sqrt(diagonal)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium given its base and height.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n    \n    # Calculate the length of the base of the trapezium\n    base = (area ** 0.5) / height\n    \n    # Calculate the length of the height of the trapezium\n    height_base = height / base\n    \n    # Calculate the length of the base of the triangle formed by the two smaller bases\n    base_of_triangle = (base1 + base2) / 2\n    \n    # Calculate the area of the triangle\n    area_triangle = 0.5 * base_of_triangle * height_base\n    \n    # Calculate the length of the midpoint of the trapezium\n    midpoint = 0.5 * (base1 + base2) * height\n    \n    # Find the two midpoints of the triangle formed by the two smaller bases\n    midpoints = [midpoint - 0.5 * base_of_triangle, midpoint + 0.5 * base_of_triangle]\n    \n    # Find the smaller base of the triangle that is outside the trapezium\n    outside_base = midpoints[0] if area_triangle > area else midpoints[1]\n    \n    # Calculate the length of the middle of the trapezium\n    middle = (base1 + base2 + outside_base) / 3\n    \n    # Calculate the median length of the trapezium\n    median = middle * 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function finds the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    base_median = 0.5 * (base1 + base2)\n    area_median = 0.5 * area\n    trapezium_median = 0.5 * (area_median - base_median ** 2)\n    return trapezium_median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium using the trapezoidal rule.\n\n    Parameters:\n    base1 (float): The length of the first base of the trapezium\n    base2 (float): The length of the second base of the trapezium\n    height (float): The height of the trapezium\n\n    Returns:\n    float: The median length of the trapezium\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the length of the base of the trapezium with the maximum area\n    max_base = 0.5 * base1 * (height / base2)\n\n    # Calculate the length of the other base of the trapezium with the maximum area\n    other_base = 0.5 * base2 * (height / base1)\n\n    # Calculate the length of the shorter base using the trapezoidal rule\n    min_length = max(max_base, other_base)\n\n    # Calculate the length of the longer base using the trapezoidal rule\n    max_length = min(max_base, other_base)\n\n    # Calculate the sum of the two shorter bases\n    sum_shorter = 0.5 * min_length * min_length * height\n\n    # Calculate the sum of the two longer bases\n    sum_longer = 0.5 * max_length * max_length * height\n\n    # Calculate the sum of the two bases of the trapezium with the maximum area\n    sum_trapezium = sum_shorter + sum_longer\n\n    # Calculate the area of the trapezium with the maximum area\n    trapezium_area = 0.5 * (min_length * min_length + max_length * max_length)\n\n    # Calculate the difference between the two areas\n    diff_area = trapezium_area - area\n\n    # Calculate the median length of the trapezium\n    median_length = diff_area / trapezium_area\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    area3 = area1 + area2\n    perimeter1 = base1 + base2\n    perimeter2 = 2 * (base1 + base2)\n    perimeter3 = perimeter1 + perimeter2\n    return (perimeter1 * area1 + perimeter2 * area2 + perimeter3 * area3) / (perimeter1 + perimeter2 + perimeter3)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * base1 * base2\n    base_area = base1 + base2\n    return 0.5 * height * (base_area + area)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium using the formula:\n    # (base1 + base2) / 2 + height\n    trapezium_length = (base1 + base2) / 2 + height\n    \n    # Sort the lengths of the bases and the height\n    bases = sorted([base1, base2])\n    heights = sorted([height])\n    \n    # Calculate the median length based on the lengths and heights\n    median_length = (bases[1] + bases[0]) / 2 + (heights[1] + heights[0]) / 2\n    \n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # Initialize a boolean variable to keep track of whether the number is greater than the array elements\n    greater = False\n\n    # Iterate through the array and check if the number is greater than each element\n    for element in arr:\n        if number > element:\n            greater = True\n            break\n\n    # Return the boolean variable indicating whether the number is greater than the array elements\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes an array and a number as input, and returns True if the number is greater than all the elements of the array, and False otherwise.\n    '''\n\n    for element in arr:\n        if element > number:\n            return True\n\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_number = False\n    \n    for num in arr:\n        if num > number:\n            greater_than_number = True\n            break\n    \n    return greater_than_number"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba\\w*\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    pattern = r'a(b*)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?!b)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,}b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a[^b]*b\"\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"aabababbbbbaababaabaa\"\nprint(text_match_one(text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'\\ba.*b\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a positive integer `n` and returns the last digit of `n`.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # find the last digit of a given number\n    last_digit = n % 10\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as an argument and returns the last digit of the number.\n    \"\"\"\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the negative numbers in the list.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list containing the negative numbers in the given list.\n    \"\"\"\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isalpha() and ord(char) % 2!= 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalpha():\n            if char.islower():\n                if ord(char) % 2!= 0:\n                    new_str += char\n            elif char.isupper():\n                if ord(char) % 2!= 0:\n                    new_str += char\n            elif char.isdigit():\n                if ord(char) % 2!= 0:\n                    new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x.isdigit() or int(x) % 2 == 0, str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Create an empty string to store the even characters\n    even_chars = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, append it to the even_chars string\n        if char % 2!= 0:\n            even_chars += char\n    # Return the new string with even characters removed\n    return even_chars"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # convert the string to a list of characters\n    char_list = list(str1)\n    \n    # loop through the list and remove odd characters\n    for i in range(len(char_list)):\n        if char_list[i] % 2!= 0:\n            char_list.pop(i)\n    \n    # convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and returns a new string\n    with all odd characters removed.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():\n            if ord(char) % 2!= 0:\n                new_string += char\n    return new_string"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list or (test_list[j], test_list[i]) in test_list:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n\n    # initialize a dictionary to store the count of each tuple\n    count = {}\n\n    # iterate through each tuple in the test_list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # if the current tuple is already in the dictionary, increment its count\n            if (test_list[i], test_list[j]) in count:\n                count[(test_list[i], test_list[j])] += 1\n            # if the current tuple is not in the dictionary, add it with a count of 1\n            else:\n                count[(test_list[i], test_list[j])] = 1\n\n    # initialize a variable to store the total count of bidirectional tuple pairs\n    bidirectional_count = 0\n\n    # iterate through the dictionary\n    for pair in count:\n        # if the count for the pair is greater than 1, increment the total bidirectional count\n        if count[pair] > 1:\n            bidirectional_count += 1\n\n    # return the total count of bidirectional tuple pairs\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] and (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        single_num *= num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_int = 0\n    for num in L:\n        single_int = single_int * 10 + num\n    return single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of all integers in the list\n    total = 0\n    # Loop through the list of integers\n    for i in L:\n        # Add each integer to the total\n        total += i\n    # Return the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return None\n    else:\n        temp = 1\n        for i in range(len(L)):\n            temp *= L[i]\n        return temp"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for i in L:\n        total += i\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable to zero\n    result = 0\n    \n    # Iterate through the list of integers\n    for num in L:\n        # Convert the integer to a string and split it into a list of digits\n        digits = list(str(num))\n        \n        # Iterate through the list of digits and multiply each digit by the value of the result variable\n        for digit in digits:\n            result += int(digit)\n            \n    # Return the result as an integer\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize an empty integer variable\n    single_int = 0\n    # Loop through the list of integers\n    for num in L:\n        # If the integer is less than 10, add it to the single integer\n        if num < 10:\n            single_int += num\n        # If the integer is greater than or equal to 10, add the integer to the single integer\n        else:\n            single_int = single_int * 10 + num\n    # Return the single integer\n    return single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define a regular expression pattern for identifying adverbs\n    pattern = r\"(\\b[a-z]+\\b)\"\n\n    # Use the re.findall() function to find all occurrences of adverbs in the given text\n    matches = re.findall(pattern, text.lower())\n\n    # If there are no adverbs in the text, return None\n    if not matches:\n        return None\n\n    # Define a list to store the adverb positions and their corresponding adverbs\n    positions = []\n\n    # Loop through the matches and find their positions in the sentence\n    for match in matches:\n        # Get the index of the first character of the adverb in the text\n        index = text.lower().find(match)\n\n        # Add the adverb position to the list of positions\n        positions.append(index)\n\n    # Return the list of positions and adverbs\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define regex pattern for adverb\n    pattern = r'\\b(until|since|before|after|during|than)\\b'\n    # use re.search() to search for the pattern in the text\n    match = re.search(pattern, text)\n    # check if a match was found\n    if match:\n        # split the text into words using whitespace as a delimiter\n        words = text.split()\n        # loop through the words and count the occurrences of each adverb\n        for i, word in enumerate(words):\n            if word == match.group():\n                # check if the next word is an adverb\n                if i < len(words)-1 and words[i+1] in ('until','since', 'before', 'after', 'during', 'than'):\n                    # print the position of the adverb\n                    print(match.start() + i)\n                    return\n        # if no adverb was found, print a message\n        print(\"No adverb found.\")\n    else:\n        # if no match was found, print a message\n        print(\"No adverb found.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*ed\\b', text)\n    # Find their positions in the sentence\n    positions = [text.find(adverb) for adverb in adverbs]\n    # Find the position of the first adverb in the sentence\n    first_position = min(positions)\n    # Return the adverb and its position\n    return adverbs[0], first_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(?:adverbial|adverbials|adv|adv\\b)'\n    # split the text into words\n    words = re.findall(r'\\w+', text.lower())\n    # initialize an empty list to store the positions of the adverbs\n    positions = []\n    # iterate over the words\n    for i in range(len(words)):\n        # check if the word is an adverb\n        if re.match(pattern, words[i]):\n            # if it is, add its position to the list\n            positions.append(i)\n    # return the list of positions of adverbs\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'\\b([a-z]+)\\b'\n    adverb_match = re.search(adverb_pattern, text)\n    \n    if adverb_match:\n        adverb = adverb_match.group(1)\n        adverb_position = adverb_match.start()\n        return adverb, adverb_position\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expressions to find all instances of adverbs\n    pattern = r'\\b(really|kinda|actually|actually|just|really|kinda|actually|actually)\\b'\n    matches = re.findall(pattern, text)\n\n    # If there are no adverbs, return an empty list\n    if not matches:\n        return []\n\n    # Find the position of the first adverb in the text\n    position = text.find(matches[0])\n\n    # Create a dictionary of adverbs and their positions\n    adverbs = {matches[0]: position}\n\n    # Find the next adverb and its position\n    for match in matches[1:]:\n        position = text.find(match)\n        adverbs[match] = position\n\n    # Return the adverb dictionary\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern for adverbs\n    pattern = r'\\b([a-z]+)er\\b|\\b([a-z]+)\\b'\n    # Use re.findall() to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Check if there is at least one adverb found\n    if matches:\n        # Loop through all the adverbs found and find their position in the sentence\n        for i, match in enumerate(matches):\n            # Check if the first word in the adverb is in the sentence\n            if match[0] in text:\n                # Get the position of the first word in the adverb\n                start_pos = text.find(match[0])\n                # Print the adverb and its position in the sentence\n                print(f'{match[0]} at position {start_pos}')\n    else:\n        # Print message if there is no adverb found\n        print('No adverb found in the sentence')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence using a regular expression\n    adverbs = re.findall(r'\\b[A-Za-z]+\\b', text)\n    # Check if there is at least one adverb\n    if len(adverbs) == 0:\n        return 'No adverbs found'\n    # Find the index of the first adverb in the list of adverbs\n    index = 0\n    for i in range(1, len(adverbs)):\n        if adverbs[i]!= adverbs[i-1]:\n            index = i\n            break\n    # Find the positions of all the adverbs in the sentence\n    positions = []\n    for i in range(index):\n        positions.append(text.index(adverbs[i]))\n    # Return a dictionary with the adverb and its positions\n    return {'adverb': adverbs[0], 'positions': positions}"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Using regular expressions to find all the adverbs and their positions in the sentence\n    adverbs = re.findall(r'\\b\\w+\\b\\W+', text)\n    # Printing the list of adverbs and their positions\n    for i in range(len(adverbs)):\n        print(f\"Adverb {i+1}: {adverbs[i][0]} ({adverbs[i][1]})\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expressions to find all adverbs\n    adverbs = re.findall(r'\\b\\w*[aeiou]\\w*\\b', text)\n    # Sort the adverbs by position\n    adverbs.sort(key=lambda x: x.lower())\n    # Print the adverbs and their positions\n    for i, adv in enumerate(adverbs):\n        print(f'{adv} at position {i}')"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6 * l**2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6*l*l + 12*l + 8 # formula to find surface area of cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l*l + 12*l + 8\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l #6 faces * length * length\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    SA = 6 * l**2\n    return SA"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l + 12*l + 8"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i', [0])\n    count = 0\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n            count += 1\n    return float(positive.item(0)) / count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0] * 2)\n    count[0] = 0\n    count[1] = 0\n    for num in nums:\n        if num > 0:\n            count[1] += 1\n        else:\n            count[0] += 1\n    return count[1] / count[0]"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an empty array to store the count of positive numbers\n    positive_counts = array('i')\n\n    # iterate through the array and count the number of positive numbers\n    for num in nums:\n        if num > 0:\n            positive_counts.append(1)\n        else:\n            positive_counts.append(0)\n\n    # calculate the ratio of positive numbers\n    positive_num = len(positive_counts)\n    negative_num = len(nums) - positive_num\n\n    ratio = positive_num / (positive_num + negative_num)\n\n    # return the ratio\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i')  # create an empty integer array to store positive numbers\n    \n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n    \n    pos_count = len(pos_nums)\n    total_count = len(nums)\n    \n    return pos_count/total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i')\n    negatives = array('i')\n    zeros = array('i')\n    count = 0\n    \n    for num in nums:\n        if num > 0:\n            positives.append(num)\n        elif num < 0:\n            negatives.append(num)\n        else:\n            zeros.append(num)\n    \n    if len(positives) > 0:\n        count += 1\n    if len(negatives) > 0:\n        count += 1\n    if len(zeros) > 0:\n        count += 1\n    \n    if count > 0:\n        positives_ratio = positives.item(0) / count\n        negatives_ratio = negatives.item(0) / count\n        zeros_ratio = zeros.item(0) / count\n    else:\n        positives_ratio = 0\n        negatives_ratio = 0\n        zeros_ratio = 0\n    \n    return positives_ratio, negatives_ratio, zeros_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array of booleans to store whether a number is positive or not\n    is_positive = array('b', [False] * len(nums))\n\n    # Iterate through the array and update the boolean array accordingly\n    for num in nums:\n        if num > 0:\n            is_positive[nums.index(num)] = True\n\n    # Find the ration of positive numbers by summing up the boolean array and dividing by the length of the array\n    positive_count = sum(is_positive) / len(is_positive)\n\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    \n    for num in nums:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n            \n    positive_ratio = positive / (positive + negative)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ratio of positive numbers\n    in the array.\n    '''\n    pos_arr = array('i')\n    count = 0\n    \n    # Iterate through the array to count positive numbers\n    for num in nums:\n        if num > 0:\n            pos_arr.append(num)\n            count += 1\n            \n    # Calculate the ratio of positive numbers\n    if count == 0:\n        return 0\n    else:\n        return pos_arr.item(count-1) / count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n        else:\n            zero_count += 1\n\n    positive_ratio = float(positive_count) / (positive_count + negative_count + zero_count)\n\n    return positive_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1 #initialize largest variable with -1\n    \n    for i in list1:\n        if i < 0 and i > largest: #check if number is negative and larger than largest number found so far\n            largest = i #update largest variable with new number\n            \n    return largest #return the largest negative number found"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number from it.\n    \"\"\"\n    largest = lst[0]  # Assume the first element is the largest negative number\n    \n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n            \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = float('-inf') #initialize a variable to store the largest negative number\n    \n    #iterate through the list and check if the current number is negative\n    for num in list1:\n        if num < 0:\n            if num > max_neg: #if the current number is greater than the current largest negative number, update the variable\n                max_neg = num\n    \n    #return the largest negative number\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Returns the largest negative number in the given list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n            print(tup)\n        else:\n            print(tup)"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Create a new list to store trimmed tuples\n    trimmed_list = []\n\n    # Loop through each tuple in the input list\n    for tup in test_list:\n        # Remove the first K elements from the tuple using slicing\n        trimmed_tup = tup[K:]\n        # Add the trimmed tuple to the new list\n        trimmed_list.append(trimmed_tup)\n\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j < len(test_list[i]):\n                test_list[i][j] = 0\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(K):\n            if len(test_list[i]) > 1:\n                test_list[i] = tuple(test_list[i][1:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = (test_list[i][j][0], test_list[i][j][1], test_list[i][j][2][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize an empty list to store trimmed tuples\n    trimmed_list = []\n\n    # Loop through each tuple in the given list\n    for tup in test_list:\n        # Initialize an empty list to store each tuple's elements\n        temp_list = []\n        # Loop through each element in the tuple\n        for elem in tup:\n            # Append the current element to the temp_list\n            temp_list.append(elem)\n        # Trim the temp_list by k\n        temp_list = temp_list[:K]\n        # Append the trimmed temp_list to the trimmed_list\n        trimmed_list.append(tuple(temp_list))\n\n    # Return the trimmed_list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][j] for j in range(len(test_list[i])) if j % K!= 0)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = ()\n        for i in range(len(tup)):\n            if i % K == 0:\n                new_tup += (tup[i],)\n            else:\n                new_tup += (tup[i],)\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]*test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have same length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples must have same length.\")\n    else:\n        for i in range(len(test_tup1)):\n            print(\"Index {} : {}\".format(i, test_tup1[i] * test_tup2[i]))"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initializing an empty list to store the result\n    result = []\n    # iterating through the two tuples and multiplying the elements at each index\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    # returning the result\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple lengths are not equal.\")\n        return None\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] * test_tup2[i])\n        return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    counter = Counter(tup)\n    for i in lst:\n        counter[i] += 1\n    return counter"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)  # creating a dictionary to store the count of each element in the list\n    result = {i: count_dict[i] for i in tup}  # using dictionary comprehension to get the count of elements in the tuple\n    \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = Counter(lst)\n    count_tup = tuple(count_dict.values())\n    for i in range(len(tup)):\n        if tup[i] in count_tup:\n            tup[i] = count_dict[tup[i]]\n        else:\n            tup[i] = 0\n    return tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    for item in lst: \n        if item in counter: \n            counter[item] += 1\n    return counter"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as arguments and returns the count of occurrence of all elements in the tuple in the list.\n    '''\n    # Convert the list to a set to remove duplicates\n    list_set = set(lst)\n    # Get the count of occurrence of each element in the tuple\n    count_dict = Counter(tup)\n    # Remove the count of occurrence of each element from the list set\n    for key in count_dict.keys():\n        list_set.remove(key)\n    # Count the number of elements in the list set\n    count = len(list_set)\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for element in tup:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    for element in lst:\n        if element in count_dict:\n            count_dict[element] -= 1\n        else:\n            count_dict[element] = -1\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    for item in tup:\n        if item in count:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter()\n    for item in lst:\n        count[item] += 1\n    for item in tup:\n        count[item] -= 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Split the tuple into individual elements \n    elems = tuple(tup)\n    \n    # Count the frequency of each element in the list \n    count = Counter(lst)\n    \n    # Filter the elements that are present in both the tuple and list \n    common = set(elems) & set(count.keys())\n    \n    # Count the frequency of the common elements \n    freq = Counter(common)\n    \n    # Create a dictionary to store the count of each element \n    result = {}\n    \n    # Loop through the dictionary of frequencies and store them in a dictionary \n    for elem, freq in freq.items(): \n        result[elem] = count[elem]\n    \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        count[item] += 1\n    return count"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Initialize an empty list to store the cubes\n    cubes = []\n\n    # Loop through each element in the list\n    for num in nums:\n        # Multiply the element by 3 and append the result to the cubes list\n        cubes.append(num*3)\n\n    # Return the cubes list\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize variables\n    perrin_sum = 0 \n    num = 1\n    \n    # Calculate the sum of perrin numbers\n    while num <= n:\n        perrin_sum += num\n        num += 1\n        \n    # Return the sum of perrin numbers\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize variables for sum and index\n    sum = 0\n    index = 0\n    \n    # loop through the numbers from 1 to n\n    while index < n:\n        # calculate the perrin number\n        perrin_num = (2*index + 1)**2\n        \n        # add the perrin number to the sum\n        sum += perrin_num\n        \n        # increment the index\n        index += 1\n    \n    # return the sum of the perrin numbers\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i**2) / 4\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    p = 2\n    sum = 0\n    \n    while p <= n:\n        sum += p\n        p += 2\n        \n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n\nprint(cal_sum(10))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n\n    # Initialize a variable to store the sum of Perrin numbers\n    total = 0\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the sum of Perrin numbers\n        if (i % 2 == 0 and i % 4!= 0) or (i % 2!= 0 and i % 4 == 0):\n            total += i\n    \n    # Return the total sum of Perrin numbers\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    i = 1\n    \n    while i <= n:\n        perrin_sum += i\n        i += 1\n    \n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = 1\n    total_sum = 0\n    while perrin <= n:\n        total_sum += perrin\n        perrin += 1\n    return total_sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \n    Parameters:\n    str (str): The string to extract from.\n    l (list): The list of strings to extract from.\n    \n    Returns:\n    list: The list of extracted strings.\n    \"\"\"\n    extracted_strings = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i].count(str):\n            extracted_strings.append(l[i])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n\n    :param str_list: a list of string values\n    :param size: the size of the string to be extracted\n    :return: a list of strings of size size extracted from the original list of strings\n    \"\"\"\n    result = []\n    for string in str_list:\n        result.append(string[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:l] for s in l]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        if len(l[i]) == size:\n            extracted_strings.append(l[i])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    # Loop through the list of strings\n    for i in range(len(l)):\n        # Check if the current string is of the specified size\n        if len(l[i]) == l[i]:\n            # If yes, append the string to the result list\n            result.append(l[i])"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size parameter as input.\n    It extracts strings of length size from the list and returns the list of extracted strings.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n        str_list (list): List of string values to extract from.\n        size (int): Size of strings to extract.\n\n    Returns:\n        list: A list of string values of the specified size from the input list.\n    \"\"\"\n    return str_list[:size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a string of specified size from a list of strings.\n    \"\"\"\n    # Initialize an empty list to store the extracted strings\n    extracted_list = []\n\n    # Loop through each string in the list\n    for string in str_list:\n        # Check if the length of the string is greater than or equal to the size\n        if len(string) >= size:\n            # Append the extracted string to the list\n            extracted_list.append(string[:size])\n\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    This function takes a list of strings and the length of each string to extract as arguments.\n    It returns a list of extracted strings.\n    \"\"\"\n    extracted_str = []\n    for i in range(0, len(str_list), l):\n        extracted_str.append(\"\".join(str_list[i:i+l]))\n    return extracted_str"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # using regex to remove all whitespaces\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+' # regular expression to match any whitespace character\n    text = re.sub(pattern,'', text1) # replace all matches with single space\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the given string using regular expression\n    text = re.sub('\\s+','', text)\n    # Remove all whitespaces at the start and end of the string\n    text = text.strip()\n    # Return the modified string\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces from the string using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    # remove leading and trailing whitespaces from the string\n    text3 = text2.strip()\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function takes a string as input and returns the same string with all whitespaces removed.\n    '''\n    # Using regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expression\n    text2 = re.sub('\\s+', '', text1)\n    # Return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text2 = re.sub(r'\\s+','', text1)\n    # Remove all whitespaces from the beginning and end of the string\n    text3 = text2.strip()\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    # use regex to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = 5 #loss percentage\n    if sale_amount > actual_cost:\n        loss_amount = (sale_amount - actual_cost) * loss_percentage/100\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        loss = actual_cost - sale_amount \n        return loss \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        return sale_amount - actual_cost\n    else: \n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenSum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            evenSum += i\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize variables \n    sum = 0 \n    count = 0\n\n    # loop through all odd numbers from 3 to n/2 \n    for i in range(3, n, 2):\n        # if n is divisible by i, increment count \n        if n % i == 0: \n            count += 1 \n        # if count is even, add i to sum \n        if count % 2 == 0: \n            sum += i \n            # reset count \n            count = 0\n\n    # return the sum of even factors \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # Function to find the sum of even factors of a number\n    def sumOfEvenFactors(n):\n        # Initialize the sum variable to 0\n        sum = 0\n        # Loop through each number between 2 and the square root of n\n        for i in range(2, int(math.sqrt(n))+1):\n            # Check if the number is even and a factor of n\n            if i*i <= n and n % i == 0 and i % 2 == 0:\n                # Add the even factor to the sum\n                sum += i\n        # Return the sum of even factors of n\n        return sum\n    \n    # Return the sum of even factors of n\n    return sumOfEvenFactors(n)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i+2) == 0:\n            sum += i + n // i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of the even factors of the number.\n    '''\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize sum of even factors to 0\n    sum = 0\n\n    # loop through each number from 1 to n/2 \n    for i in range(1, int(math.sqrt(n))+1): \n        # check if n is divisible by i \n        if n % i == 0: \n            # check if i is even \n            if i % 2 == 0: \n                # add i to sum of even factors \n                sum += i \n\n    return sum "
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z0-9]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)\\w+\\b'\n    match = re.search(pattern, text)\n\n    if match:\n        return 'The word containing z is:'+ match.group(1)\n    else:\n        return 'The text does not contain a word containing z.'"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex_pattern = r'\\b\\w+z\\b'\n    matches = re.findall(regex_pattern, text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*[zZ]\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'  # match one or more letters\n    words = re.findall(pattern, text)  # find all words in the text\n    word_with_z = [word for word in words if 'z' in word.lower()]  # find words with 'z' in them\n    return word_with_z"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    return days_in_month[monthnum-1] == 31"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = monthnum2 % 12 + 1\n    if monthnum in (1, 3, 5, 7, 8, 10, 12):\n        return True\n    elif monthnum in (4, 6, 9, 11):\n        return False\n    else:\n        print(\"Invalid month number\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum < 1 or monthnum > 12:\n        return False\n    else:\n        return days[monthnum-1]"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    monthnum = monthnum2.split('-')\n    if len(monthnum) == 2:\n        month = monthnum[0]\n        year = monthnum[1]\n        if month.isdigit() and year.isdigit():\n            month_num = int(month)\n            year_num = int(year)\n            if month_num < 1 or month_num > 12:\n                return \"Invalid month number. Please enter a valid month number.\"\n            if year_num < 1 or year_num > 9999:\n                return \"Invalid year number. Please enter a valid year number.\"\n            if month_num in [1, 3, 5, 7, 8, 10, 12] and year_num % 4 == 0:\n                if month_num in [2] and year_num % 100 == 0:\n                    if month_num in [2] and year_num % 400 == 0:\n                        return \"31 days\"\n                    else:\n                        return \"29 days\"\n                else:\n                    return \"31 days\"\n            else:\n                return \"30 days\"\n    else:\n        return \"Invalid month number format. Please enter a valid month-year format.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if len(monthnum2) == 2 and monthnum2.isdigit() and int(monthnum2) > 0 and int(monthnum2) <= 12:\n        if int(monthnum2) % 3 == 0:\n            if int(monthnum2) == 2 and year % 400 == 0 or int(monthnum2) == 2 and year % 100!= 0 and year % 4 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns a boolean value indicating whether it contains 31 days or not.\n    '''\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    else:\n        return None"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst\n    for i in lst:\n        if len(i) < len(min_sublist):\n            min_sublist = i\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    min_sublist = lst[0]\n    min_length = len(lst[0])\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_sublist = lst[i]\n            min_length = len(lst[i])\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize variables to store minimum and maximum lengths\n    min_length = float('inf')\n    max_length = 0\n\n    # Iterate over each sublist in the list\n    for i in range(len(lst)):\n        # Get the length of the current sublist\n        length = len(lst[i])\n\n        # Update the maximum length if the current sublist has a longer length\n        if length > max_length:\n            max_length = length\n\n        # Update the minimum length if the current sublist has a shorter length\n        if length < min_length:\n            min_length = length\n\n    # Initialize the sublist with the minimum length\n    min_sublist = []\n\n    # Iterate over each sublist in the list and check if it has the minimum length\n    for i in range(len(lst)):\n        # Get the length of the current sublist\n        length = len(lst[i])\n\n        # If the current sublist has the minimum length, append it to the sublist\n        if length == min_length:\n            min_sublist.append(lst[i])\n\n    # Return the sublist with the minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf') # initialize minimum length to positive infinity\n    min_sublist = None # initialize minimum sublist to None\n    \n    # iterate through the list of sublists\n    for sublist in lst:\n        # check if the length of the sublist is less than the current minimum\n        if len(sublist) < min_length:\n            # if it is, update the minimum length and the minimum sublist\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = []\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_sublist = i\n    return min_sublist\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a pattern for uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # match all uppercase substrings in the input string\n    substrings = pattern.findall(str1)\n    # remove all uppercase substrings from the input string\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase letters\n    pattern = re.compile('[A-Z]+')\n    \n    # Find all the uppercase substrings in the given string\n    uppercase = pattern.findall(str1)\n    \n    # Loop through all the uppercase substrings and remove them from the string\n    for up in uppercase:\n        str1 = str1.replace(up, '')\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(string):\n    pattern = re.compile('[A-Z]+')\n    result = pattern.sub('', string)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub('(?i)([A-Z]+)', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern for uppercase characters\n    pattern = re.compile(r'[A-Z]+')\n    # Split the string into words\n    words = str1.split()\n    # Loop through the words and remove any uppercase substrings\n    new_words = []\n    for word in words:\n        if pattern.search(word) is None:\n            new_words.append(word)\n    # Join the new words into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[a-zA-Z]+\\b', str1.lower())\n\n    # Remove uppercase substrings from the words list\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].lower()\n\n    # Join the words list back into a string\n    result =''.join(words)\n\n    # Return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)\\b[A-Z]\\w+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings in the given string\n    uppercase_substrings = re.findall('[A-Z][a-z]*', str1)\n    \n    # Loop through the list of uppercase substrings and replace them with an empty string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes all uppercase substrings from a given string.\n    '''\n    # Using regular expression to match all uppercase substrings\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    # Using re.sub() function to remove all uppercase substrings\n    result = re.sub(uppercase_pattern, '', str1)\n    # Printing the result\n    print(result)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of lists as input and returns a list containing the first element of each sublist.\n    '''\n    first_elem = []\n    for sublist in lst:\n        first_elem.append(sublist[0])\n    return first_elem"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sub[0] for sub in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as an input and returns a new list with the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        if type(i) == list:\n            for j in i:\n                result.append(j)\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(i[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and extracts the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            new_lst.extend(sublist[:1])\n        else:\n            new_lst.append(sublist)\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a new list with the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[i])\n    for i in range(len(list2)):\n        for j in range(i+1, len(list2)):\n            list2.append([list2[i], list2[j]])\n    return list2"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            result.append(list1[j-i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_length = len(list1)\n    result = []\n    for i in range(1, list_length+1):\n        for j in range(i):\n            result.append(list1[j:i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # convert the list to a set to remove duplicates\n    list1 = list(set(list1))\n\n    # get the length of the list\n    n = len(list1)\n\n    # initialize the result list\n    result = []\n\n    # create a helper function to generate all possible combinations\n    def generate_combinations(start, curr_comb, comb):\n        if start == n:\n            result.append(curr_comb)\n            return\n        for i in range(start, n):\n            # add the current element to the current combination\n            curr_comb.append(list1[i])\n            # generate the next combination\n            generate_combinations(i+1, curr_comb, comb)\n            # remove the current element from the current combination\n            curr_comb.pop()\n\n    # call the helper function to generate all possible combinations\n    generate_combinations(0, [], result)\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create a list of all possible combinations\n    comb = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            comb.append(list1[i:j])\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns all possible combinations of its elements.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_size = len(list1)\n    for i in range(1, list_size+1):\n        for j in range(list_size-i+1):\n            print(tuple(list1[j:j+i]))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1) + 1):\n        for j in range(i, len(list1) + 1):\n            combinations.append(list1[j - 1:j])\n    return combinations\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    \n    for num in arr:\n        if num < 0:\n            curr_product = 1\n            \n        curr_product *= num\n        \n        if curr_product > max_product:\n            max_product = curr_product\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n    \n    for i in range(len(arr)):\n        if current_product < 0:\n            max_ending_here = 1\n        current_product *= arr[i]\n        max_ending_here *= arr[i]\n        \n        if max_ending_here > max_product:\n            max_product = max_ending_here\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_product = [0] * n\n    max_so_far = [0] * n\n    \n    for i in range(n):\n        max_product[i] = arr[i]\n        max_so_far[i] = arr[i]\n    \n    for i in range(1, n):\n        max_product[i] = max(max_product[i-1] * arr[i], max_so_far[i-1])\n        max_so_far[i] = max(max_so_far[i-1] * arr[i], max_product[i])\n        \n    return max_so_far[-1]"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    max_ending_here = 1\n\n    for i in range(len(arr)):\n        curr_product = max(arr[i], curr_product*arr[i])\n        max_ending_here = max(max_ending_here, curr_product)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n    \"\"\"\n    # Initialize variables for the maximum subarray product and the current subarray product\n    max_product = float('-inf')\n    curr_product = 1\n\n    # Iterate over the array and calculate the current subarray product\n    for num in arr:\n        curr_product *= num\n\n        # Check if the current subarray product is greater than the maximum subarray product\n        if curr_product > max_product:\n            max_product = curr_product\n\n        # Check if the current subarray product is negative\n        if curr_product < 0:\n            curr_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        max_product = max(max_product, max_ending_here, min_ending_here)\n        \n        max_so_far = max(max_so_far, max_product)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n        \n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n            \n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through each value in the dictionary\n    for value in dict.values():\n        # Increment count if value is not 0\n        if value!= 0:\n            count += 1\n\n    # If count is equal to n, all values are same\n    if count == n:\n        print(\"All values are same\")\n    else:\n        print(\"Some values are different\")"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = None\n    for key in dict:\n        if value is None:\n            value = dict[key]\n        elif dict[key]!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[key] for key in dict]\n    for value in values:\n        if value!= values[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = set(dict.values())\n    if len(all_values) == 1:\n        return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set()\n    for i in dict.values():\n        values.add(i)\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    for key, value in dict.items():\n        if value!= dict[key-1]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # check if n is less than or equal to 0\n    if n <= 0:\n        return \"Invalid input\"\n\n    # create a set to store the unique values\n    unique_values = set()\n\n    # iterate through the dictionary\n    for value in dict.values():\n        # check if the value is already in the set\n        if value in unique_values:\n            return \"False\"\n        # otherwise, add the value to the set\n        unique_values.add(value)\n\n    # if all values are unique, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    return len(values) == 1 and n in values"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values are the same in a dictionary.\n    '''\n    values = [dict[k] for k in dict.keys()]\n    return all(values[0] == v for v in values)"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # iterate over the dictionary items\n    for key, value in dict1.items():\n        # check if the value is empty or not\n        if not value:\n            # if the value is empty, remove it from the dictionary\n            del dict1[key]"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if isinstance(value, str) and value.strip() == \"\":\n            dict1.pop(key)"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Initialize two pointers:\n    # left_max and right_min, both pointing to the first element in the array\n    left_max, right_min = arr[0], arr[0]\n\n    # Initialize the maximum product found so far:\n    max_product_so_far = arr[0]\n\n    # Iterate through the array from the second element to the last element\n    for i in range(1, n):\n        # Update left_max and right_min based on the current element and its positions in the array\n        if arr[i] > left_max:\n            left_max = arr[i]\n        else:\n            left_max = left_max * arr[i]\n\n        if arr[n - 1 - i] < right_min:\n            right_min = arr[n - 1 - i]\n        else:\n            right_min = right_min * arr[n - 1 - i]\n\n        # Update the maximum product found so far\n        max_product_so_far = max(max_product_so_far, left_max, right_min)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n\n    max_so_far = float('-inf')\n    max_ending_here = float('-inf')\n\n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    n = len(arr)\n    dp = [0] * n\n\n    # Initialize maximum and minimum products as the first element of the array\n    dp[0] = arr[0]\n    dp[1] = arr[0] * arr[1]\n\n    # Iterate through the array and update the maximum and minimum products\n    for i in range(2, n):\n        dp[i] = max(arr[i] * dp[i - 1], arr[i] * dp[i - 2], dp[i - 1])\n\n    return dp[n - 1]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_product = float('-inf')\n    min_product = float('inf')\n    curr_product = 1\n    prev_num = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > prev_num:\n            curr_product *= arr[i]\n            max_product = max(max_product, curr_product)\n        else:\n            curr_product = 1\n            min_product = min(min_product, curr_product)\n\n        prev_num = arr[i]\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n\n    # Find the minimum element of the array\n    min_element = arr[0]\n\n    # Initialize two variables to keep track of the maximum and minimum product\n    max_product_ending_at_i = arr[0]\n    max_product_ending_at_j = arr[0]\n\n    for i in range(1, len(arr)):\n        # Update the minimum element\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n        # Update the maximum product ending at i\n        max_product_ending_at_i = max(max_product_ending_at_i, arr[i] * min_element)\n\n        # Update the maximum product ending at j\n        max_product_ending_at_j = max(max_product_ending_at_j, arr[i] * max_product_ending_at_i)\n\n    return max_product_ending_at_j"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    def is_increasing(arr, start):\n        \"\"\"\n        Check if the subsequence from the starting index to the end is increasing.\n        \"\"\"\n        for i in range(start, len(arr)):\n            if arr[i] <= arr[start]:\n                return False\n        return True\n\n    def get_subsequence(arr, start, end):\n        \"\"\"\n        Get the subsequence from the starting index to the end in the increasing order.\n        \"\"\"\n        result = []\n        while start <= end:\n            result.append(arr[start])\n            start += 1\n        return result\n\n    def get_max_product(subseq):\n        \"\"\"\n        Calculate the maximum product formed by multiplying the subsequence.\n        \"\"\"\n        max_product = float('-inf')\n        for i in range(len(subseq)):\n            for j in range(i+1, len(subseq)+1):\n                max_product = max(max_product, subseq[i] * subseq[j])\n        return max_product\n\n    # Find the starting index of the increasing subsequence\n    start = 0\n    while start < len(arr) and not is_increasing(arr, start):\n        start += 1\n\n    # Get the increasing subsequence\n    subseq = get_subsequence(arr, start, len(arr)-1)\n\n    # Calculate the maximum product\n    max_product = get_max_product(subseq)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [1] * n\n    max_product = float('-inf')\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[j] > dp[i]:\n                dp[i] = max(dp[i], arr[i] * dp[j])\n                max_product = max(max_product, dp[i])\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_ending_here = max(max_ending_here, arr[i])\n            min_ending_here = min(min_ending_here, arr[i])\n        else:\n            temp = max_ending_here\n            max_ending_here = max(max_ending_here, arr[i])\n            min_ending_here = min(min_ending_here, temp)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    if n == 3:\n        return max(arr[0], arr[1], arr[2])\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [1] * n\n    max_product = float('-inf')\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n                max_product = max(max_product, dp[i])\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(n-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the sum variable\n    pairwise_sum = 0\n    \n    # iterate over the tuple\n    for i in range(len(test_tup)-1):\n        # add the neighboring elements and store the result in the pairwise_sum variable\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n        \n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Define the length of the tuple\n    length = len(test_tup)\n\n    # Initialize the sum variable to zero\n    sum_pairwise = 0\n\n    # Loop through the tuple and add the pairwise sum\n    for i in range(length-1):\n        sum_pairwise += test_tup[i] + test_tup[i+1]\n\n    return sum_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    This function takes a tuple as input and returns the sum of the neighboring elements of the tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return test_tup[1] + test_tup[0]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return sum(test_tup[i:i+2] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(n - 1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # length of the tuple\n    n = len(test_tup)\n    # initialize the sum of the pairwise elements to zero\n    pairwise_sum = 0\n    # iterate over all the elements except the last\n    for i in range(n-1):\n        # add the current element and the next element to get the sum of the pairwise elements\n        pairwise_sum = test_tup[i] + test_tup[i+1]\n        # print the pairwise_sum\n        print(pairwise_sum)\n    # return the sum of all the pairwise elements\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)): \n        product = (product * arr[i]) % n\n    return product "
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize a variable to store the product of the array\n    product = 1\n\n    # Loop through the array and multiply each element by the product\n    for element in arr:\n        product = (product * element) % n\n\n    # Return the final product modulo n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod *= num\n        if prod >= n:\n            prod -= n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two arguments - arr which is the array to find the product of the array multiplication modulo n and n which is the modulo value.\n    The function then multiplies all the elements in the array and finds the remainder of the product divided by n.\n    Finally, the function returns the result.\n    '''\n\n    product = 1\n    for element in arr:\n        product *= element\n        \n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number n and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes in two arguments, arr and n.\n    arr is a list of integers and n is an integer.\n\n    This function finds the product of the array multiplication modulo n.\n\n    Example:\n    arr = [1, 2, 3]\n    n = 7\n    Output: 14\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and checks whether it contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 3:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if it contains consecutive numbers and False otherwise.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]+1: \n            return True \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            print(\"Consecutive numbers found\")\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: # If the list has less than two elements, it cannot be consecutive\n        return False\n    for i in range(len(l)-1): # Check all possible consecutive numbers\n        if l[i] + 1 == l[i+1]: # If the adjacent numbers are consecutive, they are not consecutive\n            return False\n    return True # If no consecutive numbers are found, the list is consecutive"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert both list to sets to get unique elements\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list\n    result = list(intersection)\n    # Sort the list based on the original order of tuple elements\n    result.sort(key=lambda x: (test_list1.index(x), test_list2.index(x)))\n    # Return the sorted list\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    common_list = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2:\n                common_list.append(tuple1)\n    return common_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of elements in the first list\n    set1 = set(test_list1)\n    # Create a set of elements in the second list\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # convert both lists to sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of sets\n    intersection = set1.intersection(set2)\n\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert the given list to set to get the unique elements\n    unique_list1 = set(test_list1)\n    unique_list2 = set(test_list2)\n    # Find the intersection of the unique elements\n    intersection = unique_list1.intersection(unique_list2)\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set from both lists to remove duplicates and store them in a new set\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the resulting set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Sort the input lists to make them easier to compare\n    test_list1.sort()\n    test_list2.sort()\n    # Initialize an empty list to store the intersection\n    intersection = []\n    # Loop through the input lists and compare each element\n    for i in range(len(test_list1)):\n        # If the element is present in both lists, add it to the intersection list\n        if test_list1[i] in test_list2:\n            intersection.append(test_list1[i])\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set1.intersection(set2)\n    result_list = []\n    for tup in intersection_set:\n        if tup not in test_list1 and tup not in test_list2:\n            result_list.append(tup)\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # create a dictionary to store the frequency of each element in the first list\n    freq1 = {}\n    for item in test_list1:\n        if item in freq1:\n            freq1[item] += 1\n        else:\n            freq1[item] = 1\n\n    # create a dictionary to store the frequency of each element in the second list\n    freq2 = {}\n    for item in test_list2:\n        if item in freq2:\n            freq2[item] += 1\n        else:\n            freq2[item] = 1\n\n    # find the intersection between the two dictionaries\n    intersection = {}\n    for key in freq1:\n        if key in freq2 and freq1[key] == freq2[key]:\n            if key in intersection:\n                intersection[key] += 1\n            else:\n                intersection[key] = 1\n\n    # return the intersection as a list\n    return list(intersection.keys())"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    common_elements = []\n    for tup in test_list1:\n        for tup2 in test_list2:\n            if tup == tup2:\n                common_elements.append(tup)\n    return tuple(set(common_elements))"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = \"\"\n    for i in str1:\n        if i == ch:\n            newstr += newch\n        else:\n            newstr += i\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # check if the current character is the specified character\n        if str1[i] == ch:\n            # replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n        str1 (str): a string to modify\n        ch (str): the character to be replaced\n        newch (str): the new character to replace it with\n\n    Returns:\n        str: the modified string with the specified characters replaced\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Use a list comprehension to iterate over each character in the string\n    str1_new = [x if x!= ch else newch for x in str1]\n    # Join the list of characters into a string and return it\n    return ''.join(str1_new)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the current character matches the specified character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value in descending order.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(sorted(dict1.items(), key=lambda x: x[1]))\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # Create a Counter object to count the frequency of values in the dictionary\n    counter = Counter(dict1)\n\n    # Sort the Counter object by values in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Extract the sorted values from the sorted Counter object\n    sorted_values = [value for key, value in sorted_counter]\n\n    # Create a new dictionary with the sorted values as keys\n    sorted_dict = {value: key for key, value in sorted_counter}\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a list of tuples\n    list_of_tuples = list(dict1.items())\n    # Sort the list of tuples by value in descending order\n    list_of_tuples.sort(key=lambda x: x[1], reverse=True)\n    # Create a new dictionary from the sorted list of tuples\n    sorted_dict = dict(list_of_tuples)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n\n    # Sort the Counter object by values in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Convert the sorted Counter object to a dictionary\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    elif len(nums) == 2:\n        if nums[0] > nums[1]:\n            return nums[0] + nums[1]\n        else:\n            return nums[1] + nums[0]\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize two variables to store the maximum and minimum values in the array\n    max_val = float('-inf')\n    min_val = float('inf')\n\n    # Loop through the array and update the maximum and minimum values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n\n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Return the sum of the largest and smallest values in the sorted array\n    return nums[len(nums)-1] + nums[0]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    '''\n    # initialize variables to hold the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    # iterate over each number in the array\n    for num in nums:\n        # if the number is larger than the current largest value, update largest\n        if num > largest:\n            largest = num\n            \n        # if the number is smaller than the current smallest value, update smallest\n        if num < smallest:\n            smallest = num\n            \n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Calculate the sum of the largest and smallest values\n    largest_sum = nums[0] + nums[1]\n    smallest_sum = nums[len(nums)-2] + nums[len(nums)-1]\n    # Return the sum of the largest and smallest values\n    return largest_sum + smallest_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if it is in lower case and False otherwise.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Create a regular expression object to match lowercase substrings\n    pattern = re.compile('[a-z]+')\n\n    # Find all lowercase substrings in the given string\n    matches = pattern.findall(str1)\n\n    # Replace all lowercase substrings with an empty string\n    result = re.sub('[a-z]+', '', str1)\n\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define the regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n    # Find all the substrings that match the pattern\n    matches = pattern.findall(str1)\n    # Remove the matched substrings from the string and return the updated string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Split the string into lowercase and uppercase parts\n    lower_str = re.sub('[a-z]', '', str1).lower()\n    upper_str = re.sub('[A-Z]', '', str1).upper()\n\n    # Combine the lowercase and uppercase parts and return the final string\n    return lower_str + upper_str"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define pattern to match lowercase substrings\n    pattern = re.compile('[a-z]')\n    # use pattern to search for all occurrences of lowercase substrings in str1\n    matches = pattern.findall(str1)\n    # loop through matches and remove each substring from str1\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    # return updated string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for matching lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # Use the re.sub() function to replace all lowercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # replace all lowercase substrings with empty string\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Using regular expression to remove all lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Define the pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n\n    # Find all the lowercase substrings in the string using the pattern\n    matches = pattern.findall(string)\n\n    # Loop through each match and replace it with an empty string\n    for match in matches:\n        string = string.replace(match, '')\n\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    string = re.sub(r'[a-z]+', '', string)\n    return string"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Get the first digit of the number\n    digit = n // 10 ** (len(str(n)) - 1)\n    \n    # Return the first digit\n    return digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # get the first character of the string\n    first_char = num_str[0]\n    # convert the first character to an integer\n    first_int = int(first_char)\n    # return the first integer\n    return first_int"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10  # find the last digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10  # finds the remainder of the division by 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the given number to a string\n    num = str(n)\n    \n    # convert the first character of the string to a digit and return it\n    return int(num[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers as input and returns only the odd numbers from the list.\n    '''\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Initialize an empty list to store odd numbers\n    odd_list = []\n    # Loop through each number in the input list\n    for num in list:\n        # If the number is odd, add it to the odd_list\n        if num % 2!= 0:\n            odd_list.append(num)\n    # Return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2 == 1:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    # Create an empty list to store the odd numbers\n    odd_list = []\n\n    # Loop through each number in the list\n    for num in list:\n        # If the number is odd, add it to the odd_list\n        if num % 2!= 0:\n            odd_list.append(num)\n\n    # Return the odd_list\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize sum of cubes and sum of natural numbers\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # Calculate sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # Calculate sum of natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n    \n    # Calculate difference between sum of cubes and sum of natural numbers\n    difference = sum_cubes - sum_natural\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    first_n_cubes = [i**3 for i in range(1, n+1)]\n    first_n_numbers = [i for i in range(1, n+1)]\n    sum_of_cubes = sum(first_n_cubes)\n    sum_of_numbers = sum(first_n_numbers)\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Sum of the first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n    # Difference between the two sums\n    difference = abs(sum_of_cubes - sum_of_natural_numbers)\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_nums = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_nums += i\n\n    difference = sum_cubes - sum_nums\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_nums += i\n    return abs(sum_of_cubes - sum_of_nums)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Sum of cubes of first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    # Sum of first n natural numbers\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_numbers += i\n    \n    # Difference between the two sums\n    difference = sum_cubes - sum_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # initialize variables\n    sum_cubes = 0\n    sum_nums = 0\n\n    # calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_nums += i\n\n    # find the difference between the sum of cubes and the sum of the first n natural numbers\n    diff = sum_cubes - sum_nums\n\n    # print the result\n    print(\"The difference between the sum of cubes and the sum of the first n natural numbers is:\", diff)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes_sum = sum(num**3 for num in range(1, n+1))\n    numbers_sum = sum(range(1, n+1))\n    return abs(cubes_sum - numbers_sum)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_set = set()\n    for i in range(len(A)):\n        xor_set.add(A[i] ^ N)\n    count = 0\n    for xor in xor_set:\n        if xor % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes two lists A and N and returns the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = sum(A)\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_diff = xor_sum - A[i] - A[j]\n            if xor_diff % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes a list A of N integers and returns the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                odd_count += 1\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Count the number of pairs whose xor value is odd.\n\n    Args:\n    A: List of integers\n    N: integer\n\n    Returns:\n    int: number of odd pairs\n\n    '''\n\n    # XOR all elements in A to get the XOR value of all pairs of elements in A\n    xor_values = [sum(x) for x in zip(A, A[1:])]\n\n    # Count the number of odd xor values\n    odd_xor = sum([1 for x in xor_values if x % 2 == 1])\n\n    return odd_xor"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    xor = 0\n    \n    for i in range(N):\n        xor ^= A[i]\n        if xor & 1:\n            count += 1\n    \n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.isalpha() else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_char = char.lower()\n        elif char.islower():\n            new_char = char.upper()\n        else:\n            new_char = char\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isupper() else char for char in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        diff = abs(n1%10 - n2%10)\n        sum_diff += diff\n        n1 //= 10\n        n2 //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert both numbers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # Calculate the length of the shorter string\n    min_len = min(len(s1), len(s2))\n\n    # Initialize the sum and the digit difference variables\n    sum = 0\n    digit_diff = 0\n\n    # Iterate through each digit of the longer string\n    for i in range(min_len):\n        # Calculate the per-digit difference\n        diff = abs(ord(s1[i]) - ord(s2[i]))\n\n        # Add the difference to the sum and to the digit difference\n        sum += diff\n        digit_diff += diff\n\n    # Add any remaining digit differences to the sum\n    if min_len < len(s1):\n        digit_diff += ord(s1[min_len]) - ord(s2[min_len])\n    if min_len < len(s2):\n        digit_diff += ord(s2[min_len]) - ord(s1[min_len])\n\n    return sum, digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Remove any leading zeros from each number\n    n1 = int(str(n1)[1:])\n    n2 = int(str(n2)[1:])\n\n    # Convert each number into a list of digits\n    num1 = [int(d) for d in str(n1)]\n    num2 = [int(d) for d in str(n2)]\n\n    # Calculate the sum of the absolute differences between each pair of digits\n    distance = 0\n    for i in range(len(num1)):\n        distance += abs(num1[i] - num2[i])\n\n    # Return the sum of the per-digit differences\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > n2:\n        n1, n2 = n2, n1\n    \n    # Initialize variables to keep track of the digit counts\n    count1 = [0] * 10\n    count2 = [0] * 10\n    \n    # Convert each number to a list of digits and count the digits\n    for digit in str(n1):\n        count1[int(digit)] += 1\n        \n    for digit in str(n2):\n        count2[int(digit)] += 1\n    \n    # Initialize variables to keep track of the sum of per-digit differences\n    diff_sum = 0\n    \n    # Iterate through each digit and calculate the per-digit difference\n    for i in range(10):\n        if count1[i]!= count2[i]:\n            diff_sum += abs(count1[i] - count2[i])\n            \n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert integers to lists of digits\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n    \n    # Initialize sum variable\n    sum_diff = 0\n    \n    # Iterate over each digit in the lists\n    for i in range(10):\n        # Calculate the difference between the digits\n        digit_diff = abs(n1_digits[i] - n2_digits[i])\n        \n        # Add the difference to the sum variable\n        sum_diff += digit_diff\n    \n    # Return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as inputs and returns the sum of the per-digit difference between the two integers.\n    \"\"\"\n\n    # Convert the input integers to strings and split them into individual digits\n    num1_str = str(n1)\n    num2_str = str(n2)\n\n    # Create a list to store the absolute differences between the digits of the two input integers\n    digit_differences = []\n\n    # Iterate over each character in the two strings and calculate the absolute difference between them\n    for i in range(len(num1_str)):\n        digit1 = int(num1_str[i])\n        digit2 = int(num2_str[i])\n        digit_difference = abs(digit1 - digit2)\n        digit_differences.append(digit_difference)\n\n    # Calculate the sum of the absolute differences between the digits\n    total_digit_difference = sum(digit_differences)\n\n    return total_digit_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input numbers to lists of digits\n    num1 = [int(digit) for digit in str(n1)]\n    num2 = [int(digit) for digit in str(n2)]\n\n    # Calculate the distance between the two numbers\n    distance = 0\n    for digit in range(10):\n        distance += abs(num1[digit] - num2[digit])\n\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both integers to lists of digits\n    digits_n1 = [int(d) for d in str(n1)]\n    digits_n2 = [int(d) for d in str(n2)]\n\n    # Calculate the difference between the two lists of digits\n    digit_diff = [abs(d1 - d2) for d1, d2 in zip(digits_n1, digits_n2)]\n\n    # Calculate the sum of the absolute differences\n    sum_diff = sum(digit_diff)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    sum_of_differences = 0\n    for i in range(10):\n        num1_digit = n1 // (10 ** i)\n        num2_digit = n2 // (10 ** i)\n        difference = num1_digit - num2_digit\n        sum_of_differences += abs(difference)\n    return sum_of_differences"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_diff = 0\n    for i in range(10):\n        digit_diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return digit_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes a list a and a size as input and returns the sum of the largest contiguous sublist in the list.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        elif curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(a)):\n        if i < size:\n            current_sum += a[i]\n        else:\n            current_sum -= a[i - size]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    start = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        if i >= size - size + 1:\n            max_sum = max(max_sum, curr_sum)\n            curr_sum -= a[start]\n            start += 1\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    sum_of_max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        sum_of_max_ending_here += max_ending_here\n        if sum_of_max_ending_here > max_so_far:\n            max_so_far = sum_of_max_ending_here\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    if size > len(a):\n        size = len(a)\n\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if i >= size - 2:\n            continue\n        curr_sum -= a[i+1]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n            \n    return a[start:start+max_sum]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n    # Sort the combined list in ascending order\n    combined_list.sort()\n    # Return the sorted list as a tuple\n    return tuple(combined_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two input tuples\n    combined_tuple = test_tup1 + test_tup2\n\n    # Convert the combined tuple to a set to remove duplicates\n    unique_set = set(combined_tuple)\n\n    # Convert the set back to a sorted list\n    sorted_list = sorted(unique_set)\n\n    # Output the sorted list of unique elements\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Union of two tuples using set() method\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Convert set to list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    \n    # Return the union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Union of the two tuples\n    union_list = list(set(test_tup1 + test_tup2))\n    # Sort the union list in ascending order\n    union_list.sort()\n    # Return the sorted union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples and convert it to a set to remove duplicates\n    union_set = set(test_tup1 + test_tup2)\n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(union_set))\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(union_set)\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert both tuples to sets for easy set operations\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the union of the sets\n    union_set = set1.union(set2)\n    # convert the union set back to a list and sort it\n    union_list = sorted(list(union_set))\n    # output the sorted union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # combine the two tuples into one\n    combined_tuple = test_tup1 + test_tup2\n    \n    # find the unique elements of the combined tuple\n    unique_elements = sorted(set(combined_tuple))\n    \n    # print the unique elements\n    print(\"The union of the elements of the two tuples is:\", unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples using the + operator\n    combined_tup = test_tup1 + test_tup2\n    \n    # Convert the combined tuple to a set to remove duplicates\n    unique_set = set(combined_tup)\n    \n    # Convert the set back to a tuple\n    union_tup = tuple(unique_set)\n    \n    # Sort the union tuple in ascending order\n    sorted_tup = sorted(union_tup)\n    \n    # Print the sorted union tuple\n    print(\"Union of the elements of the two given tuples:\", sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the two given tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the union set to a list and sort it\n    sorted_union_list = sorted(list(union_set))\n\n    # Print the sorted union list\n    print(\"Union of the elements of the given tuples:\", sorted_union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n    \n    # Iterate over the list\n    for item in lst:\n        # Check if the item is equal to the previous item\n        if item == lst[current_length - 1]:\n            # If so, increment the current length\n            current_length += 1\n        else:\n            # If not, reset the current length\n            current_length = 1\n        \n        # Update the maximum length if necessary\n        if current_length > max_length:\n            max_length = current_length\n    \n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize a variable to store the longest sublist length\n    longest_length = 0\n\n    # Iterate through each sublist in the list\n    for sublist in lst:\n\n        # Calculate the length of the sublist\n        length = len(sublist)\n\n        # If the length is greater than the current longest sublist length, update the variable\n        if length > longest_length:\n            longest_length = length\n\n    # Return the longest sublist length\n    return longest_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    curr_length = 0\n    start = 0\n\n    for i in range(len(lst)):\n        if i == len(lst)-1:\n            curr_length += 1\n        else:\n            curr_length += 1\n            if i-start+1 > max_length:\n                max_length = i-start+1\n        start = i\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n    current_sublist = []\n    # Loop through the list\n    for i in range(len(lst)):\n        # If the current element is the start of a new sublist, reset the current_length\n        if i == 0 or lst[i]!= lst[i-1]:\n            current_length = 0\n        # Add the current element to the current_sublist\n        current_sublist.append(lst[i])\n        # If the length of the current sublist is greater than the max_length so far, update max_length\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    # Return the maximum length of any sublist\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):  \n        if i == 0:  \n            current_length = 1  \n        else:  \n            current_length = current_length + 1  \n        if current_length > max_length:  \n            max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[j] > lst[i]:\n                max_length = max(max_length, j - i + 1)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    current_length = 0  \n    max_index = 0  \n    for i in range(len(lst)):  \n        if lst[i] == 1:  \n            current_length += 1  \n            if current_length > max_length:  \n                max_length = current_length  \n                max_index = i  \n        else:  \n            current_length = 0  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > maxLength:\n                maxLength = len(sublist)\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)+1):  \n            current_length = j-i  \n            if current_length > max_length:  \n                max_length = current_length  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n\n    # Initialize the length of the longest sublist as 0\n    max_len = 0\n\n    # Loop through each sublist in the list\n    for sublist in lst:\n\n        # Initialize the length of the current sublist as 0\n        current_len = 0\n\n        # Loop through each element in the sublist\n        for element in sublist:\n\n            # Increment the length of the current sublist by 1\n            current_len += 1\n\n            # Update the length of the longest sublist if necessary\n            if current_len > max_len:\n                max_len = current_len\n\n    # Return the length of the longest sublist\n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(\"(?:\\\\.|[^\"])*\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    Parameters:\n    text (str): A string containing values to extract.\n\n    Returns:\n    list: A list of strings containing the extracted values.\n    \"\"\"\n    pattern = r'(\".*?\")'  # regex pattern to match values surrounded by double quotes\n    matches = re.findall(pattern, text)  # find all occurrences of the pattern in the text\n    values = []\n    for match in matches:\n        value = match[1:-1]  # remove the quotes from the value\n        values.append(value)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\\"(.*?)\\\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    # Use a regular expression to find all values between quotation marks\n    values = re.findall(r'\"([^\"]*)\"', text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(?:[^\"\\\\]|\\\\.)*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        value = match[1:-1]\n        values.append(value)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    # Use regular expressions to find all occurrences of quoted values\n    pattern = r'(?<=^|[^\\\\])\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    # Convert the matches to a list of values\n    values = [match.strip('\"') for match in matches]\n    # Remove any duplicates\n    return list(set(values))"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs \n    where both elements are unequal.\n    '''\n    # Initialize a variable to store the count of possible pairs\n    count = 0\n    \n    # Iterate through the list of integers\n    for i in range(n):\n        # Iterate through the list of integers again\n        for j in range(i+1,n):\n            # If the elements at i and j are not equal, increment the count\n            if arr[i]!= arr[j]:\n                count += 1\n    \n    # Return the count of possible pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    # Initialize a count variable to 0\n    count = 0\n    \n    # Loop through the list of integers\n    for i in range(n):\n        # Loop through the list of integers starting from the next index\n        for j in range(i+1, n):\n            # Check if the current elements are equal\n            if arr[i] == arr[j]:\n                # If they are, then increment the count variable\n                count += 1\n    \n    # Return the count of unordered pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    # initialize an empty list to store the characters of the word\n    chars = []\n    # loop through each character of the word\n    for char in word:\n        # append each character to the list\n        chars.append(char)\n    # return the list of characters\n    return chars"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each digit in the integer\n    while n > 0:\n        # Add the current digit to the sum variable\n        sum += n % 10\n        # Divide the integer by 10 to remove the last digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then split it into a list of its digits\n    digits = list(map(int, str(n)))\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate over the list of digits and add each digit to the sum\n    for digit in digits:\n        sum += digit\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop through each digit of n and add it to the total\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    \n    # Return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the number to a string and convert it to a list of digits\n    digits = [int(d) for d in str(n)]\n    # initialize a variable to store the sum of the digits\n    total_sum = 0\n    # loop through the list of digits and add each digit to the total_sum\n    for digit in digits:\n        total_sum += digit\n    # return the total_sum\n    return total_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize a variable to store the sum of digits\n    sum_dig = 0\n    # Loop through each digit in the string\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum\n        sum_dig += int(digit)\n    # Return the sum of digits\n    return sum_dig"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as an input and returns True if the list is sorted in non-decreasing order,\n    otherwise, it returns False.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[:-1] <= list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        for i in range(1, len(list1)):\n            if list1[i] < list1[i-1]:\n                return False\n            elif list1[i] > list1[i-1]:\n                return True\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) < 2:\n        return True\n    elif list1[0] >= list1[1]:\n        return False\n    else:\n        for i in range(1, len(list1)):\n            if list1[i] <= list1[i-1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if list is empty or not\n    if len(list1) < 2:\n        return True\n    \n    # Check if all elements in list are same or not\n    if list1[0] == list1[-1]:\n        return True\n    \n    # Traverse through the list and check if all elements are in ascending order\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Args:\n        length (int): the number of dictionaries to create in the list\n\n    Returns:\n        list of dictionaries: a list of length N of empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the list of lists\n    for sublist in list1:\n        # Sort the sublist in ascending order\n        sublist.sort()\n        # Print the sorted sublist\n        print(sublist)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i, lst in enumerate(list1):\n        list1[i] = sorted(lst)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    result = []\n\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set(nums)\n    unique_nums = list(unique_nums)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Remove duplicates from the lists\n    nums = list(set(nums))\n\n    # Sort the lists in ascending order\n    nums.sort()\n\n    # Return the sorted lists\n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n    \n    # Loop through each number in the list\n    for num in nums:\n        # If the number is not already in the set, add it to the set\n        if num not in unique_nums:\n            unique_nums.add(num)\n    \n    # Convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    num_set = set(nums)\n    return list(num_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert each list to a set to remove duplicates\n    unique_nums = {num for sublist in nums for num in sublist}\n    # Convert the set back to a list\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = sorted(set(list_data))\n    return reduce(lambda x, y: x*y, unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # convert the list to a set to remove duplicates\n    product = 1  # initialize the product to 1\n    for num in unique_numbers:  # loop through the set of unique numbers\n        product *= num  # multiply the current number with the product\n    return product  # return the product of the unique numbers"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))\n    product = 1\n    \n    for number in unique_numbers:\n        product *= number\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = []\n\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function calculates the product of the unique numbers in a given list.\n    \"\"\"\n    unique_set = set(list_data)\n    unique_list = sorted(list(unique_set))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))  # Remove duplicates from the list\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create a set to remove duplicates from the list\n    unique_numbers = set(list_data)\n\n    # Use the product() function to calculate the product of the unique numbers\n    result = 1\n    for number in unique_numbers:\n        result *= number\n\n    return result"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    unique_product = 1\n    for number in unique_numbers:\n        unique_product *= number\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return 1 if len(unique_numbers) == 0 else (1 if len(unique_numbers) == 1 else list_data[0] * unique_product(unique_numbers[1:]))"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*r*r + 2*3.14159*r*h + 2*3.14159*h*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Formula for surface area of a cylinder\n    # surface area = pi * r^2 * h\n    surface_area = 3.14159 * r ** 2 * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 2 * math.pi * r * h\n    return s"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r**2 + 2*math.pi*r*h + 2*math.pi*h**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * r + 2 * math.pi * r * h + 2 * math.pi * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*r + 2*3.14*r*h + 2*3.14*r + 2*3.14*h + 2*3.14"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #pi value\n    pi = 3.14159265358979323846\n    \n    #calculating surface area using formula\n    surface_area = (2*pi*r*h) + (pi*(r**2))\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    This function calculates the surface area of a cylinder.\n    \n    Args:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    area (float): surface area of the cylinder\n    \"\"\"\n    \n    # Calculate the surface area of the cylinder using the formula:\n    # A = 2 * pi * r * h\n    area = 2 * 3.14 * r * h\n    \n    return area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    # create two pointers for the two lists\n    i = 0\n    j = 0\n    # compare the elements of the two lists\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    # if the pointers meet at the end of both lists, then A is a sublist of B\n    if i == len(A) and j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    # check if A is empty list\n    if not A:\n        return True\n    \n    # check if A is sublist of B\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            if i == len(A):\n                return True\n        j += 1\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if B is a sublist of A\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    for i in range(len(A)): \n        for j in range(len(B)): \n            if A[i:i+len(B)] == B[j:j+len(A)]: \n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function will check whether the first list is a sublist of the second list or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if i == len(A):\n            return True\n        if B[j] == A[i]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): # B is sublist of A if len(B) is greater than len(A)\n        return False\n    else:\n        i = 0\n        j = 0\n        while i < len(A) and j < len(B):\n            if A[i] == B[j]:\n                i += 1\n                j += 1\n            else:\n                i += 1\n        if j == len(B): # if we reach the end of B, then A is a sublist of B\n            return True\n        else:\n            return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    This function takes two lists A and B and returns True if B is a sublist of A.\n    '''\n\n    # check if B is a sublist of A using the binary search algorithm\n    def binary_search(A, B): \n        low, high = 0, len(A) - len(B) + 1\n        while low < high: \n            mid = (low + high) // 2 \n            if A[mid:mid+len(B)] == B: \n                return True\n            elif A[mid:mid+len(B)] > B: \n                high = mid \n            else: \n                low = mid + 1\n        return False\n\n    return binary_search(A, B) \n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists A and B as input and returns True if all elements of B are present in A as a sublist or False otherwise.\n    '''\n    if not A or not B:\n        return False\n\n    i = j = 0\n\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n\n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) >= len(B):\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n    return False\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Get the last digit of the factorial\n    last_digit = int(str(n)[-1])\n    # Print the last digit\n    print(\"The last digit of factorial of\", n, \"is\", last_digit)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert input number to string\n    str_n = str(n)\n\n    # Find the length of the input string\n    len_n = len(str_n)\n\n    # Find the last digit in the factorial of the input number\n    last_digit = int(str_n[len_n-1])\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Initialize the result variable to store the last digit of factorial\n    result = 0\n    # Initialize a variable to store the current digit of factorial\n    factorial = 1\n\n    # Loop through each digit of the given number\n    for digit in str(n):\n        # Multiply the factorial by the corresponding digit\n        factorial *= int(digit)\n        # Add the last digit to the result variable\n        result += factorial % 10\n\n    # Return the result variable\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    temp = n\n    while temp > 0: \n        factorial *= temp \n        temp //= 10\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        factorial = 1\n        while n > 0:\n            factorial = factorial * n\n            n = n - 1\n        return int(str(factorial)[-1])"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10\n\nn = int(input(\"Enter a number: \"))\nprint(\"The last digit in factorial of\", n, \"is\", last_Digit_Factorial(n))"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initializing the variable to 0\n    last_digit = 0\n\n    # looping through each digit of the number\n    while n >= 10:\n        # taking the last digit of the number\n        last_digit = n % 10\n\n        # multiplying the number by 10 and taking the floor division by 10 to get the next digit\n        n = (n // 10) * 10\n\n    # returning the last digit of the number\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Initialize variables\n    factorial = 1\n    temp = n\n\n    # Calculate factorial\n    while temp > 0:\n        factorial = factorial * temp\n        temp = temp - 1\n\n    # Find last digit of factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to hold the result\n    result = []\n    # Loop through each list in turn\n    for lst in [list1, list2, list3]:\n        # Loop through each item in the list\n        for item in lst:\n            # Add the item to the result list\n            result.append(item)\n    # Return the result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3) or len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the lists and add the elements\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # iterate over each element in the input lists\n    for i in range(len(list1)):\n        # append the ith element of each input list to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Find the common elements in the two tuples\n    common_elements = set(test_tup1).intersection(set(test_tup2))\n    \n    # Find the dissimilar elements in the two tuples\n    dissimilar_elements = set(test_tup1).symmetric_difference(set(test_tup2))\n    \n    # Find the elements that are only in the first tuple\n    first_only_elements = set(test_tup1).difference(set(test_tup2))\n    \n    # Find the elements that are only in the second tuple\n    second_only_elements = set(test_tup2).difference(set(test_tup1))\n    \n    # Find the elements that are in both tuples, but with different values\n    different_elements = set(common_elements).symmetric_difference(dissimilar_elements)\n    \n    # Print the results\n    print(\"Common Elements:\", common_elements)\n    print(\"Dissimilar Elements:\", dissimilar_elements)\n    print(\"Only in the First Tuple:\", first_only_elements)\n    print(\"Only in the Second Tuple:\", second_only_elements)\n    print(\"Different Elements:\", different_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n\n    # Loop through each element in the two tuples\n    for element in test_tup1:\n\n        # If the element is not present in the second tuple, it is dissimilar\n        if element not in test_tup2:\n            return element\n\n    # If no dissimilar elements are found, return None\n    return None"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list containing the dissimilar elements in the tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a dictionary to store the frequency of each element in the first tuple\n    freq1 = {}\n    # loop through the first tuple and update the frequency dictionary\n    for item in test_tup1:\n        freq1[item] = freq1.get(item, 0) + 1\n    \n    # create a dictionary to store the frequency of each element in the second tuple\n    freq2 = {}\n    # loop through the second tuple and update the frequency dictionary\n    for item in test_tup2:\n        freq2[item] = freq2.get(item, 0) + 1\n    \n    # create a list to store the dissimilar elements\n    dissimilar = []\n    \n    # loop through the frequency dictionaries and compare the frequency of each element\n    for key in freq1:\n        if key not in freq2 or freq1[key]!= freq2[key]:\n            dissimilar.append(key)\n    \n    # return the dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    \n    # compare each element of the two tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    \n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through each element in the first tuple\n    for element1 in test_tup1:\n        # Check if the element is present in the second tuple\n        if element1 not in test_tup2:\n            # If the element is not present, add it to the dissimilar_list\n            dissimilar_list.append(element1)\n\n    # Return the dissimilar_list\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_tuple.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_tuple.append(item)\n    return even_tuple\n\ndef even(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if type(item) is tuple:\n            result.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.extend(even_ele(i, even_fnc))\n        else:\n            new_tuple.append(even_fnc(i))\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x): \n        return even_fnc(x)\n    \n    def find_even(t): \n        return tuple(x for x in t if is_even(x))\n    \n    if isinstance(test_tuple, tuple):\n        if all(isinstance(t, tuple) for t in test_tuple):\n            return tuple(find_even(t) for t in test_tuple)\n        elif all(isinstance(t, list) for t in test_tuple):\n            return tuple(find_even(t) for t in test_tuple)\n        else:\n            return test_tuple\n    else:\n        return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Separate the even and odd elements in the tuple\n    even_elements = [elem for elem in test_tuple if even_fnc(elem)]\n    odd_elements = [elem for elem in test_tuple if not even_fnc(elem)]\n    # Merge the even and odd elements into a single tuple\n    result = tuple(even_elements + odd_elements)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        if isinstance(tup, tuple):\n            result.append(even_ele(tup, even_fnc))\n        else:\n            result.append(even_fnc(tup))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            new_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, list):\n            new_tuple.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple\n\ndef is_even(num):\n    '''\n    A function to check if a number is even.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create an empty list to store even elements\n    even_list = []\n    \n    # Loop through each element of the nested tuple\n    for elem in test_tuple:\n        # Check if the element is even by calling the even_fnc() function\n        if even_fnc(elem):\n            # If the element is even, add it to the even_list\n            even_list.append(elem)\n    \n    # Return the even_list as the final result\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            even_list.append(even_ele(item, even_fnc))\n        elif type(item) == list:\n            even_list.append([even_fnc(sub_item) for sub_item in item])\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the height of the pyramid by multiplying the height by the base edge\n    height = s * b\n\n    # Calculate the area of each triangle formed by the base edge, height and height\n    area_1 = (b * height) / 2\n    area_2 = (b * height) / 2\n    area_3 = (b * height) / 2\n\n    # Add up the areas of the triangles to get the total surface area of the pyramid\n    surface_area = area_1 + area_2 + area_3\n\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the base\n    area_base = b*b\n\n    # calculate the area of each half of the pyramid\n    area_1 = b*s\n    area_2 = b*s\n\n    # add up the areas of both halves\n    total_area = area_base + area_1 + area_2\n\n    # multiply by 4 to get the surface area of the entire pyramid\n    surface_area = total_area * 4\n\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of each side of the square pyramid\n    area1 = b**2\n    area2 = s**2\n    area3 = (b/2)**2\n    \n    # find the total area of the pyramid\n    total_area = (area1 + area2 + area3)/2\n    \n    # calculate the surface area of the pyramid\n    surface_area = total_area * 6\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s*2) + (s*s*2) + (s*b*2)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = (b**2)*s + (2*b*s)*s**2 + (b**2)*s**2 + (b*s)*s**2 + (b**2)*s + (2*b*s)*s**2 + (b**2)*s**2\n    \n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5*b*s*s + 0.5*b*b*s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    area = (b*s)/2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    area = b*s + (b*b)*s + (b*b*b)*s\n\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number using recursion.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using the formula:\n\n        C(n) = (2n-1)C(n-1) - nC(n-2)\n\n    Args:\n        n (int): The index of the Catalan number to be returned.\n\n    Returns:\n        int: The nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (2 * n - 1) * catalan_number(n - 1) - n * catalan_number(n - 2)\n    else:\n        return n * catalan_number(n - 1) - (2 * n - 1) * catalan_number(n - 2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # If the input is 0 or 1, return 1\n    if num == 0 or num == 1:\n        return 1\n    # Initialize a list to store catalan numbers\n    catalan_list = [1]\n    # Loop through all numbers from 2 to num\n    for i in range(2, num+1):\n        # Calculate the value of the i-th catalan number\n        catalan_val = (i * (2*i-1)) // (i-1)\n        # Append the value to the list of catalan numbers\n        catalan_list.append(catalan_val)\n    # Return the nth catalan number in the list\n    return catalan_list[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    # Initialize the result list\n    result = [1]\n\n    # Calculate the previous two Catalan numbers\n    for i in range(1, n):\n        prev_result = result[i-1]\n        new_result = prev_result + 2*result[i-2]\n        result.append(new_result)\n\n    return result[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using the formula: C(n, k) = binomial(n, k) C(n, k-1).\n\n    Parameters:\n    n (int): positive integer denoting the order of the Catalan number.\n    \"\"\"\n\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (factorial(2*n) // (factorial(n) * factorial(n-2)))\n\ndef factorial(n):\n    \"\"\"\n    Returns the factorial of n using the formula: n! = n*(n-1)*(n-2)*...*3*2*1.\n\n    Parameters:\n    n (int): positive integer denoting the order of the factorial.\n    \"\"\"\n\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return sum([((2*n-1)*(2*n-3)) // (factorial(2*n-1)*factorial(2*n-3)) for n in range(1, num+1)])\n\ndef factorial(n):\n    '''\n    Write a function which returns factorial of n.\n    '''\n    return 1 if n == 0 else n * factorial(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return 1/(1-num**2) + catalan_number(num-1)*catalan_number(num-2)\n\nThe function takes an integer `num` as input and returns the nth Catalan number. The base cases are when `num` is 0 or 1, which return the first two Catalan numbers, respectively. For all other values of `num`, the function uses the formula to compute the nth Catalan number.\n\nThe time complexity of this algorithm is O(2^n), where n is the value of `num`. This is because the maximum number of recursive calls can be at most n. However, this is not a concern for small values of `num`, such as `num` in the range [0, 2]. Therefore, it is efficient enough for practical purposes."
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return catalan_number(n//2) + catalan_number((n+1)//2)\n    else:\n        return catalan_number(n-1) + catalan_number(n//2) + catalan_number(n//2)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th Catalan number is:\", catalan_number(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (4 * (2 * num - 1)) // (num + 1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        adverbs.append((match, text.index(match)))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b([a-zA-Z]+)\\s+(ly)\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b\\w+(edly|ingly|ingly|iously|ually|ule|ingly|iously|ually|ule|ly)\\b'\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the first occurrence of the pattern and its position in the text\n    if matches:\n        return matches[0], text.find(matches[0])\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    # regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\bly\\b'\n    \n    # find all the occurrences of adverbs in the given string\n    matches = re.findall(pattern, text)\n    \n    # return a dictionary with the positions of the adverbs and their corresponding adverbs\n    return dict(zip(matches, matches))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b[A-Z][a-z]*ly\\b'\n\n    # use the re.finditer() function to iterate over all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # initialize a list to store the positions of the adverbs and an empty string to store the adverbs themselves\n    positions = []\n    adverbs = ''\n\n    # iterate over all matches and store their positions and text in the respective lists\n    for match in matches:\n        positions.append(match.start())\n        adverbs += match.group(0)\n\n    # return the list of positions and the concatenated adverbs\n    return positions, adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function finds the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Define a regular expression pattern for finding adverbs ending with ly\n    pattern = re.compile(r'(?<=\\w)ly(?=\\b)')\n\n    # Find all non-overlapping occurrences of the pattern in the text\n    matches = pattern.finditer(text)\n\n    # Initialize an empty list to store the positions of the adverbs ending with ly\n    adverb_positions = []\n\n    # Iterate through the matches and add their positions to the list\n    for match in matches:\n        adverb_positions.append(match.start())\n\n    # Return the list of positions of the adverbs ending with ly\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\bly\\b'\n\n    # Use the `re.finditer` function to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Create a list to store the positions of the adverbs and their lengths\n    positions = []\n\n    # Iterate over all the matches found by `re.finditer`\n    for match in matches:\n        # Get the start and end positions of the match\n        start = match.start()\n        end = match.end()\n\n        # Calculate the length of the adverb (i.e. the position of the 'y' character)\n        length = end - start - 1\n\n        # Store the start and length in the `positions` list\n        positions.append((start, length))\n\n    # Sort the list of positions by start position\n    positions.sort(key=lambda x: x[0])\n\n    # Return the list of positions of the adverbs\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b[a-z]*ly\\b', text, re.IGNORECASE)\n    if adverbs:\n        for i in range(len(text)):\n            if text[i:i+4].lower() == 'ly':\n                print(f'Adverb at position {i}: {text[i:i+4]}')\n    else:\n        print('No adverbs found.')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the adverb and its position in the string.\n    '''\n\n    # Define a regular expression pattern for adverbs ending with 'ly'\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # Use the re.findall() function to find all the adverbs in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the tuples of adverbs and their positions\n    adverb_positions = []\n\n    # Iterate over the matches and append the tuple (adverb, position) to the list\n    for i, match in enumerate(matches):\n        adverb_positions.append((match, i))\n\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b([a-zA-Z]+\\s[a-zA-Z]+\\sly)\\b'\n    # Use the re.findall() method to find all the occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n    # Iterate over the matches and append the positions of the adverbs to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    # Return the positions of the adverbs\n    return positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for item in items:\n        # Add the current item to the heap\n        heapq.heappush(min_heap, item)\n        # If the heap size is greater than n, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items in the heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap with the top-n elements of the dataset\n    heap = list(heapq.nsmallest(n, items))\n    # Return the heap as a list of the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    max_heap = []\n    for i in range(n):\n        # Push the first item of the dataset into the heap\n        heapq.heappush(max_heap, items[0])\n        # Pop the last item from the heap and remove it from the dataset\n        items.pop(0)\n        # If the dataset is now empty, we're done\n        if not items:\n            break\n        # Remove the last item from the heap and push the next item into the heap\n        heapq.heappop(max_heap)\n        heapq.heappush(max_heap, items[0])\n    # Extract the n most expensive items from the heap\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap))\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items in the dataset\n    for item in items:\n        # Add the item to the min heap if its price is less than or equal to the minimum price in the heap\n        if not min_heap or item[1] <= min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n\n        # If the min heap size is greater than n, remove the smallest item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return a list of the n most expensive items in the dataset\n    return [item[0] for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a dataset of items and a number n. It returns a list of the n most expensive items.\n    The function uses a heap data structure to efficiently find the n most expensive items. The heap is implemented as a min heap, where the smallest item is the root node.\n    The time complexity of this function is O(n log n) due to the heapify operation.\n    '''\n    heap = []\n\n    # Build the min heap\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Extract the n most expensive items from the heap\n    result = []\n    while heap:\n        result.append(-heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Finds the n most expensive items in a given dataset.\n    \"\"\"\n    # Use a min-heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n or item > heap[0][0]:\n            heapq.heappush(heap, (item, item))\n        else:\n            heapq.heappop(heap)\n    # Extract the n most expensive items from the heap\n    result = []\n    while heap:\n        result.append(heap[0][1])\n        heapq.heappop(heap)\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # create a min heap of n items\n    min_heap = []\n    for item in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        else:\n            if item < heapq.heappop(min_heap):\n                heapq.heappush(min_heap, item)\n\n    # return the n most expensive items in the dataset\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items[:n]:\n        heapq.heappush(heap,item)\n    for item in items[n:]:\n        if item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a max-heap of the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n\n    # Return the n most expensive items as a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items seen so far\n    min_heap = []\n    # Initialize a dictionary to keep track of the current price of each item\n    prices = {}\n    # Iterate through the dataset and update the min heap and prices dictionaries\n    for item in items:\n        if item not in prices:\n            prices[item] = 0\n        prices[item] += 1\n        # If the number of times the item has been seen so far is greater than the length of the min heap,\n        # add the item to the heap (since it's the next most expensive item)\n        if prices[item] > len(min_heap):\n            heapq.heappush(min_heap, item)\n        # If the number of times the item has been seen so far is equal to the length of the min heap,\n        # compare the prices of the next item in the heap (which is the next most expensive)\n        # with the current price of the current item and add the item with the lower price to the heap\n        else:\n            if prices[min_heap[0]] > prices[item]:\n                heapq.heappushpop(min_heap, item)\n    # Return the n most expensive items in the min heap\n    return heapq.nsmallest(n, min_heap)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the length of the list is less than n\n    if len(l) < n:\n        return \"List should have at least {} elements\".format(n)\n    else:\n        # create a new list with only the elements before the nth element\n        new_list = l[:n]\n        # add the first part of the list to the end\n        new_list.extend(l[n:])\n        # return the new list\n        return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return []\n    \n    middle = len(l) // 2\n    if n == middle:\n        return [l[middle+1:], l[:middle+1]]\n    elif n < middle:\n        return [l[n:], l[:n]]\n    else:\n        return split_Arr(l, n-middle) + [l[n-middle:], l[:n-middle]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n\n    # Add the first part to the end of the second part\n    l = first_part + second_part\n\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"List must have at least\", n, \"elements.\")\n    else:\n        part1 = l[:n]\n        part2 = l[n:]\n        result = part2 + part1\n        print(\"Resulting list is:\", result)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the list is empty\n    if not l:\n        return []\n\n    # split the list at the nth element\n    split_list = l[:n]\n\n    # add the first part of the list to the end\n    first_part = l[n:]\n    new_list = split_list + first_part\n\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    mid = len(l)//2\n    #print(mid)\n    for i in range(n-1):\n        l.pop(mid)\n    l.extend(l[:mid])\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    # convert list to tuple\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    \n    max_val = max(nums)\n    min_val = min(nums)\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    sorted_nums = sorted(nums)\n    return sorted_nums[-1] - sorted_nums[-2]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"The list should have at least 2 elements.\"\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"List should have at least two elements\"\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 0\n    \n    min_val = min(nums)\n    max_val = max(nums)\n    \n    return max_val - min_val"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num*num == num:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store perfect squares\n    perfect_squares_list = []\n    # Loop through all possible values of n between a and b\n    for n in range(a, b+1):\n        # Check if the square root of n is an integer\n        if n == int(n**0.5):\n            # If it is, add it to the list of perfect squares\n            perfect_squares_list.append(n)\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize variables\n    squares = set()\n\n    # Loop through all numbers between a and b\n    for num in range(a, b + 1):\n        # Check if the number is a perfect square\n        square = int(num ** 0.5) + 1\n        if square * square == num:\n            # Add the square to the set of perfect squares\n            squares.add(square)\n\n    # Return the set of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares\n    squares = []\n    # loop through all numbers between a and b\n    for i in range(a, b + 1):\n        # check if the square root of i is an integer\n        if int(i ** 0.5) ** 2 == i:\n            # if it is, append the square to the list\n            squares.append(i)\n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # iterate through all integers between a and b\n    for num in range(a, b+1):\n        # check if the square of num is equal to num\n        if num == num**2:\n            # if it is, print the number\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize variables to store the number of perfect squares between a and b\n    count_a = 0\n    count_b = 0\n\n    # iterate through each number from a to b, checking if each number is a perfect square\n    for num in range(a, b+1):\n        square_root = num**0.5\n        # check if the square root is an integer\n        if square_root.is_integer():\n            # if it is, then the number is a perfect square\n            if num == square_root**2:\n                count_a += 1\n            else:\n                count_b += 1\n\n    # return the number of perfect squares between a and b\n    return count_a + count_b"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            perfect_squares.append(i)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    i = 1\n    while i <= b:\n        j = 1\n        while i*j*i <= b:\n            if i*j*i == b:\n                squares.append((i,j))\n            j += 1\n        i += 1\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two integers `a` and `b` as input and returns a list of all perfect squares between them.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    \n    # Initialize an empty list to store the perfect squares\n    perfect_squares = []\n    \n    # Loop through all numbers between `a` and `b`\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        square = num ** 0.5\n        if int(square) ** 2 == num:\n            perfect_squares.append(int(square))\n    \n    # Return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        if square == sum(map(int, str(square))):\n            print(square)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radius of the circle.\n    theta (float): The angle of the line from the origin to the point (x, y).\n    \n    Returns:\n    (float, float): The x and y coordinates of the point (x, y) in rectangular coordinates.\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters\n    ----------\n    x : float\n        The radius value of the point.\n    y : float\n        The angle value of the point.\n\n    Returns\n    -------\n    tuple\n        A tuple containing the x-coordinate and y-coordinate of the point in rectangular coordinates.\n\n    Examples\n    --------\n    >>> polar_rect(3, 45)\n    (6.123233995736766e-17, 6.123233995736766e-17)\n\n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(y)\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return (x_rect.real, x_rect.imag), (y_rect.real, y_rect.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    x: float\n        The radial component of the complex number.\n\n    y: float\n        The angular component of the complex number.\n\n    Returns:\n    tuple:\n        A tuple containing the rectangular components (x, y).\n    \"\"\"\n\n    # Convert the angular component from degrees to radians\n    theta = cmath.pi * y / 180\n\n    # Calculate the rectangular components\n    r = x * cmath.cos(theta)\n    x = x * cmath.sin(theta)\n\n    return (r.real, x.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius = cmath.sqrt(x**2 + y**2)\n    angle = cmath.phase(x+y*1j)\n    x_rect = radius * cmath.cos(angle)\n    y_rect = radius * cmath.sin(angle)\n    return (x_rect, y_rect)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    return cmath.rect(r, theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    :param r: radius of the circle\n    :type r: float\n    :param theta: angle in radians\n    :type theta: complex\n    :return: x and y coordinates\n    :rtype: tuple of floats\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): the radius of the circle\n    theta (float): the angle in radians\n\n    Returns:\n    (float, float): the rectangular coordinates (x, y)\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def polar_rect(r,theta):\n    \"\"\"\n    This function takes two arguments, r and theta, which represent the polar \n    coordinates of a point. It converts the polar coordinates to rectangular \n    coordinates using the formulas: x = r * cos(theta), y = r * sin(theta).\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list has at least two elements\n    if length < 2:\n        return\n    \n    # Swap the first and last elements\n    first, last = newList[0], newList[length-1]\n    newList[0] = last\n    newList[length-1] = first"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    # check if the list has at least 2 elements\n    if n < 2:\n        return newList\n    \n    # interchange the first and last elements of the list\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # The length of the list is less than or equal to 1, so swapping is not possible\n    if len(newList) <= 1: \n        return newList\n\n    # Swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # Returning the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    This function swaps the first and last elements of a list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list must have at least two elements\")\n    else:\n        # Swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"The list after swapping the first and last elements is: \", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    if len(newList) < 2:\n        print(\"List must have at least two elements to swap.\")\n        return\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        print(\"Swapped List:\", newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        # swap first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"List should have at least two elements\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize variables\n    coeff = 1\n    sum_coeff = 0\n\n    # Calculate the first binomial co-efficient\n    coeff = (n-k+1) * k / n\n    sum_coeff += coeff\n\n    # Calculate the remaining binomial co-efficients\n    for i in range(2,k+1):\n        coeff = (n-k+i) * k / n\n        sum_coeff += coeff\n\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    elif k < 0 or k > n:\n        return 0\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (integer): The number of elements in the sequence.\n    k (integer): The number of elements in the subsequence.\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    if k > n:\n        return 0\n\n    if k == 0:\n        return 1\n\n    if k == 1:\n        return n\n\n    coeff = 1\n    sum_coeff = 0\n\n    for i in range(1, k+1):\n        coeff *= (n-i+1)\n        sum_coeff += coeff\n\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum of consecutive binomial coefficients to 0\n    binomial_sum = 0\n\n    # Loop through each combination of k numbers from 0 to n-k\n    for i in range(n-k+1):\n        # Calculate the product of the binomial co-efficients\n        product = 1\n        for j in range(k):\n            product *= (i+j)/(j+1)\n        # Add the product to the sum of consecutive binomial coefficients\n        binomial_sum += product\n\n    return binomial_sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two parameters, n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n == k or n == k - 1:\n        return n\n    else:\n        return n * binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    sum_coeffs = 0\n    for i in range(1, n + 1):\n        if i <= k:\n            coeff = (k - 1) // i + 1\n        else:\n            coeff = 0\n        sum_coeffs += coeff * i\n    return sum_coeffs"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0: # check if k is within the range of 0 to n\n        return 0 # if not, return 0\n    else:\n        if k == 0 or k == n:\n            return 1 # if k is either 0 or n, return 1\n        else:\n            return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_of_product = 0\n    for i in range(k, n+1):\n        sum_of_product += i * binomial_Coeff(n-1, i-1)\n    return sum_of_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # calculate the sum of product of consecutive binomial co-efficients using Pascal's triangle\n    total = 0\n    for i in range(n+1):\n        for j in range(min(i+k,n),max(i-k,0)+1):\n            total += (1/math.factorial(k)) * (1/math.factorial(j)) * (1/math.factorial(i-j))\n    return total"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if not re.match(ip_pattern, ip):\n        return None\n    new_ip = ip.strip('.0').replace('.0', '')\n    if '.' in new_ip:\n        return new_ip\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\d)(?=\\.)', r'\\1.', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes from each octet\n    ip_list = ip.split('.')\n    ip_list = [int(x) for x in ip_list]\n    ip_list = [str(x) for x in ip_list]\n    ip_list = '.'.join(ip_list)\n\n    # Return the modified ip address\n    return ip_list"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes from the ip address using regular expressions\n    ip_with_no_leading_zeroes = re.sub(r'^\\d+[.]', '', ip)\n\n    return ip_with_no_leading_zeroes"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s*(0)\\s*', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\b\\d{1,3}\\b)(?<!\\d)\\.(\\b\\d{1,3}\\b)(?<!\\d)', r'\\1\\2', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and first odd number in the list.\n\n    Args:\n        lst (list): The list that needs to be processed.\n\n    Returns:\n        int: The difference between the first even and first odd number in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 or odd_count == 0:\n        return \"The list contains only one number or has no even or odd numbers.\"\n    return even_count - odd_count"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and finds the difference of the first even and first odd number in the list.\n    '''\n\n    # check if list is empty\n    if not lst:\n        return None\n\n    # check if list contains only one element\n    elif len(lst) == 1:\n        if lst[0] % 2 == 0:\n            return lst[0] - 1\n        else:\n            return lst[0] + 1\n\n    # check if list contains more than one element\n    else:\n        first_even = lst[0]\n        first_odd = lst[1]\n\n        # check if first even and first odd are even or odd\n        if first_even % 2 == 0:\n            if first_odd % 2 == 0:\n                return first_even - first_odd\n            else:\n                return first_even + first_odd - 1\n        else:\n            if first_odd % 2 == 0:\n                return first_even + first_odd\n            else:\n                return first_even - first_odd + 1"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                return first_even - num\n        else:\n            if first_odd is None:\n                first_odd = num\n            else:\n                return first_odd - num\n    \n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes in a list and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - odd_num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - even_num\n    if even_num is not None and odd_num is not None:\n        return even_num - odd_num\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables to store the even and odd numbers\n    even = -1\n    odd = -1\n\n    # Loop through each element in the list\n    for num in list1:\n        # If the number is even and first time seen\n        if num % 2 == 0 and even == -1:\n            even = num\n        # If the number is odd and first time seen\n        elif num % 2!= 0 and odd == -1:\n            odd = num\n\n    # If no even or odd number was found, return None\n    if even == -1 or odd == -1:\n        return None\n\n    # Return the difference between even and odd\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n\n    # Initialize even and odd variables to the first element of the list\n    even = lst[0]\n    odd = lst[0]\n\n    # Loop through the rest of the list and update even and odd variables accordingly\n    for num in lst[1:]:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n\n    # Return the difference between even and odd\n    return abs(even - odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    # Iterating through the list to find the first even and odd numbers\n    for num in lst:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 == 1 and odd_num is None:\n            odd_num = num\n            \n    # Returning the difference of the even and odd numbers\n    if even_num and odd_num:\n        return even_num - odd_num\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables\n    even = 0\n    odd = 0\n    diff = 0\n\n    # Loop through the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n        # Check if the difference between even and odd is less than 1\n        if odd - even < 1:\n            diff = abs(odd - even)\n            return diff\n\n    # Return the difference between even and odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n\n    return abs(even_num - odd_num)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for the swaps and minimum swaps\n    swaps = 0\n    min_swaps = float('inf')\n\n    # Loop through all possible swaps\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            # If the current bits are different, swap the corresponding bits in num1 and num2 and increment swaps\n            num1 = num1 ^ (1 << i)\n            num2 = num2 ^ (1 << i)\n            swaps += 1\n            # Check if the new number of swaps is smaller than the current minimum swaps\n            if swaps < min_swaps:\n                min_swaps = swaps\n\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # convert input strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # iterate over bits in binary representation of num1 and num2\n    # swapping bits if they are different\n    swaps = 0\n    for i in range(32):\n        if (num1 & (1 << i))!= (num2 & (1 << i)):\n            swaps += 1\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n\n    # count number of set bits in num1 and num2\n    num1_bits = bin(num1).count('1')\n    num2_bits = bin(num2).count('1')\n\n    # calculate minimum number of swaps required to convert num1 to num2\n    min_swaps = abs(num1_bits - num2_bits)\n    if num1_bits > num2_bits:\n        min_swaps += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert the first number to the second number.\n\n    :param str1: First binary number as a string.\n    :param str2: Second binary number as a string.\n    :return: Minimum number of swaps required to convert the first number to the second number.\n    \"\"\"\n    # Convert both binary numbers into lists of digits\n    num1 = [int(digit) for digit in str1]\n    num2 = [int(digit) for digit in str2]\n\n    # Initialize the number of swaps to zero\n    swaps = 0\n\n    # Initialize two pointers, one for each binary number\n    i = 0\n    j = 0\n\n    # While the two pointers are not equal\n    while i < len(num1) and j < len(num2):\n        # If the digits at the two pointers are not equal, then swap them and increment the swaps count\n        if num1[i]!= num2[j]:\n            num1[i], num1[j] = num1[j], num1[i]\n            num2[i], num2[j] = num2[j], num2[i]\n            swaps += 1\n\n        # Increment the pointers for the next iteration\n        i += 1\n        j += 1\n\n    # If there are any remaining digits left in num1, then the last remaining digit is from num2, so swap it with the least significant digit of num1\n    while i < len(num1):\n        num1[i], num1[j] = num1[j], num1[i]\n        num2[i], num2[j] = num2[j], num2[i]\n        swaps += 1\n        j += 1\n\n    # If there are any remaining digits left in num2, then the last remaining digit is from num1, so swap it with the least significant digit of num2\n    while j < len(num2):\n        num1[i], num1[j] = num1[j], num1[i]\n        num2[i], num2[j] = num2[j], num2[i]\n        swaps += 1\n        i += 1\n\n    # Return the final count of swaps required to convert num1 to num2\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n\n    # Convert the binary strings to lists of binary digits\n    binary1 = list(map(int, bin(int(str1, 2))[2:].zfill(len(str1))))\n    binary2 = list(map(int, bin(int(str2, 2))[2:].zfill(len(str2))))\n\n    # Find the minimum number of swaps required to convert the two binary strings\n    def min_swaps(a, b):\n        i, j = 0, 0\n        count = 0\n        while i < len(a) and j < len(b):\n            if a[i] < b[j]:\n                i += 1\n            elif a[i] > b[j]:\n                j += 1\n            else:\n                count += 1\n                i += 1\n                j += 1\n        return count\n\n    # Calculate the minimum number of swaps required\n    swaps = min_swaps(binary1, binary2)\n\n    # Return the minimum number of swaps\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Check if the length of both strings are equal\n    if len(str1)!= len(str2):\n        return \"Both strings must have the same length.\"\n    \n    # Initialize two lists to store the counts of 0's and 1's in each string\n    count0 = [0] * 10\n    count1 = [0] * 10\n    \n    # Loop through each character in the strings\n    for i in range(len(str1)):\n        # Convert the characters to integers and add them to their corresponding count list\n        if str1[i] == '0':\n            count0[int(str2[i])] += 1\n        elif str1[i] == '1':\n            count1[int(str2[i])] += 1\n    \n    # Initialize variables to keep track of the minimum number of swaps and the index of the first 0 or 1\n    min_swaps = float('inf')\n    first_index = None\n    \n    # Loop through each count list and find the first index with a count of 0 or 1\n    for i in range(10):\n        if count0[i] > 0:\n            first_index = i\n            min_swaps = min(min_swaps, count0[i])\n        elif count1[i] > 0:\n            first_index = i\n            min_swaps = min(min_swaps, count1[i])\n    \n    # Return the minimum number of swaps required or \"Both strings must have the same length.\" if the strings have different lengths\n    return min_swaps if first_index is not None else \"Both strings must have the same length.\""
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    diff = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            diff += 1\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) :\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            if str1[i] == '0' and str2[i] == '1':\n                swaps += (n - i)\n            elif str1[i] == '1' and str2[i] == '0':\n                swaps += i\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the input strings to binary numbers\n    bin1 = int(str1, 2)\n    bin2 = int(str2, 2)\n    \n    # Calculate the difference between the two binary numbers\n    diff = bin1 ^ bin2\n    \n    # Count the number of set bits in the difference\n    count = 0\n    while diff:\n        count += diff & 1\n        diff >>= 1\n        \n    # Calculate the minimum number of swaps required\n    swaps = diff.bit_length()\n    if count <= swaps:\n        min_swaps = count\n    else:\n        min_swaps = swaps\n        \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables to keep track of swaps and swap count\n    swaps = 0\n    swap_count = 0\n\n    # While num1 is not equal to num2, swap the digits and count the number of swaps\n    while num1!= num2:\n        # Calculate the bitwise XOR of num1 and num2\n        xor_result = num1 ^ num2\n\n        # Calculate the least significant bit of num1 and the most significant bit of num2\n        bit1 = xor_result & -xor_result\n        bit2 = xor_result ^ bit1\n\n        # Swap the bits of num1 and num2\n        num1 = num1 ^ bit1\n        num2 = num2 ^ bit2\n\n        # Count the number of swaps\n        swaps += 1\n\n        # Increment the swap count if both bits of the original numbers are swapped\n        if num1 & bit1!= num2 & bit2:\n            swap_count += 1\n\n    # Return the minimum number of swaps required to convert the two numbers\n    return swaps if swap_count == 0 else min(swaps, swap_count)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to lists of bits\n    lst1 = [int(bit) for bit in str1]\n    lst2 = [int(bit) for bit in str2]\n    \n    # Compare binary strings and count swaps\n    count = 0\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        total_size += sys.getsizeof(t)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    byte_count = 0\n    for i in tuple_list:\n        byte_count += sys.getsizeof(i)\n    return byte_count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # convert the tuple to bytes\n    byte_list = bytearray(tuple_list, 'utf-8')\n    # find the size in bytes\n    size = sys.getsizeof(byte_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # Initialize the left and right pointers of the first array\n    left1, right1 = 0, len(arr1) - 1\n    \n    # Initialize the left and right pointers of the second array\n    left2, right2 = 0, len(arr2) - 1\n    \n    # Initialize the kth element as -1\n    kth_element = -1\n    \n    # Loop until kth_element is found\n    while kth_element == -1:\n        \n        # If both arrays have elements, compare the elements\n        if left1 <= right1 and left2 <= right2:\n            \n            # If the current elements in both arrays are equal, compare their indices\n            if arr1[left1] == arr2[left2]:\n                if left1 == k - 1:\n                    kth_element = arr1[left1]\n                left1 += 1\n                left2 += 1\n            # If the current elements in both arrays are not equal, compare the smaller element from each array\n            else:\n                if arr1[left1] < arr2[left2]:\n                    kth_element = arr1[left1]\n                    left1 += 1\n                else:\n                    kth_element = arr2[left2]\n                    left2 += 1\n        \n        # If the first array has more elements, only consider elements from the first array\n        elif left1 <= right1:\n            kth_element = arr1[left1]\n            left1 += 1\n        \n        # If the second array has more elements, only consider elements from the second array\n        elif left2 <= right2:\n            kth_element = arr2[left2]\n            left2 += 1\n            \n    # Return the kth element\n    return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:  # arr1[i] == arr2[j]\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    # Return None if k is greater than the total number of elements in the arrays\n    if k > len(arr1) + len(arr2) - k:\n        return None\n    # If k is smaller than the total number of elements in the arrays,\n    # return None because the arrays are not sorted\n    if k < len(arr1) + len(arr2):\n        return None\n    # If k is greater than the total number of elements in both arrays,\n    # return the last element in the second array\n    return arr2[-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes three parameters: two sorted arrays and a value k.\n    The function returns the kth smallest element from the two sorted arrays.\n    '''\n\n    # Initialize two pointers, one for each array\n    i = 0\n    j = 0\n\n    # Traverse both arrays until the kth smallest element is found\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n\n    # If the array which is left has elements, return that array's kth smallest element\n    if i < len(arr1):\n        return arr1[i]\n    elif j < len(arr2):\n        return arr2[j]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): First sorted array.\n        arr2 (list): Second sorted array.\n        k (int): The kth element to find.\n\n    Returns:\n        int: The kth element from the given two sorted arrays.\n\n    Raises:\n        ValueError: If the input arrays are not of the same length.\n    \"\"\"\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Input arrays must have the same length.\")\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if k <= mid1:\n        return find_kth(arr1[:mid1], arr2[:mid2], k)\n    elif k <= mid1 + mid2:\n        return arr1[mid1]\n    else:\n        return find_kth(arr1[mid1 + 1:], arr2[mid2:], k - mid1 - mid2)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n\n    # Initialize two pointers to the left ends of the arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # If the elements are equal, move the pointers to the right\n            i += 1\n            j += 1\n\n    # Add the remaining elements of the first array to get the kth element\n    while i < len(arr1):\n        if k == 0:\n            return arr1[i]\n        i += 1\n        k -= 1\n\n    # Add the remaining elements of the second array to get the kth element\n    while j < len(arr2):\n        if k == 0:\n            return arr2[j]\n        j += 1\n        k -= 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # initialize the left and right pointers of the two arrays\n    left1 = 0\n    right1 = len(arr1) - 1\n    left2 = 0\n    right2 = len(arr2) - 1\n\n    # loop until one of the arrays becomes empty\n    while left1 <= right1 and left2 <= right2:\n        # if the elements at the left pointers of both arrays are equal, then the kth element must be between them\n        if arr1[left1] == arr2[left2]:\n            k -= 1\n            if k == 0:\n                return arr1[left1]\n            if k < 0:\n                k += right1 - left1 + 1\n                left1 += 1\n        # if the element at the left pointer of the first array is greater, then move the left pointer of the first array to the right\n        elif arr1[left1] > arr2[left2]:\n            left1 += 1\n        # if the element at the left pointer of the second array is greater, then move the left pointer of the second array to the right\n        else:\n            left2 += 1\n\n    # if the kth element is not found, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    len1 = len(arr1)\n    len2 = len(arr2)\n\n    while i < len1 and j < len2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return arr1[i] + arr2[j]\n            i += 1\n            k -= 1\n        else:\n            if k == 1:\n                return arr2[j]\n            elif k == 2:\n                return arr1[i] + arr2[j]\n            j += 1\n            k -= 2\n\n    if k == 1:\n        return arr1[i]\n    elif k == 2:\n        return arr1[i] + arr2[j]\n    else:\n        return None\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Converting the given number to a string\n    number_str = str(number)\n    # Calculating the sum of the digits raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** len(number_str) for digit in number_str)\n    # Comparing the original number with the sum of powers\n    return number == sum_of_powers"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    num_str = str(number)\n    num_len = len(num_str)\n    sum_of_squares = 0\n    temp_num = number\n    \n    while temp_num > 0:\n        digit = temp_num % 10\n        sum_of_squares += digit ** 3\n        temp_num //= 10\n        \n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    Checks if a number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(number)\n    sum_of_powers = 0\n    for i in range(len(num_str)):\n        power = len(num_str) - i - 1\n        digit = int(num_str[i])\n        sum_of_powers += digit ** power\n    \n    return sum_of_powers == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Initialize variables\n    sum = 0\n    temp = number\n    # Calculate sum of the cube of digits in the number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    # Check if the sum is equal to the original number\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    sum = 0\n    temp = num\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n        \n    return num == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the given number to a string\n    number_str = str(number)\n    # Initialize a counter variable\n    count = 0\n    # Iterate through each digit of the number string\n    for digit in number_str:\n        # Calculate the power of the digit\n        power = len(number_str) - number_str.index(digit) + 1\n        # Add the power of the digit to the counter variable\n        count += int(digit) ** power\n    # Check if the count is equal to the original number\n    if count == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \"\"\"\n    if number < 10:\n        return False\n\n    # convert the number to a string\n    number_str = str(number)\n\n    # find the sum of the cubes of each digit\n    total = 0\n    for digit in number_str:\n        total += int(digit) ** 3\n\n    # check if the total is equal to the original number\n    return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    # Find the sum of the cube of each digit in the number\n    digits_sum = sum(int(digit) ** 3 for digit in str(number))\n    \n    # Check if the sum is equal to the original number\n    return digits_sum == number"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables to store sum and average\n    sum_n = 0\n    average = 0\n    # loop through first n natural numbers\n    for i in range(1, number + 1):\n        # add each number to sum\n        sum_n += i\n        # calculate average\n        average = sum_n / number\n    # return sum and average\n    return sum_n, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count variables to zero\n    total = 0\n    count = 0\n\n    # loop through first n numbers and calculate sum and count\n    for i in range(number):\n        total += i\n        count += 1\n\n    # calculate the average\n    average = total / count\n\n    # print the sum and average\n    print(\"Sum:\", total)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_value = 0\n    count = 0\n    while count < number:\n        sum_value += count\n        count += 1\n    average = sum_value / number\n    return sum_value, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and average variables\n    sum = 0\n    count = 0\n    # iterate through the first n natural numbers and update sum and count variables\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    # calculate and return the average\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # iterate n times\n    for i in range(1, n+1):\n        # add current number to sum and increment count\n        sum += i\n        count += 1\n\n    # calculate average and return as tuple\n    avg = sum / count\n    return (sum, avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_ = 0\n    for i in range(1, number+1):\n        sum_ += i\n    average = sum_ / number\n    return sum_, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    while count < number:\n        total += count\n        count += 1\n    return total, total / number"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if it is even and False if it is odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return \"The given number is even.\"\n    else : \n        return \"The given number is odd.\""
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2 == 0)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of characters in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # find the first repeated character in the dictionary\n    for char in char_freq:\n        if char_freq[char] > 1:\n            return char\n    \n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each character\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # Find the first repeated character and its frequency\n    for char in str1:\n        if freq_dict[char] > 1:\n            return char, freq_dict[char]\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through the string and return the first character that appears more than once\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # Find the first character with a frequency greater than 1\n    for char, count in freq.items():\n        if count > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If no repeated character is found, it returns None.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Loop through each character in the string and update the frequency in the dictionary\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n\n    # Loop through the characters in the string again and find the first repeated character\n    for char in str1:\n        if freq[char] == 2:\n            return char\n\n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    num = 1\n    \n    while num <= n:\n        if num % 2 == 0 and all(num % i!= 0 for i in range(3, int(num ** 0.5) + 1, 2)):\n            lucid_nums.append(num)\n        num += 1\n    \n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid = []\n    for i in range(2, n+1):\n        if len(str(i)) == len(str(sum(i))):\n            lucid.append(i)\n\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n):\n        is_lucid = True\n        j = 2\n        while j * j <= i:\n            if i % j == 0:\n                is_lucid = False\n                break\n            j += 1\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n+1):\n        ludic = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                ludic = False\n                break\n        if ludic:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid_nums.append(i)\n        elif i == 2:\n            lucid_nums.append(i)\n        elif i % 2!= 0:\n            if i > 2:\n                lucid_nums.append(i)\n            elif i == 2:\n                lucid_nums.append(i)\n            else:\n                lucid_nums.append(i+2)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    num = 1\n    while num <= n:\n        if is_lucid(num):\n            ludic_numbers.append(num)\n        num += 1\n    return ludic_numbers\n\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a given number is a lucid number.\n    '''\n    return num == sum([int(digit) for digit in str(num)])"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize an empty list to store the lucid numbers\n    lucids = []\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Check if i is a lucid number\n        is_lucid = True\n        j = 2\n        while j * j <= i:\n            if i % j == 0:\n                is_lucid = False\n                break\n            j += 1\n        if is_lucid:\n            lucids.append(i)\n\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i**2, n + 1, i):\n                is_prime[j] = False\n\n    for i in range(2, n + 1):\n        if is_prime[i]:\n            lucid_numbers.append(i)\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number or not.\n    '''\n    lucid_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    for num in lucid_numbers:\n        if n % num == 0:\n            return False\n    return True"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word and join them back into a string\n    reversed_words =''.join([word[::-1] for word in words])\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words using the split() method\n    words = s.split()\n    # reverse the order of the words using reverse() method\n    words.reverse()\n    # join the reversed words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split()\n    return \" \".join(words[::-1])"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word and join them back into a string\n    return''.join(reversed(word) for word in words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into a list of words\n    words.reverse() # reverse the order of the words in the list\n    return''.join(words) # join the words back together with spaces in between"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    result = \" \".join(reversed_words)\n    return result\n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words = words[::-1]  # reverse the list of words using slicing\n    return''.join(words)  # join the words back together with spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    \n    # Reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    \n    # Join the words back into a string\n    s =''.join(words)\n    \n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    if is_prime(num):\n        return True\n    return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(prime_num(10)) # Output: True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if a given integer is a prime number or not.\n\n    Args:\n        num: An integer to check if it's a prime number or not.\n\n    Returns:\n        True if the given integer is a prime number, False otherwise.\n    \"\"\"\n\n    # if the number is less than 2, it's not a prime number\n    if num < 2:\n        return False\n\n    # loop through all numbers between 2 and the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        # if the number is divisible by i, it's not a prime number\n        if num % i == 0:\n            return False\n\n    # if the loop completes without finding a divisor, the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number, otherwise False.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number, otherwise False.\n    '''\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None, None, None\n    else:\n        match = matches.group(0)\n        start_index = match.start()\n        end_index = match.end()\n        return match, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        match = matches[0]\n        return match, 0, len(match)\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function finds all matches of a regex pattern in a given text.\n    The function returns a list of tuples where each tuple contains the matched substring, \n    a start index and an end index.\n    '''\n\n    # Compile the pattern to a regex object\n    pattern = re.compile(pattern)\n\n    # Find all matches of the pattern in the text\n    matches = pattern.findall(text)\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Iterate through each match and add it to the results list\n    for match in matches:\n        start, end = pattern.search(text).span()\n        results.append((match, start, end))\n\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        # Extract the literal string from the match object\n        literal = match.group()\n        # Return the literal string, start index and end index\n        return literal, match.start(), match.end()\n    # If no matches are found, return None\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        start, end = re.search(pattern, text).span()\n        return matches[0], start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return (n-1)*bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n*(n+1)//2"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a, b, c = 0, 1, 0\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    for i in range(1, n+1):\n        bell += 1/(i*2)\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and an integer L and returns a list with the same elements but the k'th element removed.\n    \"\"\"\n    # Create a copy of the list to avoid modifying the original one\n    list2 = list1[:]\n    \n    # Iterate through the list and remove the k'th element\n    for i in range(len(list2)-L+1):\n        list2.pop(i)\n        \n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Remove the kth element from a list.\n    \"\"\"\n    # Copy the list to avoid modifying it\n    list_copy = list1.copy()\n    # Calculate the index of the kth element\n    k_index = L - 1 if L < len(list_copy) else L\n    # Remove the kth element\n    del list_copy[k_index]\n    # Return the modified list\n    return list_copy"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # create a new list to store the result\n    result = []\n    # loop through the list\n    for i in range(len(list1)):\n        # if the current index is not equal to L-1, append the element to the new list\n        if i!= L-1:\n            result.append(list1[i])\n    # return the new list with the k'th element removed\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    n = len(list1)\n    if k > n:\n        return \"The value of k is greater than the length of the list.\"\n    elif k == n:\n        return []\n    else:\n        for i in range(k-1, n-1):\n            list1[i] = list1[i+1]\n        del list1[n-1]\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Counting the number of occurrences of each element in the list\n    count = [0] * len(list1)\n    for i in list1:\n        count[i] += 1\n\n    # Sorting the list in descending order of the frequency of each element\n    sorted_count = sorted(enumerate(count), key=lambda x: x[1], reverse=True)\n\n    # Removing the kth element from the list\n    kth_element = sorted_count[L-1][0]\n    list1.remove(kth_element)\n\n    # Returning the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # If length of list is less than k, return the list as it is.\n    if len(list1) < L:\n        return list1\n    \n    # Find the index of the k'th element.\n    k = 0\n    while k < L:\n        k += 1\n        index = k - 1\n    \n    # Remove the k'th element from the list and return the updated list.\n    list1.pop(index)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and a value of k, and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Remove the L-th element from the given list.\n\n    :param list1: List of elements.\n    :param L: The index of the element to remove.\n    :return: The list with the L-th element removed.\n    \"\"\"\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Get the number of columns in the matrix\n    num_cols = len(test_list[0])\n\n    # Initialize the maximum value to be the first element in then'th column\n    max_value = test_list[0][N-1]\n\n    # Loop through the remaining columns and find the maximum value in each column\n    for i in range(1, num_cols):\n        if test_list[0][i] > max_value:\n            max_value = test_list[0][i]\n\n    # Return the maximum value in then'th column\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # check if the list is a matrix\n    if len(test_list) == 0:\n        return None\n    \n    # get the number of columns in the matrix\n    num_cols = len(test_list[0])\n    \n    # check if N is valid\n    if N >= num_cols or N < 0:\n        return None\n    \n    # iterate through the rows of the matrix\n    max_val = 0\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if N - 1 >= len(row):\n            max_num = max(max_num, row[N - 1])\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(max_val, max(test_list[i]))\n        else:\n            max_val = max(max_val, test_list[i][N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for i in range(len(test_list)):\n        if i == 0:\n            max_num = test_list[i][N-1]\n        elif max_num < test_list[i][N-1]:\n            max_num = test_list[i][N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    max_num = 0\n\n    for row in test_list:\n        if row[N] > max_num:\n            max_num = row[N]\n\n    return max_num\n"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Convert the matrix to a list of lists of tuples\n    matrix = [tuple(row) for row in test_list]\n    \n    # Get the length of the first row\n    first_row_length = len(matrix[0])\n    \n    # Initialize the maximum value to be the first element of the first row\n    max_val = matrix[0][0]\n    \n    # Iterate over the remaining rows and columns\n    for i in range(1, len(matrix)):\n        for j in range(first_row_length):\n            # If the current value is greater than the maximum value, update the maximum value\n            if matrix[i][j] > max_val:\n                max_val = matrix[i][j]\n    \n    # Return the maximum value of then'th column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the number of rows in the matrix\n    rows = len(test_list)\n    \n    # Initialize a counter variable to keep track of the current column we're looking at\n    col_num = 0\n    \n    # Initialize a variable to store the maximum value found so far\n    max_val = float('-inf')\n    \n    # Loop through all rows in the matrix\n    for row in range(rows):\n        # If we've reached the desired column number, update the maximum value and move to the next column\n        if col_num == N-1:\n            max_val = max(max_val, max(test_list[row]))\n            col_num += 1\n        # Otherwise, increment the column number\n        else:\n            col_num += 1\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if N-1 < len(row):\n            max_val = max(max_val, row[N-1])\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        first_element = sublist[0]\n        second_element = sublist[1]\n        result.append((first_element, second_element))\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        first_elem = sublist[0]\n        second_elem = sublist[1]\n        merged_list.append([first_elem, second_elem])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize variables\n    cumulative_sum = 0\n    # Loop through the list and add the values to the cumulative sum variable\n    for value in test_list:\n        cumulative_sum += value\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    # Loop through each element of the list\n    for i in test_list:\n        # If the element is an integer, add it to the cumulative sum\n        if isinstance(i, int):\n            cum_sum += i\n        # If the element is a list, recursively call the function on it and add the result to the cumulative sum\n        elif isinstance(i, list):\n            cum_sum += cummulative_sum(i)\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize an empty list to store the cumulative sum\n    cum_sum = []\n    # loop through each tuple in the given list\n    for tup in test_list:\n        # loop through each value in the tuple and append the cumulative sum to the list\n        for val in tup:\n            cum_sum.append(val)\n    # return the list of cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input and returns the cumulative sum of all the values that are present in the list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cumulative_sum += val\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        cum_sum += tup[0]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize an empty list to store the cumulative sum of values\n    cum_sum = []\n    # Traverse through the tuple list and add the cumulative sum of each value to the list\n    for tup in test_list:\n        cum_sum.append(sum(tup))\n    # Return the cumulative sum list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        sum = 0\n        for num in num_tuple:\n            sum += num\n        average = sum / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        avg = total / count\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the averages\n    avg_list = []\n\n    # iterate over each tuple in the input tuple\n    for t in nums:\n        # calculate the average of the tuple elements and append it to the avg_list\n        avg = sum(t) / len(t)\n        avg_list.append(avg)\n\n    # return the avg_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        length = len(tup)\n        average = total/length\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        average = total/len(num_tuple)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    # Convert the tuple of tuples to a list of lists\n    nested_list = list(nums)\n\n    # Initialize a list to store the averages\n    averages = []\n\n    # Iterate over each nested list and calculate the average\n    for i in range(len(nested_list)):\n        average = sum(nested_list[i]) / len(nested_list[i])\n        averages.append(average)\n\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in range(len(nums)):\n        avg = sum(nums[i]) / len(nums[i])\n        average_list.append(avg)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        average = total / count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length!\")\n        return\n\n    # perform element wise modulo\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n\n    # return the result tuple\n    return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    \n    # perform element wise modulo using the modulo operator\n    modulo_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    \n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have same length.\")\n        return None\n    else:\n        result_tup = []\n        for i in range(len(test_tup1)):\n            result_tup.append(test_tup1[i] % test_tup2[i])\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([x % y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of the same length.\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    n = len(steps)\n    jumps = 0\n    prev_jump = 0\n\n    # Loop through the steps\n    for i in range(n):\n        # If the current step is closer to the destination\n        if abs(steps[i][0] - d) < abs(steps[i-1][0] - d):\n            # Increment the number of jumps\n            jumps += 1\n            # Update the previous jump\n            prev_jump = i\n\n    # Return the number of jumps required to reach the destination\n    return jumps + prev_jump"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    current_point = (0,0) # starting point\n    visited = {(0,0)} # visited points\n    step_count = 0 # number of steps taken\n    # iterate through steps\n    while step_count < steps:\n        # calculate next point\n        next_point = (current_point[0] + d, current_point[1])\n        # check if next point is on the grid\n        if 0 <= next_point[0] < steps and 0 <= next_point[1] < steps:\n            # check if next point is not visited\n            if next_point not in visited:\n                # add next point to visited list\n                visited.add(next_point)\n                # increment step count\n                step_count += 1\n                # check if next point is goal point\n                if next_point == (steps-1,0):\n                    # return step count\n                    return step_count\n    # if no solution is found, return None\n    return None"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    steps = steps\n    d = d\n    min_jumps = 0\n\n    # Loop through all possible jumps\n    for i in range(1, steps+1):\n        # Check if the current point can be reached from origin with d jumps\n        if i >= d:\n            # Check if the current point is at point (d, 0)\n            if i == d:\n                min_jumps += 1\n            # Check if the current point is at point (d, i-d)\n            elif i - d < d:\n                min_jumps += 1\n\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    # Calculate the maximum number of steps required to reach (d, 0) from origin\n    max_steps = int(d/steps)\n    # Calculate the minimum number of jumps required to reach (d, 0) from origin\n    min_jumps = max_steps\n    # Loop through each jump step\n    for i in range(1, steps+1):\n        # Calculate the next step\n        next_step = (i*d)//steps\n        # Check if the next step is greater than the current maximum step\n        if next_step > max_steps:\n            max_steps = next_step\n        # Check if the next step is less than the current minimum jump\n        if next_step < min_jumps:\n            min_jumps = next_step\n    # Return the minimum number of jumps required to reach (d, 0) from origin\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Define a function to check if a point can be reached in given number of steps\n    def can_reach(x, y, steps):\n        \"\"\"\n        Helper function to check if a point can be reached in given number of steps.\n        \"\"\"\n        for i in range(1, steps+1):\n            if y == 0:\n                return True\n            y -= 1\n        return False\n\n    # Initialize the current point to (0, 0) and the number of steps required to reach the target point\n    x, y, steps_taken = 0, 0, 0\n\n    # Check if the point (0, 0) can be reached in given number of steps\n    if can_reach(x, y, steps):\n        # Initialize the count of jumps required and the maximum number of jumps required\n        jumps, max_jumps = 0, 0\n\n        # Loop until the point (d, 0) is reached in the given number of steps\n        while can_reach(x, y, steps):\n            # Increment the number of steps taken\n            steps_taken += 1\n\n            # Check if the current position can be reached in one step\n            if x == d and y == 0:\n                # Increment the count of jumps required and update the maximum number of jumps if required\n                jumps += 1\n                max_jumps = max(max_jumps, jumps)\n                return max_jumps\n            elif x > d:\n                # If the current position is greater than the target position, move upwards by one\n                y += 1\n            else:\n                # If the current position is less than or equal to the target position, move rightwards by one\n                x += 1\n\n        # If the point (d, 0) is not reached in the given number of steps, return -1\n        return -1\n    else:\n        # If the point (0, 0) is not reachable in the given number of steps, return 0\n        return 0"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Args:\n    steps (int): number of steps required to reach the point of form (d, 0) from origin\n    d (int): distance to reach the point of form (d, 0) from origin\n\n    Returns:\n    int: number of jumps required to reach the point of form (d, 0) from origin\n\n    \"\"\"\n    steps_left = steps\n    jumps = 0\n\n    while steps_left > 0:\n        steps_left -= 1\n        jumps += 1\n        if steps_left >= d:\n            steps_left -= d\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    curr_pos = 0\n    jumps = 0\n    \n    # Loop through the number of steps\n    for i in range(steps):\n        # Update the current position\n        if curr_pos == 0:\n            curr_pos += 1\n        else:\n            curr_pos += d\n        \n        # Check if the position is at (d, 0)\n        if curr_pos == d:\n            jumps += 1\n    \n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables for step count and current position\n    step_count = 0\n    current_pos = (0, 0)\n\n    # Loop through all positions (x, y)\n    for i in range(steps):\n        # Calculate next position after jump\n        next_pos = (current_pos[0] + d[0], current_pos[1])\n\n        # Check if next position is outside the boundary\n        if next_pos[0] < 0 or next_pos[1] < 0 or next_pos[0] >= d[1] or next_pos[1] >= d[2]:\n            # If outside the boundary, return -1 to indicate failure\n            return -1\n\n        # If next position is the target point (d, 0), increment step count and move to next position\n        if next_pos == (d[0], 0):\n            step_count += 1\n            current_pos = next_pos\n\n    # If target point is not reached, return -1 to indicate failure\n    if current_pos!= (d[0], 0):\n        return -1\n\n    # If target point is reached, return the step count\n    return step_count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 0\n    while i < len(steps):\n        if steps[i][0] == d:\n            jumps += 1\n            break\n        elif steps[i][0] < d:\n            i += 1\n        else:\n            i += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps <= 0 or d <= 0:\n        return -1\n    \n    jumps = 0\n    left = 0\n    right = steps - d\n    \n    while left <= right:\n        jumps += 1\n        left += 1\n        right -= 1\n    \n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have equal length\")\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # check if the lists have equal length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    # divide the lists element wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the two lists are of the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists should be of the same length.\")\n        return\n    \n    # initialize an empty list to store the result\n    result = []\n    \n    # loop through the two lists and divide each element\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    # return the result\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of the two lists are equal\n    if len(nums1) == len(nums2):\n        # Divide each element of the lists element wise\n        result = [num1 / num2 for num1, num2 in zip(nums1, nums2)]\n        return result\n    else:\n        # Raise an error if the length of the lists are not equal\n        raise ValueError('The length of the lists must be equal.')"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Define a regular expression to match all numbers\n    num_pattern = re.compile(r'\\d+')\n    # Split the string by whitespace\n    words = test_str.split()\n    # Define a list to store the words with numbers\n    nums_words = []\n    # Loop through each word\n    for word in words:\n        # If the word matches a number pattern, append it to the nums_words list\n        if num_pattern.match(word):\n            nums_words.append(word)\n        # Otherwise, append it to the original list of words\n        else:\n            nums_words.append(word)\n    # Convert the nums_words list back to a string and return it\n    return''.join(nums_words)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    number_list = []\n    for char in test_str:\n        if char.isdigit():\n            number_list.append(char)\n    if len(number_list) > 0:\n        number_str = ''.join(number_list)\n        return test_str + number_str\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    numbers.sort(reverse=True)\n    return ''.join(numbers) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # convert the string to a list of characters\n    chars = list(test_str)\n\n    # initialize a variable to store the count of numbers\n    count = 0\n\n    # iterate through the characters in the list\n    for char in chars:\n        # check if the character is a number\n        if char.isdigit():\n            # increment the count of numbers\n            count += 1\n        # if the character is not a number, append it to the end of the list\n        else:\n            # remove the character from the list\n            chars.remove(char)\n            # append the character to the beginning of the list\n            chars.insert(0, char)\n\n    # join the list of characters into a single string\n    result = ''.join(chars)\n\n    # return the modified string with the numbers moved to the end\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    num_pattern = r'\\d+' # regular expression to match one or more digits\n    num_match = re.findall(num_pattern, test_str) # find all matches of the regex pattern in the input string\n    \n    if num_match:\n        # join all the numbers together and move them to the end of the string\n        num_str = ''.join(num_match)\n        num_index = len(test_str) - len(num_str)\n        num_str_reversed = num_str[::-1]\n        result = test_str[:num_index] + num_str_reversed + test_str[num_index:]\n        return result\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if num_list:\n        return test_str[-len(num_list):] + ''.join(num_list)\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    \n    if num_list:\n        num_str = ''.join(num_list)\n        return num_str + test_str[:-len(num_list)]\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n\n    nums.sort(reverse=True)\n    nums_str = ''.join(nums)\n\n    return test_str + nums_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Create an empty list to store the numbers\n    num_list = []\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, add it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # Otherwise, add the character to the end of the string\n        else:\n            test_str += char\n    \n    # Concatenate the num_list to the end of the string and return it\n    return test_str + ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # initialize two variables for the left and right pointers\n    left, right = 0, len(test_str)-1\n\n    # loop through the string until we reach the left pointer\n    while left <= right:\n\n        # check if the current character is a number\n        if test_str[left].isdigit():\n\n            # move the number to the right until we reach a non-number character\n            while left <= right and not test_str[left].isdigit():\n                test_str = test_str[:left] + test_str[left+1:]\n                left += 1\n\n            # move the number to the left until we reach a non-number character\n            while left <= right and not test_str[right].isdigit():\n                test_str = test_str[:right] + test_str[right-1:]\n                right -= 1\n\n            # move the number to the right until we reach a non-number character\n            while left <= right and not test_str[left].isdigit():\n                test_str = test_str[:left] + test_str[left+1:]\n                left += 1\n\n            # move the number to the left until we reach a non-number character\n            while left <= right and not test_str[right].isdigit():\n                test_str = test_str[:right] + test_str[right-1:]\n                right -= 1\n\n        # move the left pointer to the right until we reach a non-number character\n        while left <= right and not test_str[left].isdigit():\n            left += 1\n\n    # return the modified string\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # sort the list in ascending order\n    a.sort()\n    # initialize variables\n    max_size = 0\n    current_size = 0\n    # loop through the list\n    for i in range(len(a)):\n        # check if current number is divisible by i+1\n        if a[i] % (i+1) == 0:\n            current_size += 1\n        else:\n            # if not divisible, update max_size and current_size\n            if current_size > max_size:\n                max_size = current_size\n            current_size = 0\n    # check if current_size is greater than max_size\n    if current_size > max_size:\n        max_size = current_size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n    \n    # Initialize variables for the largest subset and the current subset\n    largest = 0\n    current_subset = [a[0]]\n    for i in range(1, len(a)):\n        # If the current number is divisible by the next number, add it to the current subset and increase the size of the largest subset if needed\n        if a[i] % current_subset[-1] == 0:\n            current_subset.append(a[i])\n            largest = max(largest, len(current_subset))\n        # If the current number is not divisible by the next number, start a new current subset\n        else:\n            current_subset = [a[i]]\n    \n    # Return the largest subset size\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list\n    a.sort()\n    # Initialize variables\n    max_size = 0\n    current_size = 0\n    # Iterate over the list\n    for i in range(len(a)):\n        # If the current number is divisible by the previous number, add it to the current subset\n        if a[i] % a[i - 1] == 0:\n            current_size += 1\n        # Otherwise, start a new subset\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 1\n    # Add the final subset to the maximum size\n    max_size = max(max_size, current_size)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    # Initialize variables to keep track of the current largest subset and the current subset\n    current_largest_subset = 1\n    current_subset = 1\n    # Loop through the list of numbers\n    for num in a:\n        # If the number is not divisible by the current subset, add 1 to the current subset\n        if num % current_subset!= 0:\n            current_subset += 1\n            # If the current subset is larger than the current largest subset, update the largest subset\n            if current_subset > current_largest_subset:\n                current_largest_subset = current_subset\n    # Return the largest subset found\n    return current_largest_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # First, sort the input list in ascending order\n    a.sort()\n\n    # Initialize the current largest subset to be 0\n    current_largest = 0\n\n    # Initialize two pointers, i and j, at the beginning of the list\n    i = 0\n    j = 0\n\n    # Iterate through the list using two nested loops\n    while j < len(a):\n        # Calculate the difference between the next element in the list and the current element\n        diff = a[j] - a[i]\n\n        # If the difference is not divisible by 2, increment i and continue\n        if diff % 2!= 0:\n            i += 1\n            continue\n\n        # If the difference is divisible by 2, update the current largest subset to the maximum of the current largest subset and the length of the current sublist\n        current_largest = max(current_largest, j - i + 1)\n\n        # Increment j and continue\n        j += 1\n\n    # Return the current largest subset\n    return current_largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize the largest subset size to 0\n    size = 0\n\n    # iterate over the list and find the size of the largest subset\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] % a[j] == 0:\n                size = max(size, j - i + 1)\n\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [[0]*n for i in range(n)]\n\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                dp[i][j] = dp[i][j-1] + 1\n                if dp[i][j] > dp[i][i]:\n                    dp[i][i] = dp[i][j]\n\n    return dp[0][n-1]"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Create a dictionary to store the count of each number in the list\n    count_dict = {}\n    for num in a:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Sort the dictionary by the number of occurrences\n    sorted_count_dict = dict(sorted(count_dict.items(), key=lambda item: item[1], reverse=True))\n\n    # Initialize variables to store the size of the largest subset and the indices of the numbers in the subset\n    max_subset_size = 0\n    subset_indices = []\n\n    # Iterate through the sorted dictionary\n    for num, count in sorted_count_dict.items():\n        # Check if the number is divisible by 2\n        if num % 2 == 0:\n            # Check if the count of the number in the subset is greater than or equal to the count in the list\n            if count >= count_dict[num + 1]:\n                # If the count of the number in the subset is greater than or equal to the count in the list,\n                # update the size of the largest subset and the indices of the numbers in the subset\n                max_subset_size = max(max_subset_size, count + 1)\n                subset_indices = [num] + subset_indices\n\n            # Check if the count of the number in the subset is greater than the count in the list\n            elif count > 0:\n                # If the count of the number in the subset is greater than the count in the list,\n                # update the size of the largest subset and the indices of the numbers in the subset\n                max_subset_size = max(max_subset_size, count)\n                subset_indices = [num] + subset_indices\n\n            # If the count of the number in the subset is less than or equal to 0,\n            # update the size of the largest subset and the indices of the numbers in the subset\n            else:\n                # If the count of the number in the subset is less than or equal to 0,\n                # update the size of the largest subset and the indices of the numbers in the subset\n                max_subset_size = max(max_subset_size, count_dict[num + 1])\n                subset_indices = [num] + subset_indices\n\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    pairs = []\n\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            pairs.append((a[i], a[j]))\n\n    pairs.sort(key=lambda x: (-x[0] % x[1], -x[1] % x[0]))\n\n    max_size = 0\n    current_size = 0\n\n    for pair in pairs:\n        current_size += pair[0] % pair[1]\n        max_size = max(max_size, current_size)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a list of sets to store the subsets\n    subsets = []\n    \n    # Iterate through the list of numbers\n    for num in a:\n        # Create a new set for the current subset\n        subset = set()\n        \n        # Iterate through the list of numbers again\n        for other_num in a:\n            # Add the smaller number to the subset if it is divisible by the larger number\n            if other_num % num == 0:\n                subset.add(other_num)\n        \n        # Add the subset to the list of subsets\n        subsets.append(subset)\n    \n    # Find the largest subset in the list\n    largest_subset_size = 0\n    for subset in subsets:\n        if len(subset) > largest_subset_size:\n            largest_subset_size = len(subset)\n    \n    # Return the size of the largest subset\n    return largest_subset_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of the same size and returns their median.\n    \"\"\"\n    # Concatenate the two lists\n    arr = arr1 + arr2\n    \n    # Sort the concatenated list\n    arr.sort()\n    \n    # Find the median index\n    median_index = n // 2\n    \n    # Return the median\n    return arr[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # check if the two lists are of same size\n    if len(arr1)!= len(arr2):\n        print(\"Error: The two lists must have same size.\")\n        return None\n    \n    # concatenate the two lists\n    combined_list = arr1 + arr2\n    \n    # sort the combined list\n    sorted_list = sorted(combined_list)\n    \n    # find the median\n    if n % 2 == 0:\n        # if the median is at index n//2\n        median = (sorted_list[n//2-1] + sorted_list[n//2]) / 2\n    else:\n        # if the median is at index (n+1)//2\n        median = sorted_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into one\n    merged_arr = arr1 + arr2\n    \n    # Calculate the median index\n    mid = n // 2\n    \n    # If the length of the merged list is odd, the median index is the middle index\n    if n % 2 == 1:\n        median_index = mid\n    else:\n        # If the length of the merged list is even, we need to find the average of the middle two indexes\n        median_index = (mid - 1) // 2\n    \n    # Sort the merged list\n    merged_arr.sort()\n    \n    # Return the median value\n    return merged_arr[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    if i == n:\n        return arr2[j]\n    else:\n        return arr1[i - 1]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_arr = sorted(merged_arr)\n    \n    # Calculate the length of the list\n    length = len(sorted_arr)\n    \n    # Calculate the median index\n    median_index = length // 2\n    \n    # If the length of the list is odd, the median is the middle element\n    if length % 2 == 1:\n        return sorted_arr[median_index]\n    \n    # If the length of the list is even, the median is the average of the middle two elements\n    else:\n        # Calculate the indices of the middle two elements\n        left_index = median_index - 1\n        right_index = median_index\n        \n        # Return the average of the middle two elements\n        return (sorted_arr[left_index] + sorted_arr[right_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Sort the two lists\n    arr1.sort()\n    arr2.sort()\n\n    # Calculate the length of the two lists\n    length = len(arr1)\n\n    # If the length of the lists is odd, the median is the middle element\n    if length % 2 == 1:\n        median = arr1[length//2]\n    # If the length of the lists is even, the median is the average of the two middle elements\n    else:\n        median = (arr1[length//2] + arr1[length//2-1]) // 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # merge the two lists and sort it\n    arr = arr1 + arr2\n    arr.sort()\n\n    # find the median\n    if n % 2 == 0:\n        median = (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Combine the two sorted lists\n    combined_list = arr1 + arr2\n\n    # Find the middle index of the combined list\n    mid = n // 2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    # If the length of the combined list is odd, return the middle element\n    if n % 2 == 1:\n        return combined_list[mid]\n\n    # If the length of the combined list is even, return the average of the two middle elements\n    else:\n        return (combined_list[mid - 1] + combined_list[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    # Concatenate the two sorted lists\n    arr = arr1 + arr2\n\n    # Sort the concatenated list\n    arr.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        median = (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted arrays into a single sorted array\n    merged = arr1 + arr2\n    merged.sort()\n    \n    # Determine the median index\n    median_index = n // 2\n    \n    # Return the median value\n    return merged[median_index]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Computes the nth power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The power to which each number should be raised.\n\n    Returns:\n        list: A list of the nth powers of each number in the input list.\n\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the string to uppercase\n    string = string.upper()\n    # Return the uppercase string\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = \"\"\n    for char in string:\n        if char.isupper():\n            upper_string += char\n    return upper_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # getting the length of the list\n    length = len(newList)\n    \n    # swapping the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    # returning the new list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    else:\n        # Interchange the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Checking if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    # Swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # Swap the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Taking the length of the list\n    length = len(newList)\n    # Finding the last element of the list\n    lastElement = newList[length-1]\n    # Finding the first element of the list\n    firstElement = newList[0]\n    # Interchanging the first and last element\n    newList[0] = lastElement\n    newList[length-1] = firstElement\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: \n        return newList\n    \n    # get the last and second last elements of the list\n    last = newList[-1]\n    second_last = newList[-2]\n    \n    # replace the last and second last elements with each other\n    newList[-1] = second_last\n    newList[-2] = last\n    \n    # return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return \"List should have at least two elements\"\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    area = 0.5 * pi * r ** 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculating the semi-perimeter of the circle\n    semi_perimeter = 2 * r\n    \n    # finding the areas of all triangles with bases a, b, and c\n    a = semi_perimeter * (semi_perimeter + 1) / 2\n    b = r * (r + 1)\n    c = (semi_perimeter + r) * (semi_perimeter - r) / 2\n    \n    # finding the area of the largest triangle\n    area = max(a, b, c)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 2*r\n    b = math.sqrt(3)*r\n    area = a + b\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = math.pi * r ** 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    area = 0\n    \n    # Check if radius is valid\n    if r < 0:\n        print(\"Invalid radius value\")\n        return None\n    \n    # Calculate circumference of semicircle\n    c = 2 * math.pi * r\n    \n    # Calculate the sides of the triangle\n    s = math.sqrt(3) * r\n    \n    # Calculate the area of the triangle\n    area = math.sqrt(3) / 4 * s * c\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the semi-perimeter of the semicircle\n    semi_perimeter = 2*r\n    \n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    area = semi_perimeter*(semi_perimeter-1)*(semi_perimeter-2)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # formula to calculate area of largest triangle\n    area = (3 * r ** 2) / (4 * math.tan(math.pi / 3))\n\n    # return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Radius of the semicircle\n    semicircle_radius = r\n    \n    # Area of the largest triangle that can be inscribed in a semicircle with radius r\n    largest_triangle_area = semicircle_radius * (3 * math.sin(math.pi / 3))\n    \n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Convert radius to radians\n    r = math.radians(r)\n\n    # Calculate the semi-perimeter of the triangle\n    s = 2 * r\n\n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - math.sin(r)) * (s - math.cos(r)) * (s - math.tan(r)))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # convert radius to radians\n    r_rad = r * (math.pi/180)\n    # use Heron's formula to find the semi-perimeter of the largest triangle inscribed in a semicircle\n    a = r_rad\n    b = 2 * r_rad\n    c = math.sqrt(a**2 + b**2)\n    # find the length of the longest side of the largest triangle\n    s = (a + b + c) / 2\n    # find the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s-a) * (s-b) * (s-c))\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    Args:\n    array (list): A sorted list of natural numbers.\n\n    Keyword Args:\n    start (int): The starting index of the search range. Default is 0.\n    end (int): The ending index of the search range. If None, then the function will search until the end of the array. Default is None.\n\n    Returns:\n    int: The smallest missing number.\n\n    Raises:\n    TypeError: If the input array is not a list.\n    ValueError: If the input array is empty.\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list.\")\n\n    # Check if the input array is empty\n    if len(array) == 0:\n        raise ValueError(\"The input list cannot be empty.\")\n\n    # Check if the starting index is valid\n    if start < 0 or start >= len(array):\n        raise ValueError(\"The starting index is out of range.\")\n\n    # Check if the ending index is valid\n    if end is not None:\n        if end < start or end >= len(array):\n            raise ValueError(\"The ending index is out of range.\")\n\n    # Find the largest number in the array\n    max_num = array[-1]\n\n    # Initialize the first missing number\n    first_missing = max_num + 1\n\n    # Iterate through the array and find the missing numbers\n    for i in range(start, end if end is not None else len(array)):\n        if array[i]!= i:\n            first_missing = i\n            break\n\n    return first_missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n        end = len(array)-1\n    if end < start:\n        return None\n    elif array[end] == end:\n        return find_First_Missing(array,start,end-1)\n    elif array[start] == start:\n        return find_First_Missing(array,start+1,end)\n    else:\n        return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = max(array)\n    \n    for i in range(start, end+1):\n        if i not in array:\n            return i\n    \n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    # If the array is empty, return None\n    if not array:\n        return None\n\n    # Find the length of the array\n    length = len(array)\n\n    # Check if the start and end values are valid\n    if start < 0 or start >= length:\n        start = 0\n    if end is None or end >= length:\n        end = length - 1\n    if start > end:\n        return None\n\n    # Initialize the smallest missing number to the start value\n    smallest_missing = start\n\n    # Loop through the array and compare each number with the smallest missing number\n    for i in range(start, end + 1):\n        if i == array[i]:\n            smallest_missing = i + 1\n            break\n\n    # Return the smallest missing number\n    return smallest_missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the first missing number in a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i] == i:\n            continue\n        elif array[i] < i:\n            return i\n        else:\n            return i+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number in the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Find the maximum value in the array\n    max_value = max(array)\n    \n    # If the end value is not given, set it to the maximum value\n    if end is None:\n        end = max_value\n    \n    # Initialize the current missing number to the start value\n    current_missing = start\n    \n    # Loop through the array and check if each number is less than or equal to the current missing number\n    for num in array:\n        if num <= current_missing:\n            current_missing += 1\n            \n    # If the current missing number is greater than the maximum value, return the minimum value in the array\n    if current_missing > max_value:\n        return min(array)\n    \n    # If the current missing number is equal to the maximum value, return the next number after the maximum value\n    else:\n        return current_missing + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the first missing number in a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array)\n\n    # check if the array is sorted\n    if all(array[i] < array[i + 1] for i in range(len(array) - 1)):\n        for i in range(start, end):\n            if array[i]!= i + 1:\n                return i + 1\n        return end + 1\n    else:\n        raise ValueError(\"The array is not sorted.\")"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    for num in range(start, end + 1):\n        if num not in array:\n            return num"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n    '''\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        sub.append((x-1, y))\n    if x < 10:\n        sub.append((x+1, y))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < 10:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(1, len(ele)):\n        if sub == []:\n            if abs(ele[i][0] - ele[0][0]) == abs(ele[i][1] - ele[0][1]):\n                sub.append((ele[i][0], ele[i][1]))\n        else:\n            if abs(ele[i][0] - sub[-1][0]) == abs(ele[i][1] - sub[-1][1]):\n                sub.append((ele[i][0], ele[i][1]))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    dirs = [(-1,0), (1,0), (0,-1), (0,1)]\n    adjs = []\n    for d in dirs:\n        nx, ny = x+d[0], y+d[1]\n        if (0<=nx<10 and 0<=ny<10) and (nx,ny) not in sub:\n            adjs.append((nx,ny))\n    return adjs"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function takes a tuple of coordinates (x, y) as input and returns a list of all adjacent coordinates\n    of that coordinate. The adjacent coordinates are coordinates that have the same row and column, as well as\n    those with the same row but a different column.\n\n    Parameters:\n    ele (tuple): A tuple of coordinates (x, y)\n    sub (list, optional): An optional list to store the sub-lists of adjacent coordinates. Defaults to [].\n\n    Returns:\n    list: A list of tuples representing the adjacent coordinates.\n    \"\"\"\n    x, y = ele\n    adj_coords = []\n    # Add the current coordinates to the sub-list\n    sub.append(ele)\n    # Add the coordinates above and below if they exist within the boundaries of the matrix\n    if y > 0:\n        adj_coords.append((x, y-1))\n    if y < N-1:\n        adj_coords.append((x, y+1))\n    # Add the coordinates to the right and left if they exist within the boundaries of the matrix\n    if x > 0:\n        adj_coords.append((x-1, y))\n    if x < N-1:\n        adj_coords.append((x+1, y))\n    # Remove duplicates and sort the sub-list\n    adj_coords = list(set(adj_coords))\n    adj_coords.sort()\n    # Add the sub-list to the main list of adjacent coordinates\n    sub.extend(adj_coords)\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Extract the row and column coordinates of the given coordinate tuple\n    row, col = ele\n\n    # Define the directional offsets for the adjacent coordinates\n    dx = [1, 0, -1, 0]\n    dy = [0, 1, 0, -1]\n\n    # Loop through all possible adjacent coordinates and add them to the list of subsets\n    for i in range(4):\n        new_row = row + dy[i]\n        new_col = col + dx[i]\n        if 0 <= new_row < 10 and 0 <= new_col < 10 and (new_row, new_col) not in sub:\n            sub.append((new_row, new_col))\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # extract the x and y coordinates of the given element\n    x, y = ele\n\n    # create a list of adjacent elements\n    adj_list = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n\n    # create a list of adjacent coordinate tuples\n    adj_coord = [(a, b) for a, b in adj_list]\n\n    # add the current element to the sublist and add all the adjacent elements to the sublist recursively\n    sub.append(ele)\n    for a, b in adj_coord:\n        if (a, b) not in sub:\n            adjac((a, b), sub)\n\n    # return the final list of adjacent coordinate tuples\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    def is_valid(row, col, nrows, ncols):\n        return 0 <= row < nrows and 0 <= col < ncols\n\n    def dfs(row, col, nrows, ncols):\n        if is_valid(row, col, nrows, ncols):\n            return [row, col] + dfs(row + 1, col, nrows, ncols) + dfs(row - 1, col, nrows, ncols) + dfs(row, col + 1, nrows, ncols) + dfs(row, col - 1, nrows, ncols)\n        else:\n            return []\n\n    adj_coords = dfs(*ele, nrows, ncols)\n    return sub + adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(len(ele)):\n        for j in range(len(ele)):\n            if i!= j:\n                adj.append((i,j))\n                sub.append((ele[i], ele[j]))\n    return adj, sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if len(ele) == 2:\n        x, y = ele\n        adj_coords = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n        adj_coords = [tuple(coord) for coord in adj_coords if 0 <= coord[0] < 10 and 0 <= coord[1] < 10]\n        sub.append(adj_coords)\n    else:\n        for sub_ele in ele:\n            sub.append(adjac(sub_ele, sub))\n    return sub[0]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 9:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 9:\n        adj.append((x, y+1))\n    return adj + sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # convert the string to lowercase to make it case-insensitive\n    text = text.lower()\n    # split the string into individual characters\n    characters = list(text)\n    # loop through each character\n    for i in range(len(characters)):\n        # check if the character is a whitespace character\n        if characters[i].isspace():\n            # if it is, replace it with an underscore\n            characters[i] = '_'\n        # check if the character is an underscore\n        elif characters[i] == '_':\n            # if it is, replace it with a whitespace\n            characters[i] =''\n    # join the characters back into a string\n    new_text = ''.join(characters)\n    # return the modified string\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the text into words\n    words = text.split()\n\n    # Loop through each word\n    for i in range(len(words)):\n        # If the word contains a space, replace it with an underscore\n        if'' in words[i]:\n            words[i] = words[i].replace(' ', '_')\n        # If the word contains an underscore, replace it with a space\n        elif '_' in words[i]:\n            words[i] = words[i].replace('_','')\n\n    # Join the words back into a string\n    result =''.join(words)\n\n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert all spaces to underscores\n    text = text.replace(\" \", \"_\")\n    # Convert all underscores to spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            new_text += \"_\"\n        elif text[i] == \"_\":\n            new_text += \" \"\n        else:\n            new_text += text[i]\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list.pop(zero_index)\n        for i in range(zero_index, len(num_list)):\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    # Find the index of the first non-zero element\n    first_non_zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            first_non_zero_index = i\n            break\n    # If there are no non-zero elements, return the original list\n    if first_non_zero_index == -1:\n        return num_list\n    # Create a new list without the first non-zero element\n    new_list = num_list[:first_non_zero_index]\n    # Copy all the non-zero elements to the end of the new list\n    for i in range(first_non_zero_index, len(num_list)):\n        new_list.append(num_list[i])\n    # Return the new list\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # Initialize two pointers, one at the beginning of the list and one at the end\n    # and compare the elements at both pointers. Move the element at the beginning\n    # pointer to the end pointer if the element is not zero.\n    i = 0\n    j = len(num_list) - 1\n\n    while i <= j:\n        if num_list[i]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n        elif num_list[i] == 0:\n            i += 1\n\n    # Print the final list\n    print(num_list)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n            zero_index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # create a copy of the list to avoid modifying the original list\n    num_list_copy = num_list.copy()\n    \n    # iterate through the list and move all zeroes to the end\n    for i in range(len(num_list_copy)):\n        if num_list_copy[i] == 0:\n            for j in range(i+1, len(num_list_copy)):\n                if num_list_copy[j]!= 0:\n                    num_list_copy[i], num_list_copy[j] = num_list_copy[j], num_list_copy[i]\n                    break # break out of the inner loop since we've moved an element to the correct position\n    \n    return num_list_copy"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n            zero_index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize two pointers i and j to the start and end of the list respectively\n    i = 0\n    j = len(num_list) - 1\n\n    # loop while i is less than j\n    while i < j:\n        # check if the current element at i is zero\n        if num_list[i] == 0:\n            # move the zero to the end of the list by swapping with the element at j\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            # increment the value of j\n            j -= 1\n        else:\n            # increment i\n            i += 1\n\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and a number n as input, and returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of first and last element of the list\n    xor_sum = arr[0] ^ arr[n-1]\n    \n    # XOR of second and second to last element of the list\n    xor_sum = xor_sum ^ arr[1] ^ arr[n-2]\n    \n    # XOR of third and third to last element of the list\n    xor_sum = xor_sum ^ arr[2] ^ arr[n-3]\n    \n    # XOR of fourth and fourth to last element of the list\n    xor_sum = xor_sum ^ arr[3] ^ arr[n-4]\n    \n    # XOR of fifth and fifth to last element of the list\n    xor_sum = xor_sum ^ arr[4] ^ arr[n-5]\n    \n    # XOR of sixth and sixth to last element of the list\n    xor_sum = xor_sum ^ arr[5] ^ arr[n-6]\n    \n    # XOR of seventh and seventh to last element of the list\n    xor_sum = xor_sum ^ arr[6] ^ arr[n-7]\n    \n    # XOR of eighth and eighth to last element of the list\n    xor_sum = xor_sum ^ arr[7] ^ arr[n-8]\n    \n    # XOR of ninth and ninth to last element of the list\n    xor_sum = xor_sum ^ arr[8] ^ arr[n-9]\n    \n    # XOR of tenth and tenth to last element of the list\n    xor_sum = xor_sum ^ arr[9] ^ arr[n-10]\n    \n    # XOR of eleventh and eleventh to last element of the list\n    xor_sum = xor_sum ^ arr[10] ^ arr[n-11]\n    \n    # XOR of twelfth and twelfth to last element of the list\n    xor_sum = xor_sum ^ arr[11] ^ arr[n-12]\n    \n    # XOR of thirteenth and thirteenth to last element of the list\n    xor_sum = xor_sum ^ arr[12] ^ arr[n-13]\n    \n    # XOR of fourteenth and fourteenth to last element of the list\n    xor_sum = xor_sum ^ arr[13] ^ arr[n-14]\n    \n    # XOR of fifteenth and fifteenth to last element of the list\n    xor_sum = xor_sum ^ arr[14] ^ arr[n-15]\n    \n    # XOR of sixteenth and sixteenth to last element of the list\n    xor_sum = xor_sum ^ arr[15] ^ arr[n-16]\n    \n    # XOR of seventeenth and seventeenth to last element of the list\n    xor_sum = xor_sum ^ arr[16] ^ arr[n-17]\n    \n    # XOR of eighteenth and eighteenth to last element of the list\n    xor_sum = xor_sum ^ arr[17] ^ arr[n-18]\n    \n    # XOR of nineteenth and nineteenth to last element of the list\n    xor_sum = xor_sum ^ arr[18] ^ arr[n-19]\n    \n    # XOR of twenty-first and twenty-first to last element of the list\n    xor_sum = xor_sum ^ arr[19] ^ arr[n-20]\n    \n    # XOR of twenty-second and twenty-second to last element of the list\n    xor_sum = xor_sum ^ arr[20] ^ arr[n-21]\n    \n    # XOR of twenty-third and twenty-third to last element of the list\n    xor_sum = xor_sum ^ arr[21] ^ arr[n-22]\n    \n    # XOR of twenty-fourth and twenty-fourth to last element of the list\n    xor_sum = xor_sum ^ arr[22] ^ arr[n-23]\n    \n    # XOR of twenty-fifth and twenty-fifth to last element of the list\n    xor_sum = xor_sum ^ arr[23] ^ arr[n-24]\n    \n    # XOR of twenty-sixth and twenty-sixth to last element of the list\n    xor_sum = xor_sum ^ arr[24] ^ arr[n-25]\n    \n    # XOR of twenty-sevent"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers arr and their length n as input.\n    It calculates the sum of xor of all pairs of integers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum = arr[i] ^ arr[j]\n            sum += xor_sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all elements of the list\n    xor_sum = 0\n    # Loop through the list and find the XOR of all pairs\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    # Return the XOR of all pairs\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through all pairs of elements in the list\n    for i in range(n-1):\n        for j in range(i+1,n):\n            # calculate xor of current pair\n            xor_value = arr[i] ^ arr[j]\n            # add the xor value to the sum\n            sum += xor_value\n\n    # return the final sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR operation of two numbers\n    def xor(a, b):\n        return a^b\n    \n    # XOR of all pairs of numbers in the list\n    xor_sum = sum(xor(a, b) for a in arr for b in arr)\n    \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        xor_sum ^= arr[i]\n        for j in range(i+1, len(arr)):\n            xor_sum ^= arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all pairs of numbers in the list\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize the sum variable with 0\n    xor_sum = 0\n    # loop through all pairs of numbers in the list\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            # add the xor of the current pair of numbers to the sum variable\n            xor_sum += arr[i] ^ arr[j]\n    # return the sum of xor of all pairs of numbers in the list\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given list to a heap\n    heap = hq.heapify(iterable)\n\n    # Sort the heap\n    sorted_heap = []\n    while heap:\n        sorted_heap.append(hq.heappop(heap))\n\n    # Convert the sorted heap to a list\n    return sorted_heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for num in iterable:\n        heapq.heappush(heap, num)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n\n    # convert the given list to a list of tuples with values and indexes\n    items = [(value, index) for index, value in enumerate(iterable)]\n\n    # build a min heap using the list of tuples\n    hq.heapify(items)\n\n    # extract and remove the smallest elements from the heap\n    sorted_items = []\n    while items:\n        # extract the smallest element from the heap and add it to the sorted list\n        sorted_value, sorted_index = hq.heappop(items)\n        sorted_items.append((sorted_value, sorted_index))\n\n    # convert the sorted list of tuples to a list of values\n    sorted_list = [item[0] for item in sorted_items]\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using the heap sort algorithm.\n    '''\n\n    # Convert the list to a max heap\n    hq.heapify(iterable)\n\n    # Iterate through the heap, extracting the maximum element at each step\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heapsort algorithm.\n    '''\n    arr = list(iterable)\n    n = len(arr)\n\n    # Build max heap\n    for i in range(n//2-1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract an element from heap one by one\n    for i in range(n-1, 0, -1):\n        # Move current root to end\n        hq.heapreplace(arr, arr[0])\n        # call max heapify on the reduced heap\n        heapify(arr, i, 0)\n\n    return arr\n\n\ndef heapify(arr, n, i):\n    '''\n    Helper function to build max heap or max heapify a subtree rooted with node i.\n    '''\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    hq.heapify(iterable)\n    \n    # Extract the minimum element from the heap and add it to the end of the list\n    sorted_list = []\n    while hq.heapq[0]!= None:\n        sorted_list.append(hq.heappop(iterable))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    while iterable:\n        iterable[0], iterable[-1] = iterable[-1], iterable[0]\n        hq.heapify(iterable[1:])\n        iterable.pop()\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min heap from the given iterable\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    # sort the heap using heap sort algorithm\n    for _ in range(len(heap)-1, 0, -1):\n        hq.heappop(heap)\n        hq.heappush(heap, hq.heappop(heap))\n\n    # convert the sorted heap back to a list\n    sorted_list = [heapq.heappop(heap) for _ in range(len(heap))]\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit_loss = actual_cost - sale_amount\n\n    # Check if profit and loss is zero\n    if profit_loss == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # check if profit is zero and loss is also zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check for no profit or loss\n    if profit == 0 or loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if sale_amount <= actual_cost:\n        print(\"Yes, the sale amount has no profit and no loss.\")\n    else:\n        print(\"No, the sale amount has a profit or loss.\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profits and losses\n    profits = sale_amount - actual_cost\n    losses = actual_cost - sale_amount\n\n    # Check if there is any profit or loss\n    if profits > 0 or losses > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    # check if sale has a profit\n    if sale_amount > actual_cost: \n        return True\n    # check if sale has a loss\n    elif sale_amount < actual_cost: \n        return False\n    # if sale has no profit or loss, return True\n    else: \n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    elif actual_cost < sale_amount:\n        return True\n    else:\n        return \"It's a tie!\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    # Check if actual cost is greater than the sale amount\n    if actual_cost > sale_amount:\n        return False\n\n    # Calculate profit\n    profit = actual_cost - sale_amount\n\n    # Check if profit is greater than zero\n    if profit > 0:\n        return False\n\n    return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        print(\"Profitable\")\n    elif actual_cost < sale_amount:\n        print(\"Unprofitable\")\n    else:\n        print(\"Neither profitable nor unprofitable\")\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_profit = sale_amount - actual_cost\n    total_loss = actual_cost - sale_amount\n\n    if total_profit == 0 and total_loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    k = t + 273.15\n\n    # Calculate the ratio of the air density to the air viscosity\n    a = 1.01325*math.exp(17.67*(k-273.15)/((k-298.15)**2+491.56*(k-273.15)))\n\n    # Calculate the relative humidity\n    h = 0.5*a*(1-0.0065*math.exp(-13.12*t/(k+237.3)))\n\n    # Calculate the wind chill index\n    c = 13.12 + 0.6215*v + (-11.37*math.log(h)) + (-0.3965*math.log(h)**2)\n\n    # Round the result to the nearest integer\n    ci = round(c)\n\n    return ci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert wind speed to m/s and temperature to K\n    ws = v * 1.60934  # convert to m/s\n    T = t + 273.15  # convert to K\n    \n    # Calculate the air density\n    rho = 1.225  # assume a constant air density of 1.225 kg/m^3\n    \n    # Calculate the wet bulb temperature\n    T_wb = T * math.exp((17.625 * math.log(T)) / (T + 243.125))\n    \n    # Calculate the heat capacity ratio\n    cp = 0.622  # assume a constant heat capacity ratio of 0.622\n    \n    # Calculate the entropy of the atmosphere\n    # Assuming a constant surface pressure of 1013.25 hPa\n    S = 5.67e-8 * (1013.25 / 1000) * (T - 273.15)\n    \n    # Calculate the specific heat at constant pressure\n    cp_p = cp * (T_wb - 273.15)\n    \n    # Calculate the specific heat at constant volume\n    cp_v = cp * T_wb / T\n    \n    # Calculate the latent heat of vaporization\n    Lv = 2.501e6 * (T / 273.15) * math.exp((-2.379e-5 * T) / (T + 237.3))\n    \n    # Calculate the latent heat of condensation\n    Lc = 3.335e5 * math.exp((-1.381e-3 * T) / (T + 273.15))\n    \n    # Calculate the latent heat of sublimation\n    Ls = 2.896e6 * math.exp((-8.314e-5 * T) / (T + 257.6))\n    \n    # Calculate the internal energy of the vapor\n    u_vap = ws * rho * Lv\n    \n    # Calculate the internal energy of the condensation\n    u_cond = ws * rho * Lc\n    \n    # Calculate the internal energy of the sublimation\n    u_sub = ws * rho * Ls\n    \n    # Calculate the energy balance\n    if u_vap > u_cond:\n        Eb = u_vap - u_cond\n    else:\n        Eb = u_vap - u_sub\n    \n    # Calculate the contribution from condensation\n    if ws >= 0.01:\n        T_c = T_wb - (cp_v * (ws * Lv / Lc) / cp_p)\n    else:\n        T_c = T_wb - (cp_v * (ws * Lv / Lc) / cp)\n        \n    # Calculate the contribution from sublimation\n    if ws >= 0.01:\n        T_s = T_wb + (cp_v * (ws * Lv / Ls) / cp_p)\n    else:\n        T_s = T_wb + (cp_v * (ws * Lv / Ls) / cp)\n        \n    # Calculate the contribution from vaporization\n    if ws >= 0.01:\n        T_vap = T_wb - (cp_v * (ws * Lv / Lv) / cp_p)\n    else:\n        T_vap = T_wb - (cp_v * (ws * Lv / Lv) / cp)\n    \n    # Calculate the contribution from condensation and sublimation\n    T_c_sublim = (T_c + T_s) / 2\n    \n    # Calculate the contribution from the other sources of heat\n    T_cont = T_c_sublim - (0.0065 * T) - (0.0001 * T * T)\n    \n    # Calculate the total contribution\n    T_tot = T_cont + T_vap + T_cont\n    \n    # Calculate the wind chill index\n    WCI = T_tot / 2\n    \n    # Round to the nearest integer\n    WCI_int = int(WCI + 0.5)\n    \n    # Return the result\n    return WCI_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_celsius = v * 1.8 + 32\n    chill_speed_celsius = math.sqrt(2 * 10 * 1.16 * (t + 273.15))\n    chill_speed_fahrenheit = chill_speed_celsius * 9/5 + 32\n    \n    if chill_speed_fahrenheit < 76:\n        chill_index = int(25 + 0.6215 * (chill_speed_fahrenheit - 32))\n    elif chill_speed_fahrenheit >= 76 and chill_speed_fahrenheit < 86:\n        chill_index = int(79 + 0.4275 * (chill_speed_fahrenheit - 76))\n    else:\n        chill_index = int(120 + 0.4275 * (chill_speed_fahrenheit - 86))\n    \n    return chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t < -40:\n        return \"Invalid temperature input. Temperature must be between -40 and 100.\"\n    if v <= 0:\n        return \"Invalid wind speed input. Wind speed must be greater than 0.\"\n    if math.isnan(v) or math.isnan(t):\n        return \"Invalid input. Please enter valid inputs for wind speed and temperature.\"\n\n    c_to_k = 273.15  # conversion factor from celsius to kelvin\n    c_to_f = 9/5 * c_to_k + 32  # conversion factor from celsius to fahrenheit\n    celsius_temp = t\n    fahrenheit_temp = c_to_f(celsius_temp)\n    wind_speed_kmh = v\n    wind_speed_mph = v * 2.237  # convert km/h to mph\n\n    # compute wind chill index\n    if fahrenheit_temp < 100:\n        wind_chill_index = (13.12 + 0.6215 * wind_speed_mph - 11.37 * fahrenheit_temp + 0.3965 * fahrenheit_temp**2) / (2.575 * wind_speed_mph - 0.1002 * fahrenheit_temp + 5.575)\n    else:\n        wind_chill_index = (13.12 + 0.6215 * wind_speed_mph - 11.37 * 100 + 0.3965 * 100**2) / (2.575 * wind_speed_mph - 0.1002 * 100 + 5.575)\n\n    # round wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n\n    # return wind chill index\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return int(math.ceil((13.12 + 0.6215*v + 11.37*(t-273.15))/0.985645*1.8))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the dew point\n    dew_point = 243.04 * (math.log(t/100)+17.625)/(math.log(t/100)+243.04)\n    # calculate the wind chill index using the formula for the exact formula\n    wci = round((13.12 + 0.6215*v + 11.37*dew_point - 0.3965*v*dew_point)/(1.8521*v + 3.76*dew_point - 0.34*v*dew_point))\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert wind velocity from km/h to m/s\n    v = v * 1000\n    \n    # Calculate the dew point temperature\n    Td = math.floor(t + ((243.04*math.log(v/1000))/(v+6.11*(math.exp((-17.72*math.log(v/1000))/(v+237.3)))))\n    \n    # Calculate the wind chill index\n    Wci = math.floor(Td + ((0.0065*(Td-21.2))/(Td+76.73)))\n    \n    # Round the wind chill index to the nearest integer\n    Wci = math.ceil(Wci)\n    \n    return Wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    \n    # Convert temperature to Kelvin\n    kelvin = t + 273.15\n    \n    # Calculate the dew point temperature\n    dew_point = 243.04 * math.exp((17.625 * kelvin) / (kelvin + 243.04))\n    \n    # Calculate the wind chill index using the formula from the problem statement\n    wind_chill_index = round(35.74 + 0.6215 * v + 35.75 * dew_point - 0.000001 * (v**2) - 0.00000008 * (t - 273.15))\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        v (float): Wind velocity in km/h.\n        t (float): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n    \"\"\"\n    wind_speed = math.sqrt(v * v + 0.0006 * t)  # Calculate wind speed\n    if wind_speed <= 13.1:\n        wind_chill_index = 0\n    elif wind_speed <= 30:\n        wind_chill_index = 13.1 + 0.6215 * (wind_speed - 13.1)\n    elif wind_speed <= 46.8:\n        wind_chill_index = 30 + 0.4275 * (wind_speed - 30)\n    elif wind_speed <= 64.5:\n        wind_chill_index = 46.8 + 0.3462 * (wind_speed - 46.8)\n    else:\n        wind_chill_index = 64.5 + 0.286 * (wind_speed - 64.5)\n    return int(math.ceil(wind_chill_index))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from celsius to fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # Calculate the wind chill index\n    if v <= 5:\n        w = 13.12 + (0.6215 * t) - (3.587 * math.log(t_f)) + (0.1143 * v**2) - (0.002247 * v**3)\n        w_chill = round(w)\n    elif v <= 10:\n        w = 11.3 + (0.3965 * t) - (3.12 * math.log(t_f)) + (0.0949 * v**2) - (0.001726 * v**3)\n        w_chill = round(w)\n    elif v <= 15:\n        w = 9.64 + (0.287 * t) - (2.88 * math.log(t_f)) + (0.0772 * v**2) - (0.00118 * v**3)\n        w_chill = round(w)\n    else:\n        w = 7.8 + (0.1944 * t) - (2.54 * math.log(t_f)) + (0.0588 * v**2) - (0.000762 * v**3)\n        w_chill = round(w)\n    \n    return w_chill"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        length_sum += len(name)\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_lengths = []\n    for name in sample_names:\n        if name.istitle(): # checking if name starts with a capital letter\n            name_lengths.append(len(name)) # appending the length of the name to the list of lengths\n    return sum(name_lengths) # returning the sum of all the length of names in the list"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if not name.startswith(name[0].lower()))"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [name.strip().lower() for name in sample_names] # remove whitespace and convert to lowercase\n    names_sum = sum(len(name) for name in sample_names if name[0]!= name[0].upper()) # sum the length of names that do not start with a uppercase letter\n    return names_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_of_lengths = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_of_lengths += len(name)\n    return sum_of_lengths"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression pattern to match the parenthesis and what is inbetween them\n    pattern = r'\\([^)]*\\)'\n    \n    # Use the re.sub() method to replace the matched pattern with an empty string\n    result = re.sub(pattern, '', items)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = r\"\\((.*?)\\)\"\n    return re.sub(regex, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r\"\\([^()]*\\)\"\n    return re.sub(pattern, \"\", items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\((.*?)\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression pattern to match parenthesis\n    pattern = re.compile(r'\\(.*?\\)')\n    # Use the findall() method to find all matches of the pattern in the string\n    matches = pattern.findall(items)\n    # Loop through each match and replace it with an empty string\n    for match in matches:\n        items = items.replace(match, '')\n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expressions to remove the parenthesis and what's inbetween them\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r'(\\(.*?\\))*'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize the first and second nonagonal numbers\n    a = 1\n    b = 4\n\n    # Loop through the remaining numbers\n    for i in range(2, n+1):\n\n        # Calculate the nth nonagonal number\n        c = a + (2 * b)\n\n        # Update the values of a and b for the next iteration\n        a = b\n        b = c\n\n    # Return the nth nonagonal number\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    i = 1\n    j = 1\n    while count < n:\n        if i**2 + j**2!= n:\n            i += 1\n        elif i**2 + j**2 == n:\n            count += 1\n        j += 1\n    return count\n\nprint(is_nonagonal(5)) # Output: 5"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    count = 1\n    for i in range(1, n+1):\n        if count % 2 == 0:\n            num = num + 2 * i\n            count = count + 1\n        else:\n            num = num + i\n            count = count + 1\n    return num\n\nn = int(input(\"Enter a positive integer: \"))\nresult = is_nonagonal(n)\nprint(\"The\", n, \"th nonagonal number is:\", result)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            nonagonal_numbers.append(i * (i + 1) // 2)\n    return nonagonal_numbers[-1]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    if n == 2:\n        return 5\n    if n == 3:\n        return 12\n    if n == 4:\n        return 22\n    if n == 5:\n        return 35\n    i = 6\n    while i <= n:\n        if n % 2 == 0:\n            n = n + 2\n        else:\n            n = n + 1\n        i = i + 1\n    return n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n and returns True if n is the nth nonagonal number,\n    False otherwise.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize the first nonagonal number as 1\n    num = 1\n\n    # Loop through the numbers until the nth nonagonal number is found\n    for i in range(n):\n        # Add the sum of the previous two nonagonal numbers to get the nth nonagonal number\n        num = (num + i) * (i + 1) / 2\n\n    # Return the nth nonagonal number\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1: \n        return None\n    elif n == 1: \n        return 1\n    else: \n        return 2*(n-1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    else:\n        return 4 * is_nonagonal(n-1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n+1):\n            result += i\n        return result"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define the regular expression pattern to match 'z' at the start and end of a word\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    # Use the `re.search()` function to search for the pattern in the text\n    match = re.search(pattern, text)\n    # If the pattern is found, return True\n    if match:\n        return True\n    else:\n        # Otherwise, return False\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define regex pattern for finding word with 'z' in it\n    pattern = r'(?<![a-zA-Z])[zZ](?![a-zA-Z])'\n\n    # use regex to find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n\n    # check if there are any matches, return True if there are, else return False\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!^)(?<!\\S)z(?!\\S)(?<!\\S)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?<!z)\\w+(?<!z)\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Remove all non-alphabetic characters from the text\n    cleaned_text = re.sub('[^a-zA-Z]+', '', text)\n\n    # Split the text into a list of words\n    words = cleaned_text.split()\n\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # If the word starts with 'z', and does not end with 'z', replace it with 'z'\n        if words[i][0] == 'z' and words[i][-1]!= 'z':\n            words[i] = 'z'\n            # If the word ends with 'z', and does not start with 'z', replace it with 'z'\n        elif words[i][-1] == 'z' and words[i][0]!= 'z':\n            words[i] = 'z'\n\n    # Join the list of words back into a string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Remove all non-alphabetic characters from the text\n    text = re.sub(r'[^a-zA-Z0-9]', '', text)\n\n    # Split the text into words\n    words = text.split()\n\n    # Loop through the words and check if there is a z in the middle of the word\n    for word in words:\n        if 'z' in word:\n            return True\n        if word.startswith('z') or word.endswith('z'):\n            return True\n\n    # If the text contains no 'z' in the middle, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-z]+z\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'(?<!\\w)z(?!\\w)')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b'\n    words = re.findall(pattern, text)\n    if words:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    result = re.search(pattern, text)\n    if result:\n        return 'Found \"z\" in the middle of the word.'\n    else:\n        return 'Could not find \"z\" in the middle of the word.'"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array up to k\n    input = input[:k] + input[k:][::-1] + input[:k]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining elements\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    n = len(input)\n    # initialize two pointers\n    left = 0\n    right = k-1\n    # swap elements till the middle of the array is reached\n    while left < right: \n        # swap the elements\n        input[left], input[right] = input[right], input[left]\n        # move the pointers\n        left += 1\n        right -= 1\n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the input array\n    n = len(input)\n    # Reverse the array from position 0 to k-1\n    input[0:k] = input[0:k][::-1]\n    # Reverse the array from k to n-1\n    input[k:n] = input[k:n][::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # initialize an empty list to store the reversed array\n    reversed_array = []\n\n    # iterate through the input list starting from the kth index\n    for i in range(k-1, len(input)-1, -1):\n        # add the element at the kth index to the reversed array\n        reversed_array.append(input[i])\n\n    # return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = k - 1\n\n    while start < end:\n        # Swap elements\n        input[start], input[end] = input[end], input[start]\n        # Move start and end pointers\n        start += 1\n        end -= 1"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the first k elements of the array\n    for i in range(k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n\n    # Reverse the remaining elements of the array\n    for i in range(k, len(input)):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Convert the input list to a string to perform slicing\n    input_str = str(input)\n    # Split the input string into a list of characters\n    input_list = list(input_str)\n    # Reverse the first k elements of the list\n    input_list[:k] = input_list[:k][::-1]\n    # Convert the list of characters back to a string and convert it to a list\n    reversed_list = list(input_str)\n    # Reverse the list of characters\n    reversed_list.reverse()\n    # Convert the reversed list of characters back to a string and return it as a list\n    return reversed_list"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Reverse the array upto the given position\n    input[:k] = input[:k][::-1]\n    # Reverse the array from the given position to the end\n    input[k:] = input[k:][::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup) + tuple(test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup[0], test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Adding the dictionary to the tuple\n    test_tup += (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create an empty dictionary to hold the new items\n    new_dict = {}\n    # Loop through the items in the dictionary\n    for key, value in test_dict.items():\n        # Add the key-value pair to the new dictionary\n        new_dict[key] = value\n    # Add the new dictionary to the tuple\n    test_tup = test_tup + (new_dict,)\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the key-value pairs of the original dictionary and the new dictionary\n    new_dict = {**test_dict}\n    # concatenate the original tuple with the new dictionary as a new tuple\n    new_tup = tuple(test_tup) + tuple(new_dict.values())\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary with updated values\n    new_dict = test_dict.copy()\n    # Add the new dictionary to the tuple\n    new_tup = test_tup + (new_dict,)\n    # Return the updated tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup_dict = dict(test_dict)\n    test_tup_dict.update(test_tup)\n    return tuple(test_tup_dict.values())"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n\n    # Initialize variables\n    N = len(cost)\n    total_cost = 0\n    total_cells = 0\n    max_avg = 0\n\n    # Traverse the matrix and find the maximum average path\n    for i in range(N):\n        for j in range(N):\n            # If current cell is not a boundary cell\n            if (i!= 0 and j!= 0) or (i!= N - 1 and j!= N - 1):\n                # If current cell is a valid path cell\n                if cost[i][j]!= float('inf'):\n                    # Calculate the total cost and number of cells visited\n                    total_cost += cost[i][j]\n                    total_cells += 1\n                    # Update the maximum average if necessary\n                    if total_cost / total_cells > max_avg:\n                        max_avg = total_cost / total_cells\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = float('-inf')\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            \n            avg = dp[i][j] / (i+j+1)\n            max_avg = max(max_avg, avg)\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = float('-inf')\n    path = []\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n                path.append((i, j))\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n                path.append((i, j))\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n                path.append((i, j))\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n                path.append((i, j))\n            max_avg = max(max_avg, dp[i][j] / len(path))\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n == 0:\n        return 0\n\n    max_avg = float('-inf')\n    visited = set()\n    queue = [(0, 0, 0)]\n    visited.add((0, 0))\n\n    while queue:\n        r, c, current_cost = queue.pop(0)\n        if r == n - 1 and c == n - 1:\n            avg = current_cost / (r * c)\n            max_avg = max(max_avg, avg)\n            continue\n        if r + 1 < n and (r, c) not in visited:\n            visited.add((r + 1, c))\n            queue.append((r + 1, c, current_cost + cost[r + 1][c]))\n        if c + 1 < n and (r, c + 1) not in visited:\n            visited.add((r, c + 1))\n            queue.append((r, c + 1, current_cost + cost[r][c + 1]))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "Here's the Python code for the same:"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        dp = [0]*N\n        dp[0] = cost[i][0]\n        for j in range(1, N):\n            dp[j] = max(dp[j-1], cost[i][j])\n        total_cost = sum(dp)\n        avg = total_cost/N\n        max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n        if i > 0:\n            dp[i][i-1] += cost[i][i-1]\n    for k in range(2, N):\n        for i in range(N-k+1):\n            j = i+k-1\n            dp[i][j] = max(dp[i][j], dp[i+1][j-1])\n            if j < N-1:\n                dp[i][j] += cost[i][j]\n    for i in range(N-1, -1, -1):\n        for j in range(i+1, N):\n            dp[i][j] = max(dp[i][j], dp[i][j-1], dp[i][j+1])\n    for i in range(N-1, -1, -1):\n        for j in range(i+1, N):\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    return max_avg // (N**2)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False] * N for _ in range(N)]\n    max_avg = 0\n    max_path = []\n\n    def backtrack(i, j, path, cost_so_far, path_length):\n        visited[i][j] = True\n        if i == N-1 and j == N-1:\n            avg = cost_so_far / path_length\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path[:]\n            return\n        if i < N-1 and not visited[i+1][j]:\n            backtrack(i+1, j, path+[i+1, j], cost_so_far+cost[i+1][j], path_length+1)\n        if j < N-1 and not visited[i][j+1]:\n            backtrack(i, j+1, path+[i, j+1], cost_so_far+cost[i][j+1], path_length+1)\n        visited[i][j] = False\n\n    backtrack(0, 0, [], 0, 0)\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_avg = [float('-inf')] * N\n    max_avg[-1] = 0\n    \n    for i in range(N-2, -1, -1):\n        avg = 0\n        for j in range(N-2, -1, -1):\n            avg += cost[i][j]\n            if j < N-2:\n                avg += cost[i][j+1]\n            if i < N-2:\n                avg += cost[i+1][j]\n                if j < N-2:\n                    avg += cost[i+1][j+1]\n        max_avg[i] = max(max_avg[i+1], avg)\n            \n    return max_avg[-1]"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    m = len(cost[0])\n    dp = [[0]*m for _ in range(n)]\n\n    # initialize top row\n    for i in range(m):\n        dp[0][i] = cost[0][i]\n\n    # initialize left column\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n\n    # compute all other cells\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # compute maximum average of path\n    max_avg = 0\n    for i in range(n):\n        for j in range(m):\n            max_avg = max(max_avg, dp[i][j]/(i+j+1))\n\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for student_name, student_info in students.items():\n        height, weight = student_info\n        if height >= h and weight >= w:\n            filtered_students[student_name] = student_info\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # Create a new dictionary to store the filtered students\n    filtered_students = {}\n\n    # Loop through the students dictionary\n    for student, info in students.items():\n\n        # Get the height and weight of the current student\n        height, weight = info\n\n        # Check if the student has a height and weight above the minimum\n        if height > h and weight > w:\n\n            # If the student meets the criteria, add them to the new dictionary\n            filtered_students[student] = info\n\n    # Return the filtered dictionary\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Loop through the students dictionary and filter the students that have height and weight above the minimum\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        if values[0] > h and values[1] > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Create an empty dictionary to store indices\n    same_indices = {}\n\n    # Iterate through the lists and compare each element using the `eq` operator\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            # If the elements are the same, add the index to the dictionary\n            same_indices[i] = True\n\n    # Return the number of elements in the dictionary\n    return len(same_indices)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(i+1, len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # initialize the sum to zero\n    sum_of_digits = 0\n    # loop through the digits of the base\n    for digit in str(base):\n        # add the current digit to the sum\n        sum_of_digits += int(digit) ** power\n    # return the sum\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the sum of the digit raised to the specified power\n        digit_power_sum = sum_of_digits(digit_int, power)\n        # Add the digit power sum to the sum\n        sum += digit_power_sum\n    # Return the final sum\n    return sum\n\n\ndef sum_of_digits(digit, power):\n    '''\n    Write a function that takes a digit and power as arguments and calculate the sum of the digits raised to the specified power.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through each digit of the digit raised to the specified power\n    for i in range(power):\n        # Calculate the sum of the digit raised to the power\n        digit_power = digit**i\n        # Add the digit raised to the power to the sum\n        sum += digit_power\n    # Return the final sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += sum(int(digit) for digit in str(base))\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base and power to strings\n    base_str = str(base)\n    power_str = str(power)\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through each digit of the base\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Calculate the power of the digit\n        digit_pow = 1\n        for i in range(power_int):\n            digit_pow *= digit_int\n\n        # Add the digit to the sum\n        sum += digit_pow\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert the base to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(base)]\n\n    # Calculate the sum of digits raised to the power of the power argument\n    result = sum([digit**power for digit in digits])\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n    else:\n        sum = 0\n        while power > 0:\n            digit = base % 10\n            sum += digit\n            power -= 1\n            base //= 10\n        return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(digit) ** power for digit in str(base))\n\n\nbase = int(input(\"Enter the base: \"))\npower = int(input(\"Enter the power: \"))\n\nresult = power_base_sum(base, power)\n\nprint(\"The sum of all digits of\", base, \"to the\", power, \"power is:\", result)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    num = base\n\n    while num > 0:\n        digit = num % 10\n        total += digit ** power\n        num //= 10\n\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    temp = base\n    while power > 0:\n        digit = temp % 10\n        sum += digit\n        power -= 1\n        temp //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Check if base is a positive integer\n    if type(base)!= int or base <= 0:\n        return 'Please enter a positive integer as the base.'\n    \n    # Check if power is a positive integer\n    if type(power)!= int or power <= 0:\n        return 'Please enter a positive integer as the power.'\n    \n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Loop through the digits of the base and add the corresponding power to the sum\n    while base > 0:\n        digit = base % 10\n        total_sum += digit ** power\n        base //= 10\n    \n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\\\"]*)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"([^\"]*)\"' # matches the contents between double quotes \" \"\n    matches = re.findall(pattern, text1) # finds all the matches in the text1\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expressions to extract values between quotation marks\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define a regular expression pattern to match quotation marks \" \"\n    pattern = r'\"([^\"]*)\"'\n    # use the re.findall() function to extract all occurrences of the pattern in the string\n    matches = re.findall(pattern, text1)\n    # return the list of matched quotation marks\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'(?<=[^\\\\])(\"(?:\\\\.|[^\"])*\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expression to extract values between quotation marks \" \"\n    pattern = r'\"(.*?)\"'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #initialize an empty list to store the new tuple\n    new_tup = []\n    #iterate over the tuple and multiply each element by the next one\n    for i in range(len(test_tup)-1):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    #return the new tuple\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (0,) * N\n    \n    for i in range(N):\n        result_tup[i] = test_tup[i] * test_tup[i+1]\n        \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        if i < N - 1:\n            result_tup += (test_tup[i] * test_tup[i+1],)\n        else:\n            result_tup += (test_tup[i] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup)\n    result = []\n    for i in range(n-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple([t_i * t_i+1 for t_i in test_tup])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize the result tuple with the same length as the input tuple\n    result_tup = tuple(test_tup[0] * test_tup[1])\n    # loop over the remaining elements of the input tuple and add them to the result tuple\n    for i in range(2, len(test_tup)):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) == len(lst2):\n        return [lst1[i]+lst2[i] for i in range(len(lst1))]\n    else:\n        print(\"Lists must have the same length!\")"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for item in nums:\n        if item == result[-1]:\n            continue\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # split the list into groups of consecutive duplicates\n    grouped_nums = groupby(nums)\n\n    # iterate over each group of consecutive duplicates\n    for key, group in grouped_nums:\n        # check if the group has consecutive duplicates\n        if list(group) == group:\n            # if consecutive duplicates, remove the first occurrence and move on\n            nums.remove(group[0])\n\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by the elements themselves\n    grouped = groupby(nums)\n    # Iterate over the groups and check if the consecutive duplicates are present\n    for key, group in grouped:\n        # If there are consecutive duplicates, remove them\n        if len(list(group)) > 1 and all(num == key for num in group):\n            # We can't use the `del` statement here because it modifies the list in-place.\n            # Instead, we can use a list comprehension to create a new list with only the non-consecutive duplicates.\n            nums = [num for num in nums if num!= key]\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    result = []\n\n    for group in groupby(sorted(nums)):\n        if len(list(group)) > 1:\n            result.extend(list(group))\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def consecutive_duplicates(nums):\n    # group the numbers by their value, using itertools.groupby\n    grouped_nums = groupby(enumerate(nums), lambda x: x[1])\n\n    # create a list to store the consecutive duplicates\n    consecutive_duplicates_list = []\n\n    # iterate over the grouped numbers, checking if they are consecutive\n    for key, group in grouped_nums:\n        if key == 0:\n            consecutive_duplicates_list.extend(group)\n        elif key == 1:\n            break\n        elif all(x[0] + 1 == y[0] for x, y in zip(group, group.__next__())):\n            consecutive_duplicates_list.extend(group)\n\n    # remove consecutive duplicates from the original list\n    return [num for num in nums if num not in consecutive_duplicates_list]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def group_consecutive(iterable):\n        return groupby(iterable)\n\n    group_list = []\n    for num, group in group_consecutive(nums):\n        group_list.append(list(group))\n\n    return [num for sublist in group_list for num in sublist]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [x for key, group in groupby(nums) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def group_consecutive_duplicates(nums):\n        return [list(g) for k, g in groupby(nums)]\n\n    return group_consecutive_duplicates(sorted(set(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r**2*h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone\n    lateral_surface = math.pi * r ** 2 * h / 3\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Formula to calculate lateral surface area of a cone\n    lateral_surface_area = (2 * r * h) / 3\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # formula for lateral surface area of a cone: A_l = pi/2 * r^2 * h\n    A_l = math.pi/2 * r**2 * h\n    return A_l"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h/3"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the half-angle using the formula for the sine of half a given angle\n    alpha = math.degrees(math.asin(h/2/r))\n    # calculate the lateral surface area using the formula: LSA = 2*pi*(R*h)\n    LSA = 2*math.pi*(r*h)\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2*(math.pi*(r**2)) + (2*math.pi*r*h)\n    return area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'[^a-zA-Z0-9]')\n    text = pattern.sub('', text)\n    text = re.sub(r'\\s+|\\,\\s*|\\.\\s*', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text).replace(' ', ':').replace(',', ':').replace('.', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,\\. ]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the regular expression pattern\n    pattern = r'[^\\w\\s]|_|\\s|'\n    # replace the pattern with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[,\\. ]+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define a regular expression pattern for spaces, commas, or dots\n    pattern = r'[\\s,\\.]'\n    # replace all occurrences of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r\"([,\\.])\")\n    return pattern.sub(\":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'([^\\w\\s]|_)+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'\\s+','', text) # replace multiple spaces with a single space\n    text = re.sub(r'\\W+', ':', text) # replace any non-word character with a colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern for spaces, commas, or dots\n    pattern = re.compile(r'[\\s,.]+')\n    # Replace all occurrences of the pattern with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the index of the first occurrence of x using binary search\n    left = 0\n    right = len(A) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize left and right pointers\n    left, right = 0, len(A) - 1\n    \n    # loop through the array until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # calculate the midpoint of the array\n        mid = (left + right) // 2\n        \n        # if the element at the midpoint is equal to the target, check if it's the first occurrence\n        if A[mid] == x:\n            # if it is, return the index\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            # if not, update the right pointer to mid-1\n            else:\n                right = mid - 1\n        # if the element is less than the target, update the left pointer to mid+1\n        elif A[mid] < x:\n            left = mid + 1\n        # if the element is greater than the target, update the right pointer to mid-1\n        else:\n            right = mid - 1\n    \n    # if the target was not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # loop through the array until we find the first occurrence of x\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    # if we reach this point, we didn't find x in the array\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # binary search for the first occurrence\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # if x not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x as input and returns the index of the first occurrence of x. If x is not present in A, the function returns -1.\n    \"\"\"\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            # Check if x is present at both left and mid positions\n            if A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i < len(A) and A[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if A[i] == x else -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    MOD = 10**9 + 7\n    dp = [0] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            if arr[i - 1] < arr[j]:\n                dp[i] = (dp[i] + dp[j]) % MOD\n\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize the sum of products to zero\n    sum_of_products = 0\n\n    # Initialize the sum of subarray products to zero\n    sum_of_subarray_products = 0\n\n    # Traverse the array from left to right\n    for i in range(len(arr)):\n\n        # Initialize the current subarray product to zero\n        current_subarray_product = 1\n\n        # Traverse the array from the current index to the end\n        for j in range(i, len(arr)):\n\n            # Update the current subarray product by multiplying the current element with the element at index j\n            current_subarray_product *= arr[j]\n\n            # Update the sum of subarray products by adding the current subarray product\n            sum_of_subarray_products += current_subarray_product\n\n        # Update the sum of products by adding the sum of subarray products\n        sum_of_products += sum_of_subarray_products\n\n        # Reset the sum of subarray products to zero\n        sum_of_subarray_products = 0\n\n    # Return the sum of products\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    result = 0\n\n    # Calculate the product of subarray ending at i\n    def calculate_product(i):\n        if i == n:\n            return 1\n        return arr[i] * calculate_product(i + 1)\n\n    # Calculate the sum of products of all subarrays ending at i\n    def calculate_sum(i):\n        if i == n:\n            return 0\n        return calculate_sum(i + 1) + calculate_product(i)\n\n    result = calculate_sum(0)\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Initialize variables\n    n = len(arr)\n    prod_arr = [1]*n\n    max_sum = 0\n    # Iterate through all possible subarrays of length 1, 2,..., n\n    for i in range(n):\n        # Add the current element to the corresponding product array element\n        prod_arr[i] *= arr[i]\n        # Find the maximum sum of the current subarray product and add it to max_sum\n        max_sum = max(max_sum, prod_arr[i])\n    # Initialize the result array\n    result = [0] * n\n    # Iterate through all possible subarrays of length 1, 2,..., n\n    for i in range(n):\n        # Initialize the sum of the current subarray product\n        curr_sum = 0\n        # Iterate through all the previous subarrays of length i+1\n        for j in range(i):\n            # Add the product of the current subarray element and the corresponding product array element to curr_sum\n            curr_sum += prod_arr[i] * prod_arr[j]\n            # Update the maximum sum if curr_sum exceeds max_sum\n            max_sum = max(max_sum, curr_sum)\n        # Add the maximum sum of the current subarray to the result array\n        result[i] = max_sum\n    # Return the result array\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    subarray_products = [0] * (n + 1)\n    for i in range(n):\n        for j in range(i, n + 1):\n            subarray_products[j] += arr[i] * arr[j - 1]\n\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += subarray_products[i]\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    sub_list_prod = [0]*n\n    \n    for i in range(n):\n        sub_list_prod[i] = arr[i]\n        for j in range(i+1, n):\n            sub_list_prod[j] = sub_list_prod[j] * arr[j]\n            \n    return sum(sub_list_prod)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize variables\n    max_product = float('-inf')\n    product = 1\n    sum_product = 0\n    # Iterate through each element of the list\n    for i in range(n):\n        product *= arr[i]\n        # Update max_product if current product is greater than max_product\n        if product > max_product:\n            max_product = product\n        # Calculate the sum of products of all possible sublists\n        sum_product += max_product\n        # Update product and max_product for the next iteration\n        product *= arr[i]\n        max_product = product\n    # Return the sum of products\n    return sum_product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    def sum_subarray_prod(start, end):\n        subarray_sum = prefix_sum[end] - prefix_sum[start]\n        return subarray_sum * (end - start + 1)\n\n    sum_prod = 0\n\n    for i in range(1, n):\n        for j in range(i, n):\n            sum_prod += sum_subarray_prod(i, j)\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    prod_sum = 0\n    for i in range(n):\n        prod *= arr[i]\n    prod_sum += prod\n    for i in range(n):\n        for j in range(i+1, n):\n            sublist = arr[i:j+1]\n            prod_sublist = 1\n            for k in sublist:\n                prod_sublist *= k\n            prod_sum += prod_sublist\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n+1)\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n    product = 1\n    prefix_product = 1\n    sum_of_products = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            product *= arr[j-1] - arr[i-1]\n            prefix_product *= prefix_sum[j] - prefix_sum[i]\n            sum_of_products += product * prefix_product\n    return sum_of_products"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Finding the middle bit position\n    mid = 0\n    while n & (1 << mid) == 0:\n        mid += 1\n    # Toggling the middle bit\n    n ^= (1 << mid)\n    # Toggling the first and last bits\n    n ^= (n & (1 << mid) | n & (1 << (mid + 1)))\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n\n    Parameters:\n    n (int): The integer number whose bits should be toggled.\n\n    Returns:\n    int: The integer number with the middle bits toggled.\n    \"\"\"\n    # Mask out the first and last bits and then set the middle bits to 1\n    n &= ~(1 << 0 | 1 << 31)\n    n |= 1 << 15 | 1 << 16\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the number of bits in the binary representation of n\n    num_bits = len(bin(n)[2:])\n    \n    # Compute the indices of the middle bits (first and last bits excluded)\n    middle_bit_indices = (num_bits//2)-1, num_bits//2\n    \n    # Compute the mask for the first bit of the middle bits\n    first_middle_bit_mask = ~(1 << middle_bit_indices[0])\n    \n    # Compute the mask for the last bit of the middle bits\n    last_middle_bit_mask = ~(1 << middle_bit_indices[1])\n    \n    # Toggle the middle bits of n using the above masks\n    n = n & first_middle_bit_mask | n & last_middle_bit_mask\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # define the first and last bits\n    first_bit = n & 1\n    last_bit = n & 1 << 31\n    # toggle the first and last bits\n    n ^= (first_bit | last_bit)\n    # toggle the middle bits\n    n ^= (1 << 1) | (1 << 2) | (1 << 3)\n    n ^= (1 << 16) | (1 << 17) | (1 << 18)\n    n ^= (1 << 23) | (1 << 24) | (1 << 25)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the number of bits in the number\n    num_bits = bin(n)[2:].count('1')\n    \n    # get the index of the first and last bits\n    first_bit = bin(n)[2:].index('1')\n    last_bit = bin(n)[2:].rindex('1')\n    \n    # initialize the mask with all bits set to 1 except for first and last bits\n    mask = (1 << (num_bits - 2)) | (1 << (num_bits - 1))\n    \n    # toggle the middle bits\n    n = n ^ mask\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize variables\n    bit1 = n & 0b10000000000000000000000000000000\n    bit2 = n & 0b0100000000000000000000000000000\n    bit3 = n & 0b00100000000000000000000000000000\n    bit4 = n & 0b00010000000000000000000000000000\n\n    # Toggle bits of the number except the first and the last bit\n    n = n ^ bit1 ^ bit2 ^ bit3 ^ bit4\n\n    # Return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # initialize the first and last bits as 1\n    first_bit = 1 << 31\n    last_bit = 1 << 0\n    # toggle the middle bits of the number\n    for i in range(1, 31):\n        if n & (1 << i):\n            n = n ^ (1 << i)\n    # set the first and last bits to 0\n    n = n & ~first_bit & ~last_bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the result to 0\n    result = 0\n    # Convert the binary representation of n to a list of digits\n    num_list = [int(digit) for digit in bin(n)[2:]]\n    # Get the length of the binary representation of n\n    length = len(num_list)\n    # Toggle the bits of the number except the first and the last bit\n    for i in range(1, length - 1):\n        # Set the middle bit to the opposite of its current value\n        if num_list[i] == 1:\n            result |= (1 << i)\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Get the first and last bit positions\n    first_bit = n & 1\n    last_bit = n >> 31\n\n    # Toggle the first and last bit positions\n    n = n ^ (first_bit ^ last_bit)\n\n    # Get the position of the middle bit\n    middle_bit = n & 1\n    middle_bit_position = middle_bit * 2\n\n    # Toggle the middle bit positions\n    n = n ^ (middle_bit ^ (middle_bit_position ^ middle_bit))\n\n    # Get the second last and second bit positions\n    second_last_bit = (n >> 1) & 1\n    second_bit = n & 1\n\n    # Toggle the second last and second bit positions\n    n = n ^ ((second_last_bit ^ second_bit) << 1)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Find the position of the middle bit\n    middle_bit = n.bit_length() // 2\n    \n    # Toggle the middle bit\n    toggled_middle_bit = n ^ (1 << middle_bit)\n    \n    # Toggle the bits except the middle bit and the first and last bits\n    n = n ^ toggled_middle_bit\n    \n    # Return the toggled number\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n        elif a[index] > x:\n            return left_insertion(a[:index], x)\n        else:\n            return left_insertion(a[index:], x)\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = bisect.bisect_left(a, x)\n    if left == len(a):\n        return left\n    elif x < a[left]:\n        return left\n    else:\n        return bisect.bisect_left(a[:left], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif x < a[index]:\n        return left_insertion(a[:index], x)\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index-1] == x:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a[:index], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n        a: List of sorted integers.\n        x: Value to search for.\n\n    Returns:\n        The index of the left insertion point. If there is no insertion point, returns len(a).\n\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    if a[i] == x:\n        return i\n    if a[i] < x:\n        return i + 1\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list `a` and a value `x` and returns the index where to insert `x` in `a` such that all elements to the left of the index are smaller than `x` and all elements to the right of the index are greater than `x`.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif index == len(a):\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index!= 0 and a[index-1] == x:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a):\n        if a[i] == x:\n            return i\n        elif a[i] < x:\n            return bisect.bisect_left(a[:i], x)\n        else:\n            return bisect.bisect_left(a[i:], x)\n    else:\n        return i"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        print(string, \"starts with a vowel!\")\n    else:\n        print(string, \"doesn't start with a vowel!\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        print(string, \"is starting with a vowel.\")\n    else:\n        print(string, \"is not starting with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    This function takes a string as input and returns True if the string is starting with a vowel, False otherwise.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Calculate the geometric sum of n-1.\n\n    Args:\n    n (int): the number of terms to sum\n\n    Returns:\n    float: the geometric sum of n-1\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * (1-1/n)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 ** n) - 1"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1 using recursion.\n\n    Args:\n    n (int): The value of n for which we want to find the geometric sum.\n\n    Returns:\n    int: The geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * (1/geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Function to check if number of digits is greater than n\n    def is_greater_than_n(num):\n        if num < 10**n:\n            return True\n        else:\n            return False\n\n    # Function to find the index of smallest triangular number with n digits\n    def find_index(num):\n        # Convert the number to a string and split it into a list of digits\n        num_str = str(num)\n        num_list = [int(i) for i in num_str]\n\n        # Initialize variables for storing smallest triangular number and its index\n        min_tri = float('inf')\n        index = 0\n\n        # Loop through each digit of the number\n        for digit in num_list:\n            # Check if the digit is greater than n\n            if digit > n:\n                # If yes, update min_tri and index\n                if digit < min_tri:\n                    min_tri = digit\n                    index = num_list.index(digit)\n            # If the digit is less than or equal to n, check if it is a triangular number\n            elif is_greater_than_n(digit):\n                # If yes, update min_tri and index\n                if digit < min_tri:\n                    min_tri = digit\n                    index = num_list.index(digit)\n\n        # Return the index of the smallest triangular number\n        return index\n\n    # Main function to find the index of smallest triangular number with n digits\n    def find_smallest_triangular(n):\n        # Check if n is greater than 0\n        if n <= 0:\n            return 0\n\n        # Find the index of smallest triangular number with n digits\n        index = find_index(2**n - 1)\n\n        # Return the index\n        return index\n\n    # Call the main function to find the index of smallest triangular number with n digits\n    result = find_smallest_triangular(n)\n\n    # Return the result\n    return result\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_triangular(num):\n        return sum(int(d) ** 2 for d in str(num)) == num * (num + 1) // 2\n\n    # Find the smallest prime number with n digits\n    i = 1\n    while len(str(i)) < n:\n        i += 1\n\n    # Check if i is a prime number\n    if is_prime(i):\n        return i\n\n    # Check if i is a triangular number\n    for j in range(i+1, i+1000000):\n        if is_triangular(j):\n            return j\n\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        triangular = [1]\n        while len(triangular) < n:\n            new_triangular = []\n            for i in range(len(triangular)-1):\n                new_triangular.append(triangular[i]+triangular[i+1])\n            triangular = new_triangular + [math.factorial(n-1)]\n        return triangular.index(min(triangular))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    triangular = [0] * (n+1)\n    triangular[0] = 0\n    triangular[1] = 1\n    for i in range(2, n+1):\n        triangular[i] = triangular[i-1] + triangular[i-2]\n\n    for i in range(1, n+1):\n        triangular[i] = triangular[i] - triangular[i-1]\n\n    return triangular"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Initialize the index to 1\n    index = 1\n    # Initialize the number of digits of the triangular number\n    count = 1\n    # Initialize the smallest triangular number to 1\n    smallest_triangular_num = 1\n    # Initialize the number of digits of the smallest triangular number\n    smallest_count = 1\n    # Loop until the count of digits of the smallest triangular number reaches n\n    while count < n:\n        # Compute the next triangular number\n        next_triangular_num = smallest_triangular_num + index\n        # Update the count of digits of the next triangular number\n        next_count = len(str(next_triangular_num))\n        # If the count of digits of the next triangular number is less than n, then update the smallest triangular number and count\n        if next_count < n:\n            smallest_triangular_num = next_triangular_num\n            smallest_count = next_count\n        # Update the index and count\n        index += 1\n        count = next_count\n    # Return the index of the smallest triangular number with n digits\n    return index - smallest_count + 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the smallest triangular number with n digits\n    triangular = 10**(n-1)\n    \n    # initialize variables\n    index = 1\n    triangular_numbers = []\n    \n    # iterate from 1 to the square root of the smallest triangular number\n    for i in range(1, int(math.sqrt(triangular))+1):\n        # if the current triangular number is greater than or equal to the square root of the smallest triangular number, add it to the list of triangular numbers\n        if triangular >= i*i:\n            triangular_numbers.append(i*i)\n    \n    # find the index of the smallest triangular number in the list\n    for i in range(len(triangular_numbers)):\n        if triangular == triangular_numbers[i]:\n            index = i+1\n            break\n        \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    triangular = 1\n    while triangular < 10**n:\n        count += 1\n        triangular += triangular - 1\n    return count\n\nn = 3\nprint(find_Index(n)) # Output: 5"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # define a function to check if a number is a triangular number\n    def is_triangular(num):\n        i = 1\n        while i * i <= num:\n            if num % i:\n                return False\n            i += 1\n        return True\n\n    # define a function to generate triangular numbers\n    def triangular(n):\n        i = 1\n        triangular_num = []\n        while i <= n:\n            triangular_num.append(i)\n            i += 1\n        return triangular_num\n\n    # generate all triangular numbers with n digits\n    triangular_numbers = triangular(n)\n\n    # find the smallest triangular number with n digits\n    smallest_triangular_number = min(triangular_numbers)\n\n    # find the index of the smallest triangular number\n    index = triangular_numbers.index(smallest_triangular_number)\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = 1\n    for i in range(n):\n        triangular_number *= 10\n    smallest_triangular_number = triangular_number\n\n    while triangular_number < smallest_triangular_number:\n        triangular_number += 1\n    \n    return triangular_number - smallest_triangular_number"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    \n    def is_Triangular(n):\n        return math.sqrt(5*n**2 + 4) == int(math.sqrt(5*n**2 + 4))**2\n        \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n > 2:\n        if is_Triangular(n):\n            return n\n        else:\n            for i in range(3, n+1):\n                if is_Triangular(i):\n                    return i"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Error: Length of the tuple must be even\")\n        return None\n    else:\n        dict_obj = {}\n        for i in range(0, len(test_tup), 2):\n            key = test_tup[i]\n            value = test_tup[i+1]\n            dict_obj[key] = value\n        return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    d = {}\n    # Loop through the tuple elements using range()\n    for i in range(len(test_tup)-1):\n        # Add the current tuple element as the key and the next tuple element as the value\n        d[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # create an empty dictionary\n    result_dict = {}\n    \n    # iterate over the tuple elements\n    for i in range(len(test_tup)):\n        # add the current element as a key to the dictionary\n        result_dict[i] = test_tup[i]\n        \n        # if the current element is not the last element, add the next element as a value for the current key\n        if i < len(test_tup) - 1:\n            result_dict[i] = test_tup[i+1]\n    \n    # return the dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict = {}\n    for i in range(0, len(test_tup), 2):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    result_dict = {}\n    # iterate over the tuple\n    for i in range(len(test_tup)-1):\n        # add the key-value pair to the dictionary\n        result_dict[i] = test_tup[i+1]\n    # return the dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dictionary = {}\n    i = 0\n    while i < len(test_tup):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dictionary[key] = value\n        i += 2\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        test_tup = test_tup + (None,)\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        d[key] = value\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n\n    # Create an empty dictionary\n    test_dict = {}\n\n    # Iterate over the tuple and add the adjacent elements as key-value pairs to the dictionary\n    for i in range(len(test_tup)):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        test_dict[key] = value\n\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are the same,\n    otherwise, it returns False.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if s[0] == s[1]:\n        return all_Characters_Same(s[2:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    \n    # check if all characters in the string are same\n    first_char = s[0]\n    for char in s[1:]:\n        if char!= first_char:\n            return False\n    \n    # all characters are same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # get the first character of the string\n    first_char = s[0]\n    # check if all the characters in the string are the same as the first character\n    if all(c == first_char for c in s):\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string `s` as input and returns True if all the characters in `s` are the same, otherwise False.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    \n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string s as input and returns True if all the characters in the string are same or False otherwise.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return s.isalpha()\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Check if the length of the string is 1\n    if len(s) == 1:\n        return True\n    # Convert all the characters to lowercase\n    s = s.lower()\n    # Check if the length of the string is 1 after converting to lowercase\n    if len(s) == 1:\n        return True\n    # Compare the first character with the second character\n    if s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    # If all the characters are not same, return False\n    return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a given string are the same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == all_Characters_Same(s[1:])"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side ** 2 / 4\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    s = (a + math.sqrt(a**2 + 4*math.tan(math.radians(60))))/2\n    return math.sqrt(3)/4 * s**2\n\nprint(area_tetrahedron(5)) # Output: 7.738103988277676"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate half the perimeter\n    half_perimeter = 0.5 * side\n    \n    # calculate the areas of the faces\n    face_areas = [half_perimeter, half_perimeter, half_perimeter, side]\n    \n    # calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(face_areas[0]**2 + face_areas[1]**2 + face_areas[2]**2 - face_areas[0]*face_areas[1]*face_areas[2])\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    This function calculates the area of a tetrahedron.\n    \n    Parameters:\n        side (float): The length of one of the sides of the tetrahedron.\n        \n    Returns:\n        float: The area of the tetrahedron.\n    \"\"\"\n    return (1/6) * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1.0 / 3.0 # side length\n    area = (s * (s - 1) * (s - 2) * (s - 3)) ** 0.5 # formula for area\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = 4 * side\n    \n    # Calculate the area of the base\n    area_base = (semi_perimeter**2) / 3\n    \n    # Calculate the area of the top\n    area_top = semi_perimeter / 2\n    \n    # Calculate the area of the side\n    area_side = side ** 2\n    \n    # Calculate the total area\n    area = math.sqrt(area_base + area_top + area_side)\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    half_perimeter = side / 2\n    area = 1/6 * (side ** 2) * math.sqrt(3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**3"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n  # To ensure that m is less than n\n    \n    # Reverse the first m elements of the list\n    list[:m] = list[:m][::-1]\n    \n    # Reverse the remaining elements of the list\n    list[m:] = list[m:][::-1]\n    \n    # Reverse the entire list\n    list[:] = list[::-1]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # if list is empty, return empty list\n    if n == 0:\n        return list\n    # if m is greater than or equal to n, return list as it is\n    if m >= n:\n        return list\n    # rotate the list by m items to the right\n    for i in range(m):\n        list.insert(0, list.pop())\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[0:m] = list[m:] + list[0:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list to the right by specified number of items\n    \"\"\"\n    m = len(lst)\n    n = n % m\n    lst[n:] = lst[:m-n]\n    lst[:n] = [lst[i] for i in range(n, m)]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    k = m % n\n    list[-k:], list[:-k] = list[:-k], list[-k:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. \n    \"\"\"\n    n = len(list)\n    m %= n  # handle cases where m > n\n    for i in range(m):\n        list[i], list[n-1-i] = list[n-1-i], list[i]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    A function to rotate a list by n items to the right direction.\n    \"\"\"\n    n = n % len(lst)\n    lst.extend(lst[:n])\n    lst[:n] = []\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    # get the length of the list\n    n = len(list)\n    # calculate the total number of rotations needed\n    rotations = m % n\n    # calculate the number of rotations to the right\n    right_rotations = n - rotations\n    # rotate the list using slicing\n    return list[right_rotations:] + list[:right_rotations]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.append(list.pop(0))\n    for i in range(m):\n        temp = list.pop(0)\n        list.append(temp)\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = None\n    for val in test_tup:\n        if val is none_value:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(item is None for item in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = None\n    for element in test_tup:\n        if element == none_value:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n\n    def is_divisible_by_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by any digit.\n        \"\"\"\n        for digit in str(num):\n            if int(digit) % 2!= 0:\n                return False\n        return True\n\n    return list(filter(is_divisible_by_digit, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Define a helper function to check if a number is divisible by a given digit\n    def is_divisible(num, digit):\n        return num % digit == 0\n\n    # Define a lambda function to check if a number is divisible by every digit\n    is_divisible_by_digits = lambda x: all(is_divisible(x, digit) for digit in str(x))\n\n    # Use the lambda function to filter the range of numbers\n    filtered_range = filter(is_divisible_by_digits, range(startnum, endnum+1))\n\n    # Convert the filtered range to a list and return it\n    return list(filtered_range)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits = lambda num: sorted(str(num))  # Function to extract digits from a number\n    divisible_by_digit = lambda digit: lambda num: True if num % digit == 0 else False  # Function to check if a number is divisible by a specific digit\n\n    # Loop through each number in the range\n    for num in range(startnum, endnum + 1):\n        # Extract the digits from the number\n        digits_num = digits(num)\n\n        # Check if the number is divisible by every digit\n        if all(divisible_by_digit(digit)(num) for digit in digits_num):\n            # If it is, print the number\n            print(num)\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Using a lambda function and a list comprehension to generate a list of digits for each number in the range\n    digits_in_range = list(map(lambda x: list(map(int, str(x))), range(startnum, endnum + 1)))\n    # Using set intersection to find all numbers within the range that are divisible by every digit in the list\n    divisible_numbers = set(filter(lambda x: all(digit % x == 0 for digit in digits[x]), digits_in_range))\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num, digit):\n        return num % digit == 0\n\n    def count_digits(num):\n        return len(str(num))\n\n    def is_divisible_by_all_digits(num):\n        return all(is_divisible(num, digit) for digit in range(1, 10))\n\n    return list(filter(lambda x: is_divisible_by_all_digits(x), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: x % 10 == 0 and all(x % int(digit) == 0 for digit in str(x)) and startnum <= x <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits = [int(d) for d in str(startnum)]\n    digit_product = 1\n    for d in digits:\n        digit_product *= d\n    \n    return list(filter(lambda x: x % digit_product == 0, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return sorted(list(filter(lambda x: all(int(digit) % i == 0 for i in range(10)), str(startnum) + str(endnum))))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        return all(num % d == 0 for d in [int(d) for d in str(num)])\n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Using a lambda function\n    # map(lambda x: x % 10, lambda x: x // 10, range(startnum, endnum+1))\n    # return list(filter(lambda x: all(digit % x == 0 for digit in str(x)), range(startnum, endnum+1)))\n    \n    # Using a list comprehension\n    return [x for x in range(startnum, endnum+1) if all(digit % x == 0 for digit in str(x))]\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # check if angle is greater than 360 degrees\n    if a > 360:\n        return None\n    \n    # convert angle to radians\n    angle = math.radians(a)\n    \n    # calculate area of sector\n    area = math.pi * r**2 * angle\n    \n    # return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * math.sin(math.radians(a/360))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r**2) * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r*r*math.sin(math.radians(a/2))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n  \n    # creating a table to store lengths of longest common subsequences of prefixes of X,Y and Z \n    L = [[0 for j in range(p+1)] for i in range(m+1)] \n  \n    # building table L[][] in bottom up manner \n    for i in range(1, m+1): \n        for j in range(1, p+1): \n  \n            # if last characters of X and Z are same, then length of L[i][j] will be \n            # L[i-1][j-1] + 1 (when X[i-1] and Z[j-1] are same) \n            if X[i-1] == Z[j-1]: \n                L[i][j] = L[i-1][j-1] + 1 \n  \n            # else, the length of L[i][j] will be maximum of following two cases: \n            # 1) L[i-1][j] (when Y[i-1] is not present in X[0...i-2]) \n            # 2) L[i][j-1] (when Z[j-1] is not present in Y[0...j-2]) \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n    # starting from the last cell of L[][] and going backwards, \n    # extract the longest common subsequence and return it \n    i = m \n    j = p \n  \n    # creating a list to store the characters of the LCS \n    lcs = [] \n    while i > 0 and j > 0: \n  \n        # if the last characters of X and Z are same, then append it to the LCS \n        if X[i-1] == Z[j-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n  \n        # else, the LCS does not include this character, so find the previous character \n        # in LCS (X[i-1] and Z[j-1]) and replace it with the longer of X[i-1] and Z[j-1] \n        else: \n            if L[i-1][j] > L[i][j-1]: \n                i -= 1 \n            else: \n                j -= 1 \n  \n    # reverse the LCS list and return it \n    lcs.reverse() \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    This function finds the longest common subsequence for the given three string sequence.\n    '''\n\n    # Find lengths of all sequences\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of LCS of subsequences of X[0..m-1], Y[0..n-1], and Z[0..p-1]\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # Fill in the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][k] = L[i-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    L[i][k] = L[i-1][k]\n                elif X[i-1] == Z[k-1]:\n                    L[i][k] = L[i][k-1]\n                else:\n                    L[i][k] = max(L[i-1][k], L[i][k-1])\n\n    # Return the length of the LCS\n    return L[m][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 3D array to store the lengths of the longest common subsequences\n    LCS = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # fill the 3D array using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                elif LCS[i-1][j][k] > LCS[i][j-1][k]:\n                    LCS[i][j][k] = LCS[i-1][j][k]\n                else:\n                    LCS[i][j][k] = LCS[i][j-1][k]\n\n    # return the length of the longest common subsequence\n    return LCS[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Step 1: Create a 2D table to store lengths of LCS of subsequences of X[0..i], Y[0..j], Z[0..k]\n    L = [[0] * (o+1) for i in range(m+1)]\n\n    # Step 2: Build LCS matrix in bottom up fashion\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j][k-1])\n\n    # Step 3: Return the length of the LCS\n    lcs_length = L[m][n][o]\n    return lcs_length"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 3D table to store LCS lengths\n    L = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # Fill the 3D table\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k])\n\n    # Return the length of the longest common subsequence\n    return L[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 2D table to store the length of longest common subsequence for substrings of X[0..i], Y[0..j], and Z[0..k]\n    L = [[[0] * (p+1) for j in range(n+1)] for i in range(m+1)]\n\n    # Fill in the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # Initialize an empty list to store the lcs of all substrings\n    lcs_list = []\n\n    # Fill in the list of lcs by following the backtrack algorithm\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs_list.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i-1][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the lcs list\n    lcs_list.reverse()\n\n    # Join the lcs list into a single string\n    lcs = \"\".join(lcs_list)\n\n    # Return the lcs string\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    L = [[[0 for j in range(o+1)] for k in range(m+1)] for i in range(n+1)]\n\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    lcs = ''\n    i, j, k = n, m, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i-1][j][k] == L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Step 1: Convert the strings into a list of characters\n    X_list = list(X)\n    Y_list = list(Y)\n    Z_list = list(Z)\n\n    # Step 2: Find the lengths of the strings\n    n = len(X_list)\n    m = len(Y_list)\n    p = len(Z_list)\n\n    # Step 3: Initialize a 2D array to store the lengths of LCS\n    L = [[0 for i in range(p+1)] for j in range(n+1)]\n\n    # Step 4: Fill in the LCS lengths using dynamic programming\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X_list[i-1] == Y_list[j-1] and Z_list[k-1] == X_list[i-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Step 5: Backtrack to find the actual LCS\n    i = n\n    j = m\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X_list[i-1] == Y_list[j-1] and Z_list[k-1] == X_list[i-1]:\n            lcs.append(X_list[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i-1][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the LCS to get the correct order\n    lcs = list(reversed(lcs))\n\n    # Step 6: Convert the LCS to a string and return it\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Find lengths of X, Y and Z\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of longest common subsequence \n    # for substrings of X, Y and Z\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # Fill L[i][j] with length of LCS of X[0..i-1], Y[0..j-1] and Z[0..k-1]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][k-1])\n\n    # Return the length of LCS of X, Y and Z\n    return L[m][n]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize the table\n    table = [[0 for _ in range(len(Y)+1)] for _ in range(len(X)+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the last element of the table\n    return table[-1][-1]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Using regular expressions to match capital words and replace them with spaces\n    result = re.sub(r'(?<![A-Z])[A-Z](?![A-Z])', r' \\1', str1)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, r'\\1 ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression to match capital letters and spaces\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Use re.sub() to replace the pattern with a space between words starting with capital letters\n    return re.sub(pattern, r'\\1\\2', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    This function takes a string as input and returns a new string with spaces between capital words.\n    '''\n    # Define a regular expression pattern to match capitalized words starting with a letter\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n\n    # Use the pattern to find all capitalized words in the string\n    words = pattern.findall(string)\n\n    # Use a list comprehension to create a new string with spaces between the capitalized words\n    new_string =''.join(words)\n\n    return new_string"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string by space and capitalize the first letter of each word\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    capitalized_words = [' '.join(word.split()).capitalize() for word in words]\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Split the string into a list of words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n\n    # Loop through the words and check if the first letter is capitalized\n    for i, word in enumerate(words):\n        if i == 0 or not words[i-1][0].isupper():\n            words[i] ='' + word\n\n    # Join the words with spaces and return the result\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    This function takes a string as input and returns the same string, with all words starting with a capital letter \n    preceded by a space.\n    '''\n    \n    # split the string into words using regex\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', string)\n    \n    # loop through each word and check if the first letter is uppercase\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # add a space before the word\n            words[i] ='' + words[i]\n    \n    # join the words back into a string with spaces between them\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use a regular expression to match capitalized words\n    pattern = r'\\b\\w\\w+\\b'\n\n    # Find all matches and replace them with a space\n    result = re.sub(pattern, lambda x:'' + x.group(0) +'', str1)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    words = re.findall(pattern, str1)\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all non-word characters with spaces\n    str1 = re.sub(r'[^\\w\\s]','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Loop through the words and capitalize the first letter of each word\n    for i, word in enumerate(words):\n        if word[0].isupper():\n            words[i] = word[0].upper() + word[1:]\n    # Join the words back into a string with spaces between them\n    result =''.join(words)\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    # create a list of numbers from the given strings\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            pass  # ignore non-numeric values\n    \n    # sort the list in ascending order\n    nums.sort()\n    \n    # convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the list of integers using the built-in sort function\n    nums.sort()\n    \n    # Convert the sorted list of integers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all strings in the list to integers\n    nums = [int(x) for x in nums_str]\n    \n    # sort the list of integers using the built-in sort function\n    nums.sort()\n    \n    # convert the sorted list of integers back to strings and return it\n    return [str(x) for x in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(int(num))\n        except ValueError:\n            pass\n    nums.sort()\n    nums_str = [str(num) for num in nums]\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Splitting the list of strings into a list of numbers\n    nums = [int(num_str) for num_str in nums_str]\n    \n    # Sorting the list of numbers in ascending order\n    nums.sort()\n    \n    # Converting the sorted list of numbers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    \n    # Returning the sorted list of numbers as a list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all numbers in the list to float and sort them\n    nums_float = [float(num) for num in nums_str]\n    nums_float.sort()\n    \n    # Convert the sorted list back to strings and return it\n    nums_str = [str(num) for num in nums_float]\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x.replace(',', '')))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Concatenate the tuple and list using the \"+\" operator\n    combined_list = test_list + test_tup\n\n    # Return the combined list\n    return combined_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(\"The modified list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # create a new list to store the result\n    new_list = []\n    # loop through each element in the given list\n    for i in test_list:\n        # add the tuple element to the current element\n        i += test_tup\n        # add the current element to the new list\n        new_list.append(i)\n    # return the new list\n    return new_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base case\n    if i > len(arr) // 2:\n        return True\n\n    # Check if the current element is greater than its children\n    if arr[i] > min(arr[2 * i], arr[2 * i + 1]):\n        return False\n\n    # Recursively call the function for the left and right subtrees\n    return check_min_heap_helper(arr, 2 * i) and check_min_heap_helper(arr, 2 * i + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 0:\n        return True\n    if i == 0:\n        return arr[i] < arr[i + 1]\n    if arr[i] < arr[i - 1] and arr[i] < arr[i + 1]:\n        return False\n    return check_min_heap_helper(arr, i - 1)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) // 2 - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i//2]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    if i*2+1 <= len(arr)-1 and arr[i] < arr[i*2+1]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for i in range(len(arr)//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr) and arr[i] > arr[i+1]:\n        return False\n    if i > 0 and arr[i] < arr[i-1]:\n        return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_min_heap(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i//2]:\n            return False\n    return True\n\ndef main():\n    arr = [4, 2, 1, 3, 5]\n    if is_min_heap(arr):\n        print(\"Array represents a min heap\")\n    else:\n        print(\"Array does not represent a min heap\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i  # Assume current node is smallest\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        # Swap the current node with the smallest node\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        # Recursively call the function on the swapped node\n        check_min_heap_helper(arr, smallest)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n    return arr"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n\n    # Find the parent of current node\n    parent_index = (i - 1) // 2\n\n    # If the parent is greater than or equal to the current node, then the heap is not a min heap\n    if arr[i] < arr[parent_index]:\n        return False\n\n    # Recursively check the parent node\n    return check_min_heap_helper(arr, parent_index)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Return True if the array is already a min heap, False otherwise\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the current node is smaller than its children nodes\n    if i < len(arr) // 2:\n        if arr[i] > arr[2 * i + 1] or arr[i] > arr[2 * i + 2]:\n            return False\n    # Recursively check the left and right sub-arrays of the current node\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Helper function to check if the given array represents min heap\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input: n should be a positive integer.\"\n    elif n == 1:\n        return 0\n    else:\n        return jacobsthal_num(n-1) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev = 0\n        curr = 1\n        jacob_num = 1\n        \n        for i in range(2, n+1):\n            jacob_num = curr + prev\n            prev = curr\n            curr = jacob_num\n        \n        return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_list = [0, 1]\n    for i in range(2, n):\n        jacobsthal_list.append(jacobsthal_list[i-1] + jacobsthal_list[i-2])\n    return jacobsthal_list[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the first two terms\n    a = 1\n    b = 1\n\n    # Initialize the variable to store the result\n    result = 0\n\n    # Loop for the nth term\n    for i in range(2, n+1):\n        # Calculate the next term\n        c = a + b\n\n        # Check if the term is greater than or equal to n\n        if c >= n:\n            # Add the term to the result\n            result += c\n\n        # Update the values of a and b\n        a = b\n        b = c\n\n    # Return the result\n    return result"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_nums = [0, 1]  # initialize list with first two numbers in the sequence\n    for i in range(2, n):  # iterate over rest of sequence\n        next_num = (jacobsthal_nums[-1] + 4 * jacobsthal_nums[-2]) % 2\n        jacobsthal_nums.append(next_num)\n    return jacobsthal_nums[-1]  # return the nth number in the sequence"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # initialize the first two Jacobsthal numbers\n    j1 = 0\n    j2 = 1\n\n    # loop through the rest of the numbers\n    for i in range(2, n+1):\n\n        # calculate the next Jacobsthal number using the formula\n        j3 = (i/2) * (i + 1) * j1\n\n        # update the value of j1 for the next iteration\n        j1 = j2\n        j2 = j3\n\n    return j2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacobsthal_numbers = [0, 1, 1]\n    for i in range(2, n):\n        jacobsthal_numbers.append(jacobsthal_numbers[i-1] + jacobsthal_numbers[i-2] + jacobsthal_numbers[i-3])\n    return jacobsthal_numbers[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n    jacobsthal = [0, 1]\n    for i in range(2, n):\n        jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2])\n    return jacobsthal[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize variables\n    j = 0\n    l = 1\n    num = 0\n\n    # Loop through the sequence and print the number\n    while j < n:\n        # Update jacobsthal number\n        num = (l**2 - j**2 + 1) // 2\n        print(num)\n\n        # Update variables\n        j += 1\n        l = (l**2 + 1) // 2"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a tuple list and a value for k and returns the k smallest records in the list.\n    If there are less than k smallest records, the function will return all the records in the list.\n    '''\n    # create an empty list to store the smallest k records\n    min_list = []\n\n    # loop through the list\n    for tup in test_list:\n        # if the length of the list is less than k, add the current tuple to the list\n        if len(min_list) < K:\n            min_list.append(tup)\n        # if the length of the list is greater than or equal to k, compare the current tuple with the smallest k records\n        else:\n            # if the current tuple is smaller than the smallest k records, remove the last smallest record and add the current tuple\n            if tup < min_list[0]:\n                min_list.pop(0)\n                min_list.append(tup)\n\n    # return the k smallest records in the list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort()\n    min_val = test_list[0][0]\n    min_count = 0\n    for i in range(1, len(test_list)):\n        if min_val < test_list[i][0]:\n            min_val = test_list[i][0]\n            min_count = 1\n        elif min_val == test_list[i][0]:\n            min_count += 1\n        if min_count == K:\n            break\n    return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize variables\n    min_list = []\n    count = 0\n    # Loop through the list\n    for tup in test_list:\n        if count < K:\n            # Check if the tuple is already in the list\n            if tup not in min_list:\n                min_list.append(tup)\n                count += 1\n        else:\n            # Check if the tuple is smaller than the minimum in the list\n            if tup < min_list[0]:\n                # Remove the smallest tuple from the list\n                del min_list[0]\n                # Add the new tuple to the list\n                min_list.append(tup)\n                # If the list is now full, remove the smallest tuple\n                if count == K:\n                    del min_list[-1]\n    # Return the minimum k records from the list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # initialize min_list with the first k records\n    min_list = test_list[:K]\n\n    # loop through the remaining records\n    for record in test_list[K:]:\n\n        # if the record is smaller than the smallest record in min_list, update min_list\n        if len(min_list) < K or record[0] < min_list[0][0]:\n            min_list = [record]\n\n        # if the record is the smallest record in min_list, add it to min_list\n        elif record[0] == min_list[0][0]:\n            min_list.append(record)\n\n    # return the minimum k records from min_list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": ""
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples by the second element (which represents the minimum value)\n    test_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Create a dictionary to store the count of minimum value\n    min_dict = {}\n    \n    # Iterate through the sorted list and check if the count of minimum value is less than K\n    i = 0\n    while i < len(test_list) and len(min_dict) < K:\n        if min_dict.get(test_list[i][1], 0) < K:\n            min_dict[test_list[i][1]] = min_dict.get(test_list[i][1], 0) + 1\n        i += 1\n    \n    # Create a list of minimum value tuples\n    min_list = [(k, v) for k, v in min_dict.items()]\n    \n    # Return the list of minimum value tuples\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return None\n    min_value = float('inf')\n    min_key = None\n    for i in range(len(test_list)):\n        if i == 0 or test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_key = i\n    return min_key"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    # Sort the list in ascending order based on the first element\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize the minimum value of k\n    min_val = sorted_list[0][1]\n\n    # Initialize the counter variable\n    count = 1\n\n    # Iterate over the sorted list\n    for i in range(1, len(sorted_list)):\n        # If the current element's second element is greater than the minimum value,\n        # update the minimum value and increment the counter variable\n        if sorted_list[i][1] > min_val:\n            min_val = sorted_list[i][1]\n            count = 1\n        # If the current element's second element is equal to the minimum value,\n        # increment the counter variable\n        else:\n            count += 1\n\n        # If the counter variable is greater than or equal to k,\n        # return the minimum value and the number of elements required to achieve it\n        if count >= K:\n            return (min_val, i - K + 1)\n\n    # If the loop completes without finding a minimum value, return None\n    return None"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input,\n    and returns the minimum K records from the list, based on the values in each tuple.\n    \n    Example:\n    test_list = [(1, \"apple\"), (2, \"banana\"), (3, \"cherry\"), (4, \"date\"), (5, \"elderberry\")]\n    K = 2\n    Output: [\"apple\", \"cherry\"]\n    '''\n    # Sort the list of tuples based on the values in each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    # Initialize a variable to store the minimum K records\n    min_records = []\n    # Iterate over the sorted list and add the records to the minimum K records list\n    for i in range(len(sorted_list)):\n        if len(min_records) < K:\n            min_records.append(sorted_list[i][1])\n        else:\n            if sorted_list[i][0] < min_records[0]:\n                min_records[0] = sorted_list[i][1]\n    # Return the minimum K records\n    return min_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n\n    # Initialize an empty dictionary to store common elements\n    common = {}\n\n    # Iterate over all elements in l1 and l2\n    for i in range(len(l1)):\n        # Check if the current element exists in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # If the current element exists in both l2 and l3, add it to the common dictionary\n            common[l1[i]] = (l1[i], l2[l2.index(l1[i])], l3[l3.index(l1[i])])\n\n    # Return the common elements in a list\n    return common.values()"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    # Loop through each index in the lists\n    for i in range(len(l1)):\n        # Check if the current element is present in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # create a new list to store the common elements\n    common = []\n    \n    # loop through each index in l1, l2, and l3\n    for i in range(len(l1)):\n        \n        # check if the element at the current index is in l1 and l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            \n            # if it is, add it to the common list\n            common.append(l1[i])\n    \n    # return the common list\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common = []\n    \n    # Loop through each element in l1 and l2\n    for i in range(len(l1)):\n        # If the element is present in both l1 and l2\n        if l1[i] in l2 and l2[i] in l3:\n            # Add the element to the list of common elements\n            common.append(l1[i])\n            \n    # Return the list of common elements\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()  # sort the list in ascending order\n    return numbers[1]  # return the second element of the sorted list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list should have at least two elements.\")\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # Check if the list has at least 2 elements\n    if len(numbers) < 2:\n        print(\"Error: The list must have at least 2 elements.\")\n        return None\n    \n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Return the second smallest number\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Return the second smallest number\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # Return the second smallest number\n    return sorted_numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'^a.*b*$')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n                test_list.remove(test_list[j])\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Initialize count variable to zero\n    count = 0\n\n    # Iterate through each string in the list\n    for i in range(len(test_list)):\n        # Reverse the current string and store it in a new variable\n        reversed_str = test_list[i][::-1]\n\n        # Iterate through each string in the list starting from the next index\n        for j in range(i + 1, len(test_list)):\n            # Check if the reversed string is equal to the next string in the list\n            if reversed_str == test_list[j][::-1]:\n                # Increment the count variable\n                count += 1\n\n    # Return the count of reverse pairs\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - i - 1):\n            if (test_list[j] + test_list[j + i + 1]) in test_list[i + j + 1:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_list = []\n    for i in range(len(test_list)):\n        reversed_str = test_list[i][::-1]\n        if reversed_str in reverse_list:\n            continue\n        reverse_list.append(reversed_str)\n    count = 0\n    for i in range(len(reverse_list)):\n        for j in range(i+1, len(reverse_list)):\n            if reverse_list[i] == reverse_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    # create an empty dictionary to store the count of reverse pairs\n    reverse_count = {}\n\n    # iterate through the given list of strings\n    for string in test_list:\n        # convert the string to a list of characters and sort it in reverse order\n        string_list = sorted(list(string), reverse=True)\n        # join the sorted list of characters back into a string and check if it's a reverse of any previous string in the list\n        for i in range(len(string_list)):\n            reverse_string = ''.join(string_list[i:])\n            if reverse_string in reverse_count:\n                reverse_count[reverse_string] += 1\n            else:\n                reverse_count[reverse_string] = 1\n\n    # return the dictionary of reverse pairs and their counts\n    return reverse_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                reverse_pairs += 1\n    return reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in count:\n                    count[subitem] += 1\n                else:\n                    count[subitem] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    counts = {}\n    # Iterate through each element in the input list\n    for element in list1:\n        # Convert the element to a tuple and check if it is already a key in the dictionary\n        if tuple(element) in counts:\n            # Increment the count of the corresponding key\n            counts[tuple(element)] += 1\n        else:\n            # Otherwise, add the tuple as a new key with a count of 1\n            counts[tuple(element)] = 1\n    # Return the dictionary of unique sublists and their counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the count of tuples\n    count_dict = {}\n    \n    # Iterate over each element in the list\n    for i in range(len(list1)):\n        # Extract the list from the original list\n        sublist = list1[i]\n        \n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple exists in the dictionary\n        if sublist_tuple in count_dict:\n            # Increment the count of the tuple\n            count_dict[sublist_tuple] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n            \n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    unique_list = set(list1)\n\n    # Create an empty dictionary\n    count_dict = {}\n\n    # Loop through each unique list in the set\n    for lst in unique_list:\n\n        # Convert each unique list to a tuple\n        tuple_lst = tuple(lst)\n\n        # If the tuple is already in the dictionary, increment its value\n        if tuple_lst in count_dict:\n            count_dict[tuple_lst] += 1\n        else:\n            # Otherwise, add the tuple to the dictionary with a value of 1\n            count_dict[tuple_lst] = 1\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each unique sublist\n    sublist_count = {}\n\n    # Iterate over each list in the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in sublist_count:\n            # If it is, increment its count by 1\n            sublist_count[tuple(sublist)] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            sublist_count[tuple(sublist)] = 1\n\n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for lst in list1:\n        if lst not in sublists:\n            sublists[lst] = 1\n        else:\n            sublists[lst] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the count of each unique sublist\n    sublist_count = {}\n    # Loop through each element in the list\n    for elem in list1:\n        # Convert the element to a tuple\n        tup = tuple(elem)\n        # If the tuple is already a key in the dictionary, increment the count\n        if tup in sublist_count:\n            sublist_count[tup] += 1\n        # If the tuple is not a key in the dictionary, add it and set its count to 1\n        else:\n            sublist_count[tup] = 1\n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the counts\n    count_dict = {}\n    # iterate over each element of the list1\n    for element in list1:\n        # check if the element is a list\n        if isinstance(element, list):\n            # if it is, convert it to a tuple and update the count in the dictionary\n            count_dict[tuple(element)] = count_dict.get(tuple(element), 0) + 1\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dict = {}\n    for lst in list1:\n        lst = tuple(lst)\n        if lst in list_dict:\n            list_dict[lst] += 1\n        else:\n            list_dict[lst] = 1\n    return list_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list to a set to get the unique sublists\n    unique_sublists_set = set(tuple(sublist) for sublist in list1)\n    # Count the occurencies of each sublist in the original list\n    sublist_counts = {}\n    for sublist in unique_sublists_set:\n        sublist_counts[sublist] = list1.count(sublist)\n    return sublist_counts"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function takes a string as input and checks if it is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        decimal.Decimal(num)\n        return True\n    except:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # remove all non-numeric characters from the string\n    num = ''.join(filter(str.isdigit, num))\n\n    # check if the length of the string is greater than 2\n    if len(num) > 2:\n        return False\n\n    # check if the string contains any non-numeric characters\n    if not num.isdigit():\n        return False\n\n    # check if the string is an integer or a decimal with a precision of 2\n    if '.' in num:\n        num, decimal = num.split('.')\n        if len(decimal) > 2:\n            return False\n    else:\n        if len(num) > 2:\n            return False\n\n    # if the string is a valid decimal number, return True\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    else:\n        num_parts = num.split('.')\n        if len(num_parts)!= 2:\n            return False\n        else:\n            num_parts = [float(x) for x in num_parts]\n            decimal_part = num_parts[1]\n            if len(decimal_part)!= 2:\n                return False\n            else:\n                if num_parts[0] < 0 or num_parts[0] >= 10 or num_parts[1] < 0 or num_parts[1] >= 10:\n                    return False\n                else:\n                    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    if '.' not in num and ',' not in num:\n        return False\n    if '.' in num:\n        dot_index = num.index('.')\n        dot_after_digit = num.find('.', dot_index + 1)\n        if dot_after_digit == -1 or dot_after_digit > dot_index + 2:\n            return False\n    if ',' in num:\n        comma_index = num.index(',')\n        comma_after_digit = num.find(',', comma_index + 1)\n        if comma_after_digit == -1 or comma_after_digit > comma_index + 3:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if abs(float_num - int(float_num)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    for char in num:\n        if char not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # remove all non-numeric characters from the input string\n    num = ''.join(c for c in num if c.isdigit() or c == '.')\n    # convert the input string to float with a precision of 2 decimal places\n    num = float('{:.{prec}f}'.format(float(num), prec=2))\n    # check if the number is not an integer\n    if num.is_integer():\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) <= 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the string contains only digits and a decimal point.\n    if not num.replace('.', '', 1).isdigit():\n        return False\n\n    # Check if the string has a precision of 2.\n    if '.' in num and len(num.split('.')[1]) > 2:\n        return False\n\n    # Check if the string is a valid decimal number.\n    try:\n        decimal.Decimal(num)\n    except ValueError:\n        return False\n\n    # If all checks passed, the string is a valid decimal number with a precision of 2.\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_list = list(str(num))\n    for i in range(len(num_list)):\n        if num_list[i] == '.':\n            if len(num_list) - 1 == i:\n                return True\n            elif num_list[i+1] == '0' or num_list[i+1].isdigit():\n                return False\n            else:\n                return False\n        elif num_list[i].isdigit():\n            if i == 0 and num_list[i+1] == '0':\n                return False\n            elif i == 0 and num_list[i+1] == '.':\n                return True\n            elif i == 0 and num_list[i+1].isdigit():\n                return False\n            elif num_list[i-1] == '.':\n                return False\n            else:\n                return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # First, we create a set from the list to remove duplicate elements\n    unique_set = set(arr)\n    \n    # If the length of the unique set is 1, then we know that the list contains only one distinct element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return \"Empty List\"\n    else:\n        unique = True\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    unique = False\n                    break\n        return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Use set to remove duplicate elements from the list\n    unique_arr = list(set(arr))\n\n    # Check if the length of unique_arr is equal to 1\n    if len(unique_arr) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a dictionary to store the unique elements\n    unique_dict = {}\n    for num in arr:\n        # check if the element is already present in the dictionary\n        if num in unique_dict:\n            # if it is, then there is only one distinct element in the list\n            return False\n        # if not, then add the element to the dictionary\n        else:\n            unique_dict[num] = True\n    # if all the elements are unique, then the list contains only one distinct element\n    return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in month_days:\n        if month_days[monthnum3] == 30:\n            print(monthnum3, \"contains 30 days.\")\n        else:\n            print(monthnum3, \"contains\", month_days[monthnum3], \"days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return 'Invalid month number'"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return days_in_month[monthnum3-1]\n    elif monthnum3 in [4, 6, 9, 11]:\n        return days_in_month[monthnum3-1] + 1\n    else:\n        return -1"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # check if the given month number is within range\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid Month Number\"\n\n    # convert the given month number to the corresponding month name\n    month_names = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    month_name = month_names[monthnum3-1]\n\n    # check if the given month contains 30 days or not\n    if month_name in [\"April\", \"June\", \"September\", \"November\"]:\n        return \"The month contains 30 days.\"\n    else:\n        return \"The month does not contain 30 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31,\n    }\n    if monthnum3 in days_in_month:\n        if days_in_month[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum2 = monthnum3 // 2\n    if monthnum2 == 2:\n        if monthnum3 % 2 == 0:\n            return \"This month has 30 days.\"\n        else:\n            return \"This month does not have 30 days.\"\n    else:\n        return \"This month is not valid.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 2:\n        if year % 4 == 0:\n            if (year % 100!= 0) or (year % 400 == 0):\n                return True\n            else:\n                return False\n        else:\n            return False\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # To find the minimum difference between any two elements, we need to sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to a large value\n    min_diff = float('inf')\n\n    # Traverse the sorted array for all pairs of elements\n    for i in range(n-1):\n        # Calculate the difference between the current pair of elements\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller than the previous minimum\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1]-arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n\n    # Traverse through the array\n    for i in range(n - 1):\n        # Calculate the difference between current and next element in the array\n        diff = abs(arr[i] - arr[i + 1])\n\n        # Update the minimum difference if the current difference is less than the previous minimum\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n    min_diff = float('inf')\n    min_pair = None\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (i, j)\n    return min_diff, min_pair\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes in an array and its size as input and returns the minimum difference between any two elements in the array.\n    The function first sorts the array in non-decreasing order and then calculates the difference between adjacent elements of the array.\n    The minimum difference between any two elements is the difference between the first and last elements of the sorted array.\n    '''\n    \n    # Sort the array in non-decreasing order\n    arr.sort()\n    \n    # Calculate the difference between adjacent elements of the sorted array\n    diff = arr[-1] - arr[0]\n    \n    # Return the minimum difference\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Sorting the array in non-decreasing order\n    arr.sort()\n    # Using two variables to keep track of minimum difference\n    min_diff = float('inf')\n    diff = 0\n\n    # Iterating through the sorted array\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array using sorting.\n    \"\"\"\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(2, n):\n        curr_diff = abs(arr[i] - arr[i - 1])\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers `arr` and its length `n` as inputs.\n    It returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Find the minimum element of the array\n    min_element = min(arr)\n\n    # Create a dictionary to store the absolute difference between each element and the minimum element\n    diff_dict = {}\n\n    # Iterate through the array and calculate the absolute difference between each element and the minimum element\n    for i in range(n):\n        diff = abs(arr[i] - min_element)\n        diff_dict[diff] = arr[i]\n\n    # Find the minimum difference between any two elements in the array\n    min_diff = min(diff_dict.keys())\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sorting the array in ascending order\n    arr.sort()\n    min_diff = float('inf')\n\n    # Iterating through the sorted array\n    for i in range(n-1):\n        # Finding the difference between current element and next element\n        diff = abs(arr[i+1] - arr[i])\n\n        # Updating the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    polite_num = 1\n    is_prime_count = 0\n    count = 1\n    \n    while is_prime_count < n:\n        polite_num += 1\n        if is_prime(polite_num):\n            is_prime_count += 1\n            \n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_polite(n):\n    polite = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n    if n in polite:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print(is_polite(10)) # should return True\n    print(is_polite(100)) # should return True\n    print(is_polite(500)) # should return False\n    print(is_polite(1000)) # should return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = []\n    for i in range(1, n+1):\n        polite_numbers.append(i*(2*i - 1))\n    return polite_numbers[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    if n <= 1: \n        return n\n    else: \n        # Generate the first two numbers in the sequence\n        a = 1\n        b = 2\n\n        # Loop to generate the rest of the numbers\n        for i in range(2, n+1):\n            # Check if the current number is polite\n            if a % 3 == 0 and b % 3 == 0:\n                return a\n            else:\n                a += 1\n                b += 1\n\n        # If we've made it this far, it means we didn't find the nth polite number\n        return -1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    while count < n:\n        count += 1\n        polite = math.ceil(math.sqrt(count)) * math.ceil(math.sqrt(count))\n        if is_prime(polite):\n            return polite\n\ndef is_prime(num): \n    if num < 2: \n        return False\n    for i in range(2, int(math.sqrt(num))+1): \n        if num % i == 0: \n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function returns the nth polite number. \n    '''\n    # initialize the polite number as 1\n    polite = 1\n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the current number is prime or not\n        if is_prime(i):\n            # if prime, check if the difference between i and polite is prime or not\n            if is_prime(i-polite):\n                # if difference is prime, add the difference to polite\n                polite += i-polite\n    # return the nth polite number\n    return polite "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # initialize variables\n    current_num = 1\n    current_num_in_words = \"\"\n    is_polite = False\n\n    # loop until nth polite number is found\n    while current_num <= n:\n        # check if current number is a polite number\n        if is_polite_number(current_num):\n            # if yes, check if it is the nth polite number\n            if current_num == n:\n                is_polite = True\n            # if current number is the nth polite number, break the loop\n            break\n        # if current number is not a polite number, increment it and continue\n        current_num += 1\n\n    # if nth polite number is found, print it in words\n    if is_polite:\n        print(f\"{n}th polite number is {current_num_in_words}\")\n    else:\n        print(f\"There is no {n}th polite number.\")\n\ndef is_polite_number(num):\n    \"\"\"\n    Function to check if a given number is a polite number.\n    \"\"\"\n    # define the words for the numbers\n    words = {1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5: \"five\", 6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\", 10: \"ten\", 11: \"eleven\", 12: \"twelve\", 13: \"thirteen\", 14: \"fourteen\", 15: \"fifteen\", 16: \"sixteen\", 17: \"seventeen\", 18: \"eighteen\", 19: \"nineteen\", 20: \"twenty\"}\n\n    # initialize variables\n    words_list = []\n    current_word = \"\"\n\n    # loop through each digit of the number\n    for digit in str(num):\n        # check if the digit is already in the words_list\n        if digit in words:\n            # if yes, append it to the current_word\n            current_word += words[digit]\n        # if the digit is not in the words_list, append it to the words_list\n        else:\n            # if the current_word is not empty, add it to the words_list\n            if current_word:\n                words_list.append(current_word)\n                current_word = \"\"\n            # add the digit to the current_word\n            current_word += str(digit)\n\n    # if the current_word is not empty, add it to the words_list\n    if current_word:\n        words_list.append(current_word)\n\n    # loop through each word in the words_list\n    for word in words_list:\n        # check if the word is in the polite_words list\n        if word in polite_words:\n            # if yes, return True\n            return True\n\n    # if no word in the words_list is in the polite_words list, return False\n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        count = 0\n        for i in range(2, n+1):\n            if is_prime(i):\n                count += 1\n                if count == n:\n                    return i\n        return None\n\n    def nth_factorial(n):\n        count = 0\n        for i in range(1, n+1):\n            count *= i\n        return count\n\n    def nth_polite(n):\n        polite = min(nth_prime(n), nth_factorial(n))\n        return polite\n\n    return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [2, 5, 7, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]\n    for i in range(len(polite_numbers)):\n        if polite_numbers[i] == n:\n            return polite_numbers[i]\n    return -1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = 1\n    b = 2\n    \n    # Initialize variables for counting number of polites\n    polites = 0\n    count = 0\n    \n    # Loop until count reaches n\n    while count < n:\n        # Calculate next polite number\n        c = a + b\n        \n        # Check if c is a prime number\n        if is_prime(c):\n            # Increment count of polites\n            polites += 1\n            \n            # Check if count reaches n\n            if polites == n:\n                # Return c\n                return c\n            \n            # Update values for next iteration\n            a = b\n            b = c\n            count += 1\n            \n    # If count < n, return None\n    return None\n\ndef is_prime(n):\n    '''\n    A helper function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    \n    # Check if n is divisible by any number from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    n = len(l1)\n    if n <= 1:\n        return pairs\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        if i < len(l1)-1:\n            l2.append((l1[i], l1[i+1]))\n    return l2"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in the given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    n = len(l1)\n    for i in range(n):\n        if i + 1 < n:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input. It returns the count of pairs whose sum is equal to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and the sum as input, and returns the count of pairs whose sum is equal to'sum'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and a sum as arguments. It then counts the number of pairs in the list \n    whose sum is equal to the given sum. The function returns the count.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    This function takes two lists as arguments and returns a new list containing the elements that are present in li1 but not in li2.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # check if both lists have the same length\n    if len(li1)!= len(li2):\n        print(\"Both lists must have the same length.\")\n        return\n    \n    # create a new empty list to store the difference\n    diff_list = []\n    \n    # loop through the first list and compare each element to its corresponding element in the second list\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            diff_list.append(li1[i])\n    \n    # return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns their difference.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n\n    diff_list = []\n\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n\n    for i in li2:\n        if i not in li1:\n            diff_list.append(i)\n\n    return diff_list\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    difference = []\n    for item in li1:\n        if item not in li2:\n            difference.append(item)\n    return difference"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 0\n    sum = 0\n    num = 1\n\n    while count < n:\n        if num % 2!= 0:\n            sum += num ** 4\n            count += 1\n        num += 2\n\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**4\n        i += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    num = 1\n    sum = 0\n    for i in range(1, n+1):\n        num += 2*i-1\n        sum += num**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 1: # checking if the number is odd\n            sum += i**4 # adding the fourth power of the number to the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1):\n        sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initializing the sum variable to 0\n    sum = 0\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the fourth power of the current odd number to the sum variable\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 1\n    odd_num = 1\n    sum_of_fourth_powers = 0\n    \n    while count <= n:\n        sum_of_fourth_powers += odd_num ** 4\n        odd_num += 2\n        count += 1\n        \n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize the sum variable\n    sum = 0\n\n    # iterate n times\n    for i in range(n):\n        # add the fourth power of the current odd number to the sum\n        sum += i**4\n\n    # return the sum\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] in ['(', '[', '{']:\n            stack.append(exp[i])\n        elif exp[i] in [')', ']', '}']:\n            if not stack:\n                return False\n            if exp[i] == ')' and stack[-1] == '(':\n                stack.pop()\n            elif exp[i] == ']' and stack[-1] == '[':\n                stack.pop()\n            elif exp[i] == '}' and stack[-1] == '{':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum():\n            continue\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in ['(', '[', '{']:\n                if char!= top_char:\n                    return False\n            elif char in [')', ']', '}']:\n                if char == ')' and top_char!= '(':\n                    return False\n                elif char == ']' and top_char!= '[':\n                    return False\n                elif char == '}' and top_char!= '{':\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in ['(', '[']:\n                if top_char == '[':\n                    continue\n                elif top_char == '{':\n                    if top_char == '{':\n                        continue\n                    elif top_char == '(':\n                        continue\n            else:\n                if top_char == ')':\n                    continue\n                elif top_char == ']':\n                    continue\n                elif top_char == '}':\n                    continue\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # create a stack\n    stack = deque()\n\n    # iterate through the expression\n    for char in exp:\n        # if the character is an opening bracket, push it onto the stack\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        # if the character is a closing bracket, check if its corresponding opening bracket exists in the stack\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            # if the top character is not an opening bracket, return False\n            if top_char not in ['(', '{', '[']:\n                return False\n            # if the top character is an opening bracket, check if the corresponding closing bracket exists in the stack\n            if top_char == '(' and char!= ')':\n                if stack and stack[-1] == ')':\n                    stack.pop()\n                else:\n                    return False\n            if top_char == '{' and char!= '}':\n                if stack and stack[-1] == '}':\n                    stack.pop()\n                else:\n                    return False\n            if top_char == '[' and char!= ']':\n                if stack and stack[-1] == ']':\n                    stack.pop()\n                else:\n                    return False\n\n    # if the stack is not empty, return False\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    opening_brackets = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n\n    for bracket in exp:\n        if bracket in opening_brackets:\n            stack.append(bracket)\n        elif not stack:\n            return False\n        else:\n            top_bracket = stack.pop()\n            if opening_brackets[top_bracket]!= bracket:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_expression(exp):\n    stack = deque()\n    opening_parentheses = {'(', '[', '{'}\n    closing_parentheses = {')', ']', '}'}\n\n    for char in exp:\n        if char in opening_parentheses:\n            stack.append(char)\n        elif char in closing_parentheses:\n            if not stack or stack.pop() not in opening_parentheses.values():\n                return False\n\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    \n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n            \n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function removes all the words with length K in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    # split the string into words\n    words = test_str.split()\n    # initialize an empty list to store the words with K length or less\n    filtered_words = []\n    # loop through each word in the list and check if its length is greater than or equal to K\n    for word in words:\n        if len(word) >= K:\n            # add the word to the filtered list if it has length greater than or equal to K\n            filtered_words.append(word)\n    # join the filtered words back into a string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern,text)\n    if matches:\n        for match in matches:\n            print(f'Match: {match.group()}')\n            print(f'Position: {match.start()}')\n            print(f'End Position: {match.end()}')\n        return None\n    else:\n        return \"No match found.\""
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n\n    Args:\n    text: The string to search in.\n    pattern: The pattern to match.\n\n    Returns:\n    A tuple containing two elements:\n\n    - The first element is the count of occurrences.\n    - The second element is a list of tuples containing the position and occurrence of each substring in the text. If no match is found, return None.\n\n    Example:\n    >>> occurance_substring('hello world', 'l')\n    (2, [(3, 'l'), (7, 'l')])\n    \"\"\"\n\n    # Convert pattern to regex pattern\n    regex = re.compile(pattern)\n\n    # Find all substrings using regex pattern\n    matches = regex.finditer(text)\n\n    # Check if any match is found\n    if not matches:\n        return None\n\n    # Create a list of tuples containing the position and occurrence of each substring\n    occurrences = []\n    for match in matches:\n        position = match.start()\n        occurrence = match.group()\n        occurrences.append((position, occurrence))\n\n    return len(occurrences), occurrences"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    \n    result = []\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        result.append((match, start_index, end_index))\n    \n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        position = match.start()\n        occurrence = match.group()\n        return (position,occurrence)\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return (result.group(), result.start(), result.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n        elif i % 2 == 1:\n            if len(nums[i:]) % 2 == 0:\n                return False\n\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if i not in nums or nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # Initialize variables to store odd numbers and their corresponding positions\n    odd_nums = []\n    odd_positions = []\n\n    # Loop through the list and find odd numbers and their positions\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_nums.append(nums[i])\n            odd_positions.append(i)\n\n    # Check if every odd index contains odd numbers\n    for i in range(1, len(odd_nums), 2):\n        if odd_positions.count(i) == 0:\n            return False\n\n    # If all the conditions are met, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0 or nums[i] % 2 == 1:\n            print(f\"The odd number at index {i} is: {nums[i]}\")\n        else:\n            print(f\"The odd number at index {i} is: {nums[i]} which is not odd\")\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if any(x % 2!= 0 for x in nums[i:]):\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        for j in range(i+2, len(nums), 2):\n            if nums[j] % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    if len(nums) % 2!= 0:\n        return \"The length of the list should be even.\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    # Check if the length of the list is odd\n    if len(nums) % 2 == 0:\n        # If the length is even, the odd position will always be the same\n        return True\n    \n    # Iterate through the list starting from the second element (index 1)\n    for i in range(1, len(nums), 2):\n        # Check if the current element is odd\n        if nums[i] % 2 == 1:\n            # If an odd number is found, return False\n            return False\n    \n    # If no odd number was found, return True\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            if any(test_str[k] in vowels for k in range(i, j)):\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i] in vowels and test_str[i-1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n\n    # create a dictionary to store unique elements and their count\n    count_dict = {}\n\n    # loop through the list\n    for num in arr:\n        # if the element is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n\n    # initialize the sum of unique elements to 0\n    unique_sum = 0\n\n    # loop through the count dictionary to calculate the sum of unique elements\n    for num, count in count_dict.items():\n        if count == 1:\n            unique_sum += num\n\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store the unique elements of the array\n    unique_set = set(arr)\n\n    # find the sum of the unique elements in the set\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the elements and their counts\n    count_dict = {}\n    \n    # Iterate through the list and update the counts in the dictionary\n    for num in arr:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    # Create an empty set to store the non-repeated elements\n    non_repeated_set = set()\n    \n    # Iterate through the dictionary and add the non-repeated elements to the set\n    for num in count_dict:\n        if count_dict[num] == 1:\n            non_repeated_set.add(num)\n    \n    # Find the sum of the non-repeated elements\n    sum_of_non_repeated = sum(non_repeated_set)\n    \n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #creating a dictionary to store the elements of the list\n    dict_obj = {}\n    #initializing the sum variable to 0\n    sum = 0\n    #looping through the list\n    for num in arr:\n        #checking if the element is already present in the dictionary\n        if num not in dict_obj:\n            #if not present, add it to the dictionary and update the sum variable\n            dict_obj[num] = True\n            sum += num\n    #returning the final sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n\n    # create a set to keep track of unique elements\n    unique_set = set(arr)\n\n    # initialize sum to 0\n    sum_ = 0\n\n    # iterate over unique set and add sum to sum variable\n    for num in unique_set:\n        sum_ += num\n\n    return sum_\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Remove duplicates from the list\n    unique_list = list(set(arr))\n    # Initialize the sum variable to zero\n    sum_of_unique = 0\n    # Loop through the unique list and add its elements to the sum variable\n    for num in unique_list:\n        sum_of_unique += num\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Create a set of elements that have a frequency of 1 in the dictionary\n    one_freq = set(num for num in freq if freq[num] == 1)\n    \n    # Calculate the sum of non-repeated elements by summing up the elements in the set\n    non_repeated_sum = sum(num for num in arr if num not in one_freq)\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # iterate through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    \n    # iterate through the frequency dictionary and update the sum of non-repeated elements\n    for key, value in freq.items():\n        if value == 1:\n            sum_non_repeated += int(key)\n    \n    # return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = list(set(arr))\n    sum_of_unique = sum(unique_elements)\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    # initialize the sum variable to 0\n    sum_of_unique = 0\n    # loop through the unique set and add the sum of its elements to the sum_of_unique variable\n    for num in unique_set:\n        sum_of_unique += num\n    # return the sum of unique elements\n    return sum_of_unique"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Input:\n    list1 (list): A list of integers\n\n    Output:\n    list: A list of sublists containing consecutive duplicates of the input list elements\n    '''\n\n    # Create an iterator to group the list elements by their indices\n    grouped_iter = groupby(enumerate(list1), lambda x: x[0] == x[1] - 1)\n\n    # Initialize an empty list to store the sublists\n    result = []\n\n    # Iterate through the grouped iterator and pack consecutive duplicates into sublists\n    for _, group in grouped_iter:\n        sublist = [list1[i] for i in group]\n        result.append(sublist)\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # groupby() function groups the elements of the list based on their frequency.\n    # The result is a generator object that returns a group of elements and a key for the group.\n    # We use the key to determine whether the elements are consecutive duplicates or not.\n    grouped_list = groupby(list1)\n    sublists = []\n    prev_key = None\n    for key, group in grouped_list:\n        # Check if the key is different from the previous key.\n        # If it is, then the current group is a sublist and needs to be appended to the list.\n        if key!= prev_key:\n            sublists.append(list(group))\n        prev_key = key\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    groups = []\n    for i, group in enumerate(groupby(lst)):\n        groups.append(list(group))\n        if len(groups[-1]) > 1:\n            groups[-1] = [groups[-1][0]]\n    return groups"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Pack consecutive duplicates of a list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(lst) if k == 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Group the list by consecutive elements\n    grouped = groupby(list1)\n\n    # Iterate over the groups and pack consecutive duplicates into sublists\n    result = []\n    for group in grouped:\n        if group[0] == group[1]:\n            group = list(group)\n            result.append(group)\n        else:\n            result.append(list(group))\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1)):\n        if key == 0 or (key == 1 and list1[key][1]!= list1[key-1][1]):\n            result.append([list1[key][1]])\n        else:\n            result[-1].append(list1[key][1])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Create a dictionary to store the consecutive duplicates of each element in the list.\n    consecutive_duplicates = {}\n\n    # Iterate over the list elements.\n    for element in list1:\n        # Check if the current element is the same as the previous element.\n        if element == consecutive_duplicates.get(element):\n            # If it is, then the current element is a consecutive duplicate.\n            # Get the list of consecutive duplicates for this element.\n            consecutive_duplicates_list = consecutive_duplicates[element]\n\n            # If the list is empty, add the current element to it.\n            if not consecutive_duplicates_list:\n                consecutive_duplicates_list = [element]\n            # Otherwise, add the current element and the previous element to the list.\n            else:\n                consecutive_duplicates_list.append(element)\n\n            # Update the consecutive duplicates dictionary with the new list.\n            consecutive_duplicates[element] = consecutive_duplicates_list\n        # If the current element is different from the previous element, then it is not a consecutive duplicate.\n        else:\n            # If there are any consecutive duplicates for the previous element, add them to a new sublist and update the dictionary.\n            if consecutive_duplicates:\n                sublist = list(consecutive_duplicates.values())\n                for i in range(len(sublist)):\n                    sublist[i] = [x for _, x in groupby(sublist[i])]\n                sublist = [item for sublist in sublist for item in sublist]\n                consecutive_duplicates = {k: v for k, v in consecutive_duplicates.items() if k not in sublist}\n\n            # Reset the consecutive duplicates dictionary for the current element.\n            consecutive_duplicates = {element: [element]}\n\n    # If there are any remaining consecutive duplicates in the dictionary, add them to a new sublist and update the dictionary.\n    if consecutive_duplicates:\n        sublist = list(consecutive_duplicates.values())\n        for i in range(len(sublist)):\n            sublist[i] = [x for _, x in groupby(sublist[i])]\n        sublist = [item for sublist in sublist for item in sublist]\n        consecutive_duplicates = {k: v for k, v in consecutive_duplicates.items() if k not in sublist}\n\n    # Convert the consecutive duplicates dictionary to a list of sublists.\n    sublist = list(consecutive_duplicates.values())\n    for i in range(len(sublist)):\n        sublist[i] = [x for _, x in groupby(sublist[i])]\n    sublist = [item for sublist in sublist for item in sublist]\n\n    return sublist"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    grouped_list = [(k, list(v)) for k, v in grouped_list]\n    return [list(sublist) for _, sublist in grouped_list]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list and returns a new list where consecutive duplicates of elements are grouped together in sublists.\n    '''\n    # Get the group of consecutive elements and return a list of sublists\n    return [list(group) for key, group in groupby(sorted(lst), lambda x: x) if key == lst[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return list(map(list, groupby(lst)))"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create a dictionary to store the counts\n    count_dict = {}\n    # iterate over each list in the input list\n    for lst in list1:\n        # check if the list has already been seen before\n        if lst in count_dict:\n            # increment the count for this list\n            count_dict[lst] += 1\n        else:\n            # add the list to the dictionary with a count of 1\n            count_dict[lst] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary\n    sublist_dict = {}\n\n    # Iterate over the elements of the list\n    for element in list1:\n\n        # Check if the element is a list\n        if isinstance(element, list):\n\n            # Turn the list into a tuple\n            element_tuple = tuple(element)\n\n            # If the tuple is not in the dictionary, add it with a count of 1\n            if element_tuple not in sublist_dict:\n                sublist_dict[element_tuple] = 1\n\n            # If the tuple is already in the dictionary, increment its count by 1\n            else:\n                sublist_dict[element_tuple] += 1\n\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if tuple(sublist) in sublist_count:\n            sublist_count[tuple(sublist)] += 1\n        else:\n            sublist_count[tuple(sublist)] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for lst in list1:\n        # Turn list into tuple and check if tuple is already in dictionary\n        tup = tuple(lst)\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            # If tuple not in dictionary, add it and set value to 1\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if type(item) == list:\n            sublist = tuple(item)\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        if tuple(sublist) in count:\n            count[tuple(sublist)] += 1\n        else:\n            count[tuple(sublist)] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        count[tuple(sublist)] = count.get(tuple(sublist), 0) + 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    for i in range(len(list1)):\n        unique_list.append(tuple(list1[i]))\n    count_dict = {}\n    for i in unique_list:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the unique sublists and their counts\n    unique_sublists_dict = {}\n    # Loop through the list of lists and count the number of occurrences of each sublist\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it exists in the dictionary\n        if tuple(sorted(sublist)) in unique_sublists_dict:\n            unique_sublists_dict[tuple(sorted(sublist))] += 1\n        # If the sublist doesn't exist in the dictionary, add it to the dictionary with a count of 1\n        else:\n            unique_sublists_dict[tuple(sorted(sublist))] = 1\n    # Return the dictionary of unique sublists and their counts\n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    sublists = []\n    \n    # Convert lists to tuples\n    for item in list1:\n        if not isinstance(item, list):\n            sublists.append((item,))\n        else:\n            sublists.append(tuple(item))\n    \n    # Count the occurrences of each tuple\n    sublist_count = {}\n    for sublist in sublists:\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    \n    return sublist_count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Get all the unique combinations of tuples in the list\n    unique_tuples = list(set(combinations(test_list, r=2)))\n\n    # Find the sum of each combination and check if it exists in the list\n    result = []\n    for combination in unique_tuples:\n        if sum(combination) in test_list:\n            result.append(combination)\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def sum_of_tuples(lst):\n        return sum(lst)\n\n    def comb_of_tuples(lst, target_sum):\n        return list(combinations(lst, len(lst)))\n\n    def find_combinations_helper(lst, target_sum, combinations_list, current_sum):\n        if current_sum == target_sum:\n            combinations_list.append(tuple(lst))\n            return\n        elif current_sum > target_sum:\n            return\n\n        for i in range(len(lst)):\n            lst[i], lst[len(lst)-1] = lst[len(lst)-1], lst[i]\n            find_combinations_helper(lst, target_sum, combinations_list, current_sum+lst[i])\n            lst[i], lst[len(lst)-1] = lst[len(lst)-1], lst[i]\n\n    # Find the combinations of tuples with target sum\n    target_sum = sum_of_tuples(test_list)\n    lst = sorted(test_list, reverse=True)\n    combinations_list = []\n    find_combinations_helper(lst, target_sum, combinations_list, 0)\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    for i in range(1, total_sum + 1):\n        for c in combinations(test_list, len(test_list)):\n            if sum(c) == i:\n                print(c)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set of tuples to store unique tuples in the list\n    unique_tuples = set(tuple(i) for i in test_list)\n\n    # Use itertools to generate all combinations of sums with unique tuples\n    for combination in combinations(unique_tuples, r=2):\n        if sum(combination) == 0:\n            # Check if the sum of the tuples in the combination is zero\n            print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)+1):\n        for c in combinations(test_list, i):\n            if sum(c) == 0:\n                print(c)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Create a set to store all unique tuples from the input list\n    unique_tuples = set(tuple(sorted(t)) for t in test_list)\n    \n    # Find all possible combinations of sums with tuples in the input list\n    combinations_list = []\n    for i in range(1, len(unique_tuples) + 1):\n        for combination in combinations(unique_tuples, i):\n            combinations_list.append(combination)\n    \n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            for k in range(j + 1, len(test_list)):\n                if sum(test_list[i]) == sum(test_list[j]) + sum(test_list[k]):\n                    print(test_list[i], test_list[j], test_list[k])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # sort the list of tuples\n    test_list.sort()\n\n    # initialize the result list\n    result = []\n\n    # loop through all possible pairs\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n\n            # calculate the sum of the tuples\n            s = sum(test_list[i]) + sum(test_list[j])\n\n            # check if the sum is present in the list and if it's unique\n            if s in test_list and len(set([s])) == 1:\n                # create a tuple of the sorted tuples\n                t = tuple(sorted((test_list[i], test_list[j])))\n\n                # check if the tuple is present in the result list\n                if t not in result:\n                    result.append(t)\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes in a list of tuples and returns the combinations of sums with tuples in the list.\n    '''\n    combination_list = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            combination_list.append(tuple(j))\n    return combination_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    result = []\n\n    for i in range(1, total_sum + 1):\n        comb = combinations(test_list, i)\n        for comb_set in comb:\n            if sum(comb_set) == total_sum:\n                result.append(tuple(comb_set))\n\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function returns True if the count of divisors is even and False otherwise.\n    '''\n\n    # calculate the count of divisors using the formula: count = n * (1/2)^(n/2)\n    count = int(math.sqrt(n)) + 1\n    if n % 2 == 0:\n        count -= 1\n\n    # check if the count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function counts the number of divisors of a given integer n.\n    The function returns a tuple (divisor_count, is_even_divisor_count)\n    where divisor_count is the number of distinct divisors of n,\n    and is_even_divisor_count is True if the number of even divisors is even,\n    and False otherwise.\n    '''\n    divisors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            if i!= n // i:\n                divisors.add(n // i)\n    divisors.add(n)\n    divisor_count = len(divisors)\n\n    if n % 2 == 0:\n        even_divisors = set()\n        for divisor in divisors:\n            if divisor % 2 == 0:\n                even_divisors.add(divisor)\n        even_divisor_count = len(even_divisors)\n    else:\n        even_divisor_count = divisor_count\n\n    return (divisor_count, even_divisor_count)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    if n < 2:\n        return False\n    divisors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n    if n > 1: \n        count += 1 \n    if count % 2 == 0: \n        print(\"The count of divisors of\", n, \"is even.\")\n    else: \n        print(\"The count of divisors of\", n, \"is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    # Calculate the number of divisors of n\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    \n    # Check if the count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even or odd.\n    '''\n    if n == 1:\n        return True\n    elif n < 1:\n        return False\n    else:\n        divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n        count = len(divisors)\n        if count % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    sum_odd = 0\n    n = len(arr)\n    for i in range(n):\n        if i%2 == 0:\n            continue\n        for j in range(i, n):\n            if j%2 == 1:\n                sum_odd += arr[j]\n            else:\n                break\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n\n    total_sum = 0\n    n = len(arr)\n\n    # Traverse the array\n    for i in range(n):\n\n        # Check if the current element is odd length\n        if i == 0 or i == n-1 or (i > 0 and i < n-1 and arr[i] % 2!= 0):\n\n            # Calculate the sum of odd length subarrays\n            subarray_sum = sum(arr[i:i+2])\n\n            # Add the sum to the total sum\n            total_sum += subarray_sum\n\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    # Find the sum of all odd length subarrays\n    n = len(arr)\n    result = 0\n    for i in range(1, n):\n        if i % 2!= 0:  # If the length of the subarray is odd\n            result += sum(arr[i-1:i+1])  # Add the elements of the subarray\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum_odd_length = 0\n    \n    for i in range(n):\n        for j in range(i+2, n+1, 2):\n            sub_arr = arr[i:j]\n            sum_odd_length += sum(sub_arr)\n            \n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    # Initialize a variable to store the sum of all odd-length subarrays\n    total_sum = 0\n\n    # Loop through each subarray in the input array\n    for i in range(1, len(arr)):\n        # If the subarray has an odd length, add its sum to the total sum\n        if i % 2!= 0:\n            total_sum += sum(arr[i-1:i+1])\n\n    # Return the total sum of all odd-length subarrays\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize a variable to store the sum of odd length subarrays\n    total_sum = 0\n\n    # Loop through each element of the input array\n    for i in range(len(arr)):\n        # Initialize a variable to store the current subarray\n        subarray = []\n\n        # Loop through each element to the left of the current element\n        for j in range(i):\n            # Append the element to the subarray\n            subarray.append(arr[j])\n\n            # Check if the length of the subarray is odd\n            if len(subarray) % 2 == 1:\n                # Add the odd-length subarray to the total sum\n                total_sum += sum(subarray)\n\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize the sum variable with 0\n    sum = 0\n\n    # Traverse through the array\n    for i in range(len(arr)):\n        # Initialize the current subarray sum with 0\n        current_sum = 0\n        # Traverse through the remaining elements of the array\n        for j in range(i, len(arr)):\n            # Check if the current element is odd\n            if j%2!= 0:\n                # Add the current element to the subarray sum\n                current_sum += arr[j]\n            # If the current element is not odd, stop adding to the subarray sum\n            else:\n                break\n        # Add the current subarray sum to the sum variable\n        sum += current_sum\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    # Initialize a variable to store the sum of odd length subarrays\n    sum_odd = 0\n\n    # Loop through each subarray of the input list\n    for i in range(len(arr)):\n        # If the current subarray has odd length\n        if len(arr[i]) % 2 == 1:\n            # Add the sum of the current subarray to the sum_odd variable\n            sum_odd += sum(arr[i])\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2!= 0:\n                sum += arr[j]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2!= 0:\n                total_sum += sum(arr[i:j+1])\n    return total_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    # Convert RGB to float\n    r, g, b = [float(x) / 255 for x in (r, g, b)]\n    \n    # Convert r, g, b to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val\n    \n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    elif max_val == b:\n        h = 4 + (r - g) / delta\n    \n    h *= 60\n    \n    if h < 0:\n        h += 360\n    \n    s = delta / (max_val + min_val)\n    v = max_val\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an rgb color to hsv color.\n    \"\"\"\n    # Convert r, g, b to floats\n    r, g, b = float(r)/255.0, float(g)/255.0, float(b)/255.0\n    \n    # Calculate minimum and maximum values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    # Calculate delta\n    delta = max_val - min_val\n    \n    # Calculate h, s and v\n    h = 0\n    s = 0\n    \n    if max_val == min_val:\n        # achromatic color\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = round(h * 60, 1)\n        \n        if h < 0:\n            h += 360\n        \n        s = delta / max_val\n        \n        if s == 0:\n            v = 0\n        else:\n            v = max_val\n    \n    # Return hsv color as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255 # convert rgb values to 0-1 range\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == 0:\n        h = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / delta)\n    elif max_val == g:\n        h = 60 * ((b - r) / delta + 2)\n    elif max_val == b:\n        h = 60 * ((r - g) / delta + 4)\n\n    if h < 0:\n        h += 360\n\n    hsv_color = (h, delta/max_val, max_val)\n\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, b to float values\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # Find max and min values among r, g, b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate difference between max and min values\n    diff = max_val - min_val\n\n    # Calculate hue value\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (g - b) / diff\n    elif max_val == g:\n        hue = 2 + (b - r) / diff\n    elif max_val == b:\n        hue = 4 + (r - g) / diff\n\n    # Convert hue value to degrees\n    hue = hue * 60\n    if hue < 0:\n        hue += 360\n\n    # Calculate saturation value\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n\n    # Calculate value value\n    value = max_val\n\n    # Return hsv values as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert the given RGB color to HSV color\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    \n    if max_color == min_color:\n        h = 0\n        s = 0\n    else:\n        delta = max_color - min_color\n        \n        if r == max_color:\n            h = (g - b) / delta\n        elif g == max_color:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h *= 60\n        \n        if h < 0:\n            h += 360\n        \n        s = delta / max_color\n        \n    v = max_color / 255\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Calculate the maximum and minimum values of each color channel\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    delta = max_value - min_value\n\n    # Calculate the hue based on the difference between the maximum and minimum values\n    if max_value == r:\n        hue = (g - b) / delta\n    elif max_value == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    hue = round(hue * 60)\n\n    # Calculate the saturation and value based on the maximum and minimum values\n    saturation = 0\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_value\n\n    value = max_value\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255, g / 255, b / 255  # Scale RGB values to 0-1 range\n    \n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    \n    h, s, v = 0, 0, max_color\n    \n    if max_color == min_color:\n        h, s = 0, 0\n    else:\n        d = max_color - min_color\n        s = max_color / max(r, g, b)\n        \n        if max_color == r:\n            h = (g - b) / d\n        elif max_color == g:\n            h = 2 + (b - r) / d\n        else:\n            h = 4 + (r - g) / d\n        \n        h *= 60\n        \n        if h < 0:\n            h += 360\n            \n    return round(h), round(s * 100), round(v * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    hue = 0.0\n\n    if max_value == min_value:\n        hue = 0.0\n    elif max_value == r:\n        hue = 60.0 * ((g - b) / (max_value - min_value)) % 6.0\n    elif max_value == g:\n        hue = 60.0 * ((b - r) / (max_value - min_value)) + 120.0\n    else:\n        hue = 60.0 * ((r - g) / (max_value - min_value)) + 240.0\n\n    saturation = 0.0\n    if max_value!= 0.0:\n        saturation = (max_value - min_value) / max_value\n\n    value = max_value\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    delta = cmax - cmin\n\n    v = cmax\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b)/delta) % 6\n    elif cmax == g:\n        h = (b - r)/delta + 2\n    else:\n        h = (r - g)/delta + 4\n\n    h = h*60\n\n    if h < 0:\n        h += 360\n\n    if h < 60:\n        s = delta/cmax\n    else:\n        s = delta/cmax\n\n    if s == 0:\n        hsv = (h, 0, v)\n    else:\n        s = s*100\n\n        hsv = (h, s, v)\n\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6\n\n        if h < 0:\n            h = h + 1\n\n        s = delta / max_val\n\n    v = max_val\n\n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first even and first odd numbers in the list.\n    \"\"\"\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2!= 0]\n    return even[0] * odd[0]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product *= num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product *= num\n                \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return list1[0] * list1[1]\n    else:\n        return -1"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as an input and returns the product of first even and odd number of the list.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    # Iterate through the list\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        # If both even and odd numbers are found, calculate the product\n        if even_count > 0 and odd_count > 0:\n            product = num * product\n            even_count = 0\n            odd_count = 0\n\n    # Return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product *= num\n        elif num % 2!= 0:\n            odd_count += 1\n            if odd_count == 1:\n                product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first\n    even and odd numbers in the list. If there are no even and odd numbers in the list,\n    it returns 0.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return lst[0] * lst[-1]\n    else:\n        return 0\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    # Initialize variables for even and odd counts\n    even_count = 0\n    odd_count = 0\n\n    # Iterate through the list\n    for num in lst:\n        # Check if the number is even\n        if num % 2 == 0:\n            even_count += 1\n        # Check if the number is odd\n        else:\n            odd_count += 1\n\n    # Return the product of even and odd counts\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd number.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count == 1 and odd_count == 1:\n            return lst[0] * lst[1]\n    return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n\n    if even_count == 0:\n        return \"There are no even numbers in the list.\"\n    elif odd_count == 0:\n        return \"There are no odd numbers in the list.\"\n    else:\n        return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma\n    tuple_str = test_str.split(',')\n    # Convert each string to integer\n    int_tuple = tuple(int(x) for x in tuple_str)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    try:\n        # Split the input string into a list of strings separated by spaces\n        str_list = test_str.split()\n\n        # Create an empty list to store the integer tuples\n        int_list = []\n\n        # Iterate over each string in the list\n        for i in range(len(str_list)):\n            # Check if the current string is an integer\n            if str_list[i].isdigit():\n                # If it is, convert it to an integer and append it to the list\n                int_list.append(int(str_list[i]))\n            # If it's not an integer, raise a ValueError\n            else:\n                raise ValueError(\"Input string is not a valid tuple string.\")\n\n        # Return the converted integer tuple\n        return tuple(int_list)\n\n    # If there's an error in the input string, raise it\n    except ValueError as ve:\n        raise ve\n\n    # If there are no errors, return the original input string\n    else:\n        return test_str"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define a list to store the integer tuple\n    int_tuple = []\n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is a digit\n        if char.isdigit():\n            # If it is a digit, add it to the integer tuple as an integer\n            int_tuple.append(int(char))\n    # Return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of substrings\n    substrings = test_str.split(',')\n\n    # Initialize an empty list to hold the integer tuples\n    int_tuples = []\n\n    # Loop through each substring in the list\n    for substring in substrings:\n\n        # Split the substring into a list of integers\n        sublist = [int(i) for i in substring.split()]\n\n        # If the list contains only integers, convert it to an integer tuple and append it to the int_tuples list\n        if all(isinstance(i, int) for i in sublist):\n            int_tuples.append(tuple(sublist))\n\n    # Return the integer tuples list\n    return int_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    Args:\n    test_str (str): A string in the form (1, 2, 3)\n\n    Returns:\n    int_tuple (tuple): The integer tuple corresponding to the input string.\n\n    Examples:\n    >>> tuple_str_int(\"(1, 2, 3)\")\n    (1, 2, 3)\n\n    \"\"\"\n    # split the string by comma and split each part by whitespace\n    str_parts = test_str.replace(\"(\", \"\").replace(\")\", \"\").split(\",\")\n    # convert each part to an integer and append it to the result list\n    int_tuple = tuple(int(s.strip()) for s in str_parts)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    # Split the string by the comma separator\n    str_tuple = test_str.split(',')\n    # Iterate through each string in the tuple\n    for string in str_tuple:\n        # Convert the string to an integer\n        int_num = int(string)\n        # Add the integer to the tuple\n        int_tuple += (int_num,)\n    # Return the converted integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes a tuple string and returns an integer tuple.\n    '''\n    # Convert the tuple string to a list of tuples\n    tup_list = eval(test_str)\n    # Iterate through the list of tuples and convert each tuple to an integer\n    int_tup = tuple(int(x) for x in tup_list[0])\n    return int_tup"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert tuple string to list of integers\n    int_list = [int(i) for i in test_str]\n    # Convert list of integers to tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a list of words\n    words = test_str.split()\n    # create an empty list to store the integers\n    integers = []\n    # iterate over each word in the list\n    for word in words:\n        # check if the word is an integer\n        try:\n            # if it is, add it to the list of integers\n            integers.append(int(word))\n        except ValueError:\n            # if it is not, do nothing\n            pass\n    # return the list of integers as a tuple\n    return tuple(integers)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the tuple string to a list of tuples\n    str_list = test_str.split(',')\n    int_list = []\n    # Convert each string in the list to an integer and append it to the list\n    for item in str_list:\n        int_list.append(int(item.strip()))\n    # Return the list of integers as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n\n    # Using binary search to find the right insertion point\n    index = bisect.bisect_right(a, x)\n\n    # If the value is already present in the list, return its index\n    if index!= len(a) and a[index] == x:\n        return index\n\n    # If the value is greater than all elements in the list, return the length of the list\n    elif index == len(a):\n        return len(a)\n\n    # If the value is smaller than all elements in the list, return 0\n    elif a[index - 1] > x:\n        return 0\n\n    # If the value is in between elements, return the index of the previous element\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif x < a[index]:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect.bisect_right to find the index of x in a\n    index = bisect.bisect_right(a, x)\n    \n    # If x is already in a, return index\n    if index < len(a) and a[index] == x:\n        return index\n    \n    # Otherwise, find the rightmost index i such that a[i] >= x and insert x at index i+1\n    for i in range(index, len(a)):\n        if a[i] >= x:\n            return i + 1\n    \n    # If the loop completes, x must be the last element in the list\n    return len(a)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(text_match_three(text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def text_match_three(text):\n    pattern = re.compile(r'ab{3}')\n    matches = pattern.findall(text)\n    return len(matches)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=.{3,})b'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba..b{2}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str +'' + str(elem) for elem in test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the list and string using the + operator\n    new_tuple = (test_list + test_str)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = [i for i in test_list]\n    new_list.append(test_str)\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, *test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): A list of elements.\n        test_str (str): A string of characters.\n\n    Returns:\n        A new tuple containing both the list and the string.\n    \"\"\"\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str.split())\n    for item in new_tuple:\n        if item not in test_list:\n            new_tuple = None\n            break\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list[0], test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): The list to be added to the new tuple.\n    test_str (str): The string to be converted into a tuple.\n\n    Returns:\n    A new tuple created from the given string and list.\n    \"\"\"\n    # Convert the string into a list of characters\n    chars = list(test_str)\n    # Reverse the list of characters\n    chars.reverse()\n    # Convert the list of characters back into a string\n    new_str = ''.join(chars)\n    # Convert the string into a tuple\n    new_tuple = tuple(new_str)\n    # Add the list to the tuple\n    new_tuple += test_list\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_str + str(test_list))\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count = nums[i] // 2\n            for j in range(i + 2, len(nums), 2):\n                if nums[j] % 2 == 0:\n                    even_count += nums[j] // 2\n            if even_count == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Initialize a variable to keep track of the number of even numbers found so far\n    even_count = 0\n\n    # Iterate through the list and check if each even index contains an even number\n    for i in range(0, len(nums), 2):\n        # If the current number is even, increment the even count\n        if nums[i] % 2 == 0:\n            even_count += 1\n\n    # Check if every even index contains even numbers\n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if any(num % 2 == 0 for num in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:  # even index\n            if nums[i] % 2 == 0:\n                even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:  # Check if index is even\n            if nums[i] % 2 == 0:  # Check if number is even\n                even_count += 1  # Increment even count if number is even\n        else:\n            if nums[i] % 2 == 0:  # Check if number is even, but only if even index\n                even_count += 1  # Increment even count if number is even\n    return even_count == len(nums)  # Return True if even count is equal to number of elements in list\n"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            if i % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and len([num for num in nums[i:] if num % 2 == 0]) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count += 1\n    return count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if sum(x % 2 == 0 for x in nums[i:i+2]) % 2 == 0:\n            return False\n\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return remove_nested(test_tup[0]) + (test_tup[1],)\n    else:\n        return (test_tup,)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Check if the given tuple is a tuple\n    if isinstance(test_tup, tuple):\n        # Remove the nested tuple and return the original tuple\n        return remove_nested(test_tup[0])\n    else:\n        # Return the original tuple\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return [item for sublist in test_tup for item in sublist if not isinstance(item, tuple)]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result_list += remove_nested(item)\n        else:\n            result_list.append(item)\n    return result_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_list += remove_nested(item)\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            new_tup.extend(remove_nested(i))\n        else:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while True:\n        if not isinstance(test_tup, tuple):\n            break\n        else:\n            test_tup = [item for sublist in test_tup for item in sublist]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            flat_list.append(i)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for tup in test_tup for x in tup]"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_lists(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n\n    count = 0\n\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n    arr (list): sorted array\n    x (int): element to find the last position of\n\n    Returns:\n    int: last position of the element or -1 if element is not found in the array.\n    \"\"\"\n    # Find the index of x in the array using binary search\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    # If element is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=len(arr)-1\n    while i>=0 and arr[i]!=x:\n        i-=1\n    if i<0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the index of the last occurrence of the given element in the given sorted array.\n\n    Parameters:\n    arr (list): The sorted array in which to search for the last occurrence of the element.\n    x (any): The element to search for in the array.\n\n    Returns:\n    int: The index of the last occurrence of the element in the array, or -1 if the element is not found.\n    \"\"\"\n    # Initialize left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Keep track of the index of the last occurrence of the element\n    last_index = -1\n\n    # Loop until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Compute the midpoint of the current interval\n        mid = left + (right - left) // 2\n\n        # If the midpoint element is equal to the target, update last_index\n        if arr[mid] == x:\n            last_index = mid\n\n        # If the midpoint element is greater than the target, update right pointer\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # If the midpoint element is less than the target, update left pointer\n        else:\n            right = mid - 1\n\n    # Return the index of the last occurrence of the element\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in an array and an element x and returns the last position of the element in the array.\n\n    Args:\n    arr: The sorted array in which the element is to be searched.\n    x: The element to be searched in the array.\n\n    Returns:\n    The last position of the element x in the array.\n\n    \"\"\"\n    # Initialize a variable to store the last index\n    last_index = -1\n    # Initialize a variable to store the element in the array\n    current_element = arr[0]\n\n    # Iterate over the array and check if the current element is equal to x\n    for i in range(1, len(arr)):\n        if arr[i] == x:\n            last_index = i\n            current_element = arr[i]\n\n    # If the element is not found, return -1\n    if last_index == -1:\n        return -1\n\n    # Return the last index\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    This function takes in two arguments: the sorted array 'arr' and the element 'x' to search for.\n    It returns the last position of the element 'x' in the sorted array.\n    If the element is not found in the array, it returns -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if arr[left] == x:\n        return left\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n\n    while i <= j:\n        mid = (i + j) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Initialize variables\n    low = 0\n    high = len(arr)-1\n\n    # Check if the element is present at the first index\n    if arr[0] == x:\n        return 0\n\n    # Check if the element is present at the last index\n    if arr[high] == x:\n        return high\n\n    # If the element is present in the middle, search in that range\n    while low < high:\n        mid = (low+high)//2\n        if arr[mid] == x:\n            high = mid\n        elif arr[mid] > x:\n            high = mid\n        else:\n            low = mid+1\n\n    # If the element is not found, return -1\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a[^b]*b')\n    return pattern.search(text) is not None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    # Define the regular expression pattern to match the text\n    pattern = r'a.*b'\n    # Search for a match in the text\n    match = re.search(pattern, text)\n    # Check if a match was found\n    if match:\n        # Extract the matched substring and return it\n        return match.group()\n    # If no match was found, return None\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)[\\s\\S]*(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b')\n    return pattern.search(text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a.*b'\n\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes in a dictionary as an argument and returns the sum of all the items in the dictionary.\n    '''\n    total = 0\n    for item in dictionary.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for item in dict.values():\n        sum_of_items += item\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1, 2): \n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum_of_odds = 0\n    for i in range(1, n+1, 2):\n        sum_of_odds += i\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1  # start with the first odd natural number\n    r = n  # end with the last odd natural number\n    sum_odd = 0\n    \n    # iterate over the odd natural numbers within the range\n    while l <= r:\n        if l % 2!= 0:  # check if the number is odd\n            sum_odd += l  # add it to the sum if it is\n        l += 1  # move to the next odd natural number\n        \n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r): \n    '''\n    This function takes two arguments, l and r, which represent the lower and upper limit of the range.\n    It calculates the sum of all odd natural numbers within the range and returns the result.\n    '''\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum_of_odd = 0\n    for i in range(1, n+1, 2):\n        sum_of_odd += i\n    return sum_of_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # initialize the sum to 0\n    sum = 0\n\n    # loop through all natural numbers from 1 to n\n    for i in range(1, n+1):\n\n        # if the number is odd, add it to the sum\n        if i % 2 == 1:\n            sum += i\n\n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum variable to zero\n    total = 0\n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add the odd numbers to the sum variable\n        total += i\n    # return the sum of all odd numbers\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n\n    sum = 0\n\n    for i in arr:\n        sum += i\n\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert n to binary string\n    bin_str = bin(n)[2:]\n    # Get the length of binary string\n    len_bin_str = len(bin_str)\n    # Calculate the number of left rotations required\n    num_rotations = d % len_bin_str\n    # Calculate the new value of n\n    new_value = int(bin_str[-num_rotations:], 2)\n    # Calculate the new binary string for n\n    new_bin_str = bin(new_value)[2:]\n    # Pad the binary string with leading zeros if required\n    while len_bin_str - len(new_bin_str) > 0:\n        new_bin_str = '0' + new_bin_str\n    # Convert the new binary string to integer\n    new_n = int(new_bin_str, 2)\n    return new_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary\n    binary_num = bin(n)[2:]\n\n    # If d is more than the number of bits in the binary number, rotate d modulo the number of bits\n    if d > len(binary_num):\n        d = d % len(binary_num)\n\n    # Append zeros to the front of the binary number to rotate left by d bits\n    zeros = '0' * (d % len(binary_num))\n    rotated_binary_num = zeros + binary_num\n\n    # Convert the rotated binary number back to an integer and return it\n    return int(rotated_binary_num, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n\n    # Perform the rotation\n    for i in range(d):\n        carry = (n & 0x80000000) >> 31\n        n = (n << 1) | carry\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF    # mask to get only the most significant bits\n    shift = 32 - d        # shift amount to rotate left\n    \n    n = n & mask          # clear the least significant bits\n    n = n << shift        # rotate left\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    n = n & 0xFFFFFFFF   # Ensure that n is 32 bits\n    d = d & 0x1F          # Ensure that d is between 0 and 31\n    \n    # If d is greater than or equal to the number of bits in n, rotate left by 32-d bits\n    if d >= 32:\n        return (n << (d - 32)) | (n >> (32 - d))\n    else:\n        return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary string\n    binary = bin(n)[2:]\n    \n    # Add zeros to the binary string to make it d bits long\n    zeros = '0' * d\n    binary = zeros + binary\n    \n    # Reverse the binary string\n    binary = binary[::-1]\n    \n    # Convert the reversed binary string back to integer\n    rotated = int(binary, 2)\n    \n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    # convert n to a binary string\n    bin_str = bin(n)[2:]\n    \n    # pad the binary string with zeros to d bits\n    padded_str = bin_str.zfill(d)\n    \n    # convert the padded string back to an integer\n    rotated_num = int(padded_str, 2)\n    \n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return ((n << d) | (n >> (32-d))) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    n = n << d\n    n = n >> 32 - d\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    # Convert n to a binary string\n    bin_str = format(n, '032b')\n    # Find the number of bits that are already rotated\n    rotated = bin_str.rfind('1') + 1\n    # Calculate the number of bits to rotate by\n    total_bits = len(bin_str)\n    bits_to_rotate = d\n    if total_bits < bits_to_rotate:\n        bits_to_rotate = total_bits\n    # Convert d to binary and find its length\n    d_bin_str = format(d, '032b')\n    d_len = len(d_bin_str)\n    # Find the number of bits to shift\n    shift_bits = total_bits - bits_to_rotate\n    # Construct the new binary string\n    new_bin_str = bin_str[shift_bits:] + bin_str[:shift_bits]\n    # Convert the new binary string to an integer and return it\n    return int(new_bin_str, 2)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expression to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    # return the modified string\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and returns a string with all whitespaces removed.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespace using regular expressions\n    pattern = re.compile(r'\\s+')\n    text = pattern.sub('', text)\n    \n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and x[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if y == z and y == x:\n        count += 1\n    if x == z and x == y:\n        count += 1\n    if y == z and y == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    else:\n        pass\n\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x):\n        if y == x:\n            count += 1\n        elif y == z:\n            count += 1\n        elif z == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    for i in range(min(x,y,z), max(x,y,z)+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, y+1):\n        for j in range(y, z+1):\n            for k in range(z, x+1):\n                if i == j == k:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and x[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    while n > 1:\n        count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left = 0\n    right = n-1\n    \n    # Iterate until the left and right pointers meet\n    while left < right:\n        # If the current element is greater than the next element\n        if arr[left] > arr[right]:\n            # If the left pointer is not pointing to the smallest element, then rotate the array\n            if left!= 0:\n                arr[left], arr[right] = arr[right], arr[left]\n                left += 1\n                right -= 1\n            else:\n                left += 1\n                right -= 1\n        # If the current element is less than or equal to the next element\n        else:\n            left += 1\n    \n    # If the left pointer is pointing to the smallest element, then rotate the array\n    if left == 0:\n        arr[left], arr[right] = arr[right], arr[left]\n        return 0\n    \n    # Initialize a variable to keep track of the number of rotations required\n    rotations = 0\n    \n    # Iterate until the left pointer is pointing to the smallest element\n    while left!= 0:\n        # Increment the number of rotations required\n        rotations += 1\n        # Move the left pointer to the next smallest element\n        left -= 1\n    \n    # Return the number of rotations required\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    # checking if the array is sorted or not\n    for i in range(n):\n        if arr[i]!= arr[n-i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if array is already sorted\n    if n == 1:\n        return 0\n    elif arr[0] < arr[1]:\n        return 0\n    # binary search for the pivot element\n    left, right = 0, n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid - 1]:\n            right = mid\n        else:\n            left = mid + 1\n    pivot = left\n    # count the number of rotations required\n    count = 0\n    while pivot < n:\n        if arr[pivot] < arr[pivot - 1]:\n            count += 1\n            left = pivot\n        pivot += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "Let's implement the above algorithm in Python:<|im_sep|>"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Find the minimum element in the array\n    min_elem = min(arr)\n\n    # Initialize a list to store the count of rotations\n    count_rot = []\n\n    # Traverse the array from left to right\n    for i in range(n):\n        # Calculate the number of rotations required to sort the array from the ith index to the end of the array\n        rot = (n - 1) - i\n\n        # Check if the number of rotations required for the array from the ith index to the end of the array is greater than or equal to the minimum element in the array\n        if rot >= min_elem:\n            # If it is, add the count of rotations to the count_rot list\n            count_rot.append(rot)\n\n    # Return the count of rotations required to generate a sorted array\n    return count_rot"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the maximum element in the array\n    max_element = max(arr)\n    # Initialize the count variable\n    count = 0\n    # Iterate through all possible rotations of the array\n    for i in range(n):\n        # Find the first element after the rotation\n        first = (i + 1) % n\n        # Check if the first element is greater than the maximum element\n        if arr[first] > max_element:\n            # If it is, increment the count by one\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    n = len(arr)   \n    count = 0   \n    for i in range(n):   \n        for j in range(i+1, n):   \n            if arr[i] > arr[j]:   \n                count += 1   \n                if count >= 2:   \n                    return count   \n    return count   "
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not. \n    It returns True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(int(n ** 0.5) + 1):\n        if n % i == 0 and (i * i == n or i * (i + 1) == n):\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # We can check whether the given number is a perfect square or not by using the math module in Python.\n    import math\n    return math.isqrt(n) ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    x = 1\n    while x * x <= n:\n        if x * x == n:\n            return True\n        x += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    Returns True if the given number is a perfect square, else False.\n    \"\"\"\n    # If the given number is less than or equal to 0, it's not a perfect square.\n    if n <= 0:\n        return False\n\n    # Use the square root function to find the square root of the number.\n    root = n ** 0.5\n\n    # Check if the square root of the number is an integer.\n    if root.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    root = int(n ** 0.5) + 1\n    while root ** 2 <= n:\n        root += 1\n    return root ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    # check for negative values and return False\n    if n < 0:\n        return False\n    \n    # check if n is a perfect square\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    \n    # check if n is a perfect cube\n    i = 1\n    while i*i*i <= n:\n        if i*i*i == n:\n            return True\n        i += 1\n    \n    # if we reach this point, n is not a perfect square or cube\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    It returns True if the number is a perfect square and False otherwise.\n    \"\"\"\n    if n == 1:\n        return True\n    for i in range(int(n**0.5)+1):\n        if i*i == n:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Base case\n    if n <= 1:\n        return True\n\n    # Check for positive integer\n    if n < 0:\n        return False\n\n    # Initialize start and end variables\n    start = 1\n    end = n\n\n    # Iterate until the start and end variable meet in the middle\n    while start <= end:\n        mid = start + (end - start) // 2\n\n        # If the mid is square, check if it's a perfect square\n        if mid * mid == n:\n            return True\n\n        # If the mid is greater than the square root of n, update the start variable\n        elif mid * mid > n:\n            end = mid - 1\n\n        # If the mid is less than the square root of n, update the end variable\n        else:\n            start = mid + 1\n\n    # If the while loop completes without returning True, the number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether the given number is a perfect square or not.\n    It returns True if the number is a perfect square and False otherwise.\n    '''\n    root = n**0.5\n    return root*root == n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num \n    if product % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return (product % 2 == 0)"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    product = 1\n\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr: \n        product *= num\n    \n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 2:\n        return False\n    \n    product = arr[0]\n    for i in range(1, len(arr)):\n        product *= arr[i]\n    \n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Initialize a variable to store the highest sum\n    highest_sum = float('-inf')\n    # Initialize an empty list to store the candidate solutions\n    candidate_solutions = []\n    # Loop through each list in the lists of lists\n    for list in lists:\n        # Initialize a variable to store the current sum of the list\n        current_sum = 0\n        # Loop through each element in the list\n        for element in list:\n            # Add the current element to the current sum\n            current_sum += element\n        # If the current sum is greater than the highest sum found so far, update the highest sum and add the current list to the candidate solutions\n        if current_sum > highest_sum:\n            highest_sum = current_sum\n            candidate_solutions = [list]\n        # Otherwise, check if the current list is a candidate solution to the highest sum\n        elif current_sum == highest_sum:\n            candidate_solutions.append(list)\n    # Return the list in the candidate solutions that has the highest sum\n    return candidate_solutions[candidate_solutions.index(max(candidate_solutions))]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                new_sum = lists[i][j][k]\n                if new_sum > max_sum:\n                    max_sum = new_sum\n                    max_lists = [[lists[i][j][k]]]\n                elif new_sum == max_sum:\n                    max_lists.append([lists[i][j][k]])\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables for maximum sum and index of maximum sum\n    max_sum = 0\n    max_index = 0\n    \n    # Loop through each sublist in the list of lists\n    for i in range(len(lists)):\n        sublist = lists[i]\n        # Calculate the sum of elements in the sublist\n        sublist_sum = sum(sublist)\n        # If the sum is greater than the current maximum sum, update max_sum and max_index\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_index = i\n    \n    # Return the list in the sublist at the maximum sum index\n    return lists[max_index]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = 0\n    max_list = []\n\n    # Iterate through all the lists\n    for list in lists:\n        # Calculate the sum of the elements in the list\n        sum_list = sum(list)\n\n        # Check if the sum is greater than the current maximum sum\n        if sum_list > max_sum:\n            max_sum = sum_list\n            max_list = list\n\n    # Return the list with the highest sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # initialize max_sum and max_list to None\n    max_sum = None\n    max_list = None\n    \n    # iterate over all lists in the input list of lists\n    for sublist in lists:\n        # initialize current_sum to 0\n        current_sum = 0\n        \n        # iterate over all elements in the sublist and add them to the current_sum\n        for element in sublist:\n            current_sum += element\n        \n        # if the current_sum is greater than the max_sum so far, update max_sum and max_list\n        if max_sum is None or current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    \n    # return the max_list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -1\n    max_sum_list = []\n\n    for list in lists:\n        sum = 0\n        for num in list:\n            sum += num\n        if sum > max_sum:\n            max_sum = sum\n            max_sum_list = list\n\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_sum_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = [[lists[i][j]]]\n            elif lists[i][j] == max_sum:\n                max_sum_list.append([lists[i][j]])\n\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    def is_valid_combination(lst):\n        return sum(lst) == target\n\n    def max_sum(combination):\n        sub_combinations = [(lst[i:], lst[:i]) for i in range(len(lst))]\n        return max([max_sum(sub_combination) for sub_combination in sub_combinations])\n\n    target = max([sum(lst) for lst in lists])\n    return [lst for lst in lists if is_valid_combination(lst)]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    for sub_list in lists:\n        current_sum = sum(sub_list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sub_list\n    return max_list\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    # initialize variables for current run and maximum run\n    curr_run = 0\n    max_run = 0\n    \n    # loop through the string and update the current run and maximum run\n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 0\n    \n    # check for the final maximum run\n    if curr_run > max_run:\n        max_run = curr_run\n    \n    # return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is uppercase, increment the uppercase_count and reset the current_run\n        if char.isupper():\n            uppercase_count += 1\n            current_run = 1\n        else:\n            # if the character is not uppercase, increment the current_run\n            current_run += 1\n\n        # if the current_run is greater than the maximum run, update the maximum run\n        if current_run > max_run:\n            max_run = current_run\n\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 1\n    max_start = 0\n    current_start = 0\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 1\n\n        if count > max_count:\n            max_count = count\n            max_start = current_start\n\n        if count == 1:\n            current_start = i\n\n    if count > max_count:\n        max_count = count\n        max_start = current_start\n\n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    run_length = 0\n    max_run_length = 0\n    last_uppercase = False\n    for char in test_str:\n        if char.isupper():\n            count += 1\n        else:\n            if count > 0:\n                if not last_uppercase:\n                    if run_length > max_run_length:\n                        max_run_length = run_length\n                else:\n                    if run_length > 0 and run_length > max_run_length:\n                        max_run_length = run_length\n                run_length = 0\n            count = 0\n            last_uppercase = False\n        run_length += 1\n    if count > 0:\n        if not last_uppercase:\n            if run_length > max_run_length:\n                max_run_length = run_length\n        else:\n            if run_length > 0 and run_length > max_run_length:\n                max_run_length = run_length\n    return max_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str) - 1 or not test_str[i+1].isupper():\n                if i - start + 1 > max_run:\n                    max_run = i - start + 1\n            start = i\n        else:\n            start = i\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str) - 1 or not test_str[i+1].isupper():\n                max_run = max(max_run, i - start + 1)\n                start = i + 1\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Find the maximum run of uppercase characters in a given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n\n    # Iterate through the string\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n    # If the current run is greater than the current maximum run, update the maximum run\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    # initializing variables\n    max_run = 0\n    current_run = 0\n    prev_char = 'a'\n    \n    # iterating over each character in the string\n    for char in test_str:\n        # converting character to lowercase\n        char = char.lower()\n        \n        # checking if the current character is uppercase\n        if char.isupper():\n            # updating the current run\n            current_run += 1\n            \n            # checking if the current run is greater than the previous maximum run\n            if current_run > max_run:\n                max_run = current_run\n                prev_char = char\n        else:\n            # resetting the current run to 0 if the current character is not uppercase\n            current_run = 0\n            \n    # returning the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    prev_char = test_str[0]\n    run_length = 1\n    \n    for i in range(1, len(test_str)):\n        curr_char = test_str[i]\n        \n        if curr_char.isupper():\n            if not curr_char.islower():\n                run_length += 1\n            else:\n                if run_length > max_run:\n                    max_run = run_length\n                run_length = 1\n                prev_char = curr_char\n        else:\n            if run_length > max_run:\n                max_run = run_length\n            run_length = 1\n            prev_char = curr_char\n    \n    if run_length > max_run:\n        max_run = run_length\n        \n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    # If no odd number is found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Given a list of numbers, find the first odd number in the list.\n\n    Parameters:\n    nums (list of int): a list of integers to search for the first odd number\n\n    Returns:\n    int: the first odd number in the list or None if the list is empty or all numbers are even\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for item in test_tup:\n        if K == item:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(\"The tuple contains the k value\")\n    else:\n        print(\"The tuple does not contain the k value\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) < K:\n        return False\n    elif len(set(test_tup)) == K:\n        return True\n    else:\n        for tup in test_tup:\n            if len(set(tup)) < K:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(\"The given tuple contains the value K.\")\n    else:\n        print(\"The given tuple does not contain the value K.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for item in test_tup:\n        if item == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    if K in test_tup:\n        print(\"The given tuple contains the given element!\")\n    else:\n        print(\"The given tuple does not contain the given element!\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    if len(set(test_tup)) < K:\n        return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same number of elements\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples should have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"The {i+1}-th element of the second tuple ({test_tup2[i]}) is smaller than the {i+1}-th element of the first tuple ({test_tup1[i]}).\")\n            return\n    \n    print(\"All elements in the second tuple are smaller than the corresponding elements in the first tuple.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of the first and second tuples should be equal\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples must be the same.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # check if the current element of the first tuple is smaller than the current element of the second tuple\n        if test_tup1[i] < test_tup2[i]:\n            return True\n\n    # if all elements of the first tuple are smaller than all elements of the second tuple, return False\n    return False"
    }
]